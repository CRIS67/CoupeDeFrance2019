

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun May 19 17:55:00 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18LF2520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    50                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    51                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    52  0000                     
    53                           ; Version 1.45
    54                           ; Generated 16/11/2017 GMT
    55                           ; 
    56                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    57                           ; All rights reserved.
    58                           ; 
    59                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    60                           ; 
    61                           ; Redistribution and use in source and binary forms, with or without modification, are
    62                           ; permitted provided that the following conditions are met:
    63                           ; 
    64                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    65                           ;        conditions and the following disclaimer.
    66                           ; 
    67                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    68                           ;        of conditions and the following disclaimer in the documentation and/or other
    69                           ;        materials provided with the distribution.
    70                           ; 
    71                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    72                           ;        software without specific prior written permission.
    73                           ; 
    74                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    75                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    76                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    77                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    78                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    79                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    80                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    81                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    82                           ; 
    83                           ; 
    84                           ; Code-generator required, PIC18LF2520 Definitions
    85                           ; 
    86                           ; SFR Addresses
    87  0000                     
    88                           	psect	idataCOMRAM
    89  001CDB                     __pidataCOMRAM:
    90                           	opt stack 0
    91                           
    92                           ;initializer for _CptSend
    93  001CDB  01                 	db	1
    94                           
    95                           ;initializer for _CptSpi
    96  001CDC  01                 	db	1
    97                           
    98                           	psect	idataBANK0
    99  001CD6                     __pidataBANK0:
   100                           	opt stack 0
   101                           
   102                           ;initializer for _PosY
   103  001CD6  00F0               	dw	240
   104                           
   105                           ;initializer for _PosX
   106  001CD8  0190               	dw	400
   107                           
   108                           ;initializer for _FlagSpi
   109  001CDA  01                 	db	1
   110                           
   111                           	psect	idataBANK2
   112  001A40                     __pidataBANK2:
   113                           	opt stack 0
   114                           
   115                           ;initializer for _text_prgm
   116  001A40  70                 	db	112
   117  001A41  72                 	db	114
   118  001A42  67                 	db	103
   119  001A43  6D                 	db	109
   120  001A44  44                 	db	68
   121  001A45  72                 	db	114
   122  001A46  6F                 	db	111
   123  001A47  69                 	db	105
   124  001A48  74                 	db	116
   125  001A49  65                 	db	101
   126  001A4A  00                 	db	0
   127  001A4B  00                 	db	0
   128  001A4C  00                 	db	0
   129  001A4D  00                 	db	0
   130  001A4E  00                 	db	0
   131  001A4F  70                 	db	112
   132  001A50  72                 	db	114
   133  001A51  67                 	db	103
   134  001A52  6D                 	db	109
   135  001A53  47                 	db	71
   136  001A54  61                 	db	97
   137  001A55  75                 	db	117
   138  001A56  63                 	db	99
   139  001A57  68                 	db	104
   140  001A58  65                 	db	101
   141  001A59  00                 	db	0
   142  001A5A  00                 	db	0
   143  001A5B  00                 	db	0
   144  001A5C  00                 	db	0
   145  001A5D  00                 	db	0
   146  001A5E  70                 	db	112
   147  001A5F  72                 	db	114
   148  001A60  67                 	db	103
   149  001A61  6D                 	db	109
   150  001A62  42                 	db	66
   151  001A63  6C                 	db	108
   152  001A64  65                 	db	101
   153  001A65  75                 	db	117
   154  001A66  00                 	db	0
   155  001A67  00                 	db	0
   156  001A68  00                 	db	0
   157  001A69  00                 	db	0
   158  001A6A  00                 	db	0
   159  001A6B  00                 	db	0
   160  001A6C  00                 	db	0
   161  001A6D  70                 	db	112
   162  001A6E  72                 	db	114
   163  001A6F  67                 	db	103
   164  001A70  6D                 	db	109
   165  001A71  42                 	db	66
   166  001A72  6C                 	db	108
   167  001A73  61                 	db	97
   168  001A74  6E                 	db	110
   169  001A75  63                 	db	99
   170  001A76  00                 	db	0
   171  001A77  00                 	db	0
   172  001A78  00                 	db	0
   173  001A79  00                 	db	0
   174  001A7A  00                 	db	0
   175  001A7B  00                 	db	0
   176  001A7C  70                 	db	112
   177  001A7D  72                 	db	114
   178  001A7E  67                 	db	103
   179  001A7F  6D                 	db	109
   180  001A80  52                 	db	82
   181  001A81  6F                 	db	111
   182  001A82  75                 	db	117
   183  001A83  67                 	db	103
   184  001A84  65                 	db	101
   185  001A85  00                 	db	0
   186  001A86  00                 	db	0
   187  001A87  00                 	db	0
   188  001A88  00                 	db	0
   189  001A89  00                 	db	0
   190  001A8A  00                 	db	0
   191                           
   192                           	psect	smallconst
   193  000600                     __psmallconst:
   194                           	opt stack 0
   195  000600  00                 	db	0
   196  000601                     exp@coeff:
   197                           	opt stack 0
   198  000601  00                 	db	0
   199  000602  80                 	db	128
   200  000603  3F                 	db	63
   201  000604  72                 	db	114
   202  000605  31                 	db	49
   203  000606  3F                 	db	63
   204  000607  FE                 	db	254
   205  000608  75                 	db	117
   206  000609  3E                 	db	62
   207  00060A  58                 	db	88
   208  00060B  63                 	db	99
   209  00060C  3D                 	db	61
   210  00060D  95                 	db	149
   211  00060E  1D                 	db	29
   212  00060F  3C                 	db	60
   213  000610  C5                 	db	197
   214  000611  AE                 	db	174
   215  000612  3A                 	db	58
   216  000613  79                 	db	121
   217  000614  21                 	db	33
   218  000615  39                 	db	57
   219  000616  94                 	db	148
   220  000617  80                 	db	128
   221  000618  37                 	db	55
   222  000619  93                 	db	147
   223  00061A  A7                 	db	167
   224  00061B  35                 	db	53
   225  00061C  56                 	db	86
   226  00061D  15                 	db	21
   227  00061E  34                 	db	52
   228  00061F                     __end_ofexp@coeff:
   229                           	opt stack 0
   230  0000                     _LATAbits	set	3977
   231  0000                     _TRISAbits	set	3986
   232  0000                     _OSCTUNEbits	set	3995
   233  0000                     _LATCbits	set	3979
   234  0000                     _TRISCbits	set	3988
   235  0000                     _TRISC7	set	31911
   236  0000                     _TRISC6	set	31910
   237  0000                     _TRISC5	set	31909
   238  0000                     _TRISC4	set	31908
   239  0000                     _TRISC3	set	31907
   240  0000                     _TRISA5	set	31893
   241  0000                     _RCREG	set	4014
   242  0000                     _TXREG1	set	4013
   243  0000                     _TXSTA1bits	set	4012
   244  0000                     _ADRESL	set	4035
   245  0000                     _ADRESH	set	4036
   246  0000                     _ADCON0bits	set	4034
   247  0000                     _SPBRG	set	4015
   248  0000                     _SPBRGH	set	4016
   249  0000                     _SSPBUF	set	4041
   250  0000                     _SSPCON1bits	set	4038
   251  0000                     _SSPSTATbits	set	4039
   252  0000                     _PIE1bits	set	3997
   253  0000                     _PIR1bits	set	3998
   254  0000                     _ADCON2bits	set	4032
   255  0000                     _ADCON1bits	set	4033
   256  0000                     _OSCCONbits	set	4051
   257  0000                     _SPEN	set	32095
   258  0000                     _TXEN	set	32101
   259  0000                     _RCIF	set	31989
   260  0000                     _RCIE	set	31981
   261  0000                     _ABDEN	set	32192
   262  0000                     _WUE	set	32193
   263  0000                     _BRG16	set	32195
   264  0000                     _TXCKP	set	32196
   265  0000                     _RXDTP	set	32197
   266  0000                     _OERR	set	32089
   267  0000                     _FERR	set	32090
   268  0000                     _CREN	set	32092
   269  0000                     _RX9	set	32094
   270  0000                     _BRGH	set	32098
   271  0000                     _SENDB	set	32099
   272  0000                     _SYNC	set	32100
   273  0000                     _TX9	set	32102
   274  0000                     _TMR0H	set	4055
   275  0000                     _TMR0L	set	4054
   276  0000                     _TMR0ON	set	32431
   277  0000                     _T0PS0	set	32424
   278  0000                     _T0PS1	set	32425
   279  0000                     _T0PS2	set	32426
   280  0000                     _PSA	set	32427
   281  0000                     _T0SE	set	32428
   282  0000                     _T0CS	set	32429
   283  0000                     _T08BIT	set	32430
   284  0000                     _INTCONbits	set	4082
   285  0000                     _TMR0IF	set	32658
   286                           
   287                           ; #config settings
   288  00061F  00                 	db	0	; dummy byte at the end
   289  0000                     
   290                           	psect	cinit
   291  0017A4                     __pcinit:
   292                           	opt stack 0
   293  0017A4                     start_initialization:
   294                           	opt stack 0
   295  0017A4                     __initialization:
   296                           	opt stack 0
   297                           
   298                           ; Initialize objects allocated to BANK2 (75 bytes)
   299                           ; load TBLPTR registers with __pidataBANK2
   300  0017A4  0E40               	movlw	low __pidataBANK2
   301  0017A6  6EF6               	movwf	tblptrl,c
   302  0017A8  0E1A               	movlw	high __pidataBANK2
   303  0017AA  6EF7               	movwf	tblptrh,c
   304  0017AC  0E00               	movlw	low (__pidataBANK2 shr (0+16))
   305  0017AE  6EF8               	movwf	tblptru,c
   306  0017B0  EE02  F000         	lfsr	0,__pdataBANK2
   307  0017B4  EE10 F04B          	lfsr	1,75
   308  0017B8                     copy_data0:
   309  0017B8  0009               	tblrd		*+
   310  0017BA  CFF5 FFEE          	movff	tablat,postinc0
   311  0017BE  50E5               	movf	postdec1,w,c
   312  0017C0  50E1               	movf	fsr1l,w,c
   313  0017C2  E1FA               	bnz	copy_data0
   314                           
   315                           ; Initialize objects allocated to BANK0 (5 bytes)
   316                           ; load TBLPTR registers with __pidataBANK0
   317  0017C4  0ED6               	movlw	low __pidataBANK0
   318  0017C6  6EF6               	movwf	tblptrl,c
   319  0017C8  0E1C               	movlw	high __pidataBANK0
   320  0017CA  6EF7               	movwf	tblptrh,c
   321  0017CC  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   322  0017CE  6EF8               	movwf	tblptru,c
   323  0017D0  EE00  F0D3         	lfsr	0,__pdataBANK0
   324  0017D4  EE10 F005          	lfsr	1,5
   325  0017D8                     copy_data1:
   326  0017D8  0009               	tblrd		*+
   327  0017DA  CFF5 FFEE          	movff	tablat,postinc0
   328  0017DE  50E5               	movf	postdec1,w,c
   329  0017E0  50E1               	movf	fsr1l,w,c
   330  0017E2  E1FA               	bnz	copy_data1
   331                           
   332                           ; Initialize objects allocated to COMRAM (2 bytes)
   333                           ; load TBLPTR registers with __pidataCOMRAM
   334  0017E4  0EDB               	movlw	low __pidataCOMRAM
   335  0017E6  6EF6               	movwf	tblptrl,c
   336  0017E8  0E1C               	movlw	high __pidataCOMRAM
   337  0017EA  6EF7               	movwf	tblptrh,c
   338  0017EC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   339  0017EE  6EF8               	movwf	tblptru,c
   340  0017F0  0009               	tblrd		*+	;fetch initializer
   341  0017F2  CFF5 F059          	movff	tablat,__pdataCOMRAM
   342  0017F6  0009               	tblrd		*+	;fetch initializer
   343  0017F8  CFF5 F05A          	movff	tablat,__pdataCOMRAM+1
   344                           
   345                           ; Clear objects allocated to BANK3 (196 bytes)
   346  0017FC  EE03  F000         	lfsr	0,__pbssBANK3
   347  001800  0EC4               	movlw	196
   348  001802                     clear_0:
   349  001802  6AEE               	clrf	postinc0,c
   350  001804  06E8               	decf	wreg,f,c
   351  001806  E1FD               	bnz	clear_0
   352                           
   353                           ; Clear objects allocated to BANK1 (252 bytes)
   354  001808  EE01  F000         	lfsr	0,__pbssBANK1
   355  00180C  0EFC               	movlw	252
   356  00180E                     clear_1:
   357  00180E  6AEE               	clrf	postinc0,c
   358  001810  06E8               	decf	wreg,f,c
   359  001812  E1FD               	bnz	clear_1
   360                           
   361                           ; Clear objects allocated to BANK0 (7 bytes)
   362  001814  EE00  F0CC         	lfsr	0,__pbssBANK0
   363  001818  0E07               	movlw	7
   364  00181A                     clear_2:
   365  00181A  6AEE               	clrf	postinc0,c
   366  00181C  06E8               	decf	wreg,f,c
   367  00181E  E1FD               	bnz	clear_2
   368                           
   369                           ; Clear objects allocated to COMRAM (6 bytes)
   370  001820  6A58               	clrf	(__pbssCOMRAM+5)& (0+255),c
   371  001822  6A57               	clrf	(__pbssCOMRAM+4)& (0+255),c
   372  001824  6A56               	clrf	(__pbssCOMRAM+3)& (0+255),c
   373  001826  6A55               	clrf	(__pbssCOMRAM+2)& (0+255),c
   374  001828  6A54               	clrf	(__pbssCOMRAM+1)& (0+255),c
   375  00182A  6A53               	clrf	__pbssCOMRAM& (0+255),c
   376  00182C                     end_of_initialization:
   377                           	opt stack 0
   378  00182C                     __end_of__initialization:
   379                           	opt stack 0
   380  00182C  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   381  00182E  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   382  001830  0E00               	movlw	low (__Lmediumconst shr (0+16))
   383  001832  6EF8               	movwf	tblptru,c
   384  001834  0100               	movlb	0
   385  001836  EF10  F003         	goto	_main	;jump to C main() function
   386                           tblptru	equ	0xFF8
   387                           tblptrh	equ	0xFF7
   388                           tblptrl	equ	0xFF6
   389                           tablat	equ	0xFF5
   390                           postinc0	equ	0xFEE
   391                           wreg	equ	0xFE8
   392                           postdec1	equ	0xFE5
   393                           fsr1l	equ	0xFE1
   394                           
   395                           	psect	bssCOMRAM
   396  000053                     __pbssCOMRAM:
   397                           	opt stack 0
   398  000053                     _Checksum:
   399                           	opt stack 0
   400  000053                     	ds	2
   401  000055                     _FlagSleep:
   402                           	opt stack 0
   403  000055                     	ds	1
   404  000056                     _PrgmChoisi:
   405                           	opt stack 0
   406  000056                     	ds	1
   407  000057                     _TailleMsgSpi:
   408                           	opt stack 0
   409  000057                     	ds	1
   410  000058                     _EtatSpi:
   411                           	opt stack 0
   412  000058                     	ds	1
   413                           tblptru	equ	0xFF8
   414                           tblptrh	equ	0xFF7
   415                           tblptrl	equ	0xFF6
   416                           tablat	equ	0xFF5
   417                           postinc0	equ	0xFEE
   418                           wreg	equ	0xFE8
   419                           postdec1	equ	0xFE5
   420                           fsr1l	equ	0xFE1
   421                           
   422                           	psect	dataCOMRAM
   423  000059                     __pdataCOMRAM:
   424                           	opt stack 0
   425  000059                     _CptSend:
   426                           	opt stack 0
   427  000059                     	ds	1
   428  00005A                     _CptSpi:
   429                           	opt stack 0
   430  00005A                     	ds	1
   431                           tblptru	equ	0xFF8
   432                           tblptrh	equ	0xFF7
   433                           tblptrl	equ	0xFF6
   434                           tablat	equ	0xFF5
   435                           postinc0	equ	0xFEE
   436                           wreg	equ	0xFE8
   437                           postdec1	equ	0xFE5
   438                           fsr1l	equ	0xFE1
   439                           
   440                           	psect	bssBANK0
   441  0000CC                     __pbssBANK0:
   442                           	opt stack 0
   443  0000CC                     _errno:
   444                           	opt stack 0
   445  0000CC                     	ds	2
   446  0000CE                     _cpt:
   447                           	opt stack 0
   448  0000CE                     	ds	1
   449  0000CF                     _TypeVarSpi:
   450                           	opt stack 0
   451  0000CF                     	ds	1
   452  0000D0                     _PosCursorPrgm:
   453                           	opt stack 0
   454  0000D0                     	ds	1
   455  0000D1                     _AutoLight:
   456                           	opt stack 0
   457  0000D1                     	ds	1
   458  0000D2                     _EtatScreen:
   459                           	opt stack 0
   460  0000D2                     	ds	1
   461                           tblptru	equ	0xFF8
   462                           tblptrh	equ	0xFF7
   463                           tblptrl	equ	0xFF6
   464                           tablat	equ	0xFF5
   465                           postinc0	equ	0xFEE
   466                           wreg	equ	0xFE8
   467                           postdec1	equ	0xFE5
   468                           fsr1l	equ	0xFE1
   469                           
   470                           	psect	dataBANK0
   471  0000D3                     __pdataBANK0:
   472                           	opt stack 0
   473  0000D3                     _PosY:
   474                           	opt stack 0
   475  0000D3                     	ds	2
   476  0000D5                     _PosX:
   477                           	opt stack 0
   478  0000D5                     	ds	2
   479  0000D7                     _FlagSpi:
   480                           	opt stack 0
   481  0000D7                     	ds	1
   482                           tblptru	equ	0xFF8
   483                           tblptrh	equ	0xFF7
   484                           tblptrl	equ	0xFF6
   485                           tablat	equ	0xFF5
   486                           postinc0	equ	0xFEE
   487                           wreg	equ	0xFE8
   488                           postdec1	equ	0xFE5
   489                           fsr1l	equ	0xFE1
   490                           
   491                           	psect	bssBANK1
   492  000100                     __pbssBANK1:
   493                           	opt stack 0
   494  000100                     _SendMsgSreen:
   495                           	opt stack 0
   496  000100                     	ds	252
   497                           tblptru	equ	0xFF8
   498                           tblptrh	equ	0xFF7
   499                           tblptrl	equ	0xFF6
   500                           tablat	equ	0xFF5
   501                           postinc0	equ	0xFEE
   502                           wreg	equ	0xFE8
   503                           postdec1	equ	0xFE5
   504                           fsr1l	equ	0xFE1
   505                           
   506                           	psect	dataBANK2
   507  000200                     __pdataBANK2:
   508                           	opt stack 0
   509  000200                     _text_prgm:
   510                           	opt stack 0
   511  000200                     	ds	75
   512                           tblptru	equ	0xFF8
   513                           tblptrh	equ	0xFF7
   514                           tblptrl	equ	0xFF6
   515                           tablat	equ	0xFF5
   516                           postinc0	equ	0xFEE
   517                           wreg	equ	0xFE8
   518                           postdec1	equ	0xFE5
   519                           fsr1l	equ	0xFE1
   520                           
   521                           	psect	bssBANK3
   522  000300                     __pbssBANK3:
   523                           	opt stack 0
   524  000300                     _TextSpi:
   525                           	opt stack 0
   526  000300                     	ds	196
   527                           tblptru	equ	0xFF8
   528                           tblptrh	equ	0xFF7
   529                           tblptrl	equ	0xFF6
   530                           tablat	equ	0xFF5
   531                           postinc0	equ	0xFEE
   532                           wreg	equ	0xFE8
   533                           postdec1	equ	0xFE5
   534                           fsr1l	equ	0xFE1
   535                           
   536                           	psect	cstackBANK0
   537  000080                     __pcstackBANK0:
   538                           	opt stack 0
   539  000080                     ?___ftmul:
   540                           	opt stack 0
   541  000080                     ___altoft@exp:
   542                           	opt stack 0
   543  000080                     ___ftmul@f1:
   544                           	opt stack 0
   545                           
   546                           ; 3 bytes @ 0x0
   547  000080                     	ds	1
   548  000081                     ___altoft@sign:
   549                           	opt stack 0
   550                           
   551                           ; 1 bytes @ 0x1
   552  000081                     	ds	2
   553  000083                     ___ftmul@f2:
   554                           	opt stack 0
   555                           
   556                           ; 3 bytes @ 0x3
   557  000083                     	ds	3
   558  000086                     ??___ftmul:
   559                           
   560                           ; 1 bytes @ 0x6
   561  000086                     	ds	3
   562  000089                     ___ftmul@exp:
   563                           	opt stack 0
   564                           
   565                           ; 1 bytes @ 0x9
   566  000089                     	ds	1
   567  00008A                     ___ftmul@f3_as_product:
   568                           	opt stack 0
   569                           
   570                           ; 3 bytes @ 0xA
   571  00008A                     	ds	3
   572  00008D                     ___ftmul@cntr:
   573                           	opt stack 0
   574                           
   575                           ; 1 bytes @ 0xD
   576  00008D                     	ds	1
   577  00008E                     ___ftmul@sign:
   578                           	opt stack 0
   579                           
   580                           ; 1 bytes @ 0xE
   581  00008E                     	ds	1
   582  00008F                     ?___ftadd:
   583                           	opt stack 0
   584  00008F                     ___ftadd@f1:
   585                           	opt stack 0
   586                           
   587                           ; 3 bytes @ 0xF
   588  00008F                     	ds	3
   589  000092                     ___ftadd@f2:
   590                           	opt stack 0
   591                           
   592                           ; 3 bytes @ 0x12
   593  000092                     	ds	3
   594  000095                     ??___ftadd:
   595                           
   596                           ; 1 bytes @ 0x15
   597  000095                     	ds	3
   598  000098                     ___ftadd@sign:
   599                           	opt stack 0
   600                           
   601                           ; 1 bytes @ 0x18
   602  000098                     	ds	1
   603  000099                     ___ftadd@exp2:
   604                           	opt stack 0
   605                           
   606                           ; 1 bytes @ 0x19
   607  000099                     	ds	1
   608  00009A                     ___ftadd@exp1:
   609                           	opt stack 0
   610                           
   611                           ; 1 bytes @ 0x1A
   612  00009A                     	ds	1
   613  00009B                     ?___ftsub:
   614                           	opt stack 0
   615  00009B                     ?_floor:
   616                           	opt stack 0
   617  00009B                     ?_eval_poly:
   618                           	opt stack 0
   619  00009B                     floor@x:
   620                           	opt stack 0
   621  00009B                     ___ftsub@f1:
   622                           	opt stack 0
   623  00009B                     eval_poly@x:
   624                           	opt stack 0
   625                           
   626                           ; 3 bytes @ 0x1B
   627  00009B                     	ds	3
   628  00009E                     eval_poly@d:
   629                           	opt stack 0
   630  00009E                     floor@i:
   631                           	opt stack 0
   632  00009E                     ___ftsub@f2:
   633                           	opt stack 0
   634                           
   635                           ; 3 bytes @ 0x1E
   636  00009E                     	ds	2
   637  0000A0                     eval_poly@n:
   638                           	opt stack 0
   639                           
   640                           ; 2 bytes @ 0x20
   641  0000A0                     	ds	1
   642  0000A1                     floor@expon:
   643                           	opt stack 0
   644                           
   645                           ; 2 bytes @ 0x21
   646  0000A1                     	ds	1
   647  0000A2                     ??_eval_poly:
   648                           
   649                           ; 1 bytes @ 0x22
   650  0000A2                     	ds	2
   651  0000A4                     eval_poly@res:
   652                           	opt stack 0
   653                           
   654                           ; 3 bytes @ 0x24
   655  0000A4                     	ds	3
   656  0000A7                     ?_ldexp:
   657                           	opt stack 0
   658  0000A7                     ldexp@value:
   659                           	opt stack 0
   660                           
   661                           ; 3 bytes @ 0x27
   662  0000A7                     	ds	3
   663  0000AA                     ldexp@newexp:
   664                           	opt stack 0
   665                           
   666                           ; 2 bytes @ 0x2A
   667  0000AA                     	ds	2
   668  0000AC                     ??_ldexp:
   669                           
   670                           ; 1 bytes @ 0x2C
   671  0000AC                     	ds	2
   672  0000AE                     ?_exp:
   673                           	opt stack 0
   674  0000AE                     exp@x:
   675                           	opt stack 0
   676                           
   677                           ; 3 bytes @ 0x2E
   678  0000AE                     	ds	3
   679  0000B1                     _exp$1532:
   680                           	opt stack 0
   681                           
   682                           ; 3 bytes @ 0x31
   683  0000B1                     	ds	3
   684  0000B4                     exp@exponent:
   685                           	opt stack 0
   686                           
   687                           ; 2 bytes @ 0x34
   688  0000B4                     	ds	2
   689  0000B6                     exp@sign:
   690                           	opt stack 0
   691                           
   692                           ; 1 bytes @ 0x36
   693  0000B6                     	ds	1
   694  0000B7                     ??_main:
   695                           
   696                           ; 1 bytes @ 0x37
   697  0000B7                     	ds	4
   698  0000BB                     _main$1528:
   699                           	opt stack 0
   700                           
   701                           ; 3 bytes @ 0x3B
   702  0000BB                     	ds	3
   703  0000BE                     _main$1529:
   704                           	opt stack 0
   705                           
   706                           ; 3 bytes @ 0x3E
   707  0000BE                     	ds	3
   708  0000C1                     main@CptTmr0:
   709                           	opt stack 0
   710                           
   711                           ; 1 bytes @ 0x41
   712  0000C1                     	ds	1
   713  0000C2                     _main$1530:
   714                           	opt stack 0
   715                           
   716                           ; 3 bytes @ 0x42
   717  0000C2                     	ds	3
   718  0000C5                     _main$1531:
   719                           	opt stack 0
   720                           
   721                           ; 2 bytes @ 0x45
   722  0000C5                     	ds	2
   723  0000C7                     main@taille_text_prgm:
   724                           	opt stack 0
   725                           
   726                           ; 1 bytes @ 0x47
   727  0000C7                     	ds	1
   728  0000C8                     main@taille_text_spi:
   729                           	opt stack 0
   730                           
   731                           ; 1 bytes @ 0x48
   732  0000C8                     	ds	1
   733  0000C9                     main@adc_res:
   734                           	opt stack 0
   735                           
   736                           ; 3 bytes @ 0x49
   737  0000C9                     	ds	3
   738                           tblptru	equ	0xFF8
   739                           tblptrh	equ	0xFF7
   740                           tblptrl	equ	0xFF6
   741                           tablat	equ	0xFF5
   742                           postinc0	equ	0xFEE
   743                           wreg	equ	0xFE8
   744                           postdec1	equ	0xFE5
   745                           fsr1l	equ	0xFE1
   746                           
   747                           	psect	cstackCOMRAM
   748  000001                     __pcstackCOMRAM:
   749                           	opt stack 0
   750  000001                     Modulo@M_nombre:
   751                           	opt stack 0
   752                           
   753                           ; 2 bytes @ 0x0
   754  000001                     	ds	2
   755  000003                     ??_ISR:
   756                           
   757                           ; 1 bytes @ 0x2
   758  000003                     	ds	22
   759  000019                     ISR@j:
   760                           	opt stack 0
   761                           
   762                           ; 2 bytes @ 0x18
   763  000019                     	ds	2
   764  00001B                     ISR@j_919:
   765                           	opt stack 0
   766                           
   767                           ; 2 bytes @ 0x1A
   768  00001B                     	ds	2
   769  00001D                     ISR@j_920:
   770                           	opt stack 0
   771                           
   772                           ; 2 bytes @ 0x1C
   773  00001D                     	ds	2
   774  00001F                     ISR@j_921:
   775                           	opt stack 0
   776                           
   777                           ; 2 bytes @ 0x1E
   778  00001F                     	ds	2
   779  000021                     ISR@j_922:
   780                           	opt stack 0
   781                           
   782                           ; 2 bytes @ 0x20
   783  000021                     	ds	2
   784  000023                     ISR@Receive:
   785                           	opt stack 0
   786                           
   787                           ; 1 bytes @ 0x22
   788  000023                     	ds	1
   789  000024                     ISR@data_spi:
   790                           	opt stack 0
   791                           
   792                           ; 1 bytes @ 0x23
   793  000024                     	ds	1
   794  000025                     ?_Adc:
   795                           	opt stack 0
   796  000025                     ?___wmul:
   797                           	opt stack 0
   798  000025                     ?___awdiv:
   799                           	opt stack 0
   800  000025                     ?___ftpack:
   801                           	opt stack 0
   802  000025                     PrintC@c_printC:
   803                           	opt stack 0
   804  000025                     ClearArray@cpt_vide:
   805                           	opt stack 0
   806  000025                     ___wmul@multiplier:
   807                           	opt stack 0
   808  000025                     ___awdiv@dividend:
   809                           	opt stack 0
   810  000025                     ___ftpack@arg:
   811                           	opt stack 0
   812  000025                     frexp@value:
   813                           	opt stack 0
   814  000025                     ___ftge@ff1:
   815                           	opt stack 0
   816                           
   817                           ; 3 bytes @ 0x24
   818  000025                     	ds	1
   819  000026                     PrintS@s_printS:
   820                           	opt stack 0
   821                           
   822                           ; 2 bytes @ 0x25
   823  000026                     	ds	1
   824  000027                     ??_Adc:
   825  000027                     ___wmul@multiplicand:
   826                           	opt stack 0
   827  000027                     ___awdiv@divisor:
   828                           	opt stack 0
   829                           
   830                           ; 2 bytes @ 0x26
   831  000027                     	ds	1
   832  000028                     ___ftpack@exp:
   833                           	opt stack 0
   834  000028                     frexp@eptr:
   835                           	opt stack 0
   836  000028                     ___ftge@ff2:
   837                           	opt stack 0
   838                           
   839                           ; 3 bytes @ 0x27
   840  000028                     	ds	1
   841  000029                     Adc@channel:
   842                           	opt stack 0
   843  000029                     ___awdiv@counter:
   844                           	opt stack 0
   845  000029                     ___ftpack@sign:
   846                           	opt stack 0
   847  000029                     ___wmul@product:
   848                           	opt stack 0
   849                           
   850                           ; 2 bytes @ 0x28
   851  000029                     	ds	1
   852  00002A                     ??___ftpack:
   853  00002A                     ??_frexp:
   854  00002A                     ___awdiv@sign:
   855                           	opt stack 0
   856                           
   857                           ; 1 bytes @ 0x29
   858  00002A                     	ds	1
   859  00002B                     ??___ftge:
   860  00002B                     ___awdiv@quotient:
   861                           	opt stack 0
   862                           
   863                           ; 2 bytes @ 0x2A
   864  00002B                     	ds	2
   865  00002D                     ?___ftdiv:
   866                           	opt stack 0
   867  00002D                     ?___lwtoft:
   868                           	opt stack 0
   869  00002D                     ___lwtoft@c:
   870                           	opt stack 0
   871  00002D                     ___ftdiv@f1:
   872                           	opt stack 0
   873                           
   874                           ; 3 bytes @ 0x2C
   875  00002D                     	ds	3
   876  000030                     ___ftdiv@f2:
   877                           	opt stack 0
   878                           
   879                           ; 3 bytes @ 0x2F
   880  000030                     	ds	3
   881  000033                     ??___ftdiv:
   882                           
   883                           ; 1 bytes @ 0x32
   884  000033                     	ds	3
   885  000036                     ___ftdiv@cntr:
   886                           	opt stack 0
   887                           
   888                           ; 1 bytes @ 0x35
   889  000036                     	ds	1
   890  000037                     ___ftdiv@f3:
   891                           	opt stack 0
   892                           
   893                           ; 3 bytes @ 0x36
   894  000037                     	ds	3
   895  00003A                     ___ftdiv@exp:
   896                           	opt stack 0
   897                           
   898                           ; 1 bytes @ 0x39
   899  00003A                     	ds	1
   900  00003B                     ___ftdiv@sign:
   901                           	opt stack 0
   902                           
   903                           ; 1 bytes @ 0x3A
   904  00003B                     	ds	1
   905  00003C                     ?___fttol:
   906                           	opt stack 0
   907  00003C                     ___fttol@f1:
   908                           	opt stack 0
   909                           
   910                           ; 3 bytes @ 0x3B
   911  00003C                     	ds	4
   912  000040                     ??___fttol:
   913                           
   914                           ; 1 bytes @ 0x3F
   915  000040                     	ds	5
   916  000045                     ___fttol@sign1:
   917                           	opt stack 0
   918                           
   919                           ; 1 bytes @ 0x44
   920  000045                     	ds	1
   921  000046                     ___fttol@lval:
   922                           	opt stack 0
   923                           
   924                           ; 4 bytes @ 0x45
   925  000046                     	ds	4
   926  00004A                     ___fttol@exp1:
   927                           	opt stack 0
   928                           
   929                           ; 1 bytes @ 0x49
   930  00004A                     	ds	1
   931  00004B                     ?___altoft:
   932                           	opt stack 0
   933  00004B                     ?___awtoft:
   934                           	opt stack 0
   935  00004B                     ___awtoft@c:
   936                           	opt stack 0
   937  00004B                     ___altoft@c:
   938                           	opt stack 0
   939                           
   940                           ; 4 bytes @ 0x4A
   941  00004B                     	ds	3
   942  00004E                     ___awtoft@sign:
   943                           	opt stack 0
   944                           
   945                           ; 1 bytes @ 0x4D
   946  00004E                     	ds	1
   947  00004F                     ??___altoft:
   948  00004F                     ?___ftneg:
   949                           	opt stack 0
   950  00004F                     ___ftneg@f1:
   951                           	opt stack 0
   952                           
   953                           ; 3 bytes @ 0x4E
   954  00004F                     	ds	3
   955  000052                     
   956                           ; 1 bytes @ 0x51
   957  000052                     	ds	1
   958  000053                     tblptru	equ	0xFF8
   959                           tblptrh	equ	0xFF7
   960                           tblptrl	equ	0xFF6
   961                           tablat	equ	0xFF5
   962                           postinc0	equ	0xFEE
   963                           wreg	equ	0xFE8
   964                           postdec1	equ	0xFE5
   965                           fsr1l	equ	0xFE1
   966                           
   967                           ; 1 bytes @ 0x52
   968 ;;
   969 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   970 ;;
   971 ;; *************** function _main *****************
   972 ;; Defined at:
   973 ;;		line 157 in file "main.c"
   974 ;; Parameters:    Size  Location     Type
   975 ;;		None
   976 ;; Auto vars:     Size  Location     Type
   977 ;;  adc_res         3   73[BANK0 ] float 
   978 ;;  taille_text_    1   72[BANK0 ] unsigned char 
   979 ;;  taille_text_    1   71[BANK0 ] unsigned char 
   980 ;;  CptTmr0         1   65[BANK0 ] unsigned char 
   981 ;; Return value:  Size  Location     Type
   982 ;;                  1    wreg      void 
   983 ;; Registers used:
   984 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   985 ;; Tracked objects:
   986 ;;		On entry : 0/0
   987 ;;		On exit  : 0/0
   988 ;;		Unchanged: 0/0
   989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   990 ;;      Params:         0       0       0       0       0       0       0
   991 ;;      Locals:         0      17       0       0       0       0       0
   992 ;;      Temps:          0       4       0       0       0       0       0
   993 ;;      Totals:         0      21       0       0       0       0       0
   994 ;;Total ram usage:       21 bytes
   995 ;; Hardware stack levels required when called:    6
   996 ;; This function calls:
   997 ;;		_ADCInit
   998 ;;		_Adc
   999 ;;		_ClearArray
  1000 ;;		_ClockInit
  1001 ;;		_InitTmr0
  1002 ;;		_PrintS
  1003 ;;		_SpiInit
  1004 ;;		_UartInit
  1005 ;;		___awdiv
  1006 ;;		___awtoft
  1007 ;;		___ftadd
  1008 ;;		___ftdiv
  1009 ;;		___ftge
  1010 ;;		___ftmul
  1011 ;;		___ftneg
  1012 ;;		___fttol
  1013 ;;		___lwtoft
  1014 ;;		_exp
  1015 ;; This function is called by:
  1016 ;;		Startup code after reset
  1017 ;; This function uses a non-reentrant model
  1018 ;;
  1019                           
  1020                           	psect	text0
  1021  000620                     __ptext0:
  1022                           	opt stack 0
  1023  000620                     _main:
  1024                           	opt stack 25
  1025                           
  1026                           ;main.c: 158: ClockInit();
  1027                           
  1028                           ;incstack = 0
  1029  000620  EC64  F00E         	call	_ClockInit	;wreg free
  1030                           
  1031                           ;main.c: 159: ADCInit();
  1032  000624  ECF8  F00D         	call	_ADCInit	;wreg free
  1033                           
  1034                           ;main.c: 160: SpiInit();
  1035  000628  ECCF  F00D         	call	_SpiInit	;wreg free
  1036                           
  1037                           ;main.c: 161: UartInit();
  1038  00062C  ECB7  F00D         	call	_UartInit	;wreg free
  1039                           
  1040                           ;main.c: 162: TRISCbits.TRISC1=0;
  1041  000630  9294               	bcf	3988,1,c	;volatile
  1042                           
  1043                           ;main.c: 163: InitTmr0();
  1044  000632  EC43  F00E         	call	_InitTmr0	;wreg free
  1045                           
  1046                           ;main.c: 165: char CptTmr0 = 0;
  1047  000636  0E00               	movlw	0
  1048  000638  0100               	movlb	0	; () banked
  1049  00063A  6FC1               	movwf	main@CptTmr0& (0+255),b
  1050                           
  1051                           ; BSR set to: 0
  1052                           ;main.c: 166: float adc_res = 0;
  1053  00063C  0E00               	movlw	0
  1054  00063E  6FC9               	movwf	main@adc_res& (0+255),b
  1055  000640  0E00               	movlw	0
  1056  000642  6FCA               	movwf	(main@adc_res+1)& (0+255),b
  1057  000644  0E00               	movlw	0
  1058  000646  6FCB               	movwf	(main@adc_res+2)& (0+255),b
  1059                           
  1060                           ; BSR set to: 0
  1061                           ;main.c: 167: unsigned char taille_text_prgm;
  1062                           ;main.c: 168: unsigned char taille_text_spi;
  1063                           ;main.c: 169: _delay((unsigned long)((2000)*(32000000/4000.0)));
  1064  000648  0E52               	movlw	82
  1065  00064A  0100               	movlb	0	; () banked
  1066  00064C  6FB8               	movwf	(??_main+1)& (0+255),b
  1067  00064E  0E2B               	movlw	43
  1068  000650  6FB7               	movwf	??_main& (0+255),b
  1069  000652  0E00               	movlw	0
  1070  000654                     u3547:
  1071  000654  2EE8               	decfsz	wreg,f,c
  1072  000656  D7FE               	bra	u3547
  1073  000658  2FB7               	decfsz	??_main& (0+255),f,b
  1074  00065A  D7FC               	bra	u3547
  1075  00065C  2FB8               	decfsz	(??_main+1)& (0+255),f,b
  1076  00065E  D7FA               	bra	u3547
  1077  000660  F000               	nop	
  1078  000662                     
  1079                           ;main.c: 172: if(TMR0IF) {
  1080  000662  A4F2               	btfss	intcon,2,c	;volatile
  1081  000664  D7FE               	goto	l173
  1082                           
  1083                           ;main.c: 173: TMR0L = 0xB0;
  1084  000666  0EB0               	movlw	176
  1085  000668  6ED6               	movwf	4054,c	;volatile
  1086                           
  1087                           ;main.c: 174: TMR0H = 0x3C;
  1088  00066A  0E3C               	movlw	60
  1089  00066C  6ED7               	movwf	4055,c	;volatile
  1090                           
  1091                           ;main.c: 175: TMR0IF = 0;
  1092  00066E  94F2               	bcf	intcon,2,c	;volatile
  1093                           
  1094                           ;main.c: 176: CptTmr0++;
  1095  000670  0100               	movlb	0	; () banked
  1096  000672  2BC1               	incf	main@CptTmr0& (0+255),f,b
  1097                           
  1098                           ; BSR set to: 0
  1099                           ;main.c: 177: if(CptTmr0 > 10) {
  1100  000674  0E0A               	movlw	10
  1101  000676  65C1               	cpfsgt	main@CptTmr0& (0+255),b
  1102  000678  D00F               	goto	l175
  1103                           
  1104                           ; BSR set to: 0
  1105                           ;main.c: 178: LATCbits.LATC1=!(LATCbits.LATC1);
  1106  00067A  B28B               	btfsc	3979,1,c	;volatile
  1107  00067C  D003               	goto	u3380
  1108  00067E  6BB7               	clrf	??_main& (0+255),b
  1109  000680  2BB7               	incf	??_main& (0+255),f,b
  1110  000682  D002               	goto	u3398
  1111  000684                     u3380:
  1112  000684  0100               	movlb	0	; () banked
  1113  000686  6BB7               	clrf	??_main& (0+255),b
  1114  000688                     u3398:
  1115  000688  47B7               	rlncf	??_main& (0+255),f,b
  1116  00068A  508B               	movf	3979,w,c	;volatile
  1117  00068C  19B7               	xorwf	??_main& (0+255),w,b
  1118  00068E  0BFD               	andlw	-3
  1119  000690  19B7               	xorwf	??_main& (0+255),w,b
  1120  000692  6E8B               	movwf	3979,c	;volatile
  1121                           
  1122                           ; BSR set to: 0
  1123                           ;main.c: 179: CptTmr0 = 0;
  1124  000694  0E00               	movlw	0
  1125  000696  6FC1               	movwf	main@CptTmr0& (0+255),b
  1126  000698                     l175:
  1127                           
  1128                           ; BSR set to: 0
  1129                           ;main.c: 180: }
  1130                           ;main.c: 181: if(AutoLight) {
  1131                           
  1132                           ; BSR set to: 0
  1133  000698  51D1               	movf	_AutoLight& (0+255),w,b
  1134  00069A  B4D8               	btfsc	status,2,c
  1135  00069C  D174               	goto	l179
  1136                           
  1137                           ; BSR set to: 0
  1138                           ;main.c: 182: adc_res = Adc(1);
  1139  00069E  0E01               	movlw	1
  1140  0006A0  EC9E  F00D         	call	_Adc
  1141  0006A4  C025  F02D         	movff	?_Adc,___lwtoft@c
  1142  0006A8  C026  F02E         	movff	?_Adc+1,___lwtoft@c+1
  1143  0006AC  EC31  F00E         	call	___lwtoft	;wreg free
  1144  0006B0  C02D  F0C9         	movff	?___lwtoft,main@adc_res
  1145  0006B4  C02E  F0CA         	movff	?___lwtoft+1,main@adc_res+1
  1146  0006B8  C02F  F0CB         	movff	?___lwtoft+2,main@adc_res+2
  1147                           
  1148                           ;main.c: 193: adc_res = 90*exp(-(adc_res/901));
  1149  0006BC  0E40               	movlw	64
  1150  0006BE  6E30               	movwf	___ftdiv@f2,c
  1151  0006C0  0E61               	movlw	97
  1152  0006C2  6E31               	movwf	___ftdiv@f2+1,c
  1153  0006C4  0E44               	movlw	68
  1154  0006C6  6E32               	movwf	___ftdiv@f2+2,c
  1155  0006C8  C0C9  F02D         	movff	main@adc_res,___ftdiv@f1
  1156  0006CC  C0CA  F02E         	movff	main@adc_res+1,___ftdiv@f1+1
  1157  0006D0  C0CB  F02F         	movff	main@adc_res+2,___ftdiv@f1+2
  1158  0006D4  ECC7  F009         	call	___ftdiv	;wreg free
  1159  0006D8  C02D  F04F         	movff	?___ftdiv,___ftneg@f1
  1160  0006DC  C02E  F050         	movff	?___ftdiv+1,___ftneg@f1+1
  1161  0006E0  C02F  F051         	movff	?___ftdiv+2,___ftneg@f1+2
  1162  0006E4  EC1F  F00E         	call	___ftneg	;wreg free
  1163  0006E8  C04F  F0BB         	movff	?___ftneg,_main$1528
  1164  0006EC  C050  F0BC         	movff	?___ftneg+1,_main$1528+1
  1165  0006F0  C051  F0BD         	movff	?___ftneg+2,_main$1528+2
  1166                           
  1167                           ;main.c: 193: adc_res = 90*exp(-(adc_res/901));
  1168  0006F4  C0BB  F0AE         	movff	_main$1528,exp@x
  1169  0006F8  C0BC  F0AF         	movff	_main$1528+1,exp@x+1
  1170  0006FC  C0BD  F0B0         	movff	_main$1528+2,exp@x+2
  1171  000700  EC02  F007         	call	_exp	;wreg free
  1172  000704  C0AE  F0BE         	movff	?_exp,_main$1529
  1173  000708  C0AF  F0BF         	movff	?_exp+1,_main$1529+1
  1174  00070C  C0B0  F0C0         	movff	?_exp+2,_main$1529+2
  1175                           
  1176                           ;main.c: 193: adc_res = 90*exp(-(adc_res/901));
  1177  000710  C0BE  F080         	movff	_main$1529,___ftmul@f1
  1178  000714  C0BF  F081         	movff	_main$1529+1,___ftmul@f1+1
  1179  000718  C0C0  F082         	movff	_main$1529+2,___ftmul@f1+2
  1180  00071C  0E00               	movlw	0
  1181  00071E  0100               	movlb	0	; () banked
  1182  000720  6F83               	movwf	___ftmul@f2& (0+255),b
  1183  000722  0EB4               	movlw	180
  1184  000724  6F84               	movwf	(___ftmul@f2+1)& (0+255),b
  1185  000726  0E42               	movlw	66
  1186  000728  6F85               	movwf	(___ftmul@f2+2)& (0+255),b
  1187  00072A  ECD2  F008         	call	___ftmul	;wreg free
  1188  00072E  C080  F0C9         	movff	?___ftmul,main@adc_res
  1189  000732  C081  F0CA         	movff	?___ftmul+1,main@adc_res+1
  1190  000736  C082  F0CB         	movff	?___ftmul+2,main@adc_res+2
  1191                           
  1192                           ;main.c: 194: adc_res = (int)(adc_res);
  1193  00073A  C0C9  F03C         	movff	main@adc_res,___fttol@f1
  1194  00073E  C0CA  F03D         	movff	main@adc_res+1,___fttol@f1+1
  1195  000742  C0CB  F03E         	movff	main@adc_res+2,___fttol@f1+2
  1196  000746  EC4D  F009         	call	___fttol	;wreg free
  1197  00074A  C03C  F04B         	movff	?___fttol,___awtoft@c
  1198  00074E  C03D  F04C         	movff	?___fttol+1,___awtoft@c+1
  1199  000752  EC67  F00D         	call	___awtoft	;wreg free
  1200  000756  C04B  F0C9         	movff	?___awtoft,main@adc_res
  1201  00075A  C04C  F0CA         	movff	?___awtoft+1,main@adc_res+1
  1202  00075E  C04D  F0CB         	movff	?___awtoft+2,main@adc_res+2
  1203                           
  1204                           ;main.c: 195: if(adc_res < 0) {
  1205  000762  0100               	movlb	0	; () banked
  1206  000764  AFCB               	btfss	(main@adc_res+2)& (0+255),7,b
  1207  000766  D006               	goto	l177
  1208                           
  1209                           ; BSR set to: 0
  1210                           ;main.c: 196: adc_res = 0;
  1211  000768  0E00               	movlw	0
  1212  00076A  6FC9               	movwf	main@adc_res& (0+255),b
  1213  00076C  0E00               	movlw	0
  1214  00076E  6FCA               	movwf	(main@adc_res+1)& (0+255),b
  1215  000770  0E00               	movlw	0
  1216  000772  6FCB               	movwf	(main@adc_res+2)& (0+255),b
  1217  000774                     l177:
  1218                           
  1219                           ; BSR set to: 0
  1220                           ;main.c: 197: }
  1221                           ;main.c: 198: if(adc_res > 99) {
  1222                           
  1223                           ; BSR set to: 0
  1224  000774  0E00               	movlw	0
  1225  000776  6E25               	movwf	___ftge@ff1,c
  1226  000778  0EC6               	movlw	198
  1227  00077A  6E26               	movwf	___ftge@ff1+1,c
  1228  00077C  0E42               	movlw	66
  1229  00077E  6E27               	movwf	___ftge@ff1+2,c
  1230  000780  C0C9  F028         	movff	main@adc_res,___ftge@ff2
  1231  000784  C0CA  F029         	movff	main@adc_res+1,___ftge@ff2+1
  1232  000788  C0CB  F02A         	movff	main@adc_res+2,___ftge@ff2+2
  1233  00078C  EC1D  F00C         	call	___ftge	;wreg free
  1234  000790  B0D8               	btfsc	status,0,c
  1235  000792  D007               	goto	l178
  1236                           
  1237                           ;main.c: 199: adc_res = 99;
  1238  000794  0E00               	movlw	0
  1239  000796  0100               	movlb	0	; () banked
  1240  000798  6FC9               	movwf	main@adc_res& (0+255),b
  1241  00079A  0EC6               	movlw	198
  1242  00079C  6FCA               	movwf	(main@adc_res+1)& (0+255),b
  1243  00079E  0E42               	movlw	66
  1244  0007A0  6FCB               	movwf	(main@adc_res+2)& (0+255),b
  1245  0007A2                     l178:
  1246                           
  1247                           ;main.c: 200: }
  1248                           ;main.c: 203: SendMsgSreen[0] = 0x64;
  1249  0007A2  0E64               	movlw	100
  1250  0007A4  0101               	movlb	1	; () banked
  1251  0007A6  6F00               	movwf	_SendMsgSreen& (0+255),b
  1252                           
  1253                           ;main.c: 204: SendMsgSreen[1] = 0x69;
  1254  0007A8  0E69               	movlw	105
  1255  0007AA  6F01               	movwf	(_SendMsgSreen+1)& (0+255),b
  1256                           
  1257                           ;main.c: 205: SendMsgSreen[2] = 0x6D;
  1258  0007AC  0E6D               	movlw	109
  1259  0007AE  6F02               	movwf	(_SendMsgSreen+2)& (0+255),b
  1260                           
  1261                           ;main.c: 206: SendMsgSreen[3] = 0x3D;
  1262  0007B0  0E3D               	movlw	61
  1263  0007B2  6F03               	movwf	(_SendMsgSreen+3)& (0+255),b
  1264                           
  1265                           ; BSR set to: 1
  1266                           ;main.c: 207: SendMsgSreen[4] = 0x30 + (char)(adc_res/10);
  1267  0007B4  0E00               	movlw	0
  1268  0007B6  6E30               	movwf	___ftdiv@f2,c
  1269  0007B8  0E20               	movlw	32
  1270  0007BA  6E31               	movwf	___ftdiv@f2+1,c
  1271  0007BC  0E41               	movlw	65
  1272  0007BE  6E32               	movwf	___ftdiv@f2+2,c
  1273  0007C0  C0C9  F02D         	movff	main@adc_res,___ftdiv@f1
  1274  0007C4  C0CA  F02E         	movff	main@adc_res+1,___ftdiv@f1+1
  1275  0007C8  C0CB  F02F         	movff	main@adc_res+2,___ftdiv@f1+2
  1276  0007CC  ECC7  F009         	call	___ftdiv	;wreg free
  1277  0007D0  C02D  F03C         	movff	?___ftdiv,___fttol@f1
  1278  0007D4  C02E  F03D         	movff	?___ftdiv+1,___fttol@f1+1
  1279  0007D8  C02F  F03E         	movff	?___ftdiv+2,___fttol@f1+2
  1280  0007DC  EC4D  F009         	call	___fttol	;wreg free
  1281  0007E0  503C               	movf	?___fttol,w,c
  1282  0007E2  0F30               	addlw	48
  1283  0007E4  0101               	movlb	1	; () banked
  1284  0007E6  6F04               	movwf	(_SendMsgSreen+4)& (0+255),b
  1285                           
  1286                           ; BSR set to: 1
  1287                           ;main.c: 208: SendMsgSreen[5] = 0x30 + (char)(adc_res-(10*(char)(adc_res/10)));
  1288  0007E8  C0C9  F092         	movff	main@adc_res,___ftadd@f2
  1289  0007EC  C0CA  F093         	movff	main@adc_res+1,___ftadd@f2+1
  1290  0007F0  C0CB  F094         	movff	main@adc_res+2,___ftadd@f2+2
  1291  0007F4  0E00               	movlw	0
  1292  0007F6  6E30               	movwf	___ftdiv@f2,c
  1293  0007F8  0E20               	movlw	32
  1294  0007FA  6E31               	movwf	___ftdiv@f2+1,c
  1295  0007FC  0E41               	movlw	65
  1296  0007FE  6E32               	movwf	___ftdiv@f2+2,c
  1297  000800  C0C9  F02D         	movff	main@adc_res,___ftdiv@f1
  1298  000804  C0CA  F02E         	movff	main@adc_res+1,___ftdiv@f1+1
  1299  000808  C0CB  F02F         	movff	main@adc_res+2,___ftdiv@f1+2
  1300  00080C  ECC7  F009         	call	___ftdiv	;wreg free
  1301  000810  C02D  F03C         	movff	?___ftdiv,___fttol@f1
  1302  000814  C02E  F03D         	movff	?___ftdiv+1,___fttol@f1+1
  1303  000818  C02F  F03E         	movff	?___ftdiv+2,___fttol@f1+2
  1304  00081C  EC4D  F009         	call	___fttol	;wreg free
  1305  000820  503C               	movf	?___fttol,w,c
  1306  000822  0D0A               	mullw	10
  1307  000824  CFF3 F04B          	movff	prodl,___awtoft@c
  1308  000828  CFF4 F04C          	movff	prodh,___awtoft@c+1
  1309  00082C  EC67  F00D         	call	___awtoft	;wreg free
  1310  000830  C04B  F04F         	movff	?___awtoft,___ftneg@f1
  1311  000834  C04C  F050         	movff	?___awtoft+1,___ftneg@f1+1
  1312  000838  C04D  F051         	movff	?___awtoft+2,___ftneg@f1+2
  1313  00083C  EC1F  F00E         	call	___ftneg	;wreg free
  1314  000840  C04F  F08F         	movff	?___ftneg,___ftadd@f1
  1315  000844  C050  F090         	movff	?___ftneg+1,___ftadd@f1+1
  1316  000848  C051  F091         	movff	?___ftneg+2,___ftadd@f1+2
  1317  00084C  ECFB  F007         	call	___ftadd	;wreg free
  1318  000850  C08F  F0C2         	movff	?___ftadd,_main$1530
  1319  000854  C090  F0C3         	movff	?___ftadd+1,_main$1530+1
  1320  000858  C091  F0C4         	movff	?___ftadd+2,_main$1530+2
  1321                           
  1322                           ;main.c: 208: SendMsgSreen[5] = 0x30 + (char)(adc_res-(10*(char)(adc_res/10)));
  1323  00085C  C0C2  F03C         	movff	_main$1530,___fttol@f1
  1324  000860  C0C3  F03D         	movff	_main$1530+1,___fttol@f1+1
  1325  000864  C0C4  F03E         	movff	_main$1530+2,___fttol@f1+2
  1326  000868  EC4D  F009         	call	___fttol	;wreg free
  1327  00086C  503C               	movf	?___fttol,w,c
  1328  00086E  0F30               	addlw	48
  1329  000870  0101               	movlb	1	; () banked
  1330  000872  6F05               	movwf	(_SendMsgSreen+5)& (0+255),b
  1331                           
  1332                           ; BSR set to: 1
  1333                           ;main.c: 209: SendMsgSreen[6] = 0xFF;
  1334  000874  6906               	setf	(_SendMsgSreen+6)& (0+255),b
  1335                           
  1336                           ; BSR set to: 1
  1337                           ;main.c: 210: SendMsgSreen[7] = 0xFF;
  1338  000876  6907               	setf	(_SendMsgSreen+7)& (0+255),b
  1339                           
  1340                           ; BSR set to: 1
  1341                           ;main.c: 211: SendMsgSreen[8] = 0xFF;
  1342  000878  6908               	setf	(_SendMsgSreen+8)& (0+255),b
  1343                           
  1344                           ; BSR set to: 1
  1345                           ;main.c: 212: PrintS(SendMsgSreen);
  1346  00087A  0E00               	movlw	low _SendMsgSreen
  1347  00087C  6E26               	movwf	PrintS@s_printS,c
  1348  00087E  0E01               	movlw	high _SendMsgSreen
  1349  000880  6E27               	movwf	PrintS@s_printS+1,c
  1350  000882  EC83  F00D         	call	_PrintS	;wreg free
  1351                           
  1352                           ;main.c: 213: ClearArray();
  1353  000886  ECE4  F00D         	call	_ClearArray	;wreg free
  1354                           
  1355                           ;main.c: 214: if(EtatScreen == 0) {
  1356  00088A  0100               	movlb	0	; () banked
  1357  00088C  51D2               	movf	_EtatScreen& (0+255),w,b
  1358  00088E  A4D8               	btfss	status,2,c
  1359  000890  D07A               	goto	l179
  1360                           
  1361                           ; BSR set to: 0
  1362                           ;main.c: 217: SendMsgSreen[0] = 0x68;
  1363  000892  0E68               	movlw	104
  1364  000894  0101               	movlb	1	; () banked
  1365  000896  6F00               	movwf	_SendMsgSreen& (0+255),b
  1366                           
  1367                           ;main.c: 218: SendMsgSreen[1] = 0x30;
  1368  000898  0E30               	movlw	48
  1369  00089A  6F01               	movwf	(_SendMsgSreen+1)& (0+255),b
  1370                           
  1371                           ;main.c: 219: SendMsgSreen[2] = 0x2E;
  1372  00089C  0E2E               	movlw	46
  1373  00089E  6F02               	movwf	(_SendMsgSreen+2)& (0+255),b
  1374                           
  1375                           ;main.c: 220: SendMsgSreen[3] = 0x76;
  1376  0008A0  0E76               	movlw	118
  1377  0008A2  6F03               	movwf	(_SendMsgSreen+3)& (0+255),b
  1378                           
  1379                           ;main.c: 221: SendMsgSreen[4] = 0x61;
  1380  0008A4  0E61               	movlw	97
  1381  0008A6  6F04               	movwf	(_SendMsgSreen+4)& (0+255),b
  1382                           
  1383                           ;main.c: 222: SendMsgSreen[5] = 0x6C;
  1384  0008A8  0E6C               	movlw	108
  1385  0008AA  6F05               	movwf	(_SendMsgSreen+5)& (0+255),b
  1386                           
  1387                           ;main.c: 223: SendMsgSreen[6] = 0x3D;
  1388  0008AC  0E3D               	movlw	61
  1389  0008AE  6F06               	movwf	(_SendMsgSreen+6)& (0+255),b
  1390                           
  1391                           ; BSR set to: 1
  1392                           ;main.c: 224: SendMsgSreen[7] = 0x30 + (char)(adc_res/10);
  1393  0008B0  0E00               	movlw	0
  1394  0008B2  6E30               	movwf	___ftdiv@f2,c
  1395  0008B4  0E20               	movlw	32
  1396  0008B6  6E31               	movwf	___ftdiv@f2+1,c
  1397  0008B8  0E41               	movlw	65
  1398  0008BA  6E32               	movwf	___ftdiv@f2+2,c
  1399  0008BC  C0C9  F02D         	movff	main@adc_res,___ftdiv@f1
  1400  0008C0  C0CA  F02E         	movff	main@adc_res+1,___ftdiv@f1+1
  1401  0008C4  C0CB  F02F         	movff	main@adc_res+2,___ftdiv@f1+2
  1402  0008C8  ECC7  F009         	call	___ftdiv	;wreg free
  1403  0008CC  C02D  F03C         	movff	?___ftdiv,___fttol@f1
  1404  0008D0  C02E  F03D         	movff	?___ftdiv+1,___fttol@f1+1
  1405  0008D4  C02F  F03E         	movff	?___ftdiv+2,___fttol@f1+2
  1406  0008D8  EC4D  F009         	call	___fttol	;wreg free
  1407  0008DC  503C               	movf	?___fttol,w,c
  1408  0008DE  0F30               	addlw	48
  1409  0008E0  0101               	movlb	1	; () banked
  1410  0008E2  6F07               	movwf	(_SendMsgSreen+7)& (0+255),b
  1411                           
  1412                           ; BSR set to: 1
  1413                           ;main.c: 225: SendMsgSreen[8] = 0x30 + (char)(adc_res-(10*(char)(adc_res/10)));
  1414  0008E4  C0C9  F092         	movff	main@adc_res,___ftadd@f2
  1415  0008E8  C0CA  F093         	movff	main@adc_res+1,___ftadd@f2+1
  1416  0008EC  C0CB  F094         	movff	main@adc_res+2,___ftadd@f2+2
  1417  0008F0  0E00               	movlw	0
  1418  0008F2  6E30               	movwf	___ftdiv@f2,c
  1419  0008F4  0E20               	movlw	32
  1420  0008F6  6E31               	movwf	___ftdiv@f2+1,c
  1421  0008F8  0E41               	movlw	65
  1422  0008FA  6E32               	movwf	___ftdiv@f2+2,c
  1423  0008FC  C0C9  F02D         	movff	main@adc_res,___ftdiv@f1
  1424  000900  C0CA  F02E         	movff	main@adc_res+1,___ftdiv@f1+1
  1425  000904  C0CB  F02F         	movff	main@adc_res+2,___ftdiv@f1+2
  1426  000908  ECC7  F009         	call	___ftdiv	;wreg free
  1427  00090C  C02D  F03C         	movff	?___ftdiv,___fttol@f1
  1428  000910  C02E  F03D         	movff	?___ftdiv+1,___fttol@f1+1
  1429  000914  C02F  F03E         	movff	?___ftdiv+2,___fttol@f1+2
  1430  000918  EC4D  F009         	call	___fttol	;wreg free
  1431  00091C  503C               	movf	?___fttol,w,c
  1432  00091E  0D0A               	mullw	10
  1433  000920  CFF3 F04B          	movff	prodl,___awtoft@c
  1434  000924  CFF4 F04C          	movff	prodh,___awtoft@c+1
  1435  000928  EC67  F00D         	call	___awtoft	;wreg free
  1436  00092C  C04B  F04F         	movff	?___awtoft,___ftneg@f1
  1437  000930  C04C  F050         	movff	?___awtoft+1,___ftneg@f1+1
  1438  000934  C04D  F051         	movff	?___awtoft+2,___ftneg@f1+2
  1439  000938  EC1F  F00E         	call	___ftneg	;wreg free
  1440  00093C  C04F  F08F         	movff	?___ftneg,___ftadd@f1
  1441  000940  C050  F090         	movff	?___ftneg+1,___ftadd@f1+1
  1442  000944  C051  F091         	movff	?___ftneg+2,___ftadd@f1+2
  1443  000948  ECFB  F007         	call	___ftadd	;wreg free
  1444  00094C  C08F  F0C2         	movff	?___ftadd,_main$1530
  1445  000950  C090  F0C3         	movff	?___ftadd+1,_main$1530+1
  1446  000954  C091  F0C4         	movff	?___ftadd+2,_main$1530+2
  1447                           
  1448                           ;main.c: 225: SendMsgSreen[8] = 0x30 + (char)(adc_res-(10*(char)(adc_res/10)));
  1449  000958  C0C2  F03C         	movff	_main$1530,___fttol@f1
  1450  00095C  C0C3  F03D         	movff	_main$1530+1,___fttol@f1+1
  1451  000960  C0C4  F03E         	movff	_main$1530+2,___fttol@f1+2
  1452  000964  EC4D  F009         	call	___fttol	;wreg free
  1453  000968  503C               	movf	?___fttol,w,c
  1454  00096A  0F30               	addlw	48
  1455  00096C  0101               	movlb	1	; () banked
  1456  00096E  6F08               	movwf	(_SendMsgSreen+8)& (0+255),b
  1457                           
  1458                           ; BSR set to: 1
  1459                           ;main.c: 226: SendMsgSreen[9] = 0xFF;
  1460  000970  6909               	setf	(_SendMsgSreen+9)& (0+255),b
  1461                           
  1462                           ; BSR set to: 1
  1463                           ;main.c: 227: SendMsgSreen[10] = 0xFF;
  1464  000972  690A               	setf	(_SendMsgSreen+10)& (0+255),b
  1465                           
  1466                           ; BSR set to: 1
  1467                           ;main.c: 228: SendMsgSreen[11] = 0xFF;
  1468  000974  690B               	setf	(_SendMsgSreen+11)& (0+255),b
  1469                           
  1470                           ; BSR set to: 1
  1471                           ;main.c: 229: PrintS(SendMsgSreen);
  1472  000976  0E00               	movlw	low _SendMsgSreen
  1473  000978  6E26               	movwf	PrintS@s_printS,c
  1474  00097A  0E01               	movlw	high _SendMsgSreen
  1475  00097C  6E27               	movwf	PrintS@s_printS+1,c
  1476  00097E  EC83  F00D         	call	_PrintS	;wreg free
  1477                           
  1478                           ;main.c: 230: ClearArray();
  1479  000982  ECE4  F00D         	call	_ClearArray	;wreg free
  1480  000986                     l179:
  1481                           
  1482                           ;main.c: 231: }
  1483                           ;main.c: 232: }
  1484                           ;main.c: 233: if(FlagSpi) {
  1485  000986  0100               	movlb	0	; () banked
  1486  000988  51D7               	movf	_FlagSpi& (0+255),w,b
  1487  00098A  B4D8               	btfsc	status,2,c
  1488  00098C  D66A               	goto	l173
  1489                           
  1490                           ; BSR set to: 0
  1491                           ;main.c: 234: FlagSpi = 0;
  1492  00098E  0E00               	movlw	0
  1493  000990  6FD7               	movwf	_FlagSpi& (0+255),b
  1494                           
  1495                           ;main.c: 235: switch(EtatScreen) {
  1496  000992  D227               	goto	l181
  1497  000994                     
  1498                           ; BSR set to: 0
  1499                           ;main.c: 239: SendMsgSreen[0] = 0x74;
  1500                           
  1501                           ; BSR set to: 0
  1502  000994  0E74               	movlw	116
  1503  000996  0101               	movlb	1	; () banked
  1504  000998  6F00               	movwf	_SendMsgSreen& (0+255),b
  1505                           
  1506                           ;main.c: 240: SendMsgSreen[1] = 0x30;
  1507  00099A  0E30               	movlw	48
  1508  00099C  6F01               	movwf	(_SendMsgSreen+1)& (0+255),b
  1509                           
  1510                           ;main.c: 241: SendMsgSreen[2] = 0x2E;
  1511  00099E  0E2E               	movlw	46
  1512  0009A0  6F02               	movwf	(_SendMsgSreen+2)& (0+255),b
  1513                           
  1514                           ;main.c: 242: SendMsgSreen[3] = 0x74;
  1515  0009A2  0E74               	movlw	116
  1516  0009A4  6F03               	movwf	(_SendMsgSreen+3)& (0+255),b
  1517                           
  1518                           ;main.c: 243: SendMsgSreen[4] = 0x78;
  1519  0009A6  0E78               	movlw	120
  1520  0009A8  6F04               	movwf	(_SendMsgSreen+4)& (0+255),b
  1521                           
  1522                           ;main.c: 244: SendMsgSreen[5] = 0x74;
  1523  0009AA  0E74               	movlw	116
  1524  0009AC  6F05               	movwf	(_SendMsgSreen+5)& (0+255),b
  1525                           
  1526                           ;main.c: 245: SendMsgSreen[6] = 0x3D;
  1527  0009AE  0E3D               	movlw	61
  1528  0009B0  6F06               	movwf	(_SendMsgSreen+6)& (0+255),b
  1529                           
  1530                           ;main.c: 246: SendMsgSreen[7] = 0x22;
  1531  0009B2  0E22               	movlw	34
  1532  0009B4  6F07               	movwf	(_SendMsgSreen+7)& (0+255),b
  1533                           
  1534                           ;main.c: 247: SendMsgSreen[8] = 0x3E;
  1535  0009B6  0E3E               	movlw	62
  1536  0009B8  6F08               	movwf	(_SendMsgSreen+8)& (0+255),b
  1537                           
  1538                           ;main.c: 248: taille_text_prgm = 0;
  1539  0009BA  0E00               	movlw	0
  1540  0009BC  0100               	movlb	0	; () banked
  1541  0009BE  6FC7               	movwf	main@taille_text_prgm& (0+255),b
  1542                           
  1543                           ;main.c: 249: while(taille_text_prgm < 15 && text_prgm[PosCursorPrgm][taille_text_prgm] 
      +                          != 0) {
  1544  0009C0  D022               	goto	l183
  1545  0009C2                     
  1546                           ; BSR set to: 0
  1547                           ;main.c: 250: SendMsgSreen[taille_text_prgm+9] = text_prgm[PosCursorPrgm][taille_text_pr
      +                          gm];
  1548                           
  1549                           ; BSR set to: 0
  1550  0009C2  51D0               	movf	_PosCursorPrgm& (0+255),w,b
  1551  0009C4  0D0F               	mullw	15
  1552  0009C6  0E00               	movlw	low _text_prgm
  1553  0009C8  6FB7               	movwf	??_main& (0+255),b
  1554  0009CA  0E02               	movlw	high _text_prgm
  1555  0009CC  6FB8               	movwf	(??_main+1)& (0+255),b
  1556  0009CE  50F3               	movf	prodl,w,c
  1557  0009D0  27B7               	addwf	??_main& (0+255),f,b
  1558  0009D2  50F4               	movf	prodh,w,c
  1559  0009D4  23B8               	addwfc	(??_main+1)& (0+255),f,b
  1560  0009D6  51C7               	movf	main@taille_text_prgm& (0+255),w,b
  1561  0009D8  0D01               	mullw	1
  1562  0009DA  50F3               	movf	prodl,w,c
  1563  0009DC  25B7               	addwf	??_main& (0+255),w,b
  1564  0009DE  6ED9               	movwf	fsr2l,c
  1565  0009E0  50F4               	movf	prodh,w,c
  1566  0009E2  21B8               	addwfc	(??_main+1)& (0+255),w,b
  1567  0009E4  6EDA               	movwf	fsr2h,c
  1568  0009E6  51C7               	movf	main@taille_text_prgm& (0+255),w,b
  1569  0009E8  6FB9               	movwf	(??_main+2)& (0+255),b
  1570  0009EA  6BBA               	clrf	(??_main+3)& (0+255),b
  1571  0009EC  0E09               	movlw	9
  1572  0009EE  27B9               	addwf	(??_main+2)& (0+255),f,b
  1573  0009F0  0E00               	movlw	0
  1574  0009F2  23BA               	addwfc	(??_main+3)& (0+255),f,b
  1575  0009F4  0E00               	movlw	low _SendMsgSreen
  1576  0009F6  25B9               	addwf	(??_main+2)& (0+255),w,b
  1577  0009F8  6EE1               	movwf	fsr1l,c
  1578  0009FA  0E01               	movlw	high _SendMsgSreen
  1579  0009FC  21BA               	addwfc	(??_main+3)& (0+255),w,b
  1580  0009FE  6EE2               	movwf	fsr1h,c
  1581  000A00  CFDF FFE7          	movff	indf2,indf1
  1582                           
  1583                           ; BSR set to: 0
  1584                           ;main.c: 251: taille_text_prgm++;
  1585  000A04  2BC7               	incf	main@taille_text_prgm& (0+255),f,b
  1586  000A06                     l183:
  1587                           
  1588                           ; BSR set to: 0
  1589                           
  1590                           ; BSR set to: 0
  1591  000A06  0E0F               	movlw	15
  1592  000A08  61C7               	cpfslt	main@taille_text_prgm& (0+255),b
  1593  000A0A  D015               	goto	u3460
  1594                           
  1595                           ; BSR set to: 0
  1596  000A0C  51D0               	movf	_PosCursorPrgm& (0+255),w,b
  1597  000A0E  0D0F               	mullw	15
  1598  000A10  0E00               	movlw	low _text_prgm
  1599  000A12  6FB7               	movwf	??_main& (0+255),b
  1600  000A14  0E02               	movlw	high _text_prgm
  1601  000A16  6FB8               	movwf	(??_main+1)& (0+255),b
  1602  000A18  50F3               	movf	prodl,w,c
  1603  000A1A  27B7               	addwf	??_main& (0+255),f,b
  1604  000A1C  50F4               	movf	prodh,w,c
  1605  000A1E  23B8               	addwfc	(??_main+1)& (0+255),f,b
  1606  000A20  51C7               	movf	main@taille_text_prgm& (0+255),w,b
  1607  000A22  0D01               	mullw	1
  1608  000A24  50F3               	movf	prodl,w,c
  1609  000A26  25B7               	addwf	??_main& (0+255),w,b
  1610  000A28  6ED9               	movwf	fsr2l,c
  1611  000A2A  50F4               	movf	prodh,w,c
  1612  000A2C  21B8               	addwfc	(??_main+1)& (0+255),w,b
  1613  000A2E  6EDA               	movwf	fsr2h,c
  1614  000A30  50DF               	movf	indf2,w,c
  1615  000A32  A4D8               	btfss	status,2,c
  1616  000A34  D7C6               	goto	l184
  1617  000A36                     u3460:
  1618                           
  1619                           ; BSR set to: 0
  1620                           ;main.c: 252: }
  1621                           ;main.c: 253: SendMsgSreen[taille_text_prgm+9] = 0x22;
  1622                           
  1623                           ; BSR set to: 0
  1624                           
  1625                           ; BSR set to: 0
  1626  000A36  51C7               	movf	main@taille_text_prgm& (0+255),w,b
  1627  000A38  6FB7               	movwf	??_main& (0+255),b
  1628  000A3A  6BB8               	clrf	(??_main+1)& (0+255),b
  1629  000A3C  0E09               	movlw	9
  1630  000A3E  27B7               	addwf	??_main& (0+255),f,b
  1631  000A40  0E00               	movlw	0
  1632  000A42  23B8               	addwfc	(??_main+1)& (0+255),f,b
  1633  000A44  0E00               	movlw	low _SendMsgSreen
  1634  000A46  25B7               	addwf	??_main& (0+255),w,b
  1635  000A48  6ED9               	movwf	fsr2l,c
  1636  000A4A  0E01               	movlw	high _SendMsgSreen
  1637  000A4C  21B8               	addwfc	(??_main+1)& (0+255),w,b
  1638  000A4E  6EDA               	movwf	fsr2h,c
  1639  000A50  0E22               	movlw	34
  1640  000A52  6EDF               	movwf	indf2,c
  1641                           
  1642                           ;main.c: 254: SendMsgSreen[taille_text_prgm+10] = 0xFF;
  1643  000A54  51C7               	movf	main@taille_text_prgm& (0+255),w,b
  1644  000A56  6FB7               	movwf	??_main& (0+255),b
  1645  000A58  6BB8               	clrf	(??_main+1)& (0+255),b
  1646  000A5A  0E0A               	movlw	10
  1647  000A5C  27B7               	addwf	??_main& (0+255),f,b
  1648  000A5E  0E00               	movlw	0
  1649  000A60  23B8               	addwfc	(??_main+1)& (0+255),f,b
  1650  000A62  0E00               	movlw	low _SendMsgSreen
  1651  000A64  25B7               	addwf	??_main& (0+255),w,b
  1652  000A66  6ED9               	movwf	fsr2l,c
  1653  000A68  0E01               	movlw	high _SendMsgSreen
  1654  000A6A  21B8               	addwfc	(??_main+1)& (0+255),w,b
  1655  000A6C  6EDA               	movwf	fsr2h,c
  1656  000A6E  0EFF               	movlw	255
  1657  000A70  6EDF               	movwf	indf2,c
  1658                           
  1659                           ;main.c: 255: SendMsgSreen[taille_text_prgm+11] = 0xFF;
  1660  000A72  51C7               	movf	main@taille_text_prgm& (0+255),w,b
  1661  000A74  6FB7               	movwf	??_main& (0+255),b
  1662  000A76  6BB8               	clrf	(??_main+1)& (0+255),b
  1663  000A78  0E0B               	movlw	11
  1664  000A7A  27B7               	addwf	??_main& (0+255),f,b
  1665  000A7C  0E00               	movlw	0
  1666  000A7E  23B8               	addwfc	(??_main+1)& (0+255),f,b
  1667  000A80  0E00               	movlw	low _SendMsgSreen
  1668  000A82  25B7               	addwf	??_main& (0+255),w,b
  1669  000A84  6ED9               	movwf	fsr2l,c
  1670  000A86  0E01               	movlw	high _SendMsgSreen
  1671  000A88  21B8               	addwfc	(??_main+1)& (0+255),w,b
  1672  000A8A  6EDA               	movwf	fsr2h,c
  1673  000A8C  0EFF               	movlw	255
  1674  000A8E  6EDF               	movwf	indf2,c
  1675                           
  1676                           ;main.c: 256: SendMsgSreen[taille_text_prgm+12] = 0xFF;
  1677  000A90  51C7               	movf	main@taille_text_prgm& (0+255),w,b
  1678  000A92  6FB7               	movwf	??_main& (0+255),b
  1679  000A94  6BB8               	clrf	(??_main+1)& (0+255),b
  1680  000A96  0E0C               	movlw	12
  1681  000A98  27B7               	addwf	??_main& (0+255),f,b
  1682  000A9A  0E00               	movlw	0
  1683  000A9C  23B8               	addwfc	(??_main+1)& (0+255),f,b
  1684  000A9E  0E00               	movlw	low _SendMsgSreen
  1685  000AA0  25B7               	addwf	??_main& (0+255),w,b
  1686  000AA2  6ED9               	movwf	fsr2l,c
  1687  000AA4  0E01               	movlw	high _SendMsgSreen
  1688  000AA6  21B8               	addwfc	(??_main+1)& (0+255),w,b
  1689  000AA8  6EDA               	movwf	fsr2h,c
  1690  000AAA  0EFF               	movlw	255
  1691  000AAC  6EDF               	movwf	indf2,c
  1692                           
  1693                           ; BSR set to: 0
  1694                           ;main.c: 257: PrintS(SendMsgSreen);
  1695  000AAE  0E00               	movlw	low _SendMsgSreen
  1696  000AB0  6E26               	movwf	PrintS@s_printS,c
  1697  000AB2  0E01               	movlw	high _SendMsgSreen
  1698  000AB4  6E27               	movwf	PrintS@s_printS+1,c
  1699  000AB6  EC83  F00D         	call	_PrintS	;wreg free
  1700                           
  1701                           ;main.c: 258: ClearArray();
  1702  000ABA  ECE4  F00D         	call	_ClearArray	;wreg free
  1703                           
  1704                           ;main.c: 259: break;
  1705  000ABE  D5D1               	goto	l173
  1706  000AC0                     
  1707                           ;main.c: 263: FlagSpi = 1;
  1708  000AC0  0E01               	movlw	1
  1709  000AC2  0100               	movlb	0	; () banked
  1710  000AC4  6FD7               	movwf	_FlagSpi& (0+255),b
  1711                           
  1712                           ;main.c: 264: SendMsgSreen[0] = 0x72;
  1713  000AC6  0E72               	movlw	114
  1714  000AC8  0101               	movlb	1	; () banked
  1715  000ACA  6F00               	movwf	_SendMsgSreen& (0+255),b
  1716                           
  1717                           ;main.c: 265: SendMsgSreen[1] = 0x65;
  1718  000ACC  0E65               	movlw	101
  1719  000ACE  6F01               	movwf	(_SendMsgSreen+1)& (0+255),b
  1720                           
  1721                           ;main.c: 266: SendMsgSreen[2] = 0x66;
  1722  000AD0  0E66               	movlw	102
  1723  000AD2  6F02               	movwf	(_SendMsgSreen+2)& (0+255),b
  1724                           
  1725                           ;main.c: 267: SendMsgSreen[3] = 0x20;
  1726  000AD4  0E20               	movlw	32
  1727  000AD6  6F03               	movwf	(_SendMsgSreen+3)& (0+255),b
  1728                           
  1729                           ;main.c: 268: SendMsgSreen[4] = 0x30;
  1730  000AD8  0E30               	movlw	48
  1731  000ADA  6F04               	movwf	(_SendMsgSreen+4)& (0+255),b
  1732                           
  1733                           ; BSR set to: 1
  1734                           ;main.c: 269: SendMsgSreen[5] = 0xFF;
  1735  000ADC  6905               	setf	(_SendMsgSreen+5)& (0+255),b
  1736                           
  1737                           ; BSR set to: 1
  1738                           ;main.c: 270: SendMsgSreen[6] = 0xFF;
  1739  000ADE  6906               	setf	(_SendMsgSreen+6)& (0+255),b
  1740                           
  1741                           ; BSR set to: 1
  1742                           ;main.c: 271: SendMsgSreen[7] = 0xFF;
  1743  000AE0  6907               	setf	(_SendMsgSreen+7)& (0+255),b
  1744                           
  1745                           ; BSR set to: 1
  1746                           ;main.c: 272: PrintS(SendMsgSreen);
  1747  000AE2  0E00               	movlw	low _SendMsgSreen
  1748  000AE4  6E26               	movwf	PrintS@s_printS,c
  1749  000AE6  0E01               	movlw	high _SendMsgSreen
  1750  000AE8  6E27               	movwf	PrintS@s_printS+1,c
  1751  000AEA  EC83  F00D         	call	_PrintS	;wreg free
  1752                           
  1753                           ;main.c: 273: ClearArray();
  1754  000AEE  ECE4  F00D         	call	_ClearArray	;wreg free
  1755                           
  1756                           ;main.c: 276: SendMsgSreen[0] = 0x70;
  1757  000AF2  0E70               	movlw	112
  1758  000AF4  0101               	movlb	1	; () banked
  1759  000AF6  6F00               	movwf	_SendMsgSreen& (0+255),b
  1760                           
  1761                           ; BSR set to: 1
  1762                           ;main.c: 277: SendMsgSreen[1] = 0x69;
  1763  000AF8  0E69               	movlw	105
  1764  000AFA  6F01               	movwf	(_SendMsgSreen+1)& (0+255),b
  1765                           
  1766                           ; BSR set to: 1
  1767                           ;main.c: 278: SendMsgSreen[2] = 0x63;
  1768  000AFC  0E63               	movlw	99
  1769  000AFE  6F02               	movwf	(_SendMsgSreen+2)& (0+255),b
  1770                           
  1771                           ; BSR set to: 1
  1772                           ;main.c: 279: SendMsgSreen[3] = 0x20;
  1773  000B00  0E20               	movlw	32
  1774  000B02  6F03               	movwf	(_SendMsgSreen+3)& (0+255),b
  1775                           
  1776                           ; BSR set to: 1
  1777                           ;main.c: 280: SendMsgSreen[4] = 0x30 + (char)(PosX/100);
  1778  000B04  C0D5  F025         	movff	_PosX,___awdiv@dividend
  1779  000B08  C0D6  F026         	movff	_PosX+1,___awdiv@dividend+1
  1780  000B0C  0E00               	movlw	0
  1781  000B0E  6E28               	movwf	___awdiv@divisor+1,c
  1782  000B10  0E64               	movlw	100
  1783  000B12  6E27               	movwf	___awdiv@divisor,c
  1784  000B14  EC65  F00C         	call	___awdiv	;wreg free
  1785  000B18  5025               	movf	?___awdiv,w,c
  1786  000B1A  0F30               	addlw	48
  1787  000B1C  0101               	movlb	1	; () banked
  1788  000B1E  6F04               	movwf	(_SendMsgSreen+4)& (0+255),b
  1789                           
  1790                           ; BSR set to: 1
  1791                           ;main.c: 281: SendMsgSreen[5] = 0x30 + (char)((PosX-(100*(char)(PosX/100)))/10);
  1792  000B20  0E00               	movlw	0
  1793  000B22  6E28               	movwf	___awdiv@divisor+1,c
  1794  000B24  0E64               	movlw	100
  1795  000B26  6E27               	movwf	___awdiv@divisor,c
  1796  000B28  C0D5  F025         	movff	_PosX,___awdiv@dividend
  1797  000B2C  C0D6  F026         	movff	_PosX+1,___awdiv@dividend+1
  1798  000B30  EC65  F00C         	call	___awdiv	;wreg free
  1799  000B34  5025               	movf	?___awdiv,w,c
  1800  000B36  0D64               	mullw	100
  1801  000B38  1EF3               	comf	prodl,f,c
  1802  000B3A  1EF4               	comf	prodh,f,c
  1803  000B3C  4AF3               	infsnz	prodl,f,c
  1804  000B3E  2AF4               	incf	prodh,f,c
  1805  000B40  0100               	movlb	0	; () banked
  1806  000B42  51D5               	movf	_PosX& (0+255),w,b
  1807  000B44  24F3               	addwf	prodl,w,c
  1808  000B46  6FC5               	movwf	_main$1531& (0+255),b
  1809  000B48  51D6               	movf	(_PosX+1)& (0+255),w,b
  1810  000B4A  20F4               	addwfc	prodh,w,c
  1811  000B4C  6FC6               	movwf	(_main$1531+1)& (0+255),b
  1812                           
  1813                           ; BSR set to: 0
  1814                           ;main.c: 281: SendMsgSreen[5] = 0x30 + (char)((PosX-(100*(char)(PosX/100)))/10);
  1815  000B4E  C0C5  F025         	movff	_main$1531,___awdiv@dividend
  1816  000B52  C0C6  F026         	movff	_main$1531+1,___awdiv@dividend+1
  1817  000B56  0E00               	movlw	0
  1818  000B58  6E28               	movwf	___awdiv@divisor+1,c
  1819  000B5A  0E0A               	movlw	10
  1820  000B5C  6E27               	movwf	___awdiv@divisor,c
  1821  000B5E  EC65  F00C         	call	___awdiv	;wreg free
  1822  000B62  5025               	movf	?___awdiv,w,c
  1823  000B64  0F30               	addlw	48
  1824  000B66  0101               	movlb	1	; () banked
  1825  000B68  6F05               	movwf	(_SendMsgSreen+5)& (0+255),b
  1826                           
  1827                           ; BSR set to: 1
  1828                           ;main.c: 282: SendMsgSreen[6] = 0x30 + (char)(PosX-(10*(char)(PosX/10)));
  1829  000B6A  C0D5  F025         	movff	_PosX,___awdiv@dividend
  1830  000B6E  C0D6  F026         	movff	_PosX+1,___awdiv@dividend+1
  1831  000B72  0E00               	movlw	0
  1832  000B74  6E28               	movwf	___awdiv@divisor+1,c
  1833  000B76  0E0A               	movlw	10
  1834  000B78  6E27               	movwf	___awdiv@divisor,c
  1835  000B7A  EC65  F00C         	call	___awdiv	;wreg free
  1836  000B7E  5025               	movf	?___awdiv,w,c
  1837  000B80  0D0A               	mullw	10
  1838  000B82  50F3               	movf	prodl,w,c
  1839  000B84  0800               	sublw	0
  1840  000B86  0100               	movlb	0	; () banked
  1841  000B88  25D5               	addwf	_PosX& (0+255),w,b
  1842  000B8A  0F30               	addlw	48
  1843  000B8C  0101               	movlb	1	; () banked
  1844  000B8E  6F06               	movwf	(_SendMsgSreen+6)& (0+255),b
  1845                           
  1846                           ; BSR set to: 1
  1847                           ;main.c: 283: SendMsgSreen[7] = 0x2C;
  1848  000B90  0E2C               	movlw	44
  1849  000B92  6F07               	movwf	(_SendMsgSreen+7)& (0+255),b
  1850                           
  1851                           ; BSR set to: 1
  1852                           ;main.c: 284: SendMsgSreen[8] = 0x30 + (char)(PosY/100);
  1853  000B94  C0D3  F025         	movff	_PosY,___awdiv@dividend
  1854  000B98  C0D4  F026         	movff	_PosY+1,___awdiv@dividend+1
  1855  000B9C  0E00               	movlw	0
  1856  000B9E  6E28               	movwf	___awdiv@divisor+1,c
  1857  000BA0  0E64               	movlw	100
  1858  000BA2  6E27               	movwf	___awdiv@divisor,c
  1859  000BA4  EC65  F00C         	call	___awdiv	;wreg free
  1860  000BA8  5025               	movf	?___awdiv,w,c
  1861  000BAA  0F30               	addlw	48
  1862  000BAC  0101               	movlb	1	; () banked
  1863  000BAE  6F08               	movwf	(_SendMsgSreen+8)& (0+255),b
  1864                           
  1865                           ;main.c: 285: SendMsgSreen[9] = 0x30 + (char)((PosY-(100*(char)(PosY/100)))/10);
  1866  000BB0  0E00               	movlw	0
  1867  000BB2  6E28               	movwf	___awdiv@divisor+1,c
  1868  000BB4  0E64               	movlw	100
  1869  000BB6  6E27               	movwf	___awdiv@divisor,c
  1870  000BB8  C0D3  F025         	movff	_PosY,___awdiv@dividend
  1871  000BBC  C0D4  F026         	movff	_PosY+1,___awdiv@dividend+1
  1872  000BC0  EC65  F00C         	call	___awdiv	;wreg free
  1873  000BC4  5025               	movf	?___awdiv,w,c
  1874  000BC6  0D64               	mullw	100
  1875  000BC8  1EF3               	comf	prodl,f,c
  1876  000BCA  1EF4               	comf	prodh,f,c
  1877  000BCC  4AF3               	infsnz	prodl,f,c
  1878  000BCE  2AF4               	incf	prodh,f,c
  1879  000BD0  0100               	movlb	0	; () banked
  1880  000BD2  51D3               	movf	_PosY& (0+255),w,b
  1881  000BD4  24F3               	addwf	prodl,w,c
  1882  000BD6  6FC5               	movwf	_main$1531& (0+255),b
  1883  000BD8  51D4               	movf	(_PosY+1)& (0+255),w,b
  1884  000BDA  20F4               	addwfc	prodh,w,c
  1885  000BDC  6FC6               	movwf	(_main$1531+1)& (0+255),b
  1886                           
  1887                           ; BSR set to: 0
  1888                           ;main.c: 285: SendMsgSreen[9] = 0x30 + (char)((PosY-(100*(char)(PosY/100)))/10);
  1889  000BDE  C0C5  F025         	movff	_main$1531,___awdiv@dividend
  1890  000BE2  C0C6  F026         	movff	_main$1531+1,___awdiv@dividend+1
  1891  000BE6  0E00               	movlw	0
  1892  000BE8  6E28               	movwf	___awdiv@divisor+1,c
  1893  000BEA  0E0A               	movlw	10
  1894  000BEC  6E27               	movwf	___awdiv@divisor,c
  1895  000BEE  EC65  F00C         	call	___awdiv	;wreg free
  1896  000BF2  5025               	movf	?___awdiv,w,c
  1897  000BF4  0F30               	addlw	48
  1898  000BF6  0101               	movlb	1	; () banked
  1899  000BF8  6F09               	movwf	(_SendMsgSreen+9)& (0+255),b
  1900                           
  1901                           ; BSR set to: 1
  1902                           ;main.c: 286: SendMsgSreen[10] = 0x30 + (char)(PosY-(10*(char)(PosY/10)));
  1903  000BFA  C0D3  F025         	movff	_PosY,___awdiv@dividend
  1904  000BFE  C0D4  F026         	movff	_PosY+1,___awdiv@dividend+1
  1905  000C02  0E00               	movlw	0
  1906  000C04  6E28               	movwf	___awdiv@divisor+1,c
  1907  000C06  0E0A               	movlw	10
  1908  000C08  6E27               	movwf	___awdiv@divisor,c
  1909  000C0A  EC65  F00C         	call	___awdiv	;wreg free
  1910  000C0E  5025               	movf	?___awdiv,w,c
  1911  000C10  0D0A               	mullw	10
  1912  000C12  50F3               	movf	prodl,w,c
  1913  000C14  0800               	sublw	0
  1914  000C16  0100               	movlb	0	; () banked
  1915  000C18  25D3               	addwf	_PosY& (0+255),w,b
  1916  000C1A  0F30               	addlw	48
  1917  000C1C  0101               	movlb	1	; () banked
  1918  000C1E  6F0A               	movwf	(_SendMsgSreen+10)& (0+255),b
  1919                           
  1920                           ; BSR set to: 1
  1921                           ;main.c: 287: SendMsgSreen[11] = 0x2C;
  1922  000C20  0E2C               	movlw	44
  1923  000C22  6F0B               	movwf	(_SendMsgSreen+11)& (0+255),b
  1924                           
  1925                           ; BSR set to: 1
  1926                           ;main.c: 288: SendMsgSreen[12] = 0x32;
  1927  000C24  0E32               	movlw	50
  1928  000C26  6F0C               	movwf	(_SendMsgSreen+12)& (0+255),b
  1929                           
  1930                           ; BSR set to: 1
  1931                           ;main.c: 289: SendMsgSreen[13] = 0xFF;
  1932  000C28  690D               	setf	(_SendMsgSreen+13)& (0+255),b
  1933                           
  1934                           ; BSR set to: 1
  1935                           ;main.c: 290: SendMsgSreen[14] = 0xFF;
  1936  000C2A  690E               	setf	(_SendMsgSreen+14)& (0+255),b
  1937                           
  1938                           ; BSR set to: 1
  1939                           ;main.c: 291: SendMsgSreen[15] = 0xFF;
  1940  000C2C  690F               	setf	(_SendMsgSreen+15)& (0+255),b
  1941                           
  1942                           ; BSR set to: 1
  1943                           ;main.c: 292: PrintS(SendMsgSreen);
  1944  000C2E  0E00               	movlw	low _SendMsgSreen
  1945  000C30  6E26               	movwf	PrintS@s_printS,c
  1946  000C32  0E01               	movlw	high _SendMsgSreen
  1947  000C34  6E27               	movwf	PrintS@s_printS+1,c
  1948  000C36  EC83  F00D         	call	_PrintS	;wreg free
  1949                           
  1950                           ;main.c: 293: ClearArray();
  1951  000C3A  ECE4  F00D         	call	_ClearArray	;wreg free
  1952                           
  1953                           ;main.c: 294: break;
  1954  000C3E  D511               	goto	l173
  1955  000C40                     
  1956                           ;main.c: 298: if(TypeVarSpi == 8 || TypeVarSpi == 9 || TypeVarSpi == 10 || TypeVarSpi ==
      +                           11) {
  1957  000C40  0E08               	movlw	8
  1958  000C42  0100               	movlb	0	; () banked
  1959  000C44  19CF               	xorwf	_TypeVarSpi& (0+255),w,b
  1960  000C46  B4D8               	btfsc	status,2,c
  1961  000C48  D00C               	goto	u3500
  1962                           
  1963                           ; BSR set to: 0
  1964  000C4A  0E09               	movlw	9
  1965  000C4C  19CF               	xorwf	_TypeVarSpi& (0+255),w,b
  1966  000C4E  B4D8               	btfsc	status,2,c
  1967  000C50  D008               	goto	u3500
  1968                           
  1969                           ; BSR set to: 0
  1970  000C52  0E0A               	movlw	10
  1971  000C54  19CF               	xorwf	_TypeVarSpi& (0+255),w,b
  1972  000C56  B4D8               	btfsc	status,2,c
  1973  000C58  D004               	goto	u3500
  1974                           
  1975                           ; BSR set to: 0
  1976  000C5A  0E0B               	movlw	11
  1977  000C5C  19CF               	xorwf	_TypeVarSpi& (0+255),w,b
  1978  000C5E  A4D8               	btfss	status,2,c
  1979  000C60  D500               	goto	l173
  1980  000C62                     u3500:
  1981                           
  1982                           ; BSR set to: 0
  1983                           ;main.c: 299: TypeVarSpi -= 8;
  1984                           
  1985                           ; BSR set to: 0
  1986  000C62  0E08               	movlw	8
  1987  000C64  5FCF               	subwf	_TypeVarSpi& (0+255),f,b
  1988                           
  1989                           ; BSR set to: 0
  1990                           ;main.c: 300: SendMsgSreen[0] = 0x74;
  1991  000C66  0E74               	movlw	116
  1992  000C68  0101               	movlb	1	; () banked
  1993  000C6A  6F00               	movwf	_SendMsgSreen& (0+255),b
  1994                           
  1995                           ; BSR set to: 1
  1996                           ;main.c: 301: SendMsgSreen[1] = 0x30 + TypeVarSpi;
  1997  000C6C  0100               	movlb	0	; () banked
  1998  000C6E  51CF               	movf	_TypeVarSpi& (0+255),w,b
  1999  000C70  0F30               	addlw	48
  2000  000C72  0101               	movlb	1	; () banked
  2001  000C74  6F01               	movwf	(_SendMsgSreen+1)& (0+255),b
  2002                           
  2003                           ;main.c: 302: SendMsgSreen[2] = 0x2E;
  2004  000C76  0E2E               	movlw	46
  2005  000C78  6F02               	movwf	(_SendMsgSreen+2)& (0+255),b
  2006                           
  2007                           ;main.c: 303: SendMsgSreen[3] = 0x74;
  2008  000C7A  0E74               	movlw	116
  2009  000C7C  6F03               	movwf	(_SendMsgSreen+3)& (0+255),b
  2010                           
  2011                           ;main.c: 304: SendMsgSreen[4] = 0x78;
  2012  000C7E  0E78               	movlw	120
  2013  000C80  6F04               	movwf	(_SendMsgSreen+4)& (0+255),b
  2014                           
  2015                           ;main.c: 305: SendMsgSreen[5] = 0x74;
  2016  000C82  0E74               	movlw	116
  2017  000C84  6F05               	movwf	(_SendMsgSreen+5)& (0+255),b
  2018                           
  2019                           ;main.c: 306: SendMsgSreen[6] = 0x3D;
  2020  000C86  0E3D               	movlw	61
  2021  000C88  6F06               	movwf	(_SendMsgSreen+6)& (0+255),b
  2022                           
  2023                           ;main.c: 307: SendMsgSreen[7] = 0x22;
  2024  000C8A  0E22               	movlw	34
  2025  000C8C  6F07               	movwf	(_SendMsgSreen+7)& (0+255),b
  2026                           
  2027                           ;main.c: 308: taille_text_spi = 0;
  2028  000C8E  0E00               	movlw	0
  2029  000C90  0100               	movlb	0	; () banked
  2030  000C92  6FC8               	movwf	main@taille_text_spi& (0+255),b
  2031                           
  2032                           ;main.c: 309: while(taille_text_spi < 196 && TextSpi[taille_text_spi] != 0) {
  2033  000C94  D018               	goto	l194
  2034  000C96                     
  2035                           ; BSR set to: 0
  2036                           ;main.c: 310: SendMsgSreen[taille_text_spi+8] = TextSpi[taille_text_spi];
  2037                           
  2038                           ; BSR set to: 0
  2039  000C96  51C8               	movf	main@taille_text_spi& (0+255),w,b
  2040  000C98  0D01               	mullw	1
  2041  000C9A  0E00               	movlw	low _TextSpi
  2042  000C9C  24F3               	addwf	prodl,w,c
  2043  000C9E  6ED9               	movwf	fsr2l,c
  2044  000CA0  0E03               	movlw	high _TextSpi
  2045  000CA2  20F4               	addwfc	prodh,w,c
  2046  000CA4  6EDA               	movwf	fsr2h,c
  2047  000CA6  51C8               	movf	main@taille_text_spi& (0+255),w,b
  2048  000CA8  6FB7               	movwf	??_main& (0+255),b
  2049  000CAA  6BB8               	clrf	(??_main+1)& (0+255),b
  2050  000CAC  0E08               	movlw	8
  2051  000CAE  27B7               	addwf	??_main& (0+255),f,b
  2052  000CB0  0E00               	movlw	0
  2053  000CB2  23B8               	addwfc	(??_main+1)& (0+255),f,b
  2054  000CB4  0E00               	movlw	low _SendMsgSreen
  2055  000CB6  25B7               	addwf	??_main& (0+255),w,b
  2056  000CB8  6EE1               	movwf	fsr1l,c
  2057  000CBA  0E01               	movlw	high _SendMsgSreen
  2058  000CBC  21B8               	addwfc	(??_main+1)& (0+255),w,b
  2059  000CBE  6EE2               	movwf	fsr1h,c
  2060  000CC0  CFDF FFE7          	movff	indf2,indf1
  2061                           
  2062                           ; BSR set to: 0
  2063                           ;main.c: 311: taille_text_spi++;
  2064  000CC4  2BC8               	incf	main@taille_text_spi& (0+255),f,b
  2065  000CC6                     l194:
  2066                           
  2067                           ; BSR set to: 0
  2068                           
  2069                           ; BSR set to: 0
  2070  000CC6  0EC4               	movlw	196
  2071  000CC8  61C8               	cpfslt	main@taille_text_spi& (0+255),b
  2072  000CCA  D00B               	goto	u3520
  2073                           
  2074                           ; BSR set to: 0
  2075  000CCC  51C8               	movf	main@taille_text_spi& (0+255),w,b
  2076  000CCE  0D01               	mullw	1
  2077  000CD0  0E00               	movlw	low _TextSpi
  2078  000CD2  24F3               	addwf	prodl,w,c
  2079  000CD4  6ED9               	movwf	fsr2l,c
  2080  000CD6  0E03               	movlw	high _TextSpi
  2081  000CD8  20F4               	addwfc	prodh,w,c
  2082  000CDA  6EDA               	movwf	fsr2h,c
  2083  000CDC  50DF               	movf	indf2,w,c
  2084  000CDE  A4D8               	btfss	status,2,c
  2085  000CE0  D7DA               	goto	l195
  2086  000CE2                     u3520:
  2087                           
  2088                           ; BSR set to: 0
  2089                           ;main.c: 312: }
  2090                           ;main.c: 313: SendMsgSreen[taille_text_spi+8] = 0x22;
  2091                           
  2092                           ; BSR set to: 0
  2093                           
  2094                           ; BSR set to: 0
  2095  000CE2  51C8               	movf	main@taille_text_spi& (0+255),w,b
  2096  000CE4  6FB7               	movwf	??_main& (0+255),b
  2097  000CE6  6BB8               	clrf	(??_main+1)& (0+255),b
  2098  000CE8  0E08               	movlw	8
  2099  000CEA  27B7               	addwf	??_main& (0+255),f,b
  2100  000CEC  0E00               	movlw	0
  2101  000CEE  23B8               	addwfc	(??_main+1)& (0+255),f,b
  2102  000CF0  0E00               	movlw	low _SendMsgSreen
  2103  000CF2  25B7               	addwf	??_main& (0+255),w,b
  2104  000CF4  6ED9               	movwf	fsr2l,c
  2105  000CF6  0E01               	movlw	high _SendMsgSreen
  2106  000CF8  21B8               	addwfc	(??_main+1)& (0+255),w,b
  2107  000CFA  6EDA               	movwf	fsr2h,c
  2108  000CFC  0E22               	movlw	34
  2109  000CFE  6EDF               	movwf	indf2,c
  2110                           
  2111                           ;main.c: 314: SendMsgSreen[taille_text_spi+9] = 0xFF;
  2112  000D00  51C8               	movf	main@taille_text_spi& (0+255),w,b
  2113  000D02  6FB7               	movwf	??_main& (0+255),b
  2114  000D04  6BB8               	clrf	(??_main+1)& (0+255),b
  2115  000D06  0E09               	movlw	9
  2116  000D08  27B7               	addwf	??_main& (0+255),f,b
  2117  000D0A  0E00               	movlw	0
  2118  000D0C  23B8               	addwfc	(??_main+1)& (0+255),f,b
  2119  000D0E  0E00               	movlw	low _SendMsgSreen
  2120  000D10  25B7               	addwf	??_main& (0+255),w,b
  2121  000D12  6ED9               	movwf	fsr2l,c
  2122  000D14  0E01               	movlw	high _SendMsgSreen
  2123  000D16  21B8               	addwfc	(??_main+1)& (0+255),w,b
  2124  000D18  6EDA               	movwf	fsr2h,c
  2125  000D1A  0EFF               	movlw	255
  2126  000D1C  6EDF               	movwf	indf2,c
  2127                           
  2128                           ;main.c: 315: SendMsgSreen[taille_text_spi+10] = 0xFF;
  2129  000D1E  51C8               	movf	main@taille_text_spi& (0+255),w,b
  2130  000D20  6FB7               	movwf	??_main& (0+255),b
  2131  000D22  6BB8               	clrf	(??_main+1)& (0+255),b
  2132  000D24  0E0A               	movlw	10
  2133  000D26  27B7               	addwf	??_main& (0+255),f,b
  2134  000D28  0E00               	movlw	0
  2135  000D2A  23B8               	addwfc	(??_main+1)& (0+255),f,b
  2136  000D2C  0E00               	movlw	low _SendMsgSreen
  2137  000D2E  25B7               	addwf	??_main& (0+255),w,b
  2138  000D30  6ED9               	movwf	fsr2l,c
  2139  000D32  0E01               	movlw	high _SendMsgSreen
  2140  000D34  21B8               	addwfc	(??_main+1)& (0+255),w,b
  2141  000D36  6EDA               	movwf	fsr2h,c
  2142  000D38  0EFF               	movlw	255
  2143  000D3A  6EDF               	movwf	indf2,c
  2144                           
  2145                           ;main.c: 316: SendMsgSreen[taille_text_spi+11] = 0xFF;
  2146  000D3C  51C8               	movf	main@taille_text_spi& (0+255),w,b
  2147  000D3E  6FB7               	movwf	??_main& (0+255),b
  2148  000D40  6BB8               	clrf	(??_main+1)& (0+255),b
  2149  000D42  0E0B               	movlw	11
  2150  000D44  27B7               	addwf	??_main& (0+255),f,b
  2151  000D46  0E00               	movlw	0
  2152  000D48  23B8               	addwfc	(??_main+1)& (0+255),f,b
  2153  000D4A  0E00               	movlw	low _SendMsgSreen
  2154  000D4C  25B7               	addwf	??_main& (0+255),w,b
  2155  000D4E  6ED9               	movwf	fsr2l,c
  2156  000D50  0E01               	movlw	high _SendMsgSreen
  2157  000D52  21B8               	addwfc	(??_main+1)& (0+255),w,b
  2158  000D54  6EDA               	movwf	fsr2h,c
  2159  000D56  0EFF               	movlw	255
  2160  000D58  6EDF               	movwf	indf2,c
  2161                           
  2162                           ; BSR set to: 0
  2163                           ;main.c: 317: PrintS(SendMsgSreen);
  2164  000D5A  0E00               	movlw	low _SendMsgSreen
  2165  000D5C  6E26               	movwf	PrintS@s_printS,c
  2166  000D5E  0E01               	movlw	high _SendMsgSreen
  2167  000D60  6E27               	movwf	PrintS@s_printS+1,c
  2168  000D62  EC83  F00D         	call	_PrintS	;wreg free
  2169                           
  2170                           ;main.c: 318: ClearArray();
  2171  000D66  ECE4  F00D         	call	_ClearArray	;wreg free
  2172                           
  2173                           ;main.c: 323: break;
  2174                           
  2175                           ;main.c: 321: case 3:
  2176                           
  2177                           ;main.c: 319: }
  2178                           ;main.c: 320: break;
  2179  000D6A  D47B               	goto	l173
  2180  000D6C                     
  2181                           ;main.c: 327: FlagSpi = 1;
  2182  000D6C  0E01               	movlw	1
  2183  000D6E  0100               	movlb	0	; () banked
  2184  000D70  6FD7               	movwf	_FlagSpi& (0+255),b
  2185                           
  2186                           ;main.c: 328: SendMsgSreen[0] = 0x74;
  2187  000D72  0E74               	movlw	116
  2188  000D74  0101               	movlb	1	; () banked
  2189  000D76  6F00               	movwf	_SendMsgSreen& (0+255),b
  2190                           
  2191                           ;main.c: 329: SendMsgSreen[1] = 0x30;
  2192  000D78  0E30               	movlw	48
  2193  000D7A  6F01               	movwf	(_SendMsgSreen+1)& (0+255),b
  2194                           
  2195                           ;main.c: 330: SendMsgSreen[2] = 0x2E;
  2196  000D7C  0E2E               	movlw	46
  2197  000D7E  6F02               	movwf	(_SendMsgSreen+2)& (0+255),b
  2198                           
  2199                           ;main.c: 331: SendMsgSreen[3] = 0x74;
  2200  000D80  0E74               	movlw	116
  2201  000D82  6F03               	movwf	(_SendMsgSreen+3)& (0+255),b
  2202                           
  2203                           ;main.c: 332: SendMsgSreen[4] = 0x78;
  2204  000D84  0E78               	movlw	120
  2205  000D86  6F04               	movwf	(_SendMsgSreen+4)& (0+255),b
  2206                           
  2207                           ;main.c: 333: SendMsgSreen[5] = 0x74;
  2208  000D88  0E74               	movlw	116
  2209  000D8A  6F05               	movwf	(_SendMsgSreen+5)& (0+255),b
  2210                           
  2211                           ;main.c: 334: SendMsgSreen[6] = 0x3D;
  2212  000D8C  0E3D               	movlw	61
  2213  000D8E  6F06               	movwf	(_SendMsgSreen+6)& (0+255),b
  2214                           
  2215                           ;main.c: 335: SendMsgSreen[7] = 0x22;
  2216  000D90  0E22               	movlw	34
  2217  000D92  6F07               	movwf	(_SendMsgSreen+7)& (0+255),b
  2218                           
  2219                           ;main.c: 336: SendMsgSreen[8] = 0x74;
  2220  000D94  0E74               	movlw	116
  2221  000D96  6F08               	movwf	(_SendMsgSreen+8)& (0+255),b
  2222                           
  2223                           ;main.c: 337: SendMsgSreen[9] = 0x65;
  2224  000D98  0E65               	movlw	101
  2225  000D9A  6F09               	movwf	(_SendMsgSreen+9)& (0+255),b
  2226                           
  2227                           ;main.c: 338: SendMsgSreen[10] = 0x73;
  2228  000D9C  0E73               	movlw	115
  2229  000D9E  6F0A               	movwf	(_SendMsgSreen+10)& (0+255),b
  2230                           
  2231                           ;main.c: 339: SendMsgSreen[11] = 0x74;
  2232  000DA0  0E74               	movlw	116
  2233  000DA2  6F0B               	movwf	(_SendMsgSreen+11)& (0+255),b
  2234                           
  2235                           ; BSR set to: 1
  2236                           ;main.c: 340: SendMsgSreen[12] = 0x30 + cpt;
  2237  000DA4  0100               	movlb	0	; () banked
  2238  000DA6  51CE               	movf	_cpt& (0+255),w,b
  2239  000DA8  0F30               	addlw	48
  2240  000DAA  0101               	movlb	1	; () banked
  2241  000DAC  6F0C               	movwf	(_SendMsgSreen+12)& (0+255),b
  2242                           
  2243                           ; BSR set to: 1
  2244                           ;main.c: 341: cpt++;
  2245  000DAE  0100               	movlb	0	; () banked
  2246  000DB0  2BCE               	incf	_cpt& (0+255),f,b
  2247                           
  2248                           ; BSR set to: 0
  2249                           ;main.c: 342: if(cpt > 9) {cpt = 0;}
  2250  000DB2  0E09               	movlw	9
  2251  000DB4  65CE               	cpfsgt	_cpt& (0+255),b
  2252  000DB6  D002               	goto	l201
  2253                           
  2254                           ; BSR set to: 0
  2255  000DB8  0E00               	movlw	0
  2256  000DBA  6FCE               	movwf	_cpt& (0+255),b
  2257  000DBC                     l201:
  2258                           
  2259                           ; BSR set to: 0
  2260                           ;main.c: 343: SendMsgSreen[13] = 0x22;
  2261  000DBC  0E22               	movlw	34
  2262  000DBE  0101               	movlb	1	; () banked
  2263  000DC0  6F0D               	movwf	(_SendMsgSreen+13)& (0+255),b
  2264                           
  2265                           ; BSR set to: 1
  2266                           ;main.c: 344: SendMsgSreen[14] = 0xFF;
  2267  000DC2  690E               	setf	(_SendMsgSreen+14)& (0+255),b
  2268                           
  2269                           ; BSR set to: 1
  2270                           ;main.c: 345: SendMsgSreen[15] = 0xFF;
  2271  000DC4  690F               	setf	(_SendMsgSreen+15)& (0+255),b
  2272                           
  2273                           ; BSR set to: 1
  2274                           ;main.c: 346: SendMsgSreen[16] = 0xFF;
  2275  000DC6  6910               	setf	(_SendMsgSreen+16)& (0+255),b
  2276                           
  2277                           ; BSR set to: 1
  2278                           ;main.c: 347: PrintS(SendMsgSreen);
  2279  000DC8  0E00               	movlw	low _SendMsgSreen
  2280  000DCA  6E26               	movwf	PrintS@s_printS,c
  2281  000DCC  0E01               	movlw	high _SendMsgSreen
  2282  000DCE  6E27               	movwf	PrintS@s_printS+1,c
  2283  000DD0  EC83  F00D         	call	_PrintS	;wreg free
  2284                           
  2285                           ;main.c: 348: ClearArray();
  2286  000DD4  ECE4  F00D         	call	_ClearArray	;wreg free
  2287                           
  2288                           ;main.c: 349: break;
  2289  000DD8  D444               	goto	l173
  2290  000DDA                     
  2291                           ;main.c: 351: EtatScreen = 0;
  2292  000DDA  0E00               	movlw	0
  2293  000DDC  0100               	movlb	0	; () banked
  2294  000DDE  6FD2               	movwf	_EtatScreen& (0+255),b
  2295                           
  2296                           ; BSR set to: 0
  2297                           ;main.c: 353: }
  2298                           
  2299                           ;main.c: 352: break;
  2300  000DE0  D440               	goto	l173
  2301  000DE2                     l181:
  2302                           
  2303                           ; BSR set to: 0
  2304                           
  2305                           ; BSR set to: 0
  2306  000DE2  51D2               	movf	_EtatScreen& (0+255),w,b
  2307                           
  2308                           ; Switch size 1, requested type "space"
  2309                           ; Number of cases is 5, Range of values is 0 to 4
  2310                           ; switch strategies available:
  2311                           ; Name         Instructions Cycles
  2312                           ; simple_byte           16     9 (average)
  2313                           ;	Chosen strategy is simple_byte
  2314  000DE4  0A00               	xorlw	0	; case 0
  2315  000DE6  B4D8               	btfsc	status,2,c
  2316  000DE8  D5D5               	goto	l182
  2317  000DEA  0A01               	xorlw	1	; case 1
  2318  000DEC  B4D8               	btfsc	status,2,c
  2319  000DEE  D668               	goto	l189
  2320  000DF0  0A03               	xorlw	3	; case 2
  2321  000DF2  B4D8               	btfsc	status,2,c
  2322  000DF4  D725               	goto	l190
  2323  000DF6  0A01               	xorlw	1	; case 3
  2324  000DF8  B4D8               	btfsc	status,2,c
  2325  000DFA  D433               	goto	l173
  2326  000DFC  0A07               	xorlw	7	; case 4
  2327  000DFE  B4D8               	btfsc	status,2,c
  2328  000E00  D7B5               	goto	l200
  2329  000E02  D7EB               	goto	l202
  2330  000E04                     __end_of_main:
  2331                           	opt stack 0
  2332                           tblptru	equ	0xFF8
  2333                           tblptrh	equ	0xFF7
  2334                           tblptrl	equ	0xFF6
  2335                           tablat	equ	0xFF5
  2336                           prodh	equ	0xFF4
  2337                           prodl	equ	0xFF3
  2338                           intcon	equ	0xFF2
  2339                           postinc0	equ	0xFEE
  2340                           wreg	equ	0xFE8
  2341                           indf1	equ	0xFE7
  2342                           postdec1	equ	0xFE5
  2343                           fsr1h	equ	0xFE2
  2344                           fsr1l	equ	0xFE1
  2345                           indf2	equ	0xFDF
  2346                           fsr2h	equ	0xFDA
  2347                           fsr2l	equ	0xFD9
  2348                           status	equ	0xFD8
  2349                           
  2350 ;; *************** function _exp *****************
  2351 ;; Defined at:
  2352 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
  2353 ;; Parameters:    Size  Location     Type
  2354 ;;  x               3   46[BANK0 ] void 
  2355 ;; Auto vars:     Size  Location     Type
  2356 ;;  exponent        2   52[BANK0 ] int 
  2357 ;;  sign            1   54[BANK0 ] unsigned char 
  2358 ;; Return value:  Size  Location     Type
  2359 ;;                  3   46[BANK0 ] unsigned char 
  2360 ;; Registers used:
  2361 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2362 ;; Tracked objects:
  2363 ;;		On entry : 0/0
  2364 ;;		On exit  : 0/0
  2365 ;;		Unchanged: 0/0
  2366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2367 ;;      Params:         0       3       0       0       0       0       0
  2368 ;;      Locals:         0       6       0       0       0       0       0
  2369 ;;      Temps:          0       0       0       0       0       0       0
  2370 ;;      Totals:         0       9       0       0       0       0       0
  2371 ;;Total ram usage:        9 bytes
  2372 ;; Hardware stack levels used:    1
  2373 ;; Hardware stack levels required when called:    5
  2374 ;; This function calls:
  2375 ;;		___awtoft
  2376 ;;		___ftdiv
  2377 ;;		___ftge
  2378 ;;		___ftmul
  2379 ;;		___ftneg
  2380 ;;		___ftsub
  2381 ;;		___fttol
  2382 ;;		_eval_poly
  2383 ;;		_floor
  2384 ;;		_ldexp
  2385 ;; This function is called by:
  2386 ;;		_main
  2387 ;; This function uses a non-reentrant model
  2388 ;;
  2389                           
  2390                           	psect	text1
  2391  000E04                     __ptext1:
  2392                           	opt stack 0
  2393  000E04                     _exp:
  2394                           	opt stack 25
  2395                           
  2396                           ; BSR set to: 0
  2397                           ;incstack = 0
  2398  000E04  0100               	movlb	0	; () banked
  2399  000E06  51AE               	movf	exp@x& (0+255),w,b
  2400  000E08  11AF               	iorwf	(exp@x+1)& (0+255),w,b
  2401  000E0A  11B0               	iorwf	(exp@x+2)& (0+255),w,b
  2402  000E0C  A4D8               	btfss	status,2,c
  2403  000E0E  D007               	goto	l558
  2404                           
  2405                           ; BSR set to: 0
  2406  000E10  0E00               	movlw	0
  2407  000E12  6FAE               	movwf	?_exp& (0+255),b
  2408  000E14  0E80               	movlw	128
  2409  000E16  6FAF               	movwf	(?_exp+1)& (0+255),b
  2410  000E18  0E3F               	movlw	63
  2411  000E1A  6FB0               	movwf	(?_exp+2)& (0+255),b
  2412                           
  2413                           ; BSR set to: 0
  2414  000E1C  0012               	return	
  2415  000E1E                     l558:
  2416                           
  2417                           ; BSR set to: 0
  2418                           
  2419                           ; BSR set to: 0
  2420  000E1E  0E72               	movlw	114
  2421  000E20  6E25               	movwf	___ftge@ff1,c
  2422  000E22  0E31               	movlw	49
  2423  000E24  6E26               	movwf	___ftge@ff1+1,c
  2424  000E26  0E44               	movlw	68
  2425  000E28  6E27               	movwf	___ftge@ff1+2,c
  2426  000E2A  C0AE  F028         	movff	exp@x,___ftge@ff2
  2427  000E2E  C0AF  F029         	movff	exp@x+1,___ftge@ff2+1
  2428  000E32  C0B0  F02A         	movff	exp@x+2,___ftge@ff2+2
  2429  000E36  EC1D  F00C         	call	___ftge	;wreg free
  2430  000E3A  B0D8               	btfsc	status,0,c
  2431  000E3C  D00C               	goto	l560
  2432  000E3E  0E00               	movlw	0
  2433  000E40  0100               	movlb	0	; () banked
  2434  000E42  6FCD               	movwf	(_errno+1)& (0+255),b
  2435  000E44  0E22               	movlw	34
  2436  000E46  6FCC               	movwf	_errno& (0+255),b
  2437  000E48  0EFF               	movlw	255
  2438  000E4A  6FAE               	movwf	?_exp& (0+255),b
  2439  000E4C  0E7F               	movlw	127
  2440  000E4E  6FAF               	movwf	(?_exp+1)& (0+255),b
  2441  000E50  0E7F               	movlw	127
  2442  000E52  6FB0               	movwf	(?_exp+2)& (0+255),b
  2443                           
  2444                           ; BSR set to: 0
  2445  000E54  0012               	return	
  2446  000E56                     l560:
  2447                           
  2448                           ; BSR set to: 0
  2449  000E56  C0AE  F025         	movff	exp@x,___ftge@ff1
  2450  000E5A  C0AF  F026         	movff	exp@x+1,___ftge@ff1+1
  2451  000E5E  C0B0  F027         	movff	exp@x+2,___ftge@ff1+2
  2452  000E62  0E49               	movlw	73
  2453  000E64  6E28               	movwf	___ftge@ff2,c
  2454  000E66  0E3A               	movlw	58
  2455  000E68  6E29               	movwf	___ftge@ff2+1,c
  2456  000E6A  0EC4               	movlw	196
  2457  000E6C  6E2A               	movwf	___ftge@ff2+2,c
  2458  000E6E  EC1D  F00C         	call	___ftge	;wreg free
  2459  000E72  B0D8               	btfsc	status,0,c
  2460  000E74  D00C               	goto	l561
  2461  000E76  0E00               	movlw	0
  2462  000E78  0100               	movlb	0	; () banked
  2463  000E7A  6FCD               	movwf	(_errno+1)& (0+255),b
  2464  000E7C  0E22               	movlw	34
  2465  000E7E  6FCC               	movwf	_errno& (0+255),b
  2466  000E80  0E00               	movlw	0
  2467  000E82  6FAE               	movwf	?_exp& (0+255),b
  2468  000E84  0E00               	movlw	0
  2469  000E86  6FAF               	movwf	(?_exp+1)& (0+255),b
  2470  000E88  0E00               	movlw	0
  2471  000E8A  6FB0               	movwf	(?_exp+2)& (0+255),b
  2472                           
  2473                           ; BSR set to: 0
  2474  000E8C  0012               	return	
  2475  000E8E                     l561:
  2476                           
  2477                           ; BSR set to: 0
  2478  000E8E  0100               	movlb	0	; () banked
  2479  000E90  AFB0               	btfss	(exp@x+2)& (0+255),7,b
  2480  000E92  D002               	goto	u3310
  2481  000E94  0E01               	movlw	1
  2482  000E96  D001               	goto	u3320
  2483  000E98                     u3310:
  2484  000E98  0E00               	movlw	0
  2485  000E9A                     u3320:
  2486  000E9A  6FB6               	movwf	exp@sign& (0+255),b
  2487                           
  2488                           ; BSR set to: 0
  2489  000E9C  51B6               	movf	exp@sign& (0+255),w,b
  2490  000E9E  B4D8               	btfsc	status,2,c
  2491  000EA0  D00E               	goto	l562
  2492                           
  2493                           ; BSR set to: 0
  2494  000EA2  C0AE  F04F         	movff	exp@x,___ftneg@f1
  2495  000EA6  C0AF  F050         	movff	exp@x+1,___ftneg@f1+1
  2496  000EAA  C0B0  F051         	movff	exp@x+2,___ftneg@f1+2
  2497  000EAE  EC1F  F00E         	call	___ftneg	;wreg free
  2498  000EB2  C04F  F0AE         	movff	?___ftneg,exp@x
  2499  000EB6  C050  F0AF         	movff	?___ftneg+1,exp@x+1
  2500  000EBA  C051  F0B0         	movff	?___ftneg+2,exp@x+2
  2501  000EBE                     l562:
  2502  000EBE  C0AE  F080         	movff	exp@x,___ftmul@f1
  2503  000EC2  C0AF  F081         	movff	exp@x+1,___ftmul@f1+1
  2504  000EC6  C0B0  F082         	movff	exp@x+2,___ftmul@f1+2
  2505  000ECA  0EAA               	movlw	170
  2506  000ECC  0100               	movlb	0	; () banked
  2507  000ECE  6F83               	movwf	___ftmul@f2& (0+255),b
  2508  000ED0  0EB8               	movlw	184
  2509  000ED2  6F84               	movwf	(___ftmul@f2+1)& (0+255),b
  2510  000ED4  0E3F               	movlw	63
  2511  000ED6  6F85               	movwf	(___ftmul@f2+2)& (0+255),b
  2512  000ED8  ECD2  F008         	call	___ftmul	;wreg free
  2513  000EDC  C080  F0AE         	movff	?___ftmul,exp@x
  2514  000EE0  C081  F0AF         	movff	?___ftmul+1,exp@x+1
  2515  000EE4  C082  F0B0         	movff	?___ftmul+2,exp@x+2
  2516  000EE8  C0AE  F09B         	movff	exp@x,floor@x
  2517  000EEC  C0AF  F09C         	movff	exp@x+1,floor@x+1
  2518  000EF0  C0B0  F09D         	movff	exp@x+2,floor@x+2
  2519  000EF4  EC3A  F00A         	call	_floor	;wreg free
  2520  000EF8  C09B  F0B1         	movff	?_floor,_exp$1532
  2521  000EFC  C09C  F0B2         	movff	?_floor+1,_exp$1532+1
  2522  000F00  C09D  F0B3         	movff	?_floor+2,_exp$1532+2
  2523  000F04  C0B1  F03C         	movff	_exp$1532,___fttol@f1
  2524  000F08  C0B2  F03D         	movff	_exp$1532+1,___fttol@f1+1
  2525  000F0C  C0B3  F03E         	movff	_exp$1532+2,___fttol@f1+2
  2526  000F10  EC4D  F009         	call	___fttol	;wreg free
  2527  000F14  C03C  F0B4         	movff	?___fttol,exp@exponent
  2528  000F18  C03D  F0B5         	movff	?___fttol+1,exp@exponent+1
  2529  000F1C  C0AE  F09B         	movff	exp@x,___ftsub@f1
  2530  000F20  C0AF  F09C         	movff	exp@x+1,___ftsub@f1+1
  2531  000F24  C0B0  F09D         	movff	exp@x+2,___ftsub@f1+2
  2532  000F28  C0B4  F04B         	movff	exp@exponent,___awtoft@c
  2533  000F2C  C0B5  F04C         	movff	exp@exponent+1,___awtoft@c+1
  2534  000F30  EC67  F00D         	call	___awtoft	;wreg free
  2535  000F34  C04B  F09E         	movff	?___awtoft,___ftsub@f2
  2536  000F38  C04C  F09F         	movff	?___awtoft+1,___ftsub@f2+1
  2537  000F3C  C04D  F0A0         	movff	?___awtoft+2,___ftsub@f2+2
  2538  000F40  EC46  F00D         	call	___ftsub	;wreg free
  2539  000F44  C09B  F0AE         	movff	?___ftsub,exp@x
  2540  000F48  C09C  F0AF         	movff	?___ftsub+1,exp@x+1
  2541  000F4C  C09D  F0B0         	movff	?___ftsub+2,exp@x+2
  2542  000F50  C0AE  F09B         	movff	exp@x,eval_poly@x
  2543  000F54  C0AF  F09C         	movff	exp@x+1,eval_poly@x+1
  2544  000F58  C0B0  F09D         	movff	exp@x+2,eval_poly@x+2
  2545  000F5C  0E01               	movlw	low exp@coeff
  2546  000F5E  0100               	movlb	0	; () banked
  2547  000F60  6F9E               	movwf	eval_poly@d& (0+255),b
  2548  000F62  0E06               	movlw	high exp@coeff
  2549  000F64  6F9F               	movwf	(eval_poly@d+1)& (0+255),b
  2550  000F66  0E00               	movlw	0
  2551  000F68  6FA1               	movwf	(eval_poly@n+1)& (0+255),b
  2552  000F6A  0E09               	movlw	9
  2553  000F6C  6FA0               	movwf	eval_poly@n& (0+255),b
  2554  000F6E  ECAB  F00A         	call	_eval_poly	;wreg free
  2555  000F72  C09B  F0A7         	movff	?_eval_poly,ldexp@value
  2556  000F76  C09C  F0A8         	movff	?_eval_poly+1,ldexp@value+1
  2557  000F7A  C09D  F0A9         	movff	?_eval_poly+2,ldexp@value+2
  2558  000F7E  C0B4  F0AA         	movff	exp@exponent,ldexp@newexp
  2559  000F82  C0B5  F0AB         	movff	exp@exponent+1,ldexp@newexp+1
  2560  000F86  EC18  F00B         	call	_ldexp	;wreg free
  2561  000F8A  C0A7  F0AE         	movff	?_ldexp,exp@x
  2562  000F8E  C0A8  F0AF         	movff	?_ldexp+1,exp@x+1
  2563  000F92  C0A9  F0B0         	movff	?_ldexp+2,exp@x+2
  2564  000F96  0100               	movlb	0	; () banked
  2565  000F98  51B6               	movf	exp@sign& (0+255),w,b
  2566  000F9A  B4D8               	btfsc	status,2,c
  2567  000F9C  D025               	goto	l563
  2568                           
  2569                           ; BSR set to: 0
  2570  000F9E  29AE               	incf	exp@x& (0+255),w,b
  2571  000FA0  E10E               	bnz	l3338
  2572  000FA2  0E7F               	movlw	127
  2573  000FA4  19AF               	xorwf	(exp@x+1)& (0+255),w,b
  2574  000FA6  E10B               	bnz	l3338
  2575  000FA8  0E7F               	movlw	127
  2576  000FAA  19B0               	xorwf	(exp@x+2)& (0+255),w,b
  2577  000FAC  A4D8               	btfss	status,2,c
  2578  000FAE  D007               	goto	l564
  2579                           
  2580                           ; BSR set to: 0
  2581  000FB0  0E00               	movlw	0
  2582  000FB2  6FAE               	movwf	?_exp& (0+255),b
  2583  000FB4  0E00               	movlw	0
  2584  000FB6  6FAF               	movwf	(?_exp+1)& (0+255),b
  2585  000FB8  0E00               	movlw	0
  2586  000FBA  6FB0               	movwf	(?_exp+2)& (0+255),b
  2587                           
  2588                           ; BSR set to: 0
  2589  000FBC  0012               	return	
  2590  000FBE                     l564:
  2591  000FBE                     l3338:
  2592                           
  2593                           ; BSR set to: 0
  2594  000FBE  0E00               	movlw	0
  2595  000FC0  6E2D               	movwf	___ftdiv@f1,c
  2596  000FC2  0E80               	movlw	128
  2597  000FC4  6E2E               	movwf	___ftdiv@f1+1,c
  2598  000FC6  0E3F               	movlw	63
  2599  000FC8  6E2F               	movwf	___ftdiv@f1+2,c
  2600  000FCA  C0AE  F030         	movff	exp@x,___ftdiv@f2
  2601  000FCE  C0AF  F031         	movff	exp@x+1,___ftdiv@f2+1
  2602  000FD2  C0B0  F032         	movff	exp@x+2,___ftdiv@f2+2
  2603  000FD6  ECC7  F009         	call	___ftdiv	;wreg free
  2604  000FDA  C02D  F0AE         	movff	?___ftdiv,?_exp
  2605  000FDE  C02E  F0AF         	movff	?___ftdiv+1,?_exp+1
  2606  000FE2  C02F  F0B0         	movff	?___ftdiv+2,?_exp+2
  2607  000FE6  0012               	return	
  2608  000FE8                     l563:
  2609                           
  2610                           ; BSR set to: 0
  2611  000FE8  C0AE  F0AE         	movff	exp@x,?_exp
  2612  000FEC  C0AF  F0AF         	movff	exp@x+1,?_exp+1
  2613  000FF0  C0B0  F0B0         	movff	exp@x+2,?_exp+2
  2614  000FF4  0012               	return		;funcret
  2615  000FF6                     __end_of_exp:
  2616                           	opt stack 0
  2617                           tblptru	equ	0xFF8
  2618                           tblptrh	equ	0xFF7
  2619                           tblptrl	equ	0xFF6
  2620                           tablat	equ	0xFF5
  2621                           prodh	equ	0xFF4
  2622                           prodl	equ	0xFF3
  2623                           intcon	equ	0xFF2
  2624                           postinc0	equ	0xFEE
  2625                           wreg	equ	0xFE8
  2626                           indf1	equ	0xFE7
  2627                           postdec1	equ	0xFE5
  2628                           fsr1h	equ	0xFE2
  2629                           fsr1l	equ	0xFE1
  2630                           indf2	equ	0xFDF
  2631                           fsr2h	equ	0xFDA
  2632                           fsr2l	equ	0xFD9
  2633                           status	equ	0xFD8
  2634                           
  2635 ;; *************** function _ldexp *****************
  2636 ;; Defined at:
  2637 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  2638 ;; Parameters:    Size  Location     Type
  2639 ;;  value           3   39[BANK0 ] unsigned char 
  2640 ;;  newexp          2   42[BANK0 ] int 
  2641 ;; Auto vars:     Size  Location     Type
  2642 ;;		None
  2643 ;; Return value:  Size  Location     Type
  2644 ;;                  3   39[BANK0 ] int 
  2645 ;; Registers used:
  2646 ;;		wreg, status,2, status,0
  2647 ;; Tracked objects:
  2648 ;;		On entry : 0/0
  2649 ;;		On exit  : 0/0
  2650 ;;		Unchanged: 0/0
  2651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2652 ;;      Params:         0       5       0       0       0       0       0
  2653 ;;      Locals:         0       0       0       0       0       0       0
  2654 ;;      Temps:          0       2       0       0       0       0       0
  2655 ;;      Totals:         0       7       0       0       0       0       0
  2656 ;;Total ram usage:        7 bytes
  2657 ;; Hardware stack levels used:    1
  2658 ;; Hardware stack levels required when called:    2
  2659 ;; This function calls:
  2660 ;;		Nothing
  2661 ;; This function is called by:
  2662 ;;		_exp
  2663 ;; This function uses a non-reentrant model
  2664 ;;
  2665                           
  2666                           	psect	text2
  2667  001630                     __ptext2:
  2668                           	opt stack 0
  2669  001630                     _ldexp:
  2670                           	opt stack 27
  2671                           
  2672                           ;incstack = 0
  2673  001630  0100               	movlb	0	; () banked
  2674  001632  51A7               	movf	ldexp@value& (0+255),w,b
  2675  001634  11A8               	iorwf	(ldexp@value+1)& (0+255),w,b
  2676  001636  11A9               	iorwf	(ldexp@value+2)& (0+255),w,b
  2677  001638  A4D8               	btfss	status,2,c
  2678  00163A  D007               	goto	l626
  2679                           
  2680                           ; BSR set to: 0
  2681  00163C  0E00               	movlw	0
  2682  00163E  6FA7               	movwf	?_ldexp& (0+255),b
  2683  001640  0E00               	movlw	0
  2684  001642  6FA8               	movwf	(?_ldexp+1)& (0+255),b
  2685  001644  0E00               	movlw	0
  2686  001646  6FA9               	movwf	(?_ldexp+2)& (0+255),b
  2687                           
  2688                           ; BSR set to: 0
  2689  001648  0012               	return	
  2690  00164A                     l626:
  2691                           
  2692                           ; BSR set to: 0
  2693                           
  2694                           ; BSR set to: 0
  2695  00164A  51A9               	movf	(ldexp@value+2)& (0+255),w,b
  2696  00164C  0B7F               	andlw	127
  2697  00164E  6FAC               	movwf	??_ldexp& (0+255),b
  2698  001650  6BAD               	clrf	(??_ldexp+1)& (0+255),b
  2699  001652  90D8               	bcf	status,0,c
  2700  001654  37AC               	rlcf	??_ldexp& (0+255),f,b
  2701  001656  37AD               	rlcf	(??_ldexp+1)& (0+255),f,b
  2702  001658  51AC               	movf	??_ldexp& (0+255),w,b
  2703  00165A  27AA               	addwf	ldexp@newexp& (0+255),f,b
  2704  00165C  51AD               	movf	(??_ldexp+1)& (0+255),w,b
  2705  00165E  23AB               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  2706  001660  AFA8               	btfss	(ldexp@value+1)& (0+255),7,b
  2707  001662  D003               	goto	u2040
  2708  001664  6BAC               	clrf	??_ldexp& (0+255),b
  2709  001666  2BAC               	incf	??_ldexp& (0+255),f,b
  2710  001668  D002               	goto	u2048
  2711  00166A                     u2040:
  2712  00166A  0100               	movlb	0	; () banked
  2713  00166C  6BAC               	clrf	??_ldexp& (0+255),b
  2714  00166E                     u2048:
  2715  00166E  51AC               	movf	??_ldexp& (0+255),w,b
  2716  001670  27AA               	addwf	ldexp@newexp& (0+255),f,b
  2717  001672  0E00               	movlw	0
  2718  001674  23AB               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  2719  001676  AFAB               	btfss	(ldexp@newexp+1)& (0+255),7,b
  2720  001678  D00B               	goto	l628
  2721                           
  2722                           ; BSR set to: 0
  2723  00167A  0E00               	movlw	0
  2724  00167C  6FCD               	movwf	(_errno+1)& (0+255),b
  2725  00167E  0E22               	movlw	34
  2726  001680  6FCC               	movwf	_errno& (0+255),b
  2727  001682  0E00               	movlw	0
  2728  001684  6FA7               	movwf	?_ldexp& (0+255),b
  2729  001686  0E00               	movlw	0
  2730  001688  6FA8               	movwf	(?_ldexp+1)& (0+255),b
  2731  00168A  0E00               	movlw	0
  2732  00168C                     L1:
  2733  00168C  6FA9               	movwf	(?_ldexp+2)& (0+255),b
  2734                           
  2735                           ; BSR set to: 0
  2736  00168E  0012               	return	
  2737  001690                     l628:
  2738                           
  2739                           ; BSR set to: 0
  2740                           
  2741                           ; BSR set to: 0
  2742  001690  BFAB               	btfsc	(ldexp@newexp+1)& (0+255),7,b
  2743  001692  D015               	goto	l630
  2744  001694  05AB               	decf	(ldexp@newexp+1)& (0+255),w,b
  2745  001696  A0D8               	btfss	status,0,c
  2746  001698  D012               	goto	l630
  2747                           
  2748                           ; BSR set to: 0
  2749  00169A  0E00               	movlw	0
  2750  00169C  6FCD               	movwf	(_errno+1)& (0+255),b
  2751  00169E  0E22               	movlw	34
  2752  0016A0  6FCC               	movwf	_errno& (0+255),b
  2753                           
  2754                           ; BSR set to: 0
  2755  0016A2  AFA9               	btfss	(ldexp@value+2)& (0+255),7,b
  2756  0016A4  D006               	goto	l631
  2757                           
  2758                           ; BSR set to: 0
  2759  0016A6  0EFF               	movlw	255
  2760  0016A8  6FA7               	movwf	?_ldexp& (0+255),b
  2761  0016AA  0E7F               	movlw	127
  2762  0016AC  6FA8               	movwf	(?_ldexp+1)& (0+255),b
  2763  0016AE  0EFF               	movlw	255
  2764  0016B0  D7ED               	goto	L1
  2765  0016B2                     l631:
  2766                           
  2767                           ; BSR set to: 0
  2768                           
  2769                           ; BSR set to: 0
  2770  0016B2  0EFF               	movlw	255
  2771  0016B4  6FA7               	movwf	?_ldexp& (0+255),b
  2772  0016B6  0E7F               	movlw	127
  2773  0016B8  6FA8               	movwf	(?_ldexp+1)& (0+255),b
  2774  0016BA  0E7F               	movlw	127
  2775  0016BC  D7E7               	goto	L1
  2776  0016BE                     l630:
  2777                           
  2778                           ; BSR set to: 0
  2779                           
  2780                           ; BSR set to: 0
  2781  0016BE  35AB               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  2782  0016C0  31AB               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  2783  0016C2  6FAD               	movwf	(??_ldexp+1)& (0+255),b
  2784  0016C4  31AA               	rrcf	ldexp@newexp& (0+255),w,b
  2785  0016C6  6FAC               	movwf	??_ldexp& (0+255),b
  2786  0016C8  51A9               	movf	(ldexp@value+2)& (0+255),w,b
  2787  0016CA  19AC               	xorwf	??_ldexp& (0+255),w,b
  2788  0016CC  0B80               	andlw	-128
  2789  0016CE  19AC               	xorwf	??_ldexp& (0+255),w,b
  2790  0016D0  6FA9               	movwf	(ldexp@value+2)& (0+255),b
  2791  0016D2  C0AA  F0AC         	movff	ldexp@newexp,??_ldexp
  2792  0016D6  0E01               	movlw	1
  2793  0016D8  17AC               	andwf	??_ldexp& (0+255),f,b
  2794  0016DA  33AC               	rrcf	??_ldexp& (0+255),f,b
  2795  0016DC  33AC               	rrcf	??_ldexp& (0+255),f,b
  2796  0016DE  51A8               	movf	(ldexp@value+1)& (0+255),w,b
  2797  0016E0  19AC               	xorwf	??_ldexp& (0+255),w,b
  2798  0016E2  0B7F               	andlw	-129
  2799  0016E4  19AC               	xorwf	??_ldexp& (0+255),w,b
  2800  0016E6  6FA8               	movwf	(ldexp@value+1)& (0+255),b
  2801                           
  2802                           ; BSR set to: 0
  2803                           
  2804                           ; BSR set to: 0
  2805                           
  2806                           ; BSR set to: 0
  2807  0016E8  C0A7  F0A7         	movff	ldexp@value,?_ldexp
  2808  0016EC  C0A8  F0A8         	movff	ldexp@value+1,?_ldexp+1
  2809  0016F0  C0A9  F0A9         	movff	ldexp@value+2,?_ldexp+2
  2810  0016F4  0012               	return	
  2811  0016F6                     __end_of_ldexp:
  2812                           	opt stack 0
  2813                           tblptru	equ	0xFF8
  2814                           tblptrh	equ	0xFF7
  2815                           tblptrl	equ	0xFF6
  2816                           tablat	equ	0xFF5
  2817                           prodh	equ	0xFF4
  2818                           prodl	equ	0xFF3
  2819                           intcon	equ	0xFF2
  2820                           postinc0	equ	0xFEE
  2821                           wreg	equ	0xFE8
  2822                           indf1	equ	0xFE7
  2823                           postdec1	equ	0xFE5
  2824                           fsr1h	equ	0xFE2
  2825                           fsr1l	equ	0xFE1
  2826                           indf2	equ	0xFDF
  2827                           fsr2h	equ	0xFDA
  2828                           fsr2l	equ	0xFD9
  2829                           status	equ	0xFD8
  2830                           
  2831 ;; *************** function _floor *****************
  2832 ;; Defined at:
  2833 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
  2834 ;; Parameters:    Size  Location     Type
  2835 ;;  x               3   27[BANK0 ] int 
  2836 ;; Auto vars:     Size  Location     Type
  2837 ;;  i               3   30[BANK0 ] int 
  2838 ;;  expon           2   33[BANK0 ] int 
  2839 ;; Return value:  Size  Location     Type
  2840 ;;                  3   27[BANK0 ] int 
  2841 ;; Registers used:
  2842 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2843 ;; Tracked objects:
  2844 ;;		On entry : 0/0
  2845 ;;		On exit  : 0/0
  2846 ;;		Unchanged: 0/0
  2847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2848 ;;      Params:         0       3       0       0       0       0       0
  2849 ;;      Locals:         0       5       0       0       0       0       0
  2850 ;;      Temps:          0       0       0       0       0       0       0
  2851 ;;      Totals:         0       8       0       0       0       0       0
  2852 ;;Total ram usage:        8 bytes
  2853 ;; Hardware stack levels used:    1
  2854 ;; Hardware stack levels required when called:    4
  2855 ;; This function calls:
  2856 ;;		___altoft
  2857 ;;		___ftadd
  2858 ;;		___ftge
  2859 ;;		___fttol
  2860 ;;		_frexp
  2861 ;; This function is called by:
  2862 ;;		_exp
  2863 ;; This function uses a non-reentrant model
  2864 ;;
  2865                           
  2866                           	psect	text3
  2867  001474                     __ptext3:
  2868                           	opt stack 0
  2869  001474                     _floor:
  2870                           	opt stack 25
  2871                           
  2872                           ; BSR set to: 0
  2873                           ;incstack = 0
  2874  001474  C09B  F025         	movff	floor@x,frexp@value
  2875  001478  C09C  F026         	movff	floor@x+1,frexp@value+1
  2876  00147C  C09D  F027         	movff	floor@x+2,frexp@value+2
  2877  001480  0EA1               	movlw	low floor@expon
  2878  001482  6E28               	movwf	frexp@eptr,c
  2879  001484  0E00               	movlw	high floor@expon
  2880  001486  6E29               	movwf	frexp@eptr+1,c
  2881  001488  ECE4  F00C         	call	_frexp	;wreg free
  2882  00148C  0100               	movlb	0	; () banked
  2883  00148E  AFA2               	btfss	(floor@expon+1)& (0+255),7,b
  2884  001490  D010               	goto	l599
  2885                           
  2886                           ; BSR set to: 0
  2887  001492  AF9D               	btfss	(floor@x+2)& (0+255),7,b
  2888  001494  D007               	goto	l600
  2889                           
  2890                           ; BSR set to: 0
  2891  001496  0E00               	movlw	0
  2892  001498  6F9B               	movwf	?_floor& (0+255),b
  2893  00149A  0E80               	movlw	128
  2894  00149C  6F9C               	movwf	(?_floor+1)& (0+255),b
  2895  00149E  0EBF               	movlw	191
  2896  0014A0  6F9D               	movwf	(?_floor+2)& (0+255),b
  2897                           
  2898                           ; BSR set to: 0
  2899  0014A2  0012               	return	
  2900  0014A4                     l600:
  2901                           
  2902                           ; BSR set to: 0
  2903                           
  2904                           ; BSR set to: 0
  2905  0014A4  0E00               	movlw	0
  2906  0014A6  6F9B               	movwf	?_floor& (0+255),b
  2907  0014A8  0E00               	movlw	0
  2908  0014AA  6F9C               	movwf	(?_floor+1)& (0+255),b
  2909  0014AC  0E00               	movlw	0
  2910  0014AE  6F9D               	movwf	(?_floor+2)& (0+255),b
  2911                           
  2912                           ; BSR set to: 0
  2913  0014B0  0012               	return	
  2914  0014B2                     l599:
  2915                           
  2916                           ; BSR set to: 0
  2917                           
  2918                           ; BSR set to: 0
  2919  0014B2  51A2               	movf	(floor@expon+1)& (0+255),w,b
  2920  0014B4  E104               	bnz	u3250
  2921  0014B6  0E15               	movlw	21
  2922  0014B8  5DA1               	subwf	floor@expon& (0+255),w,b
  2923  0014BA  A0D8               	btfss	status,0,c
  2924  0014BC  D007               	goto	l602
  2925  0014BE                     u3250:
  2926                           
  2927                           ; BSR set to: 0
  2928  0014BE  C09B  F09B         	movff	floor@x,?_floor
  2929  0014C2  C09C  F09C         	movff	floor@x+1,?_floor+1
  2930  0014C6  C09D  F09D         	movff	floor@x+2,?_floor+2
  2931  0014CA  0012               	return	
  2932  0014CC                     l602:
  2933                           
  2934                           ; BSR set to: 0
  2935                           
  2936                           ; BSR set to: 0
  2937  0014CC  C09B  F03C         	movff	floor@x,___fttol@f1
  2938  0014D0  C09C  F03D         	movff	floor@x+1,___fttol@f1+1
  2939  0014D4  C09D  F03E         	movff	floor@x+2,___fttol@f1+2
  2940  0014D8  EC4D  F009         	call	___fttol	;wreg free
  2941  0014DC  C03C  F04B         	movff	?___fttol,___altoft@c
  2942  0014E0  C03D  F04C         	movff	?___fttol+1,___altoft@c+1
  2943  0014E4  C03E  F04D         	movff	?___fttol+2,___altoft@c+2
  2944  0014E8  C03F  F04E         	movff	?___fttol+3,___altoft@c+3
  2945  0014EC  ECA7  F00C         	call	___altoft	;wreg free
  2946  0014F0  C04B  F09E         	movff	?___altoft,floor@i
  2947  0014F4  C04C  F09F         	movff	?___altoft+1,floor@i+1
  2948  0014F8  C04D  F0A0         	movff	?___altoft+2,floor@i+2
  2949  0014FC  C09B  F025         	movff	floor@x,___ftge@ff1
  2950  001500  C09C  F026         	movff	floor@x+1,___ftge@ff1+1
  2951  001504  C09D  F027         	movff	floor@x+2,___ftge@ff1+2
  2952  001508  C09E  F028         	movff	floor@i,___ftge@ff2
  2953  00150C  C09F  F029         	movff	floor@i+1,___ftge@ff2+1
  2954  001510  C0A0  F02A         	movff	floor@i+2,___ftge@ff2+2
  2955  001514  EC1D  F00C         	call	___ftge	;wreg free
  2956  001518  B0D8               	btfsc	status,0,c
  2957  00151A  D016               	goto	l603
  2958  00151C  C09E  F08F         	movff	floor@i,___ftadd@f1
  2959  001520  C09F  F090         	movff	floor@i+1,___ftadd@f1+1
  2960  001524  C0A0  F091         	movff	floor@i+2,___ftadd@f1+2
  2961  001528  0E00               	movlw	0
  2962  00152A  0100               	movlb	0	; () banked
  2963  00152C  6F92               	movwf	___ftadd@f2& (0+255),b
  2964  00152E  0E80               	movlw	128
  2965  001530  6F93               	movwf	(___ftadd@f2+1)& (0+255),b
  2966  001532  0EBF               	movlw	191
  2967  001534  6F94               	movwf	(___ftadd@f2+2)& (0+255),b
  2968  001536  ECFB  F007         	call	___ftadd	;wreg free
  2969  00153A  C08F  F09B         	movff	?___ftadd,?_floor
  2970  00153E  C090  F09C         	movff	?___ftadd+1,?_floor+1
  2971  001542  C091  F09D         	movff	?___ftadd+2,?_floor+2
  2972  001546  0012               	return	
  2973  001548                     l603:
  2974  001548  C09E  F09B         	movff	floor@i,?_floor
  2975  00154C  C09F  F09C         	movff	floor@i+1,?_floor+1
  2976  001550  C0A0  F09D         	movff	floor@i+2,?_floor+2
  2977  001554  0012               	return		;funcret
  2978  001556                     __end_of_floor:
  2979                           	opt stack 0
  2980                           tblptru	equ	0xFF8
  2981                           tblptrh	equ	0xFF7
  2982                           tblptrl	equ	0xFF6
  2983                           tablat	equ	0xFF5
  2984                           prodh	equ	0xFF4
  2985                           prodl	equ	0xFF3
  2986                           intcon	equ	0xFF2
  2987                           postinc0	equ	0xFEE
  2988                           wreg	equ	0xFE8
  2989                           indf1	equ	0xFE7
  2990                           postdec1	equ	0xFE5
  2991                           fsr1h	equ	0xFE2
  2992                           fsr1l	equ	0xFE1
  2993                           indf2	equ	0xFDF
  2994                           fsr2h	equ	0xFDA
  2995                           fsr2l	equ	0xFD9
  2996                           status	equ	0xFD8
  2997                           
  2998 ;; *************** function _frexp *****************
  2999 ;; Defined at:
  3000 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  3001 ;; Parameters:    Size  Location     Type
  3002 ;;  value           3   36[COMRAM] int 
  3003 ;;  eptr            2   39[COMRAM] PTR int 
  3004 ;;		 -> floor@expon(2), 
  3005 ;; Auto vars:     Size  Location     Type
  3006 ;;		None
  3007 ;; Return value:  Size  Location     Type
  3008 ;;                  3   36[COMRAM] PTR int 
  3009 ;; Registers used:
  3010 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3011 ;; Tracked objects:
  3012 ;;		On entry : 0/0
  3013 ;;		On exit  : 0/0
  3014 ;;		Unchanged: 0/0
  3015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3016 ;;      Params:         5       0       0       0       0       0       0
  3017 ;;      Locals:         0       0       0       0       0       0       0
  3018 ;;      Temps:          2       0       0       0       0       0       0
  3019 ;;      Totals:         7       0       0       0       0       0       0
  3020 ;;Total ram usage:        7 bytes
  3021 ;; Hardware stack levels used:    1
  3022 ;; Hardware stack levels required when called:    2
  3023 ;; This function calls:
  3024 ;;		Nothing
  3025 ;; This function is called by:
  3026 ;;		_floor
  3027 ;; This function uses a non-reentrant model
  3028 ;;
  3029                           
  3030                           	psect	text4
  3031  0019C8                     __ptext4:
  3032                           	opt stack 0
  3033  0019C8                     _frexp:
  3034                           	opt stack 26
  3035                           
  3036                           ;incstack = 0
  3037  0019C8  5025               	movf	frexp@value,w,c
  3038  0019CA  1026               	iorwf	frexp@value+1,w,c
  3039  0019CC  1027               	iorwf	frexp@value+2,w,c
  3040  0019CE  A4D8               	btfss	status,2,c
  3041  0019D0  D009               	goto	l622
  3042  0019D2  C028  FFD9         	movff	frexp@eptr,fsr2l
  3043  0019D6  C029  FFDA         	movff	frexp@eptr+1,fsr2h
  3044  0019DA  0E00               	movlw	0
  3045  0019DC  6EDE               	movwf	postinc2,c
  3046  0019DE  0E00               	movlw	0
  3047  0019E0  6EDD               	movwf	postdec2,c
  3048                           
  3049                           ;	Return value of _frexp is never used
  3050  0019E2  0012               	return	
  3051  0019E4                     l622:
  3052  0019E4  5027               	movf	frexp@value+2,w,c
  3053  0019E6  0B7F               	andlw	127
  3054  0019E8  6E2A               	movwf	??_frexp& (0+255),c
  3055  0019EA  6A2B               	clrf	(??_frexp+1)& (0+255),c
  3056  0019EC  90D8               	bcf	status,0,c
  3057  0019EE  362A               	rlcf	??_frexp,f,c
  3058  0019F0  362B               	rlcf	??_frexp+1,f,c
  3059  0019F2  C028  FFD9         	movff	frexp@eptr,fsr2l
  3060  0019F6  C029  FFDA         	movff	frexp@eptr+1,fsr2h
  3061  0019FA  C02A  FFDE         	movff	??_frexp,postinc2
  3062  0019FE  C02B  FFDD         	movff	??_frexp+1,postdec2
  3063  001A02  AE26               	btfss	frexp@value+1,7,c
  3064  001A04  D003               	goto	u1780
  3065  001A06  6A2A               	clrf	??_frexp& (0+255),c
  3066  001A08  2A2A               	incf	??_frexp& (0+255),f,c
  3067  001A0A  D001               	goto	u1788
  3068  001A0C                     u1780:
  3069  001A0C  6A2A               	clrf	??_frexp& (0+255),c
  3070  001A0E                     u1788:
  3071  001A0E  502A               	movf	??_frexp,w,c
  3072  001A10  C028  FFD9         	movff	frexp@eptr,fsr2l
  3073  001A14  C029  FFDA         	movff	frexp@eptr+1,fsr2h
  3074  001A18  12DE               	iorwf	postinc2,f,c
  3075  001A1A  0E00               	movlw	0
  3076  001A1C  12DD               	iorwf	postdec2,f,c
  3077  001A1E  C028  FFD9         	movff	frexp@eptr,fsr2l
  3078  001A22  C029  FFDA         	movff	frexp@eptr+1,fsr2h
  3079  001A26  0E82               	movlw	130
  3080  001A28  26DE               	addwf	postinc2,f,c
  3081  001A2A  0EFF               	movlw	255
  3082  001A2C  22DD               	addwfc	postdec2,f,c
  3083  001A2E  8027               	bsf	frexp@value+2,0,c
  3084  001A30  8227               	bsf	frexp@value+2,1,c
  3085  001A32  8427               	bsf	frexp@value+2,2,c
  3086  001A34  8627               	bsf	frexp@value+2,3,c
  3087  001A36  8827               	bsf	frexp@value+2,4,c
  3088  001A38  8A27               	bsf	frexp@value+2,5,c
  3089  001A3A  9C27               	bcf	frexp@value+2,6,c
  3090  001A3C  9E26               	bcf	frexp@value+1,7,c
  3091  001A3E  0012               	return	
  3092  001A40                     __end_of_frexp:
  3093                           	opt stack 0
  3094                           tblptru	equ	0xFF8
  3095                           tblptrh	equ	0xFF7
  3096                           tblptrl	equ	0xFF6
  3097                           tablat	equ	0xFF5
  3098                           prodh	equ	0xFF4
  3099                           prodl	equ	0xFF3
  3100                           intcon	equ	0xFF2
  3101                           postinc0	equ	0xFEE
  3102                           wreg	equ	0xFE8
  3103                           indf1	equ	0xFE7
  3104                           postdec1	equ	0xFE5
  3105                           fsr1h	equ	0xFE2
  3106                           fsr1l	equ	0xFE1
  3107                           indf2	equ	0xFDF
  3108                           postinc2	equ	0xFDE
  3109                           postdec2	equ	0xFDD
  3110                           fsr2h	equ	0xFDA
  3111                           fsr2l	equ	0xFD9
  3112                           status	equ	0xFD8
  3113                           
  3114 ;; *************** function ___fttol *****************
  3115 ;; Defined at:
  3116 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  3117 ;; Parameters:    Size  Location     Type
  3118 ;;  f1              3   59[COMRAM] float 
  3119 ;; Auto vars:     Size  Location     Type
  3120 ;;  lval            4   69[COMRAM] unsigned long 
  3121 ;;  exp1            1   73[COMRAM] unsigned char 
  3122 ;;  sign1           1   68[COMRAM] unsigned char 
  3123 ;; Return value:  Size  Location     Type
  3124 ;;                  4   59[COMRAM] long 
  3125 ;; Registers used:
  3126 ;;		wreg, status,2, status,0
  3127 ;; Tracked objects:
  3128 ;;		On entry : 0/0
  3129 ;;		On exit  : 0/0
  3130 ;;		Unchanged: 0/0
  3131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3132 ;;      Params:         4       0       0       0       0       0       0
  3133 ;;      Locals:         6       0       0       0       0       0       0
  3134 ;;      Temps:          5       0       0       0       0       0       0
  3135 ;;      Totals:        15       0       0       0       0       0       0
  3136 ;;Total ram usage:       15 bytes
  3137 ;; Hardware stack levels used:    1
  3138 ;; Hardware stack levels required when called:    2
  3139 ;; This function calls:
  3140 ;;		Nothing
  3141 ;; This function is called by:
  3142 ;;		_main
  3143 ;;		_exp
  3144 ;;		_floor
  3145 ;; This function uses a non-reentrant model
  3146 ;;
  3147                           
  3148                           	psect	text5
  3149  00129A                     __ptext5:
  3150                           	opt stack 0
  3151  00129A                     ___fttol:
  3152                           	opt stack 26
  3153                           
  3154                           ;incstack = 0
  3155  00129A  C03E  F040         	movff	___fttol@f1+2,??___fttol
  3156  00129E  6A41               	clrf	(??___fttol+1)& (0+255),c
  3157  0012A0  6A42               	clrf	(??___fttol+2)& (0+255),c
  3158  0012A2  343D               	rlcf	___fttol@f1+1,w,c
  3159  0012A4  3640               	rlcf	??___fttol& (0+255),f,c
  3160  0012A6  E301               	bnc	u1821
  3161  0012A8  8041               	bsf	(??___fttol+1)& (0+255),0,c
  3162  0012AA                     u1821:
  3163  0012AA  5040               	movf	??___fttol,w,c
  3164  0012AC  6E4A               	movwf	___fttol@exp1,c
  3165  0012AE  504A               	movf	___fttol@exp1,w,c
  3166  0012B0  A4D8               	btfss	status,2,c
  3167  0012B2  D009               	goto	l707
  3168  0012B4  0E00               	movlw	0
  3169  0012B6  6E3C               	movwf	?___fttol,c
  3170  0012B8  0E00               	movlw	0
  3171  0012BA  6E3D               	movwf	?___fttol+1,c
  3172  0012BC  0E00               	movlw	0
  3173  0012BE  6E3E               	movwf	?___fttol+2,c
  3174  0012C0  0E00               	movlw	0
  3175  0012C2  6E3F               	movwf	?___fttol+3,c
  3176  0012C4  0012               	return	
  3177  0012C6                     l707:
  3178  0012C6  0E17               	movlw	23
  3179  0012C8  6E40               	movwf	??___fttol& (0+255),c
  3180  0012CA  C03C  F041         	movff	___fttol@f1,??___fttol+1
  3181  0012CE  C03D  F042         	movff	___fttol@f1+1,??___fttol+2
  3182  0012D2  C03E  F043         	movff	___fttol@f1+2,??___fttol+3
  3183  0012D6  2840               	incf	??___fttol,w,c
  3184  0012D8  6E44               	movwf	(??___fttol+4)& (0+255),c
  3185  0012DA  D004               	goto	u1840
  3186  0012DC                     u1845:
  3187  0012DC  90D8               	bcf	status,0,c
  3188  0012DE  3243               	rrcf	??___fttol+3,f,c
  3189  0012E0  3242               	rrcf	??___fttol+2,f,c
  3190  0012E2  3241               	rrcf	??___fttol+1,f,c
  3191  0012E4                     u1840:
  3192  0012E4  2E44               	decfsz	(??___fttol+4)& (0+255),f,c
  3193  0012E6  D7FA               	goto	u1845
  3194  0012E8  5041               	movf	??___fttol+1,w,c
  3195  0012EA  6E45               	movwf	___fttol@sign1,c
  3196  0012EC  8E3D               	bsf	___fttol@f1+1,7,c
  3197  0012EE  0EFF               	movlw	255
  3198  0012F0  163C               	andwf	___fttol@f1,f,c
  3199  0012F2  0EFF               	movlw	255
  3200  0012F4  163D               	andwf	___fttol@f1+1,f,c
  3201  0012F6  0E00               	movlw	0
  3202  0012F8  163E               	andwf	___fttol@f1+2,f,c
  3203  0012FA  503C               	movf	___fttol@f1,w,c
  3204  0012FC  6E46               	movwf	___fttol@lval,c
  3205  0012FE  503D               	movf	___fttol@f1+1,w,c
  3206  001300  6E47               	movwf	___fttol@lval+1,c
  3207  001302  503E               	movf	___fttol@f1+2,w,c
  3208  001304  6E48               	movwf	___fttol@lval+2,c
  3209  001306  6A49               	clrf	___fttol@lval+3,c
  3210  001308  0E8E               	movlw	142
  3211  00130A  5E4A               	subwf	___fttol@exp1,f,c
  3212  00130C  AE4A               	btfss	___fttol@exp1,7,c
  3213  00130E  D016               	goto	l709
  3214  001310  504A               	movf	___fttol@exp1,w,c
  3215  001312  0A80               	xorlw	128
  3216  001314  0F8F               	addlw	143
  3217  001316  B0D8               	btfsc	status,0,c
  3218  001318  D009               	goto	l710
  3219  00131A  0E00               	movlw	0
  3220  00131C  6E3C               	movwf	?___fttol,c
  3221  00131E  0E00               	movlw	0
  3222  001320  6E3D               	movwf	?___fttol+1,c
  3223  001322  0E00               	movlw	0
  3224  001324  6E3E               	movwf	?___fttol+2,c
  3225  001326  0E00               	movlw	0
  3226  001328  6E3F               	movwf	?___fttol+3,c
  3227  00132A  0012               	return	
  3228  00132C                     l710:
  3229  00132C  90D8               	bcf	status,0,c
  3230  00132E  3249               	rrcf	___fttol@lval+3,f,c
  3231  001330  3248               	rrcf	___fttol@lval+2,f,c
  3232  001332  3247               	rrcf	___fttol@lval+1,f,c
  3233  001334  3246               	rrcf	___fttol@lval,f,c
  3234  001336  3E4A               	incfsz	___fttol@exp1,f,c
  3235  001338  D7F9               	goto	l710
  3236  00133A  D015               	goto	u1880
  3237  00133C                     l709:
  3238  00133C  0E17               	movlw	23
  3239  00133E  644A               	cpfsgt	___fttol@exp1,c
  3240  001340  D00F               	goto	l715
  3241  001342  0E00               	movlw	0
  3242  001344  6E3C               	movwf	?___fttol,c
  3243  001346  0E00               	movlw	0
  3244  001348  6E3D               	movwf	?___fttol+1,c
  3245  00134A  0E00               	movlw	0
  3246  00134C  6E3E               	movwf	?___fttol+2,c
  3247  00134E  0E00               	movlw	0
  3248  001350  6E3F               	movwf	?___fttol+3,c
  3249  001352  0012               	return	
  3250  001354  90D8               	bcf	status,0,c
  3251  001356  3646               	rlcf	___fttol@lval,f,c
  3252  001358  3647               	rlcf	___fttol@lval+1,f,c
  3253  00135A  3648               	rlcf	___fttol@lval+2,f,c
  3254  00135C  3649               	rlcf	___fttol@lval+3,f,c
  3255  00135E  064A               	decf	___fttol@exp1,f,c
  3256  001360                     l715:
  3257  001360  504A               	movf	___fttol@exp1,w,c
  3258  001362  A4D8               	btfss	status,2,c
  3259  001364  D7F7               	goto	l716
  3260  001366                     u1880:
  3261  001366  5045               	movf	___fttol@sign1,w,c
  3262  001368  B4D8               	btfsc	status,2,c
  3263  00136A  D008               	goto	l718
  3264  00136C  1E49               	comf	___fttol@lval+3,f,c
  3265  00136E  1E48               	comf	___fttol@lval+2,f,c
  3266  001370  1E47               	comf	___fttol@lval+1,f,c
  3267  001372  6C46               	negf	___fttol@lval,c
  3268  001374  0E00               	movlw	0
  3269  001376  2247               	addwfc	___fttol@lval+1,f,c
  3270  001378  2248               	addwfc	___fttol@lval+2,f,c
  3271  00137A  2249               	addwfc	___fttol@lval+3,f,c
  3272  00137C                     l718:
  3273  00137C  C046  F03C         	movff	___fttol@lval,?___fttol
  3274  001380  C047  F03D         	movff	___fttol@lval+1,?___fttol+1
  3275  001384  C048  F03E         	movff	___fttol@lval+2,?___fttol+2
  3276  001388  C049  F03F         	movff	___fttol@lval+3,?___fttol+3
  3277  00138C  0012               	return	
  3278  00138E                     __end_of___fttol:
  3279                           	opt stack 0
  3280                           tblptru	equ	0xFF8
  3281                           tblptrh	equ	0xFF7
  3282                           tblptrl	equ	0xFF6
  3283                           tablat	equ	0xFF5
  3284                           prodh	equ	0xFF4
  3285                           prodl	equ	0xFF3
  3286                           intcon	equ	0xFF2
  3287                           postinc0	equ	0xFEE
  3288                           wreg	equ	0xFE8
  3289                           indf1	equ	0xFE7
  3290                           postdec1	equ	0xFE5
  3291                           fsr1h	equ	0xFE2
  3292                           fsr1l	equ	0xFE1
  3293                           indf2	equ	0xFDF
  3294                           postinc2	equ	0xFDE
  3295                           postdec2	equ	0xFDD
  3296                           fsr2h	equ	0xFDA
  3297                           fsr2l	equ	0xFD9
  3298                           status	equ	0xFD8
  3299                           
  3300 ;; *************** function ___ftge *****************
  3301 ;; Defined at:
  3302 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  3303 ;; Parameters:    Size  Location     Type
  3304 ;;  ff1             3   36[COMRAM] float 
  3305 ;;  ff2             3   39[COMRAM] float 
  3306 ;; Auto vars:     Size  Location     Type
  3307 ;;		None
  3308 ;; Return value:  Size  Location     Type
  3309 ;;		None               void
  3310 ;; Registers used:
  3311 ;;		wreg, status,2, status,0
  3312 ;; Tracked objects:
  3313 ;;		On entry : 0/0
  3314 ;;		On exit  : 0/0
  3315 ;;		Unchanged: 0/0
  3316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3317 ;;      Params:         6       0       0       0       0       0       0
  3318 ;;      Locals:         0       0       0       0       0       0       0
  3319 ;;      Temps:          3       0       0       0       0       0       0
  3320 ;;      Totals:         9       0       0       0       0       0       0
  3321 ;;Total ram usage:        9 bytes
  3322 ;; Hardware stack levels used:    1
  3323 ;; Hardware stack levels required when called:    2
  3324 ;; This function calls:
  3325 ;;		Nothing
  3326 ;; This function is called by:
  3327 ;;		_main
  3328 ;;		_exp
  3329 ;;		_floor
  3330 ;; This function uses a non-reentrant model
  3331 ;;
  3332                           
  3333                           	psect	text6
  3334  00183A                     __ptext6:
  3335                           	opt stack 0
  3336  00183A                     ___ftge:
  3337                           	opt stack 26
  3338                           
  3339                           ;incstack = 0
  3340  00183A  AE27               	btfss	___ftge@ff1+2,7,c
  3341  00183C  D016               	goto	l679
  3342  00183E  C025  F02B         	movff	___ftge@ff1,??___ftge
  3343  001842  C026  F02C         	movff	___ftge@ff1+1,??___ftge+1
  3344  001846  C027  F02D         	movff	___ftge@ff1+2,??___ftge+2
  3345  00184A  1E2B               	comf	??___ftge,f,c
  3346  00184C  1E2C               	comf	??___ftge+1,f,c
  3347  00184E  1E2D               	comf	??___ftge+2,f,c
  3348  001850  2A2B               	incf	??___ftge,f,c
  3349  001852  0E00               	movlw	0
  3350  001854  222C               	addwfc	??___ftge+1,f,c
  3351  001856  222D               	addwfc	??___ftge+2,f,c
  3352  001858  0E00               	movlw	0
  3353  00185A  242B               	addwf	??___ftge,w,c
  3354  00185C  6E25               	movwf	___ftge@ff1,c
  3355  00185E  0E00               	movlw	0
  3356  001860  202C               	addwfc	??___ftge+1,w,c
  3357  001862  6E26               	movwf	___ftge@ff1+1,c
  3358  001864  0E80               	movlw	128
  3359  001866  202D               	addwfc	??___ftge+2,w,c
  3360  001868  6E27               	movwf	___ftge@ff1+2,c
  3361  00186A                     l679:
  3362  00186A  AE2A               	btfss	___ftge@ff2+2,7,c
  3363  00186C  D016               	goto	l680
  3364  00186E  C028  F02B         	movff	___ftge@ff2,??___ftge
  3365  001872  C029  F02C         	movff	___ftge@ff2+1,??___ftge+1
  3366  001876  C02A  F02D         	movff	___ftge@ff2+2,??___ftge+2
  3367  00187A  1E2B               	comf	??___ftge,f,c
  3368  00187C  1E2C               	comf	??___ftge+1,f,c
  3369  00187E  1E2D               	comf	??___ftge+2,f,c
  3370  001880  2A2B               	incf	??___ftge,f,c
  3371  001882  0E00               	movlw	0
  3372  001884  222C               	addwfc	??___ftge+1,f,c
  3373  001886  222D               	addwfc	??___ftge+2,f,c
  3374  001888  0E00               	movlw	0
  3375  00188A  242B               	addwf	??___ftge,w,c
  3376  00188C  6E28               	movwf	___ftge@ff2,c
  3377  00188E  0E00               	movlw	0
  3378  001890  202C               	addwfc	??___ftge+1,w,c
  3379  001892  6E29               	movwf	___ftge@ff2+1,c
  3380  001894  0E80               	movlw	128
  3381  001896  202D               	addwfc	??___ftge+2,w,c
  3382  001898  6E2A               	movwf	___ftge@ff2+2,c
  3383  00189A                     l680:
  3384  00189A  0E00               	movlw	0
  3385  00189C  1A25               	xorwf	___ftge@ff1,f,c
  3386  00189E  0E00               	movlw	0
  3387  0018A0  1A26               	xorwf	___ftge@ff1+1,f,c
  3388  0018A2  0E80               	movlw	128
  3389  0018A4  1A27               	xorwf	___ftge@ff1+2,f,c
  3390  0018A6  0E00               	movlw	0
  3391  0018A8  1A28               	xorwf	___ftge@ff2,f,c
  3392  0018AA  0E00               	movlw	0
  3393  0018AC  1A29               	xorwf	___ftge@ff2+1,f,c
  3394  0018AE  0E80               	movlw	128
  3395  0018B0  1A2A               	xorwf	___ftge@ff2+2,f,c
  3396  0018B2  5028               	movf	___ftge@ff2,w,c
  3397  0018B4  5C25               	subwf	___ftge@ff1,w,c
  3398  0018B6  5029               	movf	___ftge@ff2+1,w,c
  3399  0018B8  5826               	subwfb	___ftge@ff1+1,w,c
  3400  0018BA  502A               	movf	___ftge@ff2+2,w,c
  3401  0018BC  5827               	subwfb	___ftge@ff1+2,w,c
  3402  0018BE  B0D8               	btfsc	status,0,c
  3403  0018C0  D002               	goto	l2034
  3404  0018C2  90D8               	bcf	status,0,c
  3405  0018C4  0012               	return	
  3406  0018C6                     l2034:
  3407  0018C6  80D8               	bsf	status,0,c
  3408  0018C8  0012               	return	
  3409  0018CA                     __end_of___ftge:
  3410                           	opt stack 0
  3411                           tblptru	equ	0xFF8
  3412                           tblptrh	equ	0xFF7
  3413                           tblptrl	equ	0xFF6
  3414                           tablat	equ	0xFF5
  3415                           prodh	equ	0xFF4
  3416                           prodl	equ	0xFF3
  3417                           intcon	equ	0xFF2
  3418                           postinc0	equ	0xFEE
  3419                           wreg	equ	0xFE8
  3420                           indf1	equ	0xFE7
  3421                           postdec1	equ	0xFE5
  3422                           fsr1h	equ	0xFE2
  3423                           fsr1l	equ	0xFE1
  3424                           indf2	equ	0xFDF
  3425                           postinc2	equ	0xFDE
  3426                           postdec2	equ	0xFDD
  3427                           fsr2h	equ	0xFDA
  3428                           fsr2l	equ	0xFD9
  3429                           status	equ	0xFD8
  3430                           
  3431 ;; *************** function ___altoft *****************
  3432 ;; Defined at:
  3433 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
  3434 ;; Parameters:    Size  Location     Type
  3435 ;;  c               4   74[COMRAM] long 
  3436 ;; Auto vars:     Size  Location     Type
  3437 ;;  sign            1    1[BANK0 ] unsigned char 
  3438 ;;  exp             1    0[BANK0 ] unsigned char 
  3439 ;; Return value:  Size  Location     Type
  3440 ;;                  3   74[COMRAM] float 
  3441 ;; Registers used:
  3442 ;;		wreg, status,2, status,0, cstack
  3443 ;; Tracked objects:
  3444 ;;		On entry : 0/0
  3445 ;;		On exit  : 0/0
  3446 ;;		Unchanged: 0/0
  3447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3448 ;;      Params:         4       0       0       0       0       0       0
  3449 ;;      Locals:         0       2       0       0       0       0       0
  3450 ;;      Temps:          4       0       0       0       0       0       0
  3451 ;;      Totals:         8       2       0       0       0       0       0
  3452 ;;Total ram usage:       10 bytes
  3453 ;; Hardware stack levels used:    1
  3454 ;; Hardware stack levels required when called:    3
  3455 ;; This function calls:
  3456 ;;		___ftpack
  3457 ;; This function is called by:
  3458 ;;		_floor
  3459 ;; This function uses a non-reentrant model
  3460 ;;
  3461                           
  3462                           	psect	text7
  3463  00194E                     __ptext7:
  3464                           	opt stack 0
  3465  00194E                     ___altoft:
  3466                           	opt stack 25
  3467                           
  3468                           ;incstack = 0
  3469  00194E  0E00               	movlw	0
  3470  001950  0100               	movlb	0	; () banked
  3471  001952  6F81               	movwf	___altoft@sign& (0+255),b
  3472  001954  0E8E               	movlw	142
  3473  001956  6F80               	movwf	___altoft@exp& (0+255),b
  3474                           
  3475                           ; BSR set to: 0
  3476  001958  AE4E               	btfss	___altoft@c+3,7,c
  3477  00195A  D011               	goto	l433
  3478                           
  3479                           ; BSR set to: 0
  3480  00195C  1E4E               	comf	___altoft@c+3,f,c
  3481  00195E  1E4D               	comf	___altoft@c+2,f,c
  3482  001960  1E4C               	comf	___altoft@c+1,f,c
  3483  001962  6C4B               	negf	___altoft@c,c
  3484  001964  0E00               	movlw	0
  3485  001966  224C               	addwfc	___altoft@c+1,f,c
  3486  001968  224D               	addwfc	___altoft@c+2,f,c
  3487  00196A  224E               	addwfc	___altoft@c+3,f,c
  3488                           
  3489                           ; BSR set to: 0
  3490  00196C  0E01               	movlw	1
  3491  00196E  6F81               	movwf	___altoft@sign& (0+255),b
  3492                           
  3493                           ; BSR set to: 0
  3494  001970  D006               	goto	l433
  3495  001972                     
  3496                           ; BSR set to: 0
  3497                           
  3498                           ; BSR set to: 0
  3499  001972  90D8               	bcf	status,0,c
  3500  001974  324E               	rrcf	___altoft@c+3,f,c
  3501  001976  324D               	rrcf	___altoft@c+2,f,c
  3502  001978  324C               	rrcf	___altoft@c+1,f,c
  3503  00197A  324B               	rrcf	___altoft@c,f,c
  3504  00197C  2B80               	incf	___altoft@exp& (0+255),f,b
  3505  00197E                     l433:
  3506                           
  3507                           ; BSR set to: 0
  3508                           
  3509                           ; BSR set to: 0
  3510  00197E  0E00               	movlw	0
  3511  001980  144B               	andwf	___altoft@c,w,c
  3512  001982  6E4F               	movwf	??___altoft& (0+255),c
  3513  001984  0E00               	movlw	0
  3514  001986  144C               	andwf	___altoft@c+1,w,c
  3515  001988  6E50               	movwf	(??___altoft+1)& (0+255),c
  3516  00198A  0E00               	movlw	0
  3517  00198C  144D               	andwf	___altoft@c+2,w,c
  3518  00198E  6E51               	movwf	(??___altoft+2)& (0+255),c
  3519  001990  0EFF               	movlw	255
  3520  001992  144E               	andwf	___altoft@c+3,w,c
  3521  001994  6E52               	movwf	(??___altoft+3)& (0+255),c
  3522  001996  504F               	movf	??___altoft,w,c
  3523  001998  1050               	iorwf	??___altoft+1,w,c
  3524  00199A  1051               	iorwf	??___altoft+2,w,c
  3525  00199C  1052               	iorwf	??___altoft+3,w,c
  3526  00199E  A4D8               	btfss	status,2,c
  3527  0019A0  D7E8               	goto	l434
  3528                           
  3529                           ; BSR set to: 0
  3530                           
  3531                           ; BSR set to: 0
  3532  0019A2  C04B  F025         	movff	___altoft@c,___ftpack@arg
  3533  0019A6  C04C  F026         	movff	___altoft@c+1,___ftpack@arg+1
  3534  0019AA  C04D  F027         	movff	___altoft@c+2,___ftpack@arg+2
  3535  0019AE  C080  F028         	movff	___altoft@exp,___ftpack@exp
  3536  0019B2  C081  F029         	movff	___altoft@sign,___ftpack@sign
  3537  0019B6  EC7B  F00B         	call	___ftpack	;wreg free
  3538  0019BA  C025  F04B         	movff	?___ftpack,?___altoft
  3539  0019BE  C026  F04C         	movff	?___ftpack+1,?___altoft+1
  3540  0019C2  C027  F04D         	movff	?___ftpack+2,?___altoft+2
  3541  0019C6  0012               	return	
  3542  0019C8                     __end_of___altoft:
  3543                           	opt stack 0
  3544                           tblptru	equ	0xFF8
  3545                           tblptrh	equ	0xFF7
  3546                           tblptrl	equ	0xFF6
  3547                           tablat	equ	0xFF5
  3548                           prodh	equ	0xFF4
  3549                           prodl	equ	0xFF3
  3550                           intcon	equ	0xFF2
  3551                           postinc0	equ	0xFEE
  3552                           wreg	equ	0xFE8
  3553                           indf1	equ	0xFE7
  3554                           postdec1	equ	0xFE5
  3555                           fsr1h	equ	0xFE2
  3556                           fsr1l	equ	0xFE1
  3557                           indf2	equ	0xFDF
  3558                           postinc2	equ	0xFDE
  3559                           postdec2	equ	0xFDD
  3560                           fsr2h	equ	0xFDA
  3561                           fsr2l	equ	0xFD9
  3562                           status	equ	0xFD8
  3563                           
  3564 ;; *************** function _eval_poly *****************
  3565 ;; Defined at:
  3566 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
  3567 ;; Parameters:    Size  Location     Type
  3568 ;;  x               3   27[BANK0 ] float 
  3569 ;;  d               2   30[BANK0 ] PTR const 
  3570 ;;		 -> exp@coeff(30), 
  3571 ;;  n               2   32[BANK0 ] int 
  3572 ;; Auto vars:     Size  Location     Type
  3573 ;;  res             3   36[BANK0 ] int 
  3574 ;; Return value:  Size  Location     Type
  3575 ;;                  3   27[BANK0 ] int 
  3576 ;; Registers used:
  3577 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3578 ;; Tracked objects:
  3579 ;;		On entry : 0/0
  3580 ;;		On exit  : 0/0
  3581 ;;		Unchanged: 0/0
  3582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3583 ;;      Params:         0       7       0       0       0       0       0
  3584 ;;      Locals:         0       3       0       0       0       0       0
  3585 ;;      Temps:          0       2       0       0       0       0       0
  3586 ;;      Totals:         0      12       0       0       0       0       0
  3587 ;;Total ram usage:       12 bytes
  3588 ;; Hardware stack levels used:    1
  3589 ;; Hardware stack levels required when called:    4
  3590 ;; This function calls:
  3591 ;;		___ftadd
  3592 ;;		___ftmul
  3593 ;;		___wmul
  3594 ;; This function is called by:
  3595 ;;		_exp
  3596 ;; This function uses a non-reentrant model
  3597 ;;
  3598                           
  3599                           	psect	text8
  3600  001556                     __ptext8:
  3601                           	opt stack 0
  3602  001556                     _eval_poly:
  3603                           	opt stack 25
  3604                           
  3605                           ;incstack = 0
  3606  001556  C0A0  F025         	movff	eval_poly@n,___wmul@multiplier
  3607  00155A  C0A1  F026         	movff	eval_poly@n+1,___wmul@multiplier+1
  3608  00155E  0E00               	movlw	0
  3609  001560  6E28               	movwf	___wmul@multiplicand+1,c
  3610  001562  0E03               	movlw	3
  3611  001564  6E27               	movwf	___wmul@multiplicand,c
  3612  001566  EC0C  F00E         	call	___wmul	;wreg free
  3613  00156A  C09E  F0A2         	movff	eval_poly@d,??_eval_poly
  3614  00156E  C09F  F0A3         	movff	eval_poly@d+1,??_eval_poly+1
  3615  001572  5025               	movf	?___wmul,w,c
  3616  001574  0100               	movlb	0	; () banked
  3617  001576  27A2               	addwf	??_eval_poly& (0+255),f,b
  3618  001578  5026               	movf	?___wmul+1,w,c
  3619  00157A  23A3               	addwfc	(??_eval_poly+1)& (0+255),f,b
  3620  00157C  C0A2  FFF6         	movff	??_eval_poly,tblptrl
  3621  001580  C0A3  FFF7         	movff	??_eval_poly+1,tblptrh
  3622  001584                     	if	0	;tblptru may be non-zero
  3623  001584                     	endif
  3624  001584                     	if	0	;tblptru may be non-zero
  3625  001584                     	endif
  3626  001584  0009               	tblrd		*+
  3627  001586  CFF5 F0A4          	movff	tablat,eval_poly@res
  3628  00158A  0009               	tblrd		*+
  3629  00158C  CFF5 F0A5          	movff	tablat,eval_poly@res+1
  3630  001590  000A               	tblrd		*-
  3631  001592  CFF5 F0A6          	movff	tablat,eval_poly@res+2
  3632  001596  D040               	goto	l961
  3633  001598                     
  3634                           ; BSR set to: 0
  3635                           
  3636                           ; BSR set to: 0
  3637  001598  C0A4  F083         	movff	eval_poly@res,___ftmul@f2
  3638  00159C  C0A5  F084         	movff	eval_poly@res+1,___ftmul@f2+1
  3639  0015A0  C0A6  F085         	movff	eval_poly@res+2,___ftmul@f2+2
  3640  0015A4  C09B  F080         	movff	eval_poly@x,___ftmul@f1
  3641  0015A8  C09C  F081         	movff	eval_poly@x+1,___ftmul@f1+1
  3642  0015AC  C09D  F082         	movff	eval_poly@x+2,___ftmul@f1+2
  3643  0015B0  ECD2  F008         	call	___ftmul	;wreg free
  3644  0015B4  C080  F08F         	movff	?___ftmul,___ftadd@f1
  3645  0015B8  C081  F090         	movff	?___ftmul+1,___ftadd@f1+1
  3646  0015BC  C082  F091         	movff	?___ftmul+2,___ftadd@f1+2
  3647  0015C0  0E00               	movlw	0
  3648  0015C2  6E28               	movwf	___wmul@multiplicand+1,c
  3649  0015C4  0E03               	movlw	3
  3650  0015C6  6E27               	movwf	___wmul@multiplicand,c
  3651  0015C8  0100               	movlb	0	; () banked
  3652  0015CA  07A0               	decf	eval_poly@n& (0+255),f,b
  3653  0015CC  A0D8               	btfss	status,0,c
  3654  0015CE  07A1               	decf	(eval_poly@n+1)& (0+255),f,b
  3655  0015D0  C0A0  F025         	movff	eval_poly@n,___wmul@multiplier
  3656  0015D4  C0A1  F026         	movff	eval_poly@n+1,___wmul@multiplier+1
  3657  0015D8  EC0C  F00E         	call	___wmul	;wreg free
  3658  0015DC  C09E  F0A2         	movff	eval_poly@d,??_eval_poly
  3659  0015E0  C09F  F0A3         	movff	eval_poly@d+1,??_eval_poly+1
  3660  0015E4  5025               	movf	?___wmul,w,c
  3661  0015E6  0100               	movlb	0	; () banked
  3662  0015E8  27A2               	addwf	??_eval_poly& (0+255),f,b
  3663  0015EA  5026               	movf	?___wmul+1,w,c
  3664  0015EC  23A3               	addwfc	(??_eval_poly+1)& (0+255),f,b
  3665  0015EE  C0A2  FFF6         	movff	??_eval_poly,tblptrl
  3666  0015F2  C0A3  FFF7         	movff	??_eval_poly+1,tblptrh
  3667  0015F6                     	if	0	;tblptru may be non-zero
  3668  0015F6                     	endif
  3669  0015F6                     	if	0	;tblptru may be non-zero
  3670  0015F6                     	endif
  3671  0015F6  0009               	tblrd		*+
  3672  0015F8  CFF5 F092          	movff	tablat,___ftadd@f2
  3673  0015FC  0009               	tblrd		*+
  3674  0015FE  CFF5 F093          	movff	tablat,___ftadd@f2+1
  3675  001602  000A               	tblrd		*-
  3676  001604  CFF5 F094          	movff	tablat,___ftadd@f2+2
  3677  001608  ECFB  F007         	call	___ftadd	;wreg free
  3678  00160C  C08F  F0A4         	movff	?___ftadd,eval_poly@res
  3679  001610  C090  F0A5         	movff	?___ftadd+1,eval_poly@res+1
  3680  001614  C091  F0A6         	movff	?___ftadd+2,eval_poly@res+2
  3681  001618                     l961:
  3682  001618  0100               	movlb	0	; () banked
  3683  00161A  51A0               	movf	eval_poly@n& (0+255),w,b
  3684  00161C  11A1               	iorwf	(eval_poly@n+1)& (0+255),w,b
  3685  00161E  A4D8               	btfss	status,2,c
  3686  001620  D7BB               	goto	l962
  3687                           
  3688                           ; BSR set to: 0
  3689  001622  C0A4  F09B         	movff	eval_poly@res,?_eval_poly
  3690  001626  C0A5  F09C         	movff	eval_poly@res+1,?_eval_poly+1
  3691  00162A  C0A6  F09D         	movff	eval_poly@res+2,?_eval_poly+2
  3692                           
  3693                           ; BSR set to: 0
  3694  00162E  0012               	return		;funcret
  3695  001630                     __end_of_eval_poly:
  3696                           	opt stack 0
  3697                           tblptru	equ	0xFF8
  3698                           tblptrh	equ	0xFF7
  3699                           tblptrl	equ	0xFF6
  3700                           tablat	equ	0xFF5
  3701                           prodh	equ	0xFF4
  3702                           prodl	equ	0xFF3
  3703                           intcon	equ	0xFF2
  3704                           postinc0	equ	0xFEE
  3705                           wreg	equ	0xFE8
  3706                           indf1	equ	0xFE7
  3707                           postdec1	equ	0xFE5
  3708                           fsr1h	equ	0xFE2
  3709                           fsr1l	equ	0xFE1
  3710                           indf2	equ	0xFDF
  3711                           postinc2	equ	0xFDE
  3712                           postdec2	equ	0xFDD
  3713                           fsr2h	equ	0xFDA
  3714                           fsr2l	equ	0xFD9
  3715                           status	equ	0xFD8
  3716                           
  3717 ;; *************** function ___wmul *****************
  3718 ;; Defined at:
  3719 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3720 ;; Parameters:    Size  Location     Type
  3721 ;;  multiplier      2   36[COMRAM] unsigned int 
  3722 ;;  multiplicand    2   38[COMRAM] unsigned int 
  3723 ;; Auto vars:     Size  Location     Type
  3724 ;;  product         2   40[COMRAM] unsigned int 
  3725 ;; Return value:  Size  Location     Type
  3726 ;;                  2   36[COMRAM] unsigned int 
  3727 ;; Registers used:
  3728 ;;		wreg, status,2, status,0, prodl, prodh
  3729 ;; Tracked objects:
  3730 ;;		On entry : 0/0
  3731 ;;		On exit  : 0/0
  3732 ;;		Unchanged: 0/0
  3733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3734 ;;      Params:         4       0       0       0       0       0       0
  3735 ;;      Locals:         2       0       0       0       0       0       0
  3736 ;;      Temps:          0       0       0       0       0       0       0
  3737 ;;      Totals:         6       0       0       0       0       0       0
  3738 ;;Total ram usage:        6 bytes
  3739 ;; Hardware stack levels used:    1
  3740 ;; Hardware stack levels required when called:    2
  3741 ;; This function calls:
  3742 ;;		Nothing
  3743 ;; This function is called by:
  3744 ;;		_eval_poly
  3745 ;; This function uses a non-reentrant model
  3746 ;;
  3747                           
  3748                           	psect	text9
  3749  001C18                     __ptext9:
  3750                           	opt stack 0
  3751  001C18                     ___wmul:
  3752                           	opt stack 26
  3753                           
  3754                           ; BSR set to: 0
  3755                           ;incstack = 0
  3756  001C18  5025               	movf	___wmul@multiplier,w,c
  3757  001C1A  0227               	mulwf	___wmul@multiplicand,c
  3758  001C1C  CFF3 F029          	movff	prodl,___wmul@product
  3759  001C20  CFF4 F02A          	movff	prodh,___wmul@product+1
  3760  001C24  5025               	movf	___wmul@multiplier,w,c
  3761  001C26  0228               	mulwf	___wmul@multiplicand+1,c
  3762  001C28  50F3               	movf	prodl,w,c
  3763  001C2A  262A               	addwf	___wmul@product+1,f,c
  3764  001C2C  5026               	movf	___wmul@multiplier+1,w,c
  3765  001C2E  0227               	mulwf	___wmul@multiplicand,c
  3766  001C30  50F3               	movf	prodl,w,c
  3767  001C32  262A               	addwf	___wmul@product+1,f,c
  3768  001C34  C029  F025         	movff	___wmul@product,?___wmul
  3769  001C38  C02A  F026         	movff	___wmul@product+1,?___wmul+1
  3770  001C3C  0012               	return	
  3771  001C3E                     __end_of___wmul:
  3772                           	opt stack 0
  3773                           tblptru	equ	0xFF8
  3774                           tblptrh	equ	0xFF7
  3775                           tblptrl	equ	0xFF6
  3776                           tablat	equ	0xFF5
  3777                           prodh	equ	0xFF4
  3778                           prodl	equ	0xFF3
  3779                           intcon	equ	0xFF2
  3780                           postinc0	equ	0xFEE
  3781                           wreg	equ	0xFE8
  3782                           indf1	equ	0xFE7
  3783                           postdec1	equ	0xFE5
  3784                           fsr1h	equ	0xFE2
  3785                           fsr1l	equ	0xFE1
  3786                           indf2	equ	0xFDF
  3787                           postinc2	equ	0xFDE
  3788                           postdec2	equ	0xFDD
  3789                           fsr2h	equ	0xFDA
  3790                           fsr2l	equ	0xFD9
  3791                           status	equ	0xFD8
  3792                           
  3793 ;; *************** function ___ftmul *****************
  3794 ;; Defined at:
  3795 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  3796 ;; Parameters:    Size  Location     Type
  3797 ;;  f1              3    0[BANK0 ] float 
  3798 ;;  f2              3    3[BANK0 ] float 
  3799 ;; Auto vars:     Size  Location     Type
  3800 ;;  f3_as_produc    3   10[BANK0 ] unsigned um
  3801 ;;  sign            1   14[BANK0 ] unsigned char 
  3802 ;;  cntr            1   13[BANK0 ] unsigned char 
  3803 ;;  exp             1    9[BANK0 ] unsigned char 
  3804 ;; Return value:  Size  Location     Type
  3805 ;;                  3    0[BANK0 ] float 
  3806 ;; Registers used:
  3807 ;;		wreg, status,2, status,0, cstack
  3808 ;; Tracked objects:
  3809 ;;		On entry : 0/0
  3810 ;;		On exit  : 0/0
  3811 ;;		Unchanged: 0/0
  3812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3813 ;;      Params:         0       6       0       0       0       0       0
  3814 ;;      Locals:         0       6       0       0       0       0       0
  3815 ;;      Temps:          0       3       0       0       0       0       0
  3816 ;;      Totals:         0      15       0       0       0       0       0
  3817 ;;Total ram usage:       15 bytes
  3818 ;; Hardware stack levels used:    1
  3819 ;; Hardware stack levels required when called:    3
  3820 ;; This function calls:
  3821 ;;		___ftpack
  3822 ;; This function is called by:
  3823 ;;		_main
  3824 ;;		_exp
  3825 ;;		_eval_poly
  3826 ;; This function uses a non-reentrant model
  3827 ;;
  3828                           
  3829                           	psect	text10
  3830  0011A4                     __ptext10:
  3831                           	opt stack 0
  3832  0011A4                     ___ftmul:
  3833                           	opt stack 25
  3834                           
  3835                           ;incstack = 0
  3836  0011A4  C082  F086         	movff	___ftmul@f1+2,??___ftmul
  3837  0011A8  0100               	movlb	0	; () banked
  3838  0011AA  6B87               	clrf	(??___ftmul+1)& (0+255),b
  3839  0011AC  6B88               	clrf	(??___ftmul+2)& (0+255),b
  3840  0011AE  3581               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  3841  0011B0  3786               	rlcf	??___ftmul& (0+255),f,b
  3842  0011B2  E301               	bnc	u3101
  3843  0011B4  8187               	bsf	(??___ftmul+1)& (0+255),0,b
  3844  0011B6                     u3101:
  3845  0011B6  5186               	movf	??___ftmul& (0+255),w,b
  3846  0011B8  6F89               	movwf	___ftmul@exp& (0+255),b
  3847  0011BA  5189               	movf	___ftmul@exp& (0+255),w,b
  3848  0011BC  A4D8               	btfss	status,2,c
  3849  0011BE  D007               	goto	l686
  3850                           
  3851                           ; BSR set to: 0
  3852  0011C0  0E00               	movlw	0
  3853  0011C2  6F80               	movwf	?___ftmul& (0+255),b
  3854  0011C4  0E00               	movlw	0
  3855  0011C6  6F81               	movwf	(?___ftmul+1)& (0+255),b
  3856  0011C8  0E00               	movlw	0
  3857  0011CA  6F82               	movwf	(?___ftmul+2)& (0+255),b
  3858                           
  3859                           ; BSR set to: 0
  3860  0011CC  0012               	return	
  3861  0011CE                     l686:
  3862                           
  3863                           ; BSR set to: 0
  3864                           
  3865                           ; BSR set to: 0
  3866  0011CE  C085  F086         	movff	___ftmul@f2+2,??___ftmul
  3867  0011D2  6B87               	clrf	(??___ftmul+1)& (0+255),b
  3868  0011D4  6B88               	clrf	(??___ftmul+2)& (0+255),b
  3869  0011D6  3584               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  3870  0011D8  3786               	rlcf	??___ftmul& (0+255),f,b
  3871  0011DA  E301               	bnc	u3121
  3872  0011DC  8187               	bsf	(??___ftmul+1)& (0+255),0,b
  3873  0011DE                     u3121:
  3874  0011DE  5186               	movf	??___ftmul& (0+255),w,b
  3875  0011E0  6F8E               	movwf	___ftmul@sign& (0+255),b
  3876  0011E2  518E               	movf	___ftmul@sign& (0+255),w,b
  3877  0011E4  A4D8               	btfss	status,2,c
  3878  0011E6  D007               	goto	l688
  3879                           
  3880                           ; BSR set to: 0
  3881  0011E8  0E00               	movlw	0
  3882  0011EA  6F80               	movwf	?___ftmul& (0+255),b
  3883  0011EC  0E00               	movlw	0
  3884  0011EE  6F81               	movwf	(?___ftmul+1)& (0+255),b
  3885  0011F0  0E00               	movlw	0
  3886  0011F2  6F82               	movwf	(?___ftmul+2)& (0+255),b
  3887                           
  3888                           ; BSR set to: 0
  3889  0011F4  0012               	return	
  3890  0011F6                     l688:
  3891                           
  3892                           ; BSR set to: 0
  3893                           
  3894                           ; BSR set to: 0
  3895  0011F6  518E               	movf	___ftmul@sign& (0+255),w,b
  3896  0011F8  0F7B               	addlw	123
  3897  0011FA  2789               	addwf	___ftmul@exp& (0+255),f,b
  3898                           
  3899                           ; BSR set to: 0
  3900  0011FC  C082  F08E         	movff	___ftmul@f1+2,___ftmul@sign
  3901  001200  5185               	movf	(___ftmul@f2+2)& (0+255),w,b
  3902  001202  1B8E               	xorwf	___ftmul@sign& (0+255),f,b
  3903  001204  0E80               	movlw	128
  3904  001206  178E               	andwf	___ftmul@sign& (0+255),f,b
  3905                           
  3906                           ; BSR set to: 0
  3907  001208  8F81               	bsf	(___ftmul@f1+1)& (0+255),7,b
  3908                           
  3909                           ; BSR set to: 0
  3910  00120A  8F84               	bsf	(___ftmul@f2+1)& (0+255),7,b
  3911                           
  3912                           ; BSR set to: 0
  3913  00120C  0EFF               	movlw	255
  3914  00120E  1783               	andwf	___ftmul@f2& (0+255),f,b
  3915  001210  0EFF               	movlw	255
  3916  001212  1784               	andwf	(___ftmul@f2+1)& (0+255),f,b
  3917  001214  0E00               	movlw	0
  3918  001216  1785               	andwf	(___ftmul@f2+2)& (0+255),f,b
  3919                           
  3920                           ; BSR set to: 0
  3921  001218  0E00               	movlw	0
  3922  00121A  6F8A               	movwf	___ftmul@f3_as_product& (0+255),b
  3923  00121C  0E00               	movlw	0
  3924  00121E  6F8B               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  3925  001220  0E00               	movlw	0
  3926  001222  6F8C               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  3927                           
  3928                           ; BSR set to: 0
  3929  001224  0E07               	movlw	7
  3930  001226  6F8D               	movwf	___ftmul@cntr& (0+255),b
  3931  001228                     
  3932                           ; BSR set to: 0
  3933                           
  3934                           ; BSR set to: 0
  3935  001228  A180               	btfss	___ftmul@f1& (0+255),0,b
  3936  00122A  D006               	goto	l690
  3937                           
  3938                           ; BSR set to: 0
  3939  00122C  5183               	movf	___ftmul@f2& (0+255),w,b
  3940  00122E  278A               	addwf	___ftmul@f3_as_product& (0+255),f,b
  3941  001230  5184               	movf	(___ftmul@f2+1)& (0+255),w,b
  3942  001232  238B               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  3943  001234  5185               	movf	(___ftmul@f2+2)& (0+255),w,b
  3944  001236  238C               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  3945  001238                     l690:
  3946                           
  3947                           ; BSR set to: 0
  3948                           
  3949                           ; BSR set to: 0
  3950  001238  90D8               	bcf	status,0,c
  3951  00123A  3382               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  3952  00123C  3381               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  3953  00123E  3380               	rrcf	___ftmul@f1& (0+255),f,b
  3954  001240  90D8               	bcf	status,0,c
  3955  001242  3783               	rlcf	___ftmul@f2& (0+255),f,b
  3956  001244  3784               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  3957  001246  3785               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  3958                           
  3959                           ; BSR set to: 0
  3960  001248  2F8D               	decfsz	___ftmul@cntr& (0+255),f,b
  3961  00124A  D7EE               	goto	l689
  3962                           
  3963                           ; BSR set to: 0
  3964                           
  3965                           ; BSR set to: 0
  3966  00124C  0E09               	movlw	9
  3967  00124E  6F8D               	movwf	___ftmul@cntr& (0+255),b
  3968  001250                     
  3969                           ; BSR set to: 0
  3970                           
  3971                           ; BSR set to: 0
  3972  001250  A180               	btfss	___ftmul@f1& (0+255),0,b
  3973  001252  D006               	goto	l693
  3974                           
  3975                           ; BSR set to: 0
  3976  001254  5183               	movf	___ftmul@f2& (0+255),w,b
  3977  001256  278A               	addwf	___ftmul@f3_as_product& (0+255),f,b
  3978  001258  5184               	movf	(___ftmul@f2+1)& (0+255),w,b
  3979  00125A  238B               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  3980  00125C  5185               	movf	(___ftmul@f2+2)& (0+255),w,b
  3981  00125E  238C               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  3982  001260                     l693:
  3983                           
  3984                           ; BSR set to: 0
  3985                           
  3986                           ; BSR set to: 0
  3987  001260  90D8               	bcf	status,0,c
  3988  001262  3382               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  3989  001264  3381               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  3990  001266  3380               	rrcf	___ftmul@f1& (0+255),f,b
  3991  001268  90D8               	bcf	status,0,c
  3992  00126A  338C               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  3993  00126C  338B               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  3994  00126E  338A               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  3995                           
  3996                           ; BSR set to: 0
  3997  001270  2F8D               	decfsz	___ftmul@cntr& (0+255),f,b
  3998  001272  D7EE               	goto	l692
  3999                           
  4000                           ; BSR set to: 0
  4001                           
  4002                           ; BSR set to: 0
  4003  001274  C08A  F025         	movff	___ftmul@f3_as_product,___ftpack@arg
  4004  001278  C08B  F026         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4005  00127C  C08C  F027         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4006  001280  C089  F028         	movff	___ftmul@exp,___ftpack@exp
  4007  001284  C08E  F029         	movff	___ftmul@sign,___ftpack@sign
  4008  001288  EC7B  F00B         	call	___ftpack	;wreg free
  4009  00128C  C025  F080         	movff	?___ftpack,?___ftmul
  4010  001290  C026  F081         	movff	?___ftpack+1,?___ftmul+1
  4011  001294  C027  F082         	movff	?___ftpack+2,?___ftmul+2
  4012  001298  0012               	return	
  4013  00129A                     __end_of___ftmul:
  4014                           	opt stack 0
  4015                           tblptru	equ	0xFF8
  4016                           tblptrh	equ	0xFF7
  4017                           tblptrl	equ	0xFF6
  4018                           tablat	equ	0xFF5
  4019                           prodh	equ	0xFF4
  4020                           prodl	equ	0xFF3
  4021                           intcon	equ	0xFF2
  4022                           postinc0	equ	0xFEE
  4023                           wreg	equ	0xFE8
  4024                           indf1	equ	0xFE7
  4025                           postdec1	equ	0xFE5
  4026                           fsr1h	equ	0xFE2
  4027                           fsr1l	equ	0xFE1
  4028                           indf2	equ	0xFDF
  4029                           postinc2	equ	0xFDE
  4030                           postdec2	equ	0xFDD
  4031                           fsr2h	equ	0xFDA
  4032                           fsr2l	equ	0xFD9
  4033                           status	equ	0xFD8
  4034                           
  4035 ;; *************** function ___ftsub *****************
  4036 ;; Defined at:
  4037 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  4038 ;; Parameters:    Size  Location     Type
  4039 ;;  f1              3   27[BANK0 ] float 
  4040 ;;  f2              3   30[BANK0 ] float 
  4041 ;; Auto vars:     Size  Location     Type
  4042 ;;		None
  4043 ;; Return value:  Size  Location     Type
  4044 ;;                  3   27[BANK0 ] float 
  4045 ;; Registers used:
  4046 ;;		wreg, status,2, status,0, cstack
  4047 ;; Tracked objects:
  4048 ;;		On entry : 0/0
  4049 ;;		On exit  : 0/0
  4050 ;;		Unchanged: 0/0
  4051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4052 ;;      Params:         0       6       0       0       0       0       0
  4053 ;;      Locals:         0       0       0       0       0       0       0
  4054 ;;      Temps:          0       0       0       0       0       0       0
  4055 ;;      Totals:         0       6       0       0       0       0       0
  4056 ;;Total ram usage:        6 bytes
  4057 ;; Hardware stack levels used:    1
  4058 ;; Hardware stack levels required when called:    4
  4059 ;; This function calls:
  4060 ;;		___ftadd
  4061 ;; This function is called by:
  4062 ;;		_exp
  4063 ;; This function uses a non-reentrant model
  4064 ;;
  4065                           
  4066                           	psect	text11
  4067  001A8C                     __ptext11:
  4068                           	opt stack 0
  4069  001A8C                     ___ftsub:
  4070                           	opt stack 25
  4071                           
  4072                           ;incstack = 0
  4073  001A8C  0100               	movlb	0	; () banked
  4074  001A8E  519E               	movf	___ftsub@f2& (0+255),w,b
  4075  001A90  119F               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  4076  001A92  11A0               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  4077  001A94  B4D8               	btfsc	status,2,c
  4078  001A96  D006               	goto	l703
  4079                           
  4080                           ; BSR set to: 0
  4081  001A98  0E00               	movlw	0
  4082  001A9A  1B9E               	xorwf	___ftsub@f2& (0+255),f,b
  4083  001A9C  0E00               	movlw	0
  4084  001A9E  1B9F               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  4085  001AA0  0E80               	movlw	128
  4086  001AA2  1BA0               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  4087  001AA4                     l703:
  4088                           
  4089                           ; BSR set to: 0
  4090                           
  4091                           ; BSR set to: 0
  4092  001AA4  C09B  F08F         	movff	___ftsub@f1,___ftadd@f1
  4093  001AA8  C09C  F090         	movff	___ftsub@f1+1,___ftadd@f1+1
  4094  001AAC  C09D  F091         	movff	___ftsub@f1+2,___ftadd@f1+2
  4095  001AB0  C09E  F092         	movff	___ftsub@f2,___ftadd@f2
  4096  001AB4  C09F  F093         	movff	___ftsub@f2+1,___ftadd@f2+1
  4097  001AB8  C0A0  F094         	movff	___ftsub@f2+2,___ftadd@f2+2
  4098  001ABC  ECFB  F007         	call	___ftadd	;wreg free
  4099  001AC0  C08F  F09B         	movff	?___ftadd,?___ftsub
  4100  001AC4  C090  F09C         	movff	?___ftadd+1,?___ftsub+1
  4101  001AC8  C091  F09D         	movff	?___ftadd+2,?___ftsub+2
  4102  001ACC  0012               	return	
  4103  001ACE                     __end_of___ftsub:
  4104                           	opt stack 0
  4105                           tblptru	equ	0xFF8
  4106                           tblptrh	equ	0xFF7
  4107                           tblptrl	equ	0xFF6
  4108                           tablat	equ	0xFF5
  4109                           prodh	equ	0xFF4
  4110                           prodl	equ	0xFF3
  4111                           intcon	equ	0xFF2
  4112                           postinc0	equ	0xFEE
  4113                           wreg	equ	0xFE8
  4114                           indf1	equ	0xFE7
  4115                           postdec1	equ	0xFE5
  4116                           fsr1h	equ	0xFE2
  4117                           fsr1l	equ	0xFE1
  4118                           indf2	equ	0xFDF
  4119                           postinc2	equ	0xFDE
  4120                           postdec2	equ	0xFDD
  4121                           fsr2h	equ	0xFDA
  4122                           fsr2l	equ	0xFD9
  4123                           status	equ	0xFD8
  4124                           
  4125 ;; *************** function ___ftadd *****************
  4126 ;; Defined at:
  4127 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  4128 ;; Parameters:    Size  Location     Type
  4129 ;;  f1              3   15[BANK0 ] float 
  4130 ;;  f2              3   18[BANK0 ] float 
  4131 ;; Auto vars:     Size  Location     Type
  4132 ;;  exp1            1   26[BANK0 ] unsigned char 
  4133 ;;  exp2            1   25[BANK0 ] unsigned char 
  4134 ;;  sign            1   24[BANK0 ] unsigned char 
  4135 ;; Return value:  Size  Location     Type
  4136 ;;                  3   15[BANK0 ] float 
  4137 ;; Registers used:
  4138 ;;		wreg, status,2, status,0, cstack
  4139 ;; Tracked objects:
  4140 ;;		On entry : 0/0
  4141 ;;		On exit  : 0/0
  4142 ;;		Unchanged: 0/0
  4143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4144 ;;      Params:         0       6       0       0       0       0       0
  4145 ;;      Locals:         0       3       0       0       0       0       0
  4146 ;;      Temps:          0       3       0       0       0       0       0
  4147 ;;      Totals:         0      12       0       0       0       0       0
  4148 ;;Total ram usage:       12 bytes
  4149 ;; Hardware stack levels used:    1
  4150 ;; Hardware stack levels required when called:    3
  4151 ;; This function calls:
  4152 ;;		___ftpack
  4153 ;; This function is called by:
  4154 ;;		_main
  4155 ;;		_floor
  4156 ;;		___ftsub
  4157 ;;		_eval_poly
  4158 ;; This function uses a non-reentrant model
  4159 ;;
  4160                           
  4161                           	psect	text12
  4162  000FF6                     __ptext12:
  4163                           	opt stack 0
  4164  000FF6                     ___ftadd:
  4165                           	opt stack 25
  4166                           
  4167                           ;incstack = 0
  4168  000FF6  C091  F095         	movff	___ftadd@f1+2,??___ftadd
  4169  000FFA  0100               	movlb	0	; () banked
  4170  000FFC  6B96               	clrf	(??___ftadd+1)& (0+255),b
  4171  000FFE  6B97               	clrf	(??___ftadd+2)& (0+255),b
  4172  001000  3590               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  4173  001002  3795               	rlcf	??___ftadd& (0+255),f,b
  4174  001004  E301               	bnc	u2891
  4175  001006  8196               	bsf	(??___ftadd+1)& (0+255),0,b
  4176  001008                     u2891:
  4177  001008  5195               	movf	??___ftadd& (0+255),w,b
  4178  00100A  6F9A               	movwf	___ftadd@exp1& (0+255),b
  4179  00100C  C094  F095         	movff	___ftadd@f2+2,??___ftadd
  4180  001010  6B96               	clrf	(??___ftadd+1)& (0+255),b
  4181  001012  6B97               	clrf	(??___ftadd+2)& (0+255),b
  4182  001014  3593               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  4183  001016  3795               	rlcf	??___ftadd& (0+255),f,b
  4184  001018  E301               	bnc	u2901
  4185  00101A  8196               	bsf	(??___ftadd+1)& (0+255),0,b
  4186  00101C                     u2901:
  4187  00101C  5195               	movf	??___ftadd& (0+255),w,b
  4188  00101E  6F99               	movwf	___ftadd@exp2& (0+255),b
  4189                           
  4190                           ; BSR set to: 0
  4191  001020  519A               	movf	___ftadd@exp1& (0+255),w,b
  4192  001022  B4D8               	btfsc	status,2,c
  4193  001024  D00B               	goto	u2930
  4194                           
  4195                           ; BSR set to: 0
  4196  001026  5199               	movf	___ftadd@exp2& (0+255),w,b
  4197  001028  5D9A               	subwf	___ftadd@exp1& (0+255),w,b
  4198  00102A  B0D8               	btfsc	status,0,c
  4199  00102C  D00E               	goto	l638
  4200                           
  4201                           ; BSR set to: 0
  4202  00102E  519A               	movf	___ftadd@exp1& (0+255),w,b
  4203  001030  0800               	sublw	0
  4204  001032  2599               	addwf	___ftadd@exp2& (0+255),w,b
  4205  001034  6F95               	movwf	??___ftadd& (0+255),b
  4206  001036  0E18               	movlw	24
  4207  001038  6595               	cpfsgt	??___ftadd& (0+255),b
  4208  00103A  D007               	goto	l638
  4209  00103C                     u2930:
  4210                           
  4211                           ; BSR set to: 0
  4212  00103C  C092  F08F         	movff	___ftadd@f2,?___ftadd
  4213  001040  C093  F090         	movff	___ftadd@f2+1,?___ftadd+1
  4214  001044  C094  F091         	movff	___ftadd@f2+2,?___ftadd+2
  4215  001048  0012               	return	
  4216  00104A                     l638:
  4217                           
  4218                           ; BSR set to: 0
  4219                           
  4220                           ; BSR set to: 0
  4221  00104A  5199               	movf	___ftadd@exp2& (0+255),w,b
  4222  00104C  B4D8               	btfsc	status,2,c
  4223  00104E  D00B               	goto	u2960
  4224                           
  4225                           ; BSR set to: 0
  4226  001050  519A               	movf	___ftadd@exp1& (0+255),w,b
  4227  001052  5D99               	subwf	___ftadd@exp2& (0+255),w,b
  4228  001054  B0D8               	btfsc	status,0,c
  4229  001056  D00E               	goto	l642
  4230                           
  4231                           ; BSR set to: 0
  4232  001058  5199               	movf	___ftadd@exp2& (0+255),w,b
  4233  00105A  0800               	sublw	0
  4234  00105C  259A               	addwf	___ftadd@exp1& (0+255),w,b
  4235  00105E  6F95               	movwf	??___ftadd& (0+255),b
  4236  001060  0E18               	movlw	24
  4237  001062  6595               	cpfsgt	??___ftadd& (0+255),b
  4238  001064  D007               	goto	l642
  4239  001066                     u2960:
  4240                           
  4241                           ; BSR set to: 0
  4242  001066  C08F  F08F         	movff	___ftadd@f1,?___ftadd
  4243  00106A  C090  F090         	movff	___ftadd@f1+1,?___ftadd+1
  4244  00106E  C091  F091         	movff	___ftadd@f1+2,?___ftadd+2
  4245  001072  0012               	return	
  4246  001074                     l642:
  4247                           
  4248                           ; BSR set to: 0
  4249                           
  4250                           ; BSR set to: 0
  4251  001074  0E06               	movlw	6
  4252  001076  6F98               	movwf	___ftadd@sign& (0+255),b
  4253                           
  4254                           ; BSR set to: 0
  4255  001078  BF91               	btfsc	(___ftadd@f1+2)& (0+255),7,b
  4256                           
  4257                           ; BSR set to: 0
  4258  00107A  8F98               	bsf	___ftadd@sign& (0+255),7,b
  4259                           
  4260                           ; BSR set to: 0
  4261                           
  4262                           ; BSR set to: 0
  4263  00107C  BF94               	btfsc	(___ftadd@f2+2)& (0+255),7,b
  4264                           
  4265                           ; BSR set to: 0
  4266  00107E  8D98               	bsf	___ftadd@sign& (0+255),6,b
  4267                           
  4268                           ; BSR set to: 0
  4269  001080  8F90               	bsf	(___ftadd@f1+1)& (0+255),7,b
  4270                           
  4271                           ; BSR set to: 0
  4272  001082  0EFF               	movlw	255
  4273  001084  178F               	andwf	___ftadd@f1& (0+255),f,b
  4274  001086  0EFF               	movlw	255
  4275  001088  1790               	andwf	(___ftadd@f1+1)& (0+255),f,b
  4276  00108A  0E00               	movlw	0
  4277  00108C  1791               	andwf	(___ftadd@f1+2)& (0+255),f,b
  4278  00108E  8F93               	bsf	(___ftadd@f2+1)& (0+255),7,b
  4279                           
  4280                           ; BSR set to: 0
  4281  001090  0EFF               	movlw	255
  4282  001092  1792               	andwf	___ftadd@f2& (0+255),f,b
  4283  001094  0EFF               	movlw	255
  4284  001096  1793               	andwf	(___ftadd@f2+1)& (0+255),f,b
  4285  001098  0E00               	movlw	0
  4286  00109A  1794               	andwf	(___ftadd@f2+2)& (0+255),f,b
  4287                           
  4288                           ; BSR set to: 0
  4289  00109C  5199               	movf	___ftadd@exp2& (0+255),w,b
  4290  00109E  5D9A               	subwf	___ftadd@exp1& (0+255),w,b
  4291  0010A0  B0D8               	btfsc	status,0,c
  4292  0010A2  D01B               	goto	l647
  4293  0010A4                     u2990:
  4294                           
  4295                           ; BSR set to: 0
  4296                           
  4297                           ; BSR set to: 0
  4298  0010A4  90D8               	bcf	status,0,c
  4299  0010A6  3792               	rlcf	___ftadd@f2& (0+255),f,b
  4300  0010A8  3793               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  4301  0010AA  3794               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  4302  0010AC  0799               	decf	___ftadd@exp2& (0+255),f,b
  4303                           
  4304                           ; BSR set to: 0
  4305  0010AE  519A               	movf	___ftadd@exp1& (0+255),w,b
  4306  0010B0  1999               	xorwf	___ftadd@exp2& (0+255),w,b
  4307  0010B2  B4D8               	btfsc	status,2,c
  4308  0010B4  D00D               	goto	l652
  4309                           
  4310                           ; BSR set to: 0
  4311  0010B6  0798               	decf	___ftadd@sign& (0+255),f,b
  4312  0010B8  C098  F095         	movff	___ftadd@sign,??___ftadd
  4313  0010BC  0E07               	movlw	7
  4314  0010BE  1795               	andwf	??___ftadd& (0+255),f,b
  4315  0010C0  B4D8               	btfsc	status,2,c
  4316  0010C2  D006               	goto	l652
  4317  0010C4  D7EF               	goto	u2990
  4318  0010C6                     
  4319                           ; BSR set to: 0
  4320                           
  4321                           ; BSR set to: 0
  4322  0010C6  90D8               	bcf	status,0,c
  4323  0010C8  3391               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  4324  0010CA  3390               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  4325  0010CC  338F               	rrcf	___ftadd@f1& (0+255),f,b
  4326  0010CE  2B9A               	incf	___ftadd@exp1& (0+255),f,b
  4327  0010D0                     l652:
  4328                           
  4329                           ; BSR set to: 0
  4330                           
  4331                           ; BSR set to: 0
  4332  0010D0  5199               	movf	___ftadd@exp2& (0+255),w,b
  4333  0010D2  199A               	xorwf	___ftadd@exp1& (0+255),w,b
  4334  0010D4  B4D8               	btfsc	status,2,c
  4335  0010D6  D01F               	goto	u3060
  4336  0010D8  D7F6               	goto	l653
  4337  0010DA                     l647:
  4338                           
  4339                           ; BSR set to: 0
  4340                           
  4341                           ; BSR set to: 0
  4342  0010DA  519A               	movf	___ftadd@exp1& (0+255),w,b
  4343  0010DC  5D99               	subwf	___ftadd@exp2& (0+255),w,b
  4344  0010DE  B0D8               	btfsc	status,0,c
  4345  0010E0  D01A               	goto	u3060
  4346  0010E2                     u3030:
  4347                           
  4348                           ; BSR set to: 0
  4349                           
  4350                           ; BSR set to: 0
  4351  0010E2  90D8               	bcf	status,0,c
  4352  0010E4  378F               	rlcf	___ftadd@f1& (0+255),f,b
  4353  0010E6  3790               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  4354  0010E8  3791               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  4355  0010EA  079A               	decf	___ftadd@exp1& (0+255),f,b
  4356                           
  4357                           ; BSR set to: 0
  4358  0010EC  519A               	movf	___ftadd@exp1& (0+255),w,b
  4359  0010EE  1999               	xorwf	___ftadd@exp2& (0+255),w,b
  4360  0010F0  B4D8               	btfsc	status,2,c
  4361  0010F2  D00D               	goto	l661
  4362                           
  4363                           ; BSR set to: 0
  4364  0010F4  0798               	decf	___ftadd@sign& (0+255),f,b
  4365  0010F6  C098  F095         	movff	___ftadd@sign,??___ftadd
  4366  0010FA  0E07               	movlw	7
  4367  0010FC  1795               	andwf	??___ftadd& (0+255),f,b
  4368  0010FE  B4D8               	btfsc	status,2,c
  4369  001100  D006               	goto	l661
  4370  001102  D7EF               	goto	u3030
  4371  001104                     
  4372                           ; BSR set to: 0
  4373                           
  4374                           ; BSR set to: 0
  4375  001104  90D8               	bcf	status,0,c
  4376  001106  3394               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  4377  001108  3393               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  4378  00110A  3392               	rrcf	___ftadd@f2& (0+255),f,b
  4379  00110C  2B99               	incf	___ftadd@exp2& (0+255),f,b
  4380  00110E                     l661:
  4381                           
  4382                           ; BSR set to: 0
  4383                           
  4384                           ; BSR set to: 0
  4385  00110E  5199               	movf	___ftadd@exp2& (0+255),w,b
  4386  001110  199A               	xorwf	___ftadd@exp1& (0+255),w,b
  4387  001112  A4D8               	btfss	status,2,c
  4388  001114  D7F7               	goto	l662
  4389  001116                     u3060:
  4390                           
  4391                           ; BSR set to: 0
  4392                           
  4393                           ; BSR set to: 0
  4394                           
  4395                           ; BSR set to: 0
  4396  001116  AF98               	btfss	___ftadd@sign& (0+255),7,b
  4397  001118  D00C               	goto	l664
  4398                           
  4399                           ; BSR set to: 0
  4400  00111A  0EFF               	movlw	255
  4401  00111C  1B8F               	xorwf	___ftadd@f1& (0+255),f,b
  4402  00111E  0EFF               	movlw	255
  4403  001120  1B90               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  4404  001122  0EFF               	movlw	255
  4405  001124  1B91               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  4406  001126  0E01               	movlw	1
  4407  001128  278F               	addwf	___ftadd@f1& (0+255),f,b
  4408  00112A  0E00               	movlw	0
  4409  00112C  2390               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  4410  00112E  0E00               	movlw	0
  4411  001130  2391               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  4412  001132                     l664:
  4413                           
  4414                           ; BSR set to: 0
  4415  001132  AD98               	btfss	___ftadd@sign& (0+255),6,b
  4416  001134  D00C               	goto	l665
  4417                           
  4418                           ; BSR set to: 0
  4419  001136  0EFF               	movlw	255
  4420  001138  1B92               	xorwf	___ftadd@f2& (0+255),f,b
  4421  00113A  0EFF               	movlw	255
  4422  00113C  1B93               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  4423  00113E  0EFF               	movlw	255
  4424  001140  1B94               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  4425  001142  0E01               	movlw	1
  4426  001144  2792               	addwf	___ftadd@f2& (0+255),f,b
  4427  001146  0E00               	movlw	0
  4428  001148  2393               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  4429  00114A  0E00               	movlw	0
  4430  00114C  2394               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  4431  00114E                     l665:
  4432                           
  4433                           ; BSR set to: 0
  4434                           
  4435                           ; BSR set to: 0
  4436  00114E  0E00               	movlw	0
  4437  001150  6F98               	movwf	___ftadd@sign& (0+255),b
  4438                           
  4439                           ; BSR set to: 0
  4440  001152  518F               	movf	___ftadd@f1& (0+255),w,b
  4441  001154  2792               	addwf	___ftadd@f2& (0+255),f,b
  4442  001156  5190               	movf	(___ftadd@f1+1)& (0+255),w,b
  4443  001158  2393               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  4444  00115A  5191               	movf	(___ftadd@f1+2)& (0+255),w,b
  4445  00115C  2394               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  4446                           
  4447                           ; BSR set to: 0
  4448  00115E  AF94               	btfss	(___ftadd@f2+2)& (0+255),7,b
  4449  001160  D00E               	goto	l666
  4450                           
  4451                           ; BSR set to: 0
  4452  001162  0EFF               	movlw	255
  4453  001164  1B92               	xorwf	___ftadd@f2& (0+255),f,b
  4454  001166  0EFF               	movlw	255
  4455  001168  1B93               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  4456  00116A  0EFF               	movlw	255
  4457  00116C  1B94               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  4458  00116E  0E01               	movlw	1
  4459  001170  2792               	addwf	___ftadd@f2& (0+255),f,b
  4460  001172  0E00               	movlw	0
  4461  001174  2393               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  4462  001176  0E00               	movlw	0
  4463  001178  2394               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  4464                           
  4465                           ; BSR set to: 0
  4466  00117A  0E01               	movlw	1
  4467  00117C  6F98               	movwf	___ftadd@sign& (0+255),b
  4468  00117E                     l666:
  4469                           
  4470                           ; BSR set to: 0
  4471                           
  4472                           ; BSR set to: 0
  4473  00117E  C092  F025         	movff	___ftadd@f2,___ftpack@arg
  4474  001182  C093  F026         	movff	___ftadd@f2+1,___ftpack@arg+1
  4475  001186  C094  F027         	movff	___ftadd@f2+2,___ftpack@arg+2
  4476  00118A  C09A  F028         	movff	___ftadd@exp1,___ftpack@exp
  4477  00118E  C098  F029         	movff	___ftadd@sign,___ftpack@sign
  4478  001192  EC7B  F00B         	call	___ftpack	;wreg free
  4479  001196  C025  F08F         	movff	?___ftpack,?___ftadd
  4480  00119A  C026  F090         	movff	?___ftpack+1,?___ftadd+1
  4481  00119E  C027  F091         	movff	?___ftpack+2,?___ftadd+2
  4482  0011A2  0012               	return	
  4483  0011A4                     __end_of___ftadd:
  4484                           	opt stack 0
  4485                           tblptru	equ	0xFF8
  4486                           tblptrh	equ	0xFF7
  4487                           tblptrl	equ	0xFF6
  4488                           tablat	equ	0xFF5
  4489                           prodh	equ	0xFF4
  4490                           prodl	equ	0xFF3
  4491                           intcon	equ	0xFF2
  4492                           postinc0	equ	0xFEE
  4493                           wreg	equ	0xFE8
  4494                           indf1	equ	0xFE7
  4495                           postdec1	equ	0xFE5
  4496                           fsr1h	equ	0xFE2
  4497                           fsr1l	equ	0xFE1
  4498                           indf2	equ	0xFDF
  4499                           postinc2	equ	0xFDE
  4500                           postdec2	equ	0xFDD
  4501                           fsr2h	equ	0xFDA
  4502                           fsr2l	equ	0xFD9
  4503                           status	equ	0xFD8
  4504                           
  4505 ;; *************** function ___ftneg *****************
  4506 ;; Defined at:
  4507 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  4508 ;; Parameters:    Size  Location     Type
  4509 ;;  f1              3   78[COMRAM] float 
  4510 ;; Auto vars:     Size  Location     Type
  4511 ;;		None
  4512 ;; Return value:  Size  Location     Type
  4513 ;;                  3   78[COMRAM] float 
  4514 ;; Registers used:
  4515 ;;		wreg, status,2, status,0
  4516 ;; Tracked objects:
  4517 ;;		On entry : 0/0
  4518 ;;		On exit  : 0/0
  4519 ;;		Unchanged: 0/0
  4520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4521 ;;      Params:         3       0       0       0       0       0       0
  4522 ;;      Locals:         0       0       0       0       0       0       0
  4523 ;;      Temps:          0       0       0       0       0       0       0
  4524 ;;      Totals:         3       0       0       0       0       0       0
  4525 ;;Total ram usage:        3 bytes
  4526 ;; Hardware stack levels used:    1
  4527 ;; Hardware stack levels required when called:    2
  4528 ;; This function calls:
  4529 ;;		Nothing
  4530 ;; This function is called by:
  4531 ;;		_main
  4532 ;;		_exp
  4533 ;; This function uses a non-reentrant model
  4534 ;;
  4535                           
  4536                           	psect	text13
  4537  001C3E                     __ptext13:
  4538                           	opt stack 0
  4539  001C3E                     ___ftneg:
  4540                           	opt stack 27
  4541                           
  4542                           ;incstack = 0
  4543  001C3E  504F               	movf	___ftneg@f1,w,c
  4544  001C40  1050               	iorwf	___ftneg@f1+1,w,c
  4545  001C42  1051               	iorwf	___ftneg@f1+2,w,c
  4546  001C44  B4D8               	btfsc	status,2,c
  4547  001C46  D006               	goto	l697
  4548  001C48  0E00               	movlw	0
  4549  001C4A  1A4F               	xorwf	___ftneg@f1,f,c
  4550  001C4C  0E00               	movlw	0
  4551  001C4E  1A50               	xorwf	___ftneg@f1+1,f,c
  4552  001C50  0E80               	movlw	128
  4553  001C52  1A51               	xorwf	___ftneg@f1+2,f,c
  4554  001C54                     l697:
  4555  001C54  C04F  F04F         	movff	___ftneg@f1,?___ftneg
  4556  001C58  C050  F050         	movff	___ftneg@f1+1,?___ftneg+1
  4557  001C5C  C051  F051         	movff	___ftneg@f1+2,?___ftneg+2
  4558  001C60  0012               	return		;funcret
  4559  001C62                     __end_of___ftneg:
  4560                           	opt stack 0
  4561                           tblptru	equ	0xFF8
  4562                           tblptrh	equ	0xFF7
  4563                           tblptrl	equ	0xFF6
  4564                           tablat	equ	0xFF5
  4565                           prodh	equ	0xFF4
  4566                           prodl	equ	0xFF3
  4567                           intcon	equ	0xFF2
  4568                           postinc0	equ	0xFEE
  4569                           wreg	equ	0xFE8
  4570                           indf1	equ	0xFE7
  4571                           postdec1	equ	0xFE5
  4572                           fsr1h	equ	0xFE2
  4573                           fsr1l	equ	0xFE1
  4574                           indf2	equ	0xFDF
  4575                           postinc2	equ	0xFDE
  4576                           postdec2	equ	0xFDD
  4577                           fsr2h	equ	0xFDA
  4578                           fsr2l	equ	0xFD9
  4579                           status	equ	0xFD8
  4580                           
  4581 ;; *************** function ___ftdiv *****************
  4582 ;; Defined at:
  4583 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  4584 ;; Parameters:    Size  Location     Type
  4585 ;;  f1              3   44[COMRAM] float 
  4586 ;;  f2              3   47[COMRAM] float 
  4587 ;; Auto vars:     Size  Location     Type
  4588 ;;  f3              3   54[COMRAM] float 
  4589 ;;  sign            1   58[COMRAM] unsigned char 
  4590 ;;  exp             1   57[COMRAM] unsigned char 
  4591 ;;  cntr            1   53[COMRAM] unsigned char 
  4592 ;; Return value:  Size  Location     Type
  4593 ;;                  3   44[COMRAM] float 
  4594 ;; Registers used:
  4595 ;;		wreg, status,2, status,0, cstack
  4596 ;; Tracked objects:
  4597 ;;		On entry : 0/0
  4598 ;;		On exit  : 0/0
  4599 ;;		Unchanged: 0/0
  4600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4601 ;;      Params:         6       0       0       0       0       0       0
  4602 ;;      Locals:         6       0       0       0       0       0       0
  4603 ;;      Temps:          3       0       0       0       0       0       0
  4604 ;;      Totals:        15       0       0       0       0       0       0
  4605 ;;Total ram usage:       15 bytes
  4606 ;; Hardware stack levels used:    1
  4607 ;; Hardware stack levels required when called:    3
  4608 ;; This function calls:
  4609 ;;		___ftpack
  4610 ;; This function is called by:
  4611 ;;		_main
  4612 ;;		_exp
  4613 ;; This function uses a non-reentrant model
  4614 ;;
  4615                           
  4616                           	psect	text14
  4617  00138E                     __ptext14:
  4618                           	opt stack 0
  4619  00138E                     ___ftdiv:
  4620                           	opt stack 26
  4621                           
  4622                           ;incstack = 0
  4623  00138E  C02F  F033         	movff	___ftdiv@f1+2,??___ftdiv
  4624  001392  6A34               	clrf	(??___ftdiv+1)& (0+255),c
  4625  001394  6A35               	clrf	(??___ftdiv+2)& (0+255),c
  4626  001396  342E               	rlcf	___ftdiv@f1+1,w,c
  4627  001398  3633               	rlcf	??___ftdiv& (0+255),f,c
  4628  00139A  E301               	bnc	u3161
  4629  00139C  8034               	bsf	(??___ftdiv+1)& (0+255),0,c
  4630  00139E                     u3161:
  4631  00139E  5033               	movf	??___ftdiv,w,c
  4632  0013A0  6E3A               	movwf	___ftdiv@exp,c
  4633  0013A2  503A               	movf	___ftdiv@exp,w,c
  4634  0013A4  A4D8               	btfss	status,2,c
  4635  0013A6  D007               	goto	l671
  4636  0013A8  0E00               	movlw	0
  4637  0013AA  6E2D               	movwf	?___ftdiv,c
  4638  0013AC  0E00               	movlw	0
  4639  0013AE  6E2E               	movwf	?___ftdiv+1,c
  4640  0013B0  0E00               	movlw	0
  4641  0013B2  6E2F               	movwf	?___ftdiv+2,c
  4642  0013B4  0012               	return	
  4643  0013B6                     l671:
  4644  0013B6  C032  F033         	movff	___ftdiv@f2+2,??___ftdiv
  4645  0013BA  6A34               	clrf	(??___ftdiv+1)& (0+255),c
  4646  0013BC  6A35               	clrf	(??___ftdiv+2)& (0+255),c
  4647  0013BE  3431               	rlcf	___ftdiv@f2+1,w,c
  4648  0013C0  3633               	rlcf	??___ftdiv& (0+255),f,c
  4649  0013C2  E301               	bnc	u3181
  4650  0013C4  8034               	bsf	(??___ftdiv+1)& (0+255),0,c
  4651  0013C6                     u3181:
  4652  0013C6  5033               	movf	??___ftdiv,w,c
  4653  0013C8  6E3B               	movwf	___ftdiv@sign,c
  4654  0013CA  503B               	movf	___ftdiv@sign,w,c
  4655  0013CC  A4D8               	btfss	status,2,c
  4656  0013CE  D007               	goto	l673
  4657  0013D0  0E00               	movlw	0
  4658  0013D2  6E2D               	movwf	?___ftdiv,c
  4659  0013D4  0E00               	movlw	0
  4660  0013D6  6E2E               	movwf	?___ftdiv+1,c
  4661  0013D8  0E00               	movlw	0
  4662  0013DA  6E2F               	movwf	?___ftdiv+2,c
  4663  0013DC  0012               	return	
  4664  0013DE                     l673:
  4665  0013DE  0E00               	movlw	0
  4666  0013E0  6E37               	movwf	___ftdiv@f3,c
  4667  0013E2  0E00               	movlw	0
  4668  0013E4  6E38               	movwf	___ftdiv@f3+1,c
  4669  0013E6  0E00               	movlw	0
  4670  0013E8  6E39               	movwf	___ftdiv@f3+2,c
  4671  0013EA  503B               	movf	___ftdiv@sign,w,c
  4672  0013EC  0F89               	addlw	137
  4673  0013EE  5E3A               	subwf	___ftdiv@exp,f,c
  4674  0013F0  C02F  F03B         	movff	___ftdiv@f1+2,___ftdiv@sign
  4675  0013F4  5032               	movf	___ftdiv@f2+2,w,c
  4676  0013F6  1A3B               	xorwf	___ftdiv@sign,f,c
  4677  0013F8  0E80               	movlw	128
  4678  0013FA  163B               	andwf	___ftdiv@sign,f,c
  4679  0013FC  8E2E               	bsf	___ftdiv@f1+1,7,c
  4680  0013FE  0EFF               	movlw	255
  4681  001400  162D               	andwf	___ftdiv@f1,f,c
  4682  001402  0EFF               	movlw	255
  4683  001404  162E               	andwf	___ftdiv@f1+1,f,c
  4684  001406  0E00               	movlw	0
  4685  001408  162F               	andwf	___ftdiv@f1+2,f,c
  4686  00140A  8E31               	bsf	___ftdiv@f2+1,7,c
  4687  00140C  0EFF               	movlw	255
  4688  00140E  1630               	andwf	___ftdiv@f2,f,c
  4689  001410  0EFF               	movlw	255
  4690  001412  1631               	andwf	___ftdiv@f2+1,f,c
  4691  001414  0E00               	movlw	0
  4692  001416  1632               	andwf	___ftdiv@f2+2,f,c
  4693  001418  0E18               	movlw	24
  4694  00141A  6E36               	movwf	___ftdiv@cntr,c
  4695  00141C  90D8               	bcf	status,0,c
  4696  00141E  3637               	rlcf	___ftdiv@f3,f,c
  4697  001420  3638               	rlcf	___ftdiv@f3+1,f,c
  4698  001422  3639               	rlcf	___ftdiv@f3+2,f,c
  4699  001424  5030               	movf	___ftdiv@f2,w,c
  4700  001426  5C2D               	subwf	___ftdiv@f1,w,c
  4701  001428  5031               	movf	___ftdiv@f2+1,w,c
  4702  00142A  582E               	subwfb	___ftdiv@f1+1,w,c
  4703  00142C  5032               	movf	___ftdiv@f2+2,w,c
  4704  00142E  582F               	subwfb	___ftdiv@f1+2,w,c
  4705  001430  A0D8               	btfss	status,0,c
  4706  001432  D007               	goto	l675
  4707  001434  5030               	movf	___ftdiv@f2,w,c
  4708  001436  5E2D               	subwf	___ftdiv@f1,f,c
  4709  001438  5031               	movf	___ftdiv@f2+1,w,c
  4710  00143A  5A2E               	subwfb	___ftdiv@f1+1,f,c
  4711  00143C  5032               	movf	___ftdiv@f2+2,w,c
  4712  00143E  5A2F               	subwfb	___ftdiv@f1+2,f,c
  4713  001440  8037               	bsf	___ftdiv@f3,0,c
  4714  001442                     l675:
  4715  001442  90D8               	bcf	status,0,c
  4716  001444  362D               	rlcf	___ftdiv@f1,f,c
  4717  001446  362E               	rlcf	___ftdiv@f1+1,f,c
  4718  001448  362F               	rlcf	___ftdiv@f1+2,f,c
  4719  00144A  2E36               	decfsz	___ftdiv@cntr,f,c
  4720  00144C  D7E7               	goto	l674
  4721  00144E  C037  F025         	movff	___ftdiv@f3,___ftpack@arg
  4722  001452  C038  F026         	movff	___ftdiv@f3+1,___ftpack@arg+1
  4723  001456  C039  F027         	movff	___ftdiv@f3+2,___ftpack@arg+2
  4724  00145A  C03A  F028         	movff	___ftdiv@exp,___ftpack@exp
  4725  00145E  C03B  F029         	movff	___ftdiv@sign,___ftpack@sign
  4726  001462  EC7B  F00B         	call	___ftpack	;wreg free
  4727  001466  C025  F02D         	movff	?___ftpack,?___ftdiv
  4728  00146A  C026  F02E         	movff	?___ftpack+1,?___ftdiv+1
  4729  00146E  C027  F02F         	movff	?___ftpack+2,?___ftdiv+2
  4730  001472  0012               	return	
  4731  001474                     __end_of___ftdiv:
  4732                           	opt stack 0
  4733                           tblptru	equ	0xFF8
  4734                           tblptrh	equ	0xFF7
  4735                           tblptrl	equ	0xFF6
  4736                           tablat	equ	0xFF5
  4737                           prodh	equ	0xFF4
  4738                           prodl	equ	0xFF3
  4739                           intcon	equ	0xFF2
  4740                           postinc0	equ	0xFEE
  4741                           wreg	equ	0xFE8
  4742                           indf1	equ	0xFE7
  4743                           postdec1	equ	0xFE5
  4744                           fsr1h	equ	0xFE2
  4745                           fsr1l	equ	0xFE1
  4746                           indf2	equ	0xFDF
  4747                           postinc2	equ	0xFDE
  4748                           postdec2	equ	0xFDD
  4749                           fsr2h	equ	0xFDA
  4750                           fsr2l	equ	0xFD9
  4751                           status	equ	0xFD8
  4752                           
  4753 ;; *************** function ___awtoft *****************
  4754 ;; Defined at:
  4755 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  4756 ;; Parameters:    Size  Location     Type
  4757 ;;  c               2   74[COMRAM] int 
  4758 ;; Auto vars:     Size  Location     Type
  4759 ;;  sign            1   77[COMRAM] unsigned char 
  4760 ;; Return value:  Size  Location     Type
  4761 ;;                  3   74[COMRAM] float 
  4762 ;; Registers used:
  4763 ;;		wreg, status,2, status,0, cstack
  4764 ;; Tracked objects:
  4765 ;;		On entry : 0/0
  4766 ;;		On exit  : 0/0
  4767 ;;		Unchanged: 0/0
  4768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4769 ;;      Params:         3       0       0       0       0       0       0
  4770 ;;      Locals:         1       0       0       0       0       0       0
  4771 ;;      Temps:          0       0       0       0       0       0       0
  4772 ;;      Totals:         4       0       0       0       0       0       0
  4773 ;;Total ram usage:        4 bytes
  4774 ;; Hardware stack levels used:    1
  4775 ;; Hardware stack levels required when called:    3
  4776 ;; This function calls:
  4777 ;;		___ftpack
  4778 ;; This function is called by:
  4779 ;;		_main
  4780 ;;		_exp
  4781 ;; This function uses a non-reentrant model
  4782 ;;
  4783                           
  4784                           	psect	text15
  4785  001ACE                     __ptext15:
  4786                           	opt stack 0
  4787  001ACE                     ___awtoft:
  4788                           	opt stack 26
  4789                           
  4790                           ;incstack = 0
  4791  001ACE  0E00               	movlw	0
  4792  001AD0  6E4E               	movwf	___awtoft@sign,c
  4793  001AD2  AE4C               	btfss	___awtoft@c+1,7,c
  4794  001AD4  D006               	goto	l544
  4795  001AD6  6C4B               	negf	___awtoft@c,c
  4796  001AD8  1E4C               	comf	___awtoft@c+1,f,c
  4797  001ADA  B0D8               	btfsc	status,0,c
  4798  001ADC  2A4C               	incf	___awtoft@c+1,f,c
  4799  001ADE  0E01               	movlw	1
  4800  001AE0  6E4E               	movwf	___awtoft@sign,c
  4801  001AE2                     l544:
  4802  001AE2  C04B  F025         	movff	___awtoft@c,___ftpack@arg
  4803  001AE6  C04C  F026         	movff	___awtoft@c+1,___ftpack@arg+1
  4804  001AEA  6A27               	clrf	___ftpack@arg+2,c
  4805  001AEC  0E8E               	movlw	142
  4806  001AEE  6E28               	movwf	___ftpack@exp,c
  4807  001AF0  C04E  F029         	movff	___awtoft@sign,___ftpack@sign
  4808  001AF4  EC7B  F00B         	call	___ftpack	;wreg free
  4809  001AF8  C025  F04B         	movff	?___ftpack,?___awtoft
  4810  001AFC  C026  F04C         	movff	?___ftpack+1,?___awtoft+1
  4811  001B00  C027  F04D         	movff	?___ftpack+2,?___awtoft+2
  4812  001B04  0012               	return	
  4813  001B06                     __end_of___awtoft:
  4814                           	opt stack 0
  4815                           tblptru	equ	0xFF8
  4816                           tblptrh	equ	0xFF7
  4817                           tblptrl	equ	0xFF6
  4818                           tablat	equ	0xFF5
  4819                           prodh	equ	0xFF4
  4820                           prodl	equ	0xFF3
  4821                           intcon	equ	0xFF2
  4822                           postinc0	equ	0xFEE
  4823                           wreg	equ	0xFE8
  4824                           indf1	equ	0xFE7
  4825                           postdec1	equ	0xFE5
  4826                           fsr1h	equ	0xFE2
  4827                           fsr1l	equ	0xFE1
  4828                           indf2	equ	0xFDF
  4829                           postinc2	equ	0xFDE
  4830                           postdec2	equ	0xFDD
  4831                           fsr2h	equ	0xFDA
  4832                           fsr2l	equ	0xFD9
  4833                           status	equ	0xFD8
  4834                           
  4835 ;; *************** function ___lwtoft *****************
  4836 ;; Defined at:
  4837 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
  4838 ;; Parameters:    Size  Location     Type
  4839 ;;  c               2   44[COMRAM] unsigned int 
  4840 ;; Auto vars:     Size  Location     Type
  4841 ;;		None
  4842 ;; Return value:  Size  Location     Type
  4843 ;;                  3   44[COMRAM] float 
  4844 ;; Registers used:
  4845 ;;		wreg, status,2, status,0, cstack
  4846 ;; Tracked objects:
  4847 ;;		On entry : 0/0
  4848 ;;		On exit  : 0/0
  4849 ;;		Unchanged: 0/0
  4850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4851 ;;      Params:         3       0       0       0       0       0       0
  4852 ;;      Locals:         0       0       0       0       0       0       0
  4853 ;;      Temps:          0       0       0       0       0       0       0
  4854 ;;      Totals:         3       0       0       0       0       0       0
  4855 ;;Total ram usage:        3 bytes
  4856 ;; Hardware stack levels used:    1
  4857 ;; Hardware stack levels required when called:    3
  4858 ;; This function calls:
  4859 ;;		___ftpack
  4860 ;; This function is called by:
  4861 ;;		_main
  4862 ;; This function uses a non-reentrant model
  4863 ;;
  4864                           
  4865                           	psect	text16
  4866  001C62                     __ptext16:
  4867                           	opt stack 0
  4868  001C62                     ___lwtoft:
  4869                           	opt stack 27
  4870                           
  4871                           ;incstack = 0
  4872  001C62  C02D  F025         	movff	___lwtoft@c,___ftpack@arg
  4873  001C66  C02E  F026         	movff	___lwtoft@c+1,___ftpack@arg+1
  4874  001C6A  6A27               	clrf	___ftpack@arg+2,c
  4875  001C6C  0E8E               	movlw	142
  4876  001C6E  6E28               	movwf	___ftpack@exp,c
  4877  001C70  0E00               	movlw	0
  4878  001C72  6E29               	movwf	___ftpack@sign,c
  4879  001C74  EC7B  F00B         	call	___ftpack	;wreg free
  4880  001C78  C025  F02D         	movff	?___ftpack,?___lwtoft
  4881  001C7C  C026  F02E         	movff	?___ftpack+1,?___lwtoft+1
  4882  001C80  C027  F02F         	movff	?___ftpack+2,?___lwtoft+2
  4883  001C84  0012               	return	
  4884  001C86                     __end_of___lwtoft:
  4885                           	opt stack 0
  4886                           tblptru	equ	0xFF8
  4887                           tblptrh	equ	0xFF7
  4888                           tblptrl	equ	0xFF6
  4889                           tablat	equ	0xFF5
  4890                           prodh	equ	0xFF4
  4891                           prodl	equ	0xFF3
  4892                           intcon	equ	0xFF2
  4893                           postinc0	equ	0xFEE
  4894                           wreg	equ	0xFE8
  4895                           indf1	equ	0xFE7
  4896                           postdec1	equ	0xFE5
  4897                           fsr1h	equ	0xFE2
  4898                           fsr1l	equ	0xFE1
  4899                           indf2	equ	0xFDF
  4900                           postinc2	equ	0xFDE
  4901                           postdec2	equ	0xFDD
  4902                           fsr2h	equ	0xFDA
  4903                           fsr2l	equ	0xFD9
  4904                           status	equ	0xFD8
  4905                           
  4906 ;; *************** function ___ftpack *****************
  4907 ;; Defined at:
  4908 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  4909 ;; Parameters:    Size  Location     Type
  4910 ;;  arg             3   36[COMRAM] unsigned um
  4911 ;;  exp             1   39[COMRAM] unsigned char 
  4912 ;;  sign            1   40[COMRAM] unsigned char 
  4913 ;; Auto vars:     Size  Location     Type
  4914 ;;		None
  4915 ;; Return value:  Size  Location     Type
  4916 ;;                  3   36[COMRAM] float 
  4917 ;; Registers used:
  4918 ;;		wreg, status,2, status,0
  4919 ;; Tracked objects:
  4920 ;;		On entry : 0/0
  4921 ;;		On exit  : 0/0
  4922 ;;		Unchanged: 0/0
  4923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4924 ;;      Params:         5       0       0       0       0       0       0
  4925 ;;      Locals:         0       0       0       0       0       0       0
  4926 ;;      Temps:          3       0       0       0       0       0       0
  4927 ;;      Totals:         8       0       0       0       0       0       0
  4928 ;;Total ram usage:        8 bytes
  4929 ;; Hardware stack levels used:    1
  4930 ;; Hardware stack levels required when called:    2
  4931 ;; This function calls:
  4932 ;;		Nothing
  4933 ;; This function is called by:
  4934 ;;		___altoft
  4935 ;;		___awtoft
  4936 ;;		___ftadd
  4937 ;;		___ftdiv
  4938 ;;		___ftmul
  4939 ;;		___lwtoft
  4940 ;; This function uses a non-reentrant model
  4941 ;;
  4942                           
  4943                           	psect	text17
  4944  0016F6                     __ptext17:
  4945                           	opt stack 0
  4946  0016F6                     ___ftpack:
  4947                           	opt stack 25
  4948                           
  4949                           ;incstack = 0
  4950  0016F6  5028               	movf	___ftpack@exp,w,c
  4951  0016F8  B4D8               	btfsc	status,2,c
  4952  0016FA  D005               	goto	u2800
  4953  0016FC  5025               	movf	___ftpack@arg,w,c
  4954  0016FE  1026               	iorwf	___ftpack@arg+1,w,c
  4955  001700  1027               	iorwf	___ftpack@arg+2,w,c
  4956  001702  A4D8               	btfss	status,2,c
  4957  001704  D00C               	goto	l582
  4958  001706                     u2800:
  4959  001706  0E00               	movlw	0
  4960  001708  6E25               	movwf	?___ftpack,c
  4961  00170A  0E00               	movlw	0
  4962  00170C  6E26               	movwf	?___ftpack+1,c
  4963  00170E  0E00               	movlw	0
  4964  001710  6E27               	movwf	?___ftpack+2,c
  4965  001712  0012               	return	
  4966  001714  2A28               	incf	___ftpack@exp,f,c
  4967  001716  90D8               	bcf	status,0,c
  4968  001718  3227               	rrcf	___ftpack@arg+2,f,c
  4969  00171A  3226               	rrcf	___ftpack@arg+1,f,c
  4970  00171C  3225               	rrcf	___ftpack@arg,f,c
  4971  00171E                     l582:
  4972  00171E  0E00               	movlw	0
  4973  001720  1425               	andwf	___ftpack@arg,w,c
  4974  001722  6E2A               	movwf	??___ftpack& (0+255),c
  4975  001724  0E00               	movlw	0
  4976  001726  1426               	andwf	___ftpack@arg+1,w,c
  4977  001728  6E2B               	movwf	(??___ftpack+1)& (0+255),c
  4978  00172A  0EFE               	movlw	254
  4979  00172C  1427               	andwf	___ftpack@arg+2,w,c
  4980  00172E  6E2C               	movwf	(??___ftpack+2)& (0+255),c
  4981  001730  502A               	movf	??___ftpack,w,c
  4982  001732  102B               	iorwf	??___ftpack+1,w,c
  4983  001734  102C               	iorwf	??___ftpack+2,w,c
  4984  001736  B4D8               	btfsc	status,2,c
  4985  001738  D00C               	goto	l585
  4986  00173A  D7EC               	goto	l583
  4987  00173C  2A28               	incf	___ftpack@exp,f,c
  4988  00173E  0E01               	movlw	1
  4989  001740  2625               	addwf	___ftpack@arg,f,c
  4990  001742  0E00               	movlw	0
  4991  001744  2226               	addwfc	___ftpack@arg+1,f,c
  4992  001746  0E00               	movlw	0
  4993  001748  2227               	addwfc	___ftpack@arg+2,f,c
  4994  00174A  90D8               	bcf	status,0,c
  4995  00174C  3227               	rrcf	___ftpack@arg+2,f,c
  4996  00174E  3226               	rrcf	___ftpack@arg+1,f,c
  4997  001750  3225               	rrcf	___ftpack@arg,f,c
  4998  001752                     l585:
  4999  001752  0E00               	movlw	0
  5000  001754  1425               	andwf	___ftpack@arg,w,c
  5001  001756  6E2A               	movwf	??___ftpack& (0+255),c
  5002  001758  0E00               	movlw	0
  5003  00175A  1426               	andwf	___ftpack@arg+1,w,c
  5004  00175C  6E2B               	movwf	(??___ftpack+1)& (0+255),c
  5005  00175E  0EFF               	movlw	255
  5006  001760  1427               	andwf	___ftpack@arg+2,w,c
  5007  001762  6E2C               	movwf	(??___ftpack+2)& (0+255),c
  5008  001764  502A               	movf	??___ftpack,w,c
  5009  001766  102B               	iorwf	??___ftpack+1,w,c
  5010  001768  102C               	iorwf	??___ftpack+2,w,c
  5011  00176A  B4D8               	btfsc	status,2,c
  5012  00176C  D006               	goto	l588
  5013  00176E  D7E6               	goto	l586
  5014  001770  0628               	decf	___ftpack@exp,f,c
  5015  001772  90D8               	bcf	status,0,c
  5016  001774  3625               	rlcf	___ftpack@arg,f,c
  5017  001776  3626               	rlcf	___ftpack@arg+1,f,c
  5018  001778  3627               	rlcf	___ftpack@arg+2,f,c
  5019  00177A                     l588:
  5020  00177A  BE26               	btfsc	___ftpack@arg+1,7,c
  5021  00177C  D003               	goto	u2840
  5022  00177E  0E02               	movlw	2
  5023  001780  6028               	cpfslt	___ftpack@exp,c
  5024  001782  D7F6               	goto	l589
  5025  001784                     u2840:
  5026  001784  A028               	btfss	___ftpack@exp,0,c
  5027  001786  9E26               	bcf	___ftpack@arg+1,7,c
  5028  001788  90D8               	bcf	status,0,c
  5029  00178A  3228               	rrcf	___ftpack@exp,f,c
  5030  00178C  5028               	movf	___ftpack@exp,w,c
  5031  00178E  1227               	iorwf	___ftpack@arg+2,f,c
  5032  001790  5029               	movf	___ftpack@sign,w,c
  5033  001792  A4D8               	btfss	status,2,c
  5034  001794  8E27               	bsf	___ftpack@arg+2,7,c
  5035  001796  C025  F025         	movff	___ftpack@arg,?___ftpack
  5036  00179A  C026  F026         	movff	___ftpack@arg+1,?___ftpack+1
  5037  00179E  C027  F027         	movff	___ftpack@arg+2,?___ftpack+2
  5038  0017A2  0012               	return	
  5039  0017A4                     __end_of___ftpack:
  5040                           	opt stack 0
  5041                           tblptru	equ	0xFF8
  5042                           tblptrh	equ	0xFF7
  5043                           tblptrl	equ	0xFF6
  5044                           tablat	equ	0xFF5
  5045                           prodh	equ	0xFF4
  5046                           prodl	equ	0xFF3
  5047                           intcon	equ	0xFF2
  5048                           postinc0	equ	0xFEE
  5049                           wreg	equ	0xFE8
  5050                           indf1	equ	0xFE7
  5051                           postdec1	equ	0xFE5
  5052                           fsr1h	equ	0xFE2
  5053                           fsr1l	equ	0xFE1
  5054                           indf2	equ	0xFDF
  5055                           postinc2	equ	0xFDE
  5056                           postdec2	equ	0xFDD
  5057                           fsr2h	equ	0xFDA
  5058                           fsr2l	equ	0xFD9
  5059                           status	equ	0xFD8
  5060                           
  5061 ;; *************** function ___awdiv *****************
  5062 ;; Defined at:
  5063 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  5064 ;; Parameters:    Size  Location     Type
  5065 ;;  dividend        2   36[COMRAM] int 
  5066 ;;  divisor         2   38[COMRAM] int 
  5067 ;; Auto vars:     Size  Location     Type
  5068 ;;  quotient        2   42[COMRAM] int 
  5069 ;;  sign            1   41[COMRAM] unsigned char 
  5070 ;;  counter         1   40[COMRAM] unsigned char 
  5071 ;; Return value:  Size  Location     Type
  5072 ;;                  2   36[COMRAM] int 
  5073 ;; Registers used:
  5074 ;;		wreg, status,2, status,0
  5075 ;; Tracked objects:
  5076 ;;		On entry : 0/0
  5077 ;;		On exit  : 0/0
  5078 ;;		Unchanged: 0/0
  5079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5080 ;;      Params:         4       0       0       0       0       0       0
  5081 ;;      Locals:         4       0       0       0       0       0       0
  5082 ;;      Temps:          0       0       0       0       0       0       0
  5083 ;;      Totals:         8       0       0       0       0       0       0
  5084 ;;Total ram usage:        8 bytes
  5085 ;; Hardware stack levels used:    1
  5086 ;; Hardware stack levels required when called:    2
  5087 ;; This function calls:
  5088 ;;		Nothing
  5089 ;; This function is called by:
  5090 ;;		_main
  5091 ;; This function uses a non-reentrant model
  5092 ;;
  5093                           
  5094                           	psect	text18
  5095  0018CA                     __ptext18:
  5096                           	opt stack 0
  5097  0018CA                     ___awdiv:
  5098                           	opt stack 28
  5099                           
  5100                           ;incstack = 0
  5101  0018CA  0E00               	movlw	0
  5102  0018CC  6E2A               	movwf	___awdiv@sign,c
  5103  0018CE  AE28               	btfss	___awdiv@divisor+1,7,c
  5104  0018D0  D006               	goto	l516
  5105  0018D2  6C27               	negf	___awdiv@divisor,c
  5106  0018D4  1E28               	comf	___awdiv@divisor+1,f,c
  5107  0018D6  B0D8               	btfsc	status,0,c
  5108  0018D8  2A28               	incf	___awdiv@divisor+1,f,c
  5109  0018DA  0E01               	movlw	1
  5110  0018DC  6E2A               	movwf	___awdiv@sign,c
  5111  0018DE                     l516:
  5112  0018DE  AE26               	btfss	___awdiv@dividend+1,7,c
  5113  0018E0  D006               	goto	l517
  5114  0018E2  6C25               	negf	___awdiv@dividend,c
  5115  0018E4  1E26               	comf	___awdiv@dividend+1,f,c
  5116  0018E6  B0D8               	btfsc	status,0,c
  5117  0018E8  2A26               	incf	___awdiv@dividend+1,f,c
  5118  0018EA  0E01               	movlw	1
  5119  0018EC  1A2A               	xorwf	___awdiv@sign,f,c
  5120  0018EE                     l517:
  5121  0018EE  0E00               	movlw	0
  5122  0018F0  6E2C               	movwf	___awdiv@quotient+1,c
  5123  0018F2  0E00               	movlw	0
  5124  0018F4  6E2B               	movwf	___awdiv@quotient,c
  5125  0018F6  5027               	movf	___awdiv@divisor,w,c
  5126  0018F8  1028               	iorwf	___awdiv@divisor+1,w,c
  5127  0018FA  B4D8               	btfsc	status,2,c
  5128  0018FC  D01C               	goto	l524
  5129  0018FE  0E01               	movlw	1
  5130  001900  6E29               	movwf	___awdiv@counter,c
  5131  001902  D004               	goto	l519
  5132  001904  90D8               	bcf	status,0,c
  5133  001906  3627               	rlcf	___awdiv@divisor,f,c
  5134  001908  3628               	rlcf	___awdiv@divisor+1,f,c
  5135  00190A  2A29               	incf	___awdiv@counter,f,c
  5136  00190C                     l519:
  5137  00190C  AE28               	btfss	___awdiv@divisor+1,7,c
  5138  00190E  D7FA               	goto	l520
  5139  001910                     u2260:
  5140  001910  90D8               	bcf	status,0,c
  5141  001912  362B               	rlcf	___awdiv@quotient,f,c
  5142  001914  362C               	rlcf	___awdiv@quotient+1,f,c
  5143  001916  5027               	movf	___awdiv@divisor,w,c
  5144  001918  5C25               	subwf	___awdiv@dividend,w,c
  5145  00191A  5028               	movf	___awdiv@divisor+1,w,c
  5146  00191C  5826               	subwfb	___awdiv@dividend+1,w,c
  5147  00191E  A0D8               	btfss	status,0,c
  5148  001920  D005               	goto	l523
  5149  001922  5027               	movf	___awdiv@divisor,w,c
  5150  001924  5E25               	subwf	___awdiv@dividend,f,c
  5151  001926  5028               	movf	___awdiv@divisor+1,w,c
  5152  001928  5A26               	subwfb	___awdiv@dividend+1,f,c
  5153  00192A  802B               	bsf	___awdiv@quotient,0,c
  5154  00192C                     l523:
  5155  00192C  90D8               	bcf	status,0,c
  5156  00192E  3228               	rrcf	___awdiv@divisor+1,f,c
  5157  001930  3227               	rrcf	___awdiv@divisor,f,c
  5158  001932  2E29               	decfsz	___awdiv@counter,f,c
  5159  001934  D7ED               	goto	u2260
  5160  001936                     l524:
  5161  001936  502A               	movf	___awdiv@sign,w,c
  5162  001938  B4D8               	btfsc	status,2,c
  5163  00193A  D004               	goto	l525
  5164  00193C  6C2B               	negf	___awdiv@quotient,c
  5165  00193E  1E2C               	comf	___awdiv@quotient+1,f,c
  5166  001940  B0D8               	btfsc	status,0,c
  5167  001942  2A2C               	incf	___awdiv@quotient+1,f,c
  5168  001944                     l525:
  5169  001944  C02B  F025         	movff	___awdiv@quotient,?___awdiv
  5170  001948  C02C  F026         	movff	___awdiv@quotient+1,?___awdiv+1
  5171  00194C  0012               	return	
  5172  00194E                     __end_of___awdiv:
  5173                           	opt stack 0
  5174                           tblptru	equ	0xFF8
  5175                           tblptrh	equ	0xFF7
  5176                           tblptrl	equ	0xFF6
  5177                           tablat	equ	0xFF5
  5178                           prodh	equ	0xFF4
  5179                           prodl	equ	0xFF3
  5180                           intcon	equ	0xFF2
  5181                           postinc0	equ	0xFEE
  5182                           wreg	equ	0xFE8
  5183                           indf1	equ	0xFE7
  5184                           postdec1	equ	0xFE5
  5185                           fsr1h	equ	0xFE2
  5186                           fsr1l	equ	0xFE1
  5187                           indf2	equ	0xFDF
  5188                           postinc2	equ	0xFDE
  5189                           postdec2	equ	0xFDD
  5190                           fsr2h	equ	0xFDA
  5191                           fsr2l	equ	0xFD9
  5192                           status	equ	0xFD8
  5193                           
  5194 ;; *************** function _UartInit *****************
  5195 ;; Defined at:
  5196 ;;		line 403 in file "main.c"
  5197 ;; Parameters:    Size  Location     Type
  5198 ;;		None
  5199 ;; Auto vars:     Size  Location     Type
  5200 ;;		None
  5201 ;; Return value:  Size  Location     Type
  5202 ;;                  1    wreg      void 
  5203 ;; Registers used:
  5204 ;;		wreg, status,2
  5205 ;; Tracked objects:
  5206 ;;		On entry : 0/0
  5207 ;;		On exit  : 0/0
  5208 ;;		Unchanged: 0/0
  5209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5210 ;;      Params:         0       0       0       0       0       0       0
  5211 ;;      Locals:         0       0       0       0       0       0       0
  5212 ;;      Temps:          0       0       0       0       0       0       0
  5213 ;;      Totals:         0       0       0       0       0       0       0
  5214 ;;Total ram usage:        0 bytes
  5215 ;; Hardware stack levels used:    1
  5216 ;; Hardware stack levels required when called:    2
  5217 ;; This function calls:
  5218 ;;		Nothing
  5219 ;; This function is called by:
  5220 ;;		_main
  5221 ;; This function uses a non-reentrant model
  5222 ;;
  5223                           
  5224                           	psect	text19
  5225  001B6E                     __ptext19:
  5226                           	opt stack 0
  5227  001B6E                     _UartInit:
  5228                           	opt stack 28
  5229                           
  5230                           ;main.c: 405: TRISC6 = 0;
  5231                           
  5232                           ;incstack = 0
  5233  001B6E  9C94               	bcf	3988,6,c	;volatile
  5234                           
  5235                           ;main.c: 406: TRISC7 = 1;
  5236  001B70  8E94               	bsf	3988,7,c	;volatile
  5237                           
  5238                           ;main.c: 410: TX9 = 0;
  5239  001B72  9CAC               	bcf	4012,6,c	;volatile
  5240                           
  5241                           ;main.c: 411: SYNC = 0;
  5242  001B74  98AC               	bcf	4012,4,c	;volatile
  5243                           
  5244                           ;main.c: 412: SENDB = 0;
  5245  001B76  96AC               	bcf	4012,3,c	;volatile
  5246                           
  5247                           ;main.c: 413: BRGH = 0;
  5248  001B78  94AC               	bcf	4012,2,c	;volatile
  5249                           
  5250                           ;main.c: 415: RX9 = 0;
  5251  001B7A  9CAB               	bcf	4011,6,c	;volatile
  5252                           
  5253                           ;main.c: 416: CREN = 1;
  5254  001B7C  88AB               	bsf	4011,4,c	;volatile
  5255                           
  5256                           ;main.c: 417: FERR = 0;
  5257  001B7E  94AB               	bcf	4011,2,c	;volatile
  5258                           
  5259                           ;main.c: 418: OERR = 0;
  5260  001B80  92AB               	bcf	4011,1,c	;volatile
  5261                           
  5262                           ;main.c: 419: RXDTP = 0;
  5263  001B82  9AB8               	bcf	4024,5,c	;volatile
  5264                           
  5265                           ;main.c: 420: TXCKP = 0;
  5266  001B84  98B8               	bcf	4024,4,c	;volatile
  5267                           
  5268                           ;main.c: 421: BRG16 = 1;
  5269  001B86  86B8               	bsf	4024,3,c	;volatile
  5270                           
  5271                           ;main.c: 422: WUE = 0;
  5272  001B88  92B8               	bcf	4024,1,c	;volatile
  5273                           
  5274                           ;main.c: 423: ABDEN = 0;
  5275  001B8A  90B8               	bcf	4024,0,c	;volatile
  5276                           
  5277                           ;main.c: 424: SPBRGH = 0;
  5278  001B8C  0E00               	movlw	0
  5279  001B8E  6EB0               	movwf	4016,c	;volatile
  5280                           
  5281                           ;main.c: 425: SPBRG = 16;
  5282  001B90  0E10               	movlw	16
  5283  001B92  6EAF               	movwf	4015,c	;volatile
  5284                           
  5285                           ;main.c: 428: RCIE = 1;
  5286  001B94  8A9D               	bsf	3997,5,c	;volatile
  5287                           
  5288                           ;main.c: 429: RCIF = 0;
  5289  001B96  9A9E               	bcf	3998,5,c	;volatile
  5290                           
  5291                           ;main.c: 431: TXEN = 1;
  5292  001B98  8AAC               	bsf	4012,5,c	;volatile
  5293                           
  5294                           ;main.c: 432: SPEN = 1;
  5295  001B9A  8EAB               	bsf	4011,7,c	;volatile
  5296  001B9C  0012               	return		;funcret
  5297  001B9E                     __end_of_UartInit:
  5298                           	opt stack 0
  5299                           tblptru	equ	0xFF8
  5300                           tblptrh	equ	0xFF7
  5301                           tblptrl	equ	0xFF6
  5302                           tablat	equ	0xFF5
  5303                           prodh	equ	0xFF4
  5304                           prodl	equ	0xFF3
  5305                           intcon	equ	0xFF2
  5306                           postinc0	equ	0xFEE
  5307                           wreg	equ	0xFE8
  5308                           indf1	equ	0xFE7
  5309                           postdec1	equ	0xFE5
  5310                           fsr1h	equ	0xFE2
  5311                           fsr1l	equ	0xFE1
  5312                           indf2	equ	0xFDF
  5313                           postinc2	equ	0xFDE
  5314                           postdec2	equ	0xFDD
  5315                           fsr2h	equ	0xFDA
  5316                           fsr2l	equ	0xFD9
  5317                           status	equ	0xFD8
  5318                           
  5319 ;; *************** function _SpiInit *****************
  5320 ;; Defined at:
  5321 ;;		line 380 in file "main.c"
  5322 ;; Parameters:    Size  Location     Type
  5323 ;;		None
  5324 ;; Auto vars:     Size  Location     Type
  5325 ;;		None
  5326 ;; Return value:  Size  Location     Type
  5327 ;;                  1    wreg      void 
  5328 ;; Registers used:
  5329 ;;		wreg, status,2
  5330 ;; Tracked objects:
  5331 ;;		On entry : 0/0
  5332 ;;		On exit  : 0/0
  5333 ;;		Unchanged: 0/0
  5334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5335 ;;      Params:         0       0       0       0       0       0       0
  5336 ;;      Locals:         0       0       0       0       0       0       0
  5337 ;;      Temps:          0       0       0       0       0       0       0
  5338 ;;      Totals:         0       0       0       0       0       0       0
  5339 ;;Total ram usage:        0 bytes
  5340 ;; Hardware stack levels used:    1
  5341 ;; Hardware stack levels required when called:    2
  5342 ;; This function calls:
  5343 ;;		Nothing
  5344 ;; This function is called by:
  5345 ;;		_main
  5346 ;; This function uses a non-reentrant model
  5347 ;;
  5348                           
  5349                           	psect	text20
  5350  001B9E                     __ptext20:
  5351                           	opt stack 0
  5352  001B9E                     _SpiInit:
  5353                           	opt stack 28
  5354                           
  5355                           ;main.c: 381: TRISA5 = 1;
  5356                           
  5357                           ;incstack = 0
  5358  001B9E  8A92               	bsf	3986,5,c	;volatile
  5359                           
  5360                           ;main.c: 382: TRISC3 = 1;
  5361  001BA0  8694               	bsf	3988,3,c	;volatile
  5362                           
  5363                           ;main.c: 383: TRISC4 = 1;
  5364  001BA2  8894               	bsf	3988,4,c	;volatile
  5365                           
  5366                           ;main.c: 384: TRISC5 = 0;
  5367  001BA4  9A94               	bcf	3988,5,c	;volatile
  5368                           
  5369                           ;main.c: 385: LATAbits.LATA5 = 1;
  5370  001BA6  8A89               	bsf	3977,5,c	;volatile
  5371                           
  5372                           ;main.c: 387: PIR1bits.SSPIF = 0;
  5373  001BA8  969E               	bcf	3998,3,c	;volatile
  5374                           
  5375                           ;main.c: 388: PIE1bits.SSPIE = 1;
  5376  001BAA  869D               	bsf	3997,3,c	;volatile
  5377                           
  5378                           ;main.c: 390: SSPSTATbits.SMP = 0;
  5379  001BAC  9EC7               	bcf	4039,7,c	;volatile
  5380                           
  5381                           ;main.c: 391: SSPSTATbits.CKE = 1;
  5382  001BAE  8CC7               	bsf	4039,6,c	;volatile
  5383                           
  5384                           ;main.c: 392: SSPCON1bits.WCOL = 0;
  5385  001BB0  9EC6               	bcf	4038,7,c	;volatile
  5386                           
  5387                           ;main.c: 393: SSPCON1bits.CKP = 0;
  5388  001BB2  98C6               	bcf	4038,4,c	;volatile
  5389                           
  5390                           ;main.c: 394: SSPCON1bits.SSPM = 0b0100;
  5391  001BB4  50C6               	movf	4038,w,c	;volatile
  5392  001BB6  0BF0               	andlw	-16
  5393  001BB8  0904               	iorlw	4
  5394  001BBA  6EC6               	movwf	4038,c	;volatile
  5395                           
  5396                           ;main.c: 395: SSPCON1bits.SSPEN = 1;
  5397  001BBC  8AC6               	bsf	4038,5,c	;volatile
  5398                           
  5399                           ;main.c: 397: SSPBUF = 0;
  5400  001BBE  0E00               	movlw	0
  5401  001BC0  6EC9               	movwf	4041,c	;volatile
  5402                           
  5403                           ;main.c: 399: INTCONbits.PEIE = 1;
  5404  001BC2  8CF2               	bsf	intcon,6,c	;volatile
  5405                           
  5406                           ;main.c: 400: INTCONbits.GIE = 1;
  5407  001BC4  8EF2               	bsf	intcon,7,c	;volatile
  5408  001BC6  0012               	return		;funcret
  5409  001BC8                     __end_of_SpiInit:
  5410                           	opt stack 0
  5411                           tblptru	equ	0xFF8
  5412                           tblptrh	equ	0xFF7
  5413                           tblptrl	equ	0xFF6
  5414                           tablat	equ	0xFF5
  5415                           prodh	equ	0xFF4
  5416                           prodl	equ	0xFF3
  5417                           intcon	equ	0xFF2
  5418                           postinc0	equ	0xFEE
  5419                           wreg	equ	0xFE8
  5420                           indf1	equ	0xFE7
  5421                           postdec1	equ	0xFE5
  5422                           fsr1h	equ	0xFE2
  5423                           fsr1l	equ	0xFE1
  5424                           indf2	equ	0xFDF
  5425                           postinc2	equ	0xFDE
  5426                           postdec2	equ	0xFDD
  5427                           fsr2h	equ	0xFDA
  5428                           fsr2l	equ	0xFD9
  5429                           status	equ	0xFD8
  5430                           
  5431 ;; *************** function _PrintS *****************
  5432 ;; Defined at:
  5433 ;;		line 498 in file "main.c"
  5434 ;; Parameters:    Size  Location     Type
  5435 ;;  s_printS        2   37[COMRAM] PTR const unsigned char 
  5436 ;;		 -> SendMsgSreen(252), 
  5437 ;; Auto vars:     Size  Location     Type
  5438 ;;		None
  5439 ;; Return value:  Size  Location     Type
  5440 ;;                  1    wreg      void 
  5441 ;; Registers used:
  5442 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5443 ;; Tracked objects:
  5444 ;;		On entry : 0/0
  5445 ;;		On exit  : 0/0
  5446 ;;		Unchanged: 0/0
  5447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5448 ;;      Params:         2       0       0       0       0       0       0
  5449 ;;      Locals:         0       0       0       0       0       0       0
  5450 ;;      Temps:          0       0       0       0       0       0       0
  5451 ;;      Totals:         2       0       0       0       0       0       0
  5452 ;;Total ram usage:        2 bytes
  5453 ;; Hardware stack levels used:    1
  5454 ;; Hardware stack levels required when called:    3
  5455 ;; This function calls:
  5456 ;;		_PrintC
  5457 ;; This function is called by:
  5458 ;;		_main
  5459 ;; This function uses a non-reentrant model
  5460 ;;
  5461                           
  5462                           	psect	text21
  5463  001B06                     __ptext21:
  5464                           	opt stack 0
  5465  001B06                     _PrintS:
  5466                           	opt stack 27
  5467                           
  5468                           ;main.c: 499: while(*s_printS) {
  5469                           
  5470                           ;incstack = 0
  5471  001B06  D009               	goto	l238
  5472  001B08                     
  5473                           ;main.c: 500: PrintC(*s_printS++);
  5474  001B08  C026  FFD9         	movff	PrintS@s_printS,fsr2l
  5475  001B0C  C027  FFDA         	movff	PrintS@s_printS+1,fsr2h
  5476  001B10  50DF               	movf	indf2,w,c
  5477  001B12  EC5D  F00E         	call	_PrintC
  5478  001B16  4A26               	infsnz	PrintS@s_printS,f,c
  5479  001B18  2A27               	incf	PrintS@s_printS+1,f,c
  5480  001B1A                     l238:
  5481  001B1A  C026  FFD9         	movff	PrintS@s_printS,fsr2l
  5482  001B1E  C027  FFDA         	movff	PrintS@s_printS+1,fsr2h
  5483  001B22  50DF               	movf	indf2,w,c
  5484  001B24  A4D8               	btfss	status,2,c
  5485  001B26  D7F0               	goto	l239
  5486                           
  5487                           ;main.c: 501: }
  5488                           ;main.c: 502: PrintC(0xFF);
  5489  001B28  0EFF               	movlw	255
  5490  001B2A  EC5D  F00E         	call	_PrintC
  5491                           
  5492                           ;main.c: 503: PrintC(0xFF);
  5493  001B2E  0EFF               	movlw	255
  5494  001B30  EC5D  F00E         	call	_PrintC
  5495                           
  5496                           ;main.c: 504: PrintC(0xFF);
  5497  001B34  0EFF               	movlw	255
  5498  001B36  EC5D  F00E         	call	_PrintC
  5499  001B3A  0012               	return		;funcret
  5500  001B3C                     __end_of_PrintS:
  5501                           	opt stack 0
  5502                           tblptru	equ	0xFF8
  5503                           tblptrh	equ	0xFF7
  5504                           tblptrl	equ	0xFF6
  5505                           tablat	equ	0xFF5
  5506                           prodh	equ	0xFF4
  5507                           prodl	equ	0xFF3
  5508                           intcon	equ	0xFF2
  5509                           postinc0	equ	0xFEE
  5510                           wreg	equ	0xFE8
  5511                           indf1	equ	0xFE7
  5512                           postdec1	equ	0xFE5
  5513                           fsr1h	equ	0xFE2
  5514                           fsr1l	equ	0xFE1
  5515                           indf2	equ	0xFDF
  5516                           postinc2	equ	0xFDE
  5517                           postdec2	equ	0xFDD
  5518                           fsr2h	equ	0xFDA
  5519                           fsr2l	equ	0xFD9
  5520                           status	equ	0xFD8
  5521                           
  5522 ;; *************** function _PrintC *****************
  5523 ;; Defined at:
  5524 ;;		line 483 in file "main.c"
  5525 ;; Parameters:    Size  Location     Type
  5526 ;;  c_printC        1    wreg     unsigned char 
  5527 ;; Auto vars:     Size  Location     Type
  5528 ;;  c_printC        1   36[COMRAM] unsigned char 
  5529 ;; Return value:  Size  Location     Type
  5530 ;;                  1    wreg      void 
  5531 ;; Registers used:
  5532 ;;		wreg
  5533 ;; Tracked objects:
  5534 ;;		On entry : 0/0
  5535 ;;		On exit  : 0/0
  5536 ;;		Unchanged: 0/0
  5537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5538 ;;      Params:         0       0       0       0       0       0       0
  5539 ;;      Locals:         1       0       0       0       0       0       0
  5540 ;;      Temps:          0       0       0       0       0       0       0
  5541 ;;      Totals:         1       0       0       0       0       0       0
  5542 ;;Total ram usage:        1 bytes
  5543 ;; Hardware stack levels used:    1
  5544 ;; Hardware stack levels required when called:    2
  5545 ;; This function calls:
  5546 ;;		Nothing
  5547 ;; This function is called by:
  5548 ;;		_PrintS
  5549 ;; This function uses a non-reentrant model
  5550 ;;
  5551                           
  5552                           	psect	text22
  5553  001CBA                     __ptext22:
  5554                           	opt stack 0
  5555  001CBA                     _PrintC:
  5556                           	opt stack 27
  5557                           
  5558                           ;incstack = 0
  5559                           ;PrintC@c_printC stored from wreg
  5560  001CBA  6E25               	movwf	PrintC@c_printC,c
  5561  001CBC                     
  5562                           ;main.c: 484: while(TXSTA1bits.TRMT == 0) {};
  5563  001CBC  A2AC               	btfss	4012,1,c	;volatile
  5564  001CBE  D7FE               	goto	l2294
  5565                           
  5566                           ;main.c: 485: TXREG1 = c_printC;
  5567  001CC0  C025  FFAD         	movff	PrintC@c_printC,4013	;volatile
  5568  001CC4  F000               	nop		;# 
  5569  001CC6  0012               	return		;funcret
  5570  001CC8                     __end_of_PrintC:
  5571                           	opt stack 0
  5572                           tblptru	equ	0xFF8
  5573                           tblptrh	equ	0xFF7
  5574                           tblptrl	equ	0xFF6
  5575                           tablat	equ	0xFF5
  5576                           prodh	equ	0xFF4
  5577                           prodl	equ	0xFF3
  5578                           intcon	equ	0xFF2
  5579                           postinc0	equ	0xFEE
  5580                           wreg	equ	0xFE8
  5581                           indf1	equ	0xFE7
  5582                           postdec1	equ	0xFE5
  5583                           fsr1h	equ	0xFE2
  5584                           fsr1l	equ	0xFE1
  5585                           indf2	equ	0xFDF
  5586                           postinc2	equ	0xFDE
  5587                           postdec2	equ	0xFDD
  5588                           fsr2h	equ	0xFDA
  5589                           fsr2l	equ	0xFD9
  5590                           status	equ	0xFD8
  5591                           
  5592 ;; *************** function _InitTmr0 *****************
  5593 ;; Defined at:
  5594 ;;		line 435 in file "main.c"
  5595 ;; Parameters:    Size  Location     Type
  5596 ;;		None
  5597 ;; Auto vars:     Size  Location     Type
  5598 ;;		None
  5599 ;; Return value:  Size  Location     Type
  5600 ;;                  1    wreg      void 
  5601 ;; Registers used:
  5602 ;;		wreg, status,2
  5603 ;; Tracked objects:
  5604 ;;		On entry : 0/0
  5605 ;;		On exit  : 0/0
  5606 ;;		Unchanged: 0/0
  5607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5608 ;;      Params:         0       0       0       0       0       0       0
  5609 ;;      Locals:         0       0       0       0       0       0       0
  5610 ;;      Temps:          0       0       0       0       0       0       0
  5611 ;;      Totals:         0       0       0       0       0       0       0
  5612 ;;Total ram usage:        0 bytes
  5613 ;; Hardware stack levels used:    1
  5614 ;; Hardware stack levels required when called:    2
  5615 ;; This function calls:
  5616 ;;		Nothing
  5617 ;; This function is called by:
  5618 ;;		_main
  5619 ;; This function uses a non-reentrant model
  5620 ;;
  5621                           
  5622                           	psect	text23
  5623  001C86                     __ptext23:
  5624                           	opt stack 0
  5625  001C86                     _InitTmr0:
  5626                           	opt stack 28
  5627                           
  5628                           ;main.c: 436: T08BIT = 0;
  5629                           
  5630                           ;incstack = 0
  5631  001C86  9CD5               	bcf	4053,6,c	;volatile
  5632                           
  5633                           ;main.c: 437: T0CS = 0;
  5634  001C88  9AD5               	bcf	4053,5,c	;volatile
  5635                           
  5636                           ;main.c: 438: T0SE = 0;
  5637  001C8A  98D5               	bcf	4053,4,c	;volatile
  5638                           
  5639                           ;main.c: 439: PSA = 0;
  5640  001C8C  96D5               	bcf	4053,3,c	;volatile
  5641                           
  5642                           ;main.c: 440: T0PS2 = 0;
  5643  001C8E  94D5               	bcf	4053,2,c	;volatile
  5644                           
  5645                           ;main.c: 441: T0PS1 = 1;
  5646  001C90  82D5               	bsf	4053,1,c	;volatile
  5647                           
  5648                           ;main.c: 442: T0PS0 = 1;
  5649  001C92  80D5               	bsf	4053,0,c	;volatile
  5650                           
  5651                           ;main.c: 443: TMR0L = 0xB0;
  5652  001C94  0EB0               	movlw	176
  5653  001C96  6ED6               	movwf	4054,c	;volatile
  5654                           
  5655                           ;main.c: 444: TMR0H = 0x3C;
  5656  001C98  0E3C               	movlw	60
  5657  001C9A  6ED7               	movwf	4055,c	;volatile
  5658                           
  5659                           ;main.c: 445: TMR0IF = 0;
  5660  001C9C  94F2               	bcf	intcon,2,c	;volatile
  5661                           
  5662                           ;main.c: 448: TMR0ON = 1;
  5663  001C9E  8ED5               	bsf	4053,7,c	;volatile
  5664  001CA0  0012               	return		;funcret
  5665  001CA2                     __end_of_InitTmr0:
  5666                           	opt stack 0
  5667                           tblptru	equ	0xFF8
  5668                           tblptrh	equ	0xFF7
  5669                           tblptrl	equ	0xFF6
  5670                           tablat	equ	0xFF5
  5671                           prodh	equ	0xFF4
  5672                           prodl	equ	0xFF3
  5673                           intcon	equ	0xFF2
  5674                           postinc0	equ	0xFEE
  5675                           wreg	equ	0xFE8
  5676                           indf1	equ	0xFE7
  5677                           postdec1	equ	0xFE5
  5678                           fsr1h	equ	0xFE2
  5679                           fsr1l	equ	0xFE1
  5680                           indf2	equ	0xFDF
  5681                           postinc2	equ	0xFDE
  5682                           postdec2	equ	0xFDD
  5683                           fsr2h	equ	0xFDA
  5684                           fsr2l	equ	0xFD9
  5685                           status	equ	0xFD8
  5686                           
  5687 ;; *************** function _ClockInit *****************
  5688 ;; Defined at:
  5689 ;;		line 360 in file "main.c"
  5690 ;; Parameters:    Size  Location     Type
  5691 ;;		None
  5692 ;; Auto vars:     Size  Location     Type
  5693 ;;		None
  5694 ;; Return value:  Size  Location     Type
  5695 ;;                  1    wreg      void 
  5696 ;; Registers used:
  5697 ;;		None
  5698 ;; Tracked objects:
  5699 ;;		On entry : 0/0
  5700 ;;		On exit  : 0/0
  5701 ;;		Unchanged: 0/0
  5702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5703 ;;      Params:         0       0       0       0       0       0       0
  5704 ;;      Locals:         0       0       0       0       0       0       0
  5705 ;;      Temps:          0       0       0       0       0       0       0
  5706 ;;      Totals:         0       0       0       0       0       0       0
  5707 ;;Total ram usage:        0 bytes
  5708 ;; Hardware stack levels used:    1
  5709 ;; Hardware stack levels required when called:    2
  5710 ;; This function calls:
  5711 ;;		Nothing
  5712 ;; This function is called by:
  5713 ;;		_main
  5714 ;; This function uses a non-reentrant model
  5715 ;;
  5716                           
  5717                           	psect	text24
  5718  001CC8                     __ptext24:
  5719                           	opt stack 0
  5720  001CC8                     _ClockInit:
  5721                           	opt stack 28
  5722                           
  5723                           ;main.c: 361: OSCCONbits.IRCF = 0b111;
  5724                           
  5725                           ;incstack = 0
  5726  001CC8  88D3               	bsf	4051,4,c	;volatile
  5727  001CCA  8AD3               	bsf	4051,5,c	;volatile
  5728  001CCC  8CD3               	bsf	4051,6,c	;volatile
  5729                           
  5730                           ;main.c: 362: OSCTUNEbits.PLLEN = 1;
  5731  001CCE  8C9B               	bsf	3995,6,c	;volatile
  5732  001CD0  B4D3               	btfsc	4051,2,c	;volatile
  5733  001CD2  0012               	return	
  5734  001CD4  D7FD               	goto	l209
  5735  001CD6                     __end_of_ClockInit:
  5736                           	opt stack 0
  5737                           tblptru	equ	0xFF8
  5738                           tblptrh	equ	0xFF7
  5739                           tblptrl	equ	0xFF6
  5740                           tablat	equ	0xFF5
  5741                           prodh	equ	0xFF4
  5742                           prodl	equ	0xFF3
  5743                           intcon	equ	0xFF2
  5744                           postinc0	equ	0xFEE
  5745                           wreg	equ	0xFE8
  5746                           indf1	equ	0xFE7
  5747                           postdec1	equ	0xFE5
  5748                           fsr1h	equ	0xFE2
  5749                           fsr1l	equ	0xFE1
  5750                           indf2	equ	0xFDF
  5751                           postinc2	equ	0xFDE
  5752                           postdec2	equ	0xFDD
  5753                           fsr2h	equ	0xFDA
  5754                           fsr2l	equ	0xFD9
  5755                           status	equ	0xFD8
  5756                           
  5757 ;; *************** function _ClearArray *****************
  5758 ;; Defined at:
  5759 ;;		line 514 in file "main.c"
  5760 ;; Parameters:    Size  Location     Type
  5761 ;;		None
  5762 ;; Auto vars:     Size  Location     Type
  5763 ;;  cpt_vide        1   36[COMRAM] unsigned char 
  5764 ;; Return value:  Size  Location     Type
  5765 ;;                  1    wreg      void 
  5766 ;; Registers used:
  5767 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5768 ;; Tracked objects:
  5769 ;;		On entry : 0/0
  5770 ;;		On exit  : 0/0
  5771 ;;		Unchanged: 0/0
  5772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5773 ;;      Params:         0       0       0       0       0       0       0
  5774 ;;      Locals:         1       0       0       0       0       0       0
  5775 ;;      Temps:          0       0       0       0       0       0       0
  5776 ;;      Totals:         1       0       0       0       0       0       0
  5777 ;;Total ram usage:        1 bytes
  5778 ;; Hardware stack levels used:    1
  5779 ;; Hardware stack levels required when called:    2
  5780 ;; This function calls:
  5781 ;;		Nothing
  5782 ;; This function is called by:
  5783 ;;		_main
  5784 ;; This function uses a non-reentrant model
  5785 ;;
  5786                           
  5787                           	psect	text25
  5788  001BC8                     __ptext25:
  5789                           	opt stack 0
  5790  001BC8                     _ClearArray:
  5791                           	opt stack 28
  5792                           
  5793                           ;main.c: 515: char cpt_vide = 0;
  5794                           
  5795                           ;incstack = 0
  5796  001BC8  0E00               	movlw	0
  5797  001BCA  6E25               	movwf	ClearArray@cpt_vide,c
  5798                           
  5799                           ;main.c: 516: for(cpt_vide=0;cpt_vide<252;cpt_vide++) {
  5800  001BCC  0E00               	movlw	0
  5801  001BCE  6E25               	movwf	ClearArray@cpt_vide,c
  5802  001BD0                     l2538:
  5803  001BD0  0EFB               	movlw	251
  5804  001BD2  6425               	cpfsgt	ClearArray@cpt_vide,c
  5805  001BD4  D001               	goto	l244
  5806  001BD6  0012               	return	
  5807  001BD8                     l244:
  5808                           
  5809                           ;main.c: 517: SendMsgSreen[cpt_vide] = '\0';
  5810  001BD8  5025               	movf	ClearArray@cpt_vide,w,c
  5811  001BDA  0D01               	mullw	1
  5812  001BDC  0E00               	movlw	low _SendMsgSreen
  5813  001BDE  24F3               	addwf	prodl,w,c
  5814  001BE0  6ED9               	movwf	fsr2l,c
  5815  001BE2  0E01               	movlw	high _SendMsgSreen
  5816  001BE4  20F4               	addwfc	prodh,w,c
  5817  001BE6  6EDA               	movwf	fsr2h,c
  5818  001BE8  0E00               	movlw	0
  5819  001BEA  6EDF               	movwf	indf2,c
  5820  001BEC  2A25               	incf	ClearArray@cpt_vide,f,c
  5821  001BEE  D7F0               	goto	l2538
  5822  001BF0                     __end_of_ClearArray:
  5823                           	opt stack 0
  5824                           tblptru	equ	0xFF8
  5825                           tblptrh	equ	0xFF7
  5826                           tblptrl	equ	0xFF6
  5827                           tablat	equ	0xFF5
  5828                           prodh	equ	0xFF4
  5829                           prodl	equ	0xFF3
  5830                           intcon	equ	0xFF2
  5831                           postinc0	equ	0xFEE
  5832                           wreg	equ	0xFE8
  5833                           indf1	equ	0xFE7
  5834                           postdec1	equ	0xFE5
  5835                           fsr1h	equ	0xFE2
  5836                           fsr1l	equ	0xFE1
  5837                           indf2	equ	0xFDF
  5838                           postinc2	equ	0xFDE
  5839                           postdec2	equ	0xFDD
  5840                           fsr2h	equ	0xFDA
  5841                           fsr2l	equ	0xFD9
  5842                           status	equ	0xFD8
  5843                           
  5844 ;; *************** function _Adc *****************
  5845 ;; Defined at:
  5846 ;;		line 465 in file "main.c"
  5847 ;; Parameters:    Size  Location     Type
  5848 ;;  channel         1    wreg     unsigned char 
  5849 ;; Auto vars:     Size  Location     Type
  5850 ;;  channel         1   40[COMRAM] unsigned char 
  5851 ;; Return value:  Size  Location     Type
  5852 ;;                  2   36[COMRAM] unsigned int 
  5853 ;; Registers used:
  5854 ;;		wreg, status,2, status,0
  5855 ;; Tracked objects:
  5856 ;;		On entry : 0/0
  5857 ;;		On exit  : 0/0
  5858 ;;		Unchanged: 0/0
  5859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5860 ;;      Params:         2       0       0       0       0       0       0
  5861 ;;      Locals:         1       0       0       0       0       0       0
  5862 ;;      Temps:          2       0       0       0       0       0       0
  5863 ;;      Totals:         5       0       0       0       0       0       0
  5864 ;;Total ram usage:        5 bytes
  5865 ;; Hardware stack levels used:    1
  5866 ;; Hardware stack levels required when called:    2
  5867 ;; This function calls:
  5868 ;;		Nothing
  5869 ;; This function is called by:
  5870 ;;		_main
  5871 ;; This function uses a non-reentrant model
  5872 ;;
  5873                           
  5874                           	psect	text26
  5875  001B3C                     __ptext26:
  5876                           	opt stack 0
  5877  001B3C                     _Adc:
  5878                           	opt stack 28
  5879                           
  5880                           ;incstack = 0
  5881                           ;Adc@channel stored from wreg
  5882  001B3C  6E29               	movwf	Adc@channel,c
  5883                           
  5884                           ;main.c: 466: ADCON0bits.ADON = 1;
  5885  001B3E  80C2               	bsf	4034,0,c	;volatile
  5886                           
  5887                           ;main.c: 467: ADCON0bits.CHS = channel;
  5888  001B40  C029  F027         	movff	Adc@channel,??_Adc
  5889  001B44  4627               	rlncf	??_Adc,f,c
  5890  001B46  4627               	rlncf	??_Adc,f,c
  5891  001B48  50C2               	movf	4034,w,c	;volatile
  5892  001B4A  1827               	xorwf	??_Adc,w,c
  5893  001B4C  0BC3               	andlw	-61
  5894  001B4E  1827               	xorwf	??_Adc,w,c
  5895  001B50  6EC2               	movwf	4034,c	;volatile
  5896                           
  5897                           ;main.c: 468: ADCON0bits.GO = 1;
  5898  001B52  82C2               	bsf	4034,1,c	;volatile
  5899  001B54  B2C2               	btfsc	4034,1,c	;volatile
  5900  001B56  D7FE               	goto	l227
  5901                           
  5902                           ;main.c: 470: ADCON0bits.ADON = 0;
  5903  001B58  90C2               	bcf	4034,0,c	;volatile
  5904                           
  5905                           ;main.c: 471: return (ADRESH << 8) + ADRESL;
  5906  001B5A  50C4               	movf	4036,w,c	;volatile
  5907  001B5C  6E28               	movwf	(??_Adc+1)& (0+255),c
  5908  001B5E  6A27               	clrf	??_Adc& (0+255),c
  5909  001B60  50C3               	movf	4035,w,c	;volatile
  5910  001B62  2427               	addwf	??_Adc,w,c
  5911  001B64  6E25               	movwf	?_Adc,c
  5912  001B66  0E00               	movlw	0
  5913  001B68  2028               	addwfc	??_Adc+1,w,c
  5914  001B6A  6E26               	movwf	?_Adc+1,c
  5915  001B6C  0012               	return	
  5916  001B6E                     __end_of_Adc:
  5917                           	opt stack 0
  5918                           tblptru	equ	0xFF8
  5919                           tblptrh	equ	0xFF7
  5920                           tblptrl	equ	0xFF6
  5921                           tablat	equ	0xFF5
  5922                           prodh	equ	0xFF4
  5923                           prodl	equ	0xFF3
  5924                           intcon	equ	0xFF2
  5925                           postinc0	equ	0xFEE
  5926                           wreg	equ	0xFE8
  5927                           indf1	equ	0xFE7
  5928                           postdec1	equ	0xFE5
  5929                           fsr1h	equ	0xFE2
  5930                           fsr1l	equ	0xFE1
  5931                           indf2	equ	0xFDF
  5932                           postinc2	equ	0xFDE
  5933                           postdec2	equ	0xFDD
  5934                           fsr2h	equ	0xFDA
  5935                           fsr2l	equ	0xFD9
  5936                           status	equ	0xFD8
  5937                           
  5938 ;; *************** function _ADCInit *****************
  5939 ;; Defined at:
  5940 ;;		line 366 in file "main.c"
  5941 ;; Parameters:    Size  Location     Type
  5942 ;;		None
  5943 ;; Auto vars:     Size  Location     Type
  5944 ;;		None
  5945 ;; Return value:  Size  Location     Type
  5946 ;;                  1    wreg      void 
  5947 ;; Registers used:
  5948 ;;		wreg, status,2
  5949 ;; Tracked objects:
  5950 ;;		On entry : 0/0
  5951 ;;		On exit  : 0/0
  5952 ;;		Unchanged: 0/0
  5953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5954 ;;      Params:         0       0       0       0       0       0       0
  5955 ;;      Locals:         0       0       0       0       0       0       0
  5956 ;;      Temps:          0       0       0       0       0       0       0
  5957 ;;      Totals:         0       0       0       0       0       0       0
  5958 ;;Total ram usage:        0 bytes
  5959 ;; Hardware stack levels used:    1
  5960 ;; Hardware stack levels required when called:    2
  5961 ;; This function calls:
  5962 ;;		Nothing
  5963 ;; This function is called by:
  5964 ;;		_main
  5965 ;; This function uses a non-reentrant model
  5966 ;;
  5967                           
  5968                           	psect	text27
  5969  001BF0                     __ptext27:
  5970                           	opt stack 0
  5971  001BF0                     _ADCInit:
  5972                           	opt stack 28
  5973                           
  5974                           ;main.c: 367: TRISAbits.TRISA0 = 1;
  5975                           
  5976                           ;incstack = 0
  5977  001BF0  8092               	bsf	3986,0,c	;volatile
  5978                           
  5979                           ;main.c: 368: TRISAbits.TRISA1 = 1;
  5980  001BF2  8292               	bsf	3986,1,c	;volatile
  5981                           
  5982                           ;main.c: 369: TRISAbits.TRISA2 = 1;
  5983  001BF4  8492               	bsf	3986,2,c	;volatile
  5984                           
  5985                           ;main.c: 370: TRISAbits.TRISA3 = 1;
  5986  001BF6  8692               	bsf	3986,3,c	;volatile
  5987                           
  5988                           ;main.c: 373: ADCON1bits.PCFG = 0b0000;
  5989  001BF8  90C1               	bcf	4033,0,c	;volatile
  5990  001BFA  92C1               	bcf	4033,1,c	;volatile
  5991  001BFC  94C1               	bcf	4033,2,c	;volatile
  5992  001BFE  96C1               	bcf	4033,3,c	;volatile
  5993                           
  5994                           ;main.c: 374: ADCON1bits.VCFG = 0;
  5995  001C00  0ECF               	movlw	-49
  5996  001C02  16C1               	andwf	4033,f,c	;volatile
  5997                           
  5998                           ;main.c: 375: ADCON2bits.ADFM = 1;
  5999  001C04  8EC0               	bsf	4032,7,c	;volatile
  6000                           
  6001                           ;main.c: 376: ADCON2bits.ACQT = 0b010;
  6002  001C06  50C0               	movf	4032,w,c	;volatile
  6003  001C08  0BC7               	andlw	-57
  6004  001C0A  0910               	iorlw	16
  6005  001C0C  6EC0               	movwf	4032,c	;volatile
  6006                           
  6007                           ;main.c: 377: ADCON2bits.ADCS = 0b001;
  6008  001C0E  50C0               	movf	4032,w,c	;volatile
  6009  001C10  0BF8               	andlw	-8
  6010  001C12  0901               	iorlw	1
  6011  001C14  6EC0               	movwf	4032,c	;volatile
  6012  001C16  0012               	return		;funcret
  6013  001C18                     __end_of_ADCInit:
  6014                           	opt stack 0
  6015                           tblptru	equ	0xFF8
  6016                           tblptrh	equ	0xFF7
  6017                           tblptrl	equ	0xFF6
  6018                           tablat	equ	0xFF5
  6019                           prodh	equ	0xFF4
  6020                           prodl	equ	0xFF3
  6021                           intcon	equ	0xFF2
  6022                           postinc0	equ	0xFEE
  6023                           wreg	equ	0xFE8
  6024                           indf1	equ	0xFE7
  6025                           postdec1	equ	0xFE5
  6026                           fsr1h	equ	0xFE2
  6027                           fsr1l	equ	0xFE1
  6028                           indf2	equ	0xFDF
  6029                           postinc2	equ	0xFDE
  6030                           postdec2	equ	0xFDD
  6031                           fsr2h	equ	0xFDA
  6032                           fsr2l	equ	0xFD9
  6033                           status	equ	0xFD8
  6034                           
  6035 ;; *************** function _ISR *****************
  6036 ;; Defined at:
  6037 ;;		line 541 in file "main.c"
  6038 ;; Parameters:    Size  Location     Type
  6039 ;;		None
  6040 ;; Auto vars:     Size  Location     Type
  6041 ;;  j               2   32[COMRAM] int 
  6042 ;;  j               2   30[COMRAM] int 
  6043 ;;  j               2   28[COMRAM] int 
  6044 ;;  j               2   26[COMRAM] int 
  6045 ;;  j               2   24[COMRAM] int 
  6046 ;;  Receive         1   34[COMRAM] unsigned char 
  6047 ;;  data_spi        1   35[COMRAM] unsigned char 
  6048 ;; Return value:  Size  Location     Type
  6049 ;;                  1    wreg      void 
  6050 ;; Registers used:
  6051 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6052 ;; Tracked objects:
  6053 ;;		On entry : 0/0
  6054 ;;		On exit  : 0/0
  6055 ;;		Unchanged: 0/0
  6056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6057 ;;      Params:         0       0       0       0       0       0       0
  6058 ;;      Locals:        12       0       0       0       0       0       0
  6059 ;;      Temps:         22       0       0       0       0       0       0
  6060 ;;      Totals:        34       0       0       0       0       0       0
  6061 ;;Total ram usage:       34 bytes
  6062 ;; Hardware stack levels used:    1
  6063 ;; Hardware stack levels required when called:    1
  6064 ;; This function calls:
  6065 ;;		_Modulo
  6066 ;; This function is called by:
  6067 ;;		Interrupt level 2
  6068 ;; This function uses a non-reentrant model
  6069 ;;
  6070                           
  6071                           	psect	intcode
  6072  000008                     __pintcode:
  6073                           	opt stack 0
  6074  000008                     _ISR:
  6075                           	opt stack 25
  6076                           
  6077                           ;incstack = 0
  6078  000008  825B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6079  00000A  CFFA F007          	movff	pclath,??_ISR+4
  6080  00000E  CFFB F008          	movff	pclatu,??_ISR+5
  6081  000012  CFE9 F009          	movff	fsr0l,??_ISR+6
  6082  000016  CFEA F00A          	movff	fsr0h,??_ISR+7
  6083  00001A  CFE1 F00B          	movff	fsr1l,??_ISR+8
  6084  00001E  CFE2 F00C          	movff	fsr1h,??_ISR+9
  6085  000022  CFD9 F00D          	movff	fsr2l,??_ISR+10
  6086  000026  CFDA F00E          	movff	fsr2h,??_ISR+11
  6087  00002A  CFF3 F00F          	movff	prodl,??_ISR+12
  6088  00002E  CFF4 F010          	movff	prodh,??_ISR+13
  6089  000032  CFF6 F011          	movff	tblptrl,??_ISR+14
  6090  000036  CFF7 F012          	movff	tblptrh,??_ISR+15
  6091  00003A  CFF8 F013          	movff	tblptru,??_ISR+16
  6092  00003E  CFF5 F014          	movff	tablat,??_ISR+17
  6093  000042  C05B  F015         	movff	btemp,??_ISR+18
  6094  000046  C05C  F016         	movff	btemp+1,??_ISR+19
  6095  00004A  C05D  F017         	movff	btemp+2,??_ISR+20
  6096  00004E  C05E  F018         	movff	btemp+3,??_ISR+21
  6097                           
  6098                           ;main.c: 543: if(PIR1bits.SSPIF){
  6099  000052  A69E               	btfss	3998,3,c	;volatile
  6100  000054  D1E7               	goto	i2l324
  6101                           
  6102                           ;main.c: 544: char data_spi = SSPBUF;
  6103  000056  CFC9 F024          	movff	4041,ISR@data_spi	;volatile
  6104                           
  6105                           ;main.c: 545: PIR1bits.SSPIF = 0;
  6106  00005A  969E               	bcf	3998,3,c	;volatile
  6107                           
  6108                           ;main.c: 548: switch(EtatSpi) {
  6109  00005C  D1A8               	goto	i2l258
  6110  00005E                     i2l259:
  6111                           
  6112                           ;main.c: 550: TailleMsgSpi = data_spi;
  6113  00005E  C024  F057         	movff	ISR@data_spi,_TailleMsgSpi
  6114                           
  6115                           ;main.c: 551: if(TailleMsgSpi) {
  6116  000062  5057               	movf	_TailleMsgSpi,w,c
  6117  000064  B4D8               	btfsc	status,2,c
  6118  000066  D002               	goto	i2l260
  6119                           
  6120                           ;main.c: 552: EtatSpi = 1;
  6121  000068  0E01               	movlw	1
  6122  00006A  6E58               	movwf	_EtatSpi,c
  6123  00006C                     i2l260:
  6124                           
  6125                           ;main.c: 553: }
  6126                           ;main.c: 554: Checksum = 0;
  6127  00006C  0E00               	movlw	0
  6128  00006E  6E54               	movwf	_Checksum+1,c
  6129  000070  0E00               	movlw	0
  6130  000072  6E53               	movwf	_Checksum,c
  6131                           
  6132                           ;main.c: 555: CptSpi = 1;
  6133  000074  0E01               	movlw	1
  6134  000076  6E5A               	movwf	_CptSpi,c
  6135                           
  6136                           ;main.c: 556: break;
  6137  000078  D1A8               	goto	i2l261
  6138  00007A                     i2l262:
  6139                           
  6140                           ;main.c: 558: TypeVarSpi = data_spi;
  6141  00007A  C024  F0CF         	movff	ISR@data_spi,_TypeVarSpi
  6142                           
  6143                           ;main.c: 559: EtatSpi = 2;
  6144  00007E  0E02               	movlw	2
  6145  000080  6E58               	movwf	_EtatSpi,c
  6146                           
  6147                           ;main.c: 560: CptSpi++;
  6148  000082  2A5A               	incf	_CptSpi,f,c
  6149                           
  6150                           ;main.c: 561: break;
  6151  000084  D1A2               	goto	i2l261
  6152  000086                     
  6153                           ;main.c: 563: TextSpi[CptSpi-2] = data_spi;
  6154  000086  0EFE               	movlw	254
  6155  000088  6E03               	movwf	??_ISR& (0+255),c
  6156  00008A  0EFF               	movlw	255
  6157  00008C  6E04               	movwf	(??_ISR+1)& (0+255),c
  6158  00008E  505A               	movf	_CptSpi,w,c
  6159  000090  6E05               	movwf	(??_ISR+2)& (0+255),c
  6160  000092  6A06               	clrf	(??_ISR+3)& (0+255),c
  6161  000094  5003               	movf	??_ISR,w,c
  6162  000096  2605               	addwf	??_ISR+2,f,c
  6163  000098  5004               	movf	??_ISR+1,w,c
  6164  00009A  2206               	addwfc	??_ISR+3,f,c
  6165  00009C  0E00               	movlw	low _TextSpi
  6166  00009E  2405               	addwf	??_ISR+2,w,c
  6167  0000A0  6ED9               	movwf	fsr2l,c
  6168  0000A2  0E03               	movlw	high _TextSpi
  6169  0000A4  2006               	addwfc	??_ISR+3,w,c
  6170  0000A6  6EDA               	movwf	fsr2h,c
  6171  0000A8  C024  FFDF         	movff	ISR@data_spi,indf2
  6172                           
  6173                           ;main.c: 564: CptSpi++;
  6174  0000AC  2A5A               	incf	_CptSpi,f,c
  6175                           
  6176                           ;main.c: 565: if(CptSpi == TailleMsgSpi) {
  6177  0000AE  5057               	movf	_TailleMsgSpi,w,c
  6178  0000B0  185A               	xorwf	_CptSpi,w,c
  6179  0000B2  A4D8               	btfss	status,2,c
  6180  0000B4  D18A               	goto	i2l261
  6181                           
  6182                           ;main.c: 566: EtatSpi = 3;
  6183  0000B6  0E03               	movlw	3
  6184  0000B8  D176               	goto	L2
  6185  0000BA                     
  6186                           ;main.c: 570: if(Modulo(Checksum) == data_spi) {
  6187  0000BA  C053  F001         	movff	_Checksum,Modulo@M_nombre
  6188  0000BE  C054  F002         	movff	_Checksum+1,Modulo@M_nombre+1
  6189  0000C2  EC51  F00E         	call	_Modulo	;wreg free
  6190  0000C6  1824               	xorwf	ISR@data_spi,w,c
  6191  0000C8  A4D8               	btfss	status,2,c
  6192  0000CA  D16F               	goto	i2l315
  6193                           
  6194                           ;main.c: 571: FlagSpi = 1;
  6195  0000CC  0E01               	movlw	1
  6196  0000CE  0100               	movlb	0	; () banked
  6197  0000D0  6FD7               	movwf	_FlagSpi& (0+255),b
  6198                           
  6199                           ;main.c: 572: CptSpi = 0;
  6200  0000D2  0E00               	movlw	0
  6201  0000D4  6E5A               	movwf	_CptSpi,c
  6202                           
  6203                           ;main.c: 573: switch(TypeVarSpi) {
  6204  0000D6  D14F               	goto	i2l267
  6205  0000D8                     
  6206                           ; BSR set to: 0
  6207                           ;main.c: 575: for(int j=0;j<15;j++) {
  6208                           
  6209                           ; BSR set to: 0
  6210  0000D8  0E00               	movlw	0
  6211  0000DA  6E1A               	movwf	ISR@j+1,c
  6212  0000DC  0E00               	movlw	0
  6213  0000DE  6E19               	movwf	ISR@j,c
  6214  0000E0                     i2l2840:
  6215                           
  6216                           ; BSR set to: 0
  6217  0000E0  BE1A               	btfsc	ISR@j+1,7,c
  6218  0000E2  D006               	goto	i2l269
  6219  0000E4  501A               	movf	ISR@j+1,w,c
  6220  0000E6  E122               	bnz	i2l2854
  6221  0000E8  0E0F               	movlw	15
  6222  0000EA  5C19               	subwf	ISR@j,w,c
  6223  0000EC  B0D8               	btfsc	status,0,c
  6224  0000EE  D01E               	goto	i2l271
  6225  0000F0                     i2l269:
  6226                           
  6227                           ;main.c: 576: text_prgm[0][j] = '\0';
  6228                           
  6229                           ; BSR set to: 0
  6230  0000F0  0E00               	movlw	low _text_prgm
  6231  0000F2  2419               	addwf	ISR@j,w,c
  6232  0000F4  6ED9               	movwf	fsr2l,c
  6233  0000F6  0E02               	movlw	high _text_prgm
  6234  0000F8  201A               	addwfc	ISR@j+1,w,c
  6235  0000FA  6EDA               	movwf	fsr2h,c
  6236  0000FC  0E00               	movlw	0
  6237  0000FE  6EDF               	movwf	indf2,c
  6238  000100  4A19               	infsnz	ISR@j,f,c
  6239  000102  2A1A               	incf	ISR@j+1,f,c
  6240  000104  D7ED               	goto	i2l2840
  6241  000106                     
  6242                           ;main.c: 579: text_prgm[0][CptSpi] = TextSpi[CptSpi];
  6243  000106  505A               	movf	_CptSpi,w,c
  6244  000108  0D01               	mullw	1
  6245  00010A  0E00               	movlw	low _TextSpi
  6246  00010C  24F3               	addwf	prodl,w,c
  6247  00010E  6ED9               	movwf	fsr2l,c
  6248  000110  0E03               	movlw	high _TextSpi
  6249  000112  20F4               	addwfc	prodh,w,c
  6250  000114  6EDA               	movwf	fsr2h,c
  6251  000116  505A               	movf	_CptSpi,w,c
  6252  000118  0D01               	mullw	1
  6253  00011A  0E00               	movlw	low _text_prgm
  6254  00011C  24F3               	addwf	prodl,w,c
  6255  00011E  6EE1               	movwf	fsr1l,c
  6256  000120  0E02               	movlw	high _text_prgm
  6257  000122  20F4               	addwfc	prodh,w,c
  6258  000124  6EE2               	movwf	fsr1h,c
  6259  000126  CFDF FFE7          	movff	indf2,indf1
  6260                           
  6261                           ;main.c: 580: CptSpi++;
  6262  00012A  2A5A               	incf	_CptSpi,f,c
  6263  00012C                     i2l271:
  6264  00012C                     i2l2854:
  6265  00012C  0E0F               	movlw	15
  6266  00012E  605A               	cpfslt	_CptSpi,c
  6267  000130  D13C               	goto	i2l315
  6268  000132  505A               	movf	_CptSpi,w,c
  6269  000134  0D01               	mullw	1
  6270  000136  0E00               	movlw	low _TextSpi
  6271  000138  24F3               	addwf	prodl,w,c
  6272  00013A  6ED9               	movwf	fsr2l,c
  6273  00013C  0E03               	movlw	high _TextSpi
  6274  00013E  20F4               	addwfc	prodh,w,c
  6275  000140  6EDA               	movwf	fsr2h,c
  6276  000142  50DF               	movf	indf2,w,c
  6277  000144  B4D8               	btfsc	status,2,c
  6278  000146  D131               	goto	i2l315
  6279  000148  D7DE               	goto	i2l272
  6280  00014A                     
  6281                           ;main.c: 584: for(int j=0;j<15;j++) {
  6282  00014A  0E00               	movlw	0
  6283  00014C  6E1C               	movwf	ISR@j_919+1,c
  6284  00014E  0E00               	movlw	0
  6285  000150  6E1B               	movwf	ISR@j_919,c
  6286  000152                     i2l2860:
  6287  000152  BE1C               	btfsc	ISR@j_919+1,7,c
  6288  000154  D006               	goto	i2l278
  6289  000156  501C               	movf	ISR@j_919+1,w,c
  6290  000158  E122               	bnz	i2l2874
  6291  00015A  0E0F               	movlw	15
  6292  00015C  5C1B               	subwf	ISR@j_919,w,c
  6293  00015E  B0D8               	btfsc	status,0,c
  6294  000160  D01E               	goto	i2l280
  6295  000162                     i2l278:
  6296                           
  6297                           ;main.c: 585: text_prgm[1][j] = '\0';
  6298  000162  0E0F               	movlw	low (_text_prgm+15)
  6299  000164  241B               	addwf	ISR@j_919,w,c
  6300  000166  6ED9               	movwf	fsr2l,c
  6301  000168  0E02               	movlw	high (_text_prgm+15)
  6302  00016A  201C               	addwfc	ISR@j_919+1,w,c
  6303  00016C  6EDA               	movwf	fsr2h,c
  6304  00016E  0E00               	movlw	0
  6305  000170  6EDF               	movwf	indf2,c
  6306  000172  4A1B               	infsnz	ISR@j_919,f,c
  6307  000174  2A1C               	incf	ISR@j_919+1,f,c
  6308  000176  D7ED               	goto	i2l2860
  6309  000178                     
  6310                           ;main.c: 588: text_prgm[1][CptSpi] = TextSpi[CptSpi];
  6311  000178  505A               	movf	_CptSpi,w,c
  6312  00017A  0D01               	mullw	1
  6313  00017C  0E00               	movlw	low _TextSpi
  6314  00017E  24F3               	addwf	prodl,w,c
  6315  000180  6ED9               	movwf	fsr2l,c
  6316  000182  0E03               	movlw	high _TextSpi
  6317  000184  20F4               	addwfc	prodh,w,c
  6318  000186  6EDA               	movwf	fsr2h,c
  6319  000188  505A               	movf	_CptSpi,w,c
  6320  00018A  0D01               	mullw	1
  6321  00018C  0E0F               	movlw	low (_text_prgm+15)
  6322  00018E  24F3               	addwf	prodl,w,c
  6323  000190  6EE1               	movwf	fsr1l,c
  6324  000192  0E02               	movlw	high (_text_prgm+15)
  6325  000194  20F4               	addwfc	prodh,w,c
  6326  000196  6EE2               	movwf	fsr1h,c
  6327  000198  CFDF FFE7          	movff	indf2,indf1
  6328                           
  6329                           ;main.c: 589: CptSpi++;
  6330  00019C  2A5A               	incf	_CptSpi,f,c
  6331  00019E                     i2l280:
  6332  00019E                     i2l2874:
  6333  00019E  0E0F               	movlw	15
  6334  0001A0  605A               	cpfslt	_CptSpi,c
  6335  0001A2  D103               	goto	i2l315
  6336  0001A4  505A               	movf	_CptSpi,w,c
  6337  0001A6  0D01               	mullw	1
  6338  0001A8  0E00               	movlw	low _TextSpi
  6339  0001AA  24F3               	addwf	prodl,w,c
  6340  0001AC  6ED9               	movwf	fsr2l,c
  6341  0001AE  0E03               	movlw	high _TextSpi
  6342  0001B0  20F4               	addwfc	prodh,w,c
  6343  0001B2  6EDA               	movwf	fsr2h,c
  6344  0001B4  50DF               	movf	indf2,w,c
  6345  0001B6  B4D8               	btfsc	status,2,c
  6346  0001B8  D0F8               	goto	i2l315
  6347  0001BA  D7DE               	goto	i2l281
  6348  0001BC                     
  6349                           ;main.c: 593: for(int j=0;j<15;j++) {
  6350  0001BC  0E00               	movlw	0
  6351  0001BE  6E1E               	movwf	ISR@j_920+1,c
  6352  0001C0  0E00               	movlw	0
  6353  0001C2  6E1D               	movwf	ISR@j_920,c
  6354  0001C4                     i2l2880:
  6355  0001C4  BE1E               	btfsc	ISR@j_920+1,7,c
  6356  0001C6  D006               	goto	i2l286
  6357  0001C8  501E               	movf	ISR@j_920+1,w,c
  6358  0001CA  E122               	bnz	i2l2894
  6359  0001CC  0E0F               	movlw	15
  6360  0001CE  5C1D               	subwf	ISR@j_920,w,c
  6361  0001D0  B0D8               	btfsc	status,0,c
  6362  0001D2  D01E               	goto	i2l288
  6363  0001D4                     i2l286:
  6364                           
  6365                           ;main.c: 594: text_prgm[2][j] = '\0';
  6366  0001D4  0E1E               	movlw	low (_text_prgm+30)
  6367  0001D6  241D               	addwf	ISR@j_920,w,c
  6368  0001D8  6ED9               	movwf	fsr2l,c
  6369  0001DA  0E02               	movlw	high (_text_prgm+30)
  6370  0001DC  201E               	addwfc	ISR@j_920+1,w,c
  6371  0001DE  6EDA               	movwf	fsr2h,c
  6372  0001E0  0E00               	movlw	0
  6373  0001E2  6EDF               	movwf	indf2,c
  6374  0001E4  4A1D               	infsnz	ISR@j_920,f,c
  6375  0001E6  2A1E               	incf	ISR@j_920+1,f,c
  6376  0001E8  D7ED               	goto	i2l2880
  6377  0001EA                     
  6378                           ;main.c: 597: text_prgm[2][CptSpi] = TextSpi[CptSpi];
  6379  0001EA  505A               	movf	_CptSpi,w,c
  6380  0001EC  0D01               	mullw	1
  6381  0001EE  0E00               	movlw	low _TextSpi
  6382  0001F0  24F3               	addwf	prodl,w,c
  6383  0001F2  6ED9               	movwf	fsr2l,c
  6384  0001F4  0E03               	movlw	high _TextSpi
  6385  0001F6  20F4               	addwfc	prodh,w,c
  6386  0001F8  6EDA               	movwf	fsr2h,c
  6387  0001FA  505A               	movf	_CptSpi,w,c
  6388  0001FC  0D01               	mullw	1
  6389  0001FE  0E1E               	movlw	low (_text_prgm+30)
  6390  000200  24F3               	addwf	prodl,w,c
  6391  000202  6EE1               	movwf	fsr1l,c
  6392  000204  0E02               	movlw	high (_text_prgm+30)
  6393  000206  20F4               	addwfc	prodh,w,c
  6394  000208  6EE2               	movwf	fsr1h,c
  6395  00020A  CFDF FFE7          	movff	indf2,indf1
  6396                           
  6397                           ;main.c: 598: CptSpi++;
  6398  00020E  2A5A               	incf	_CptSpi,f,c
  6399  000210                     i2l288:
  6400  000210                     i2l2894:
  6401  000210  0E0F               	movlw	15
  6402  000212  605A               	cpfslt	_CptSpi,c
  6403  000214  D0CA               	goto	i2l315
  6404  000216  505A               	movf	_CptSpi,w,c
  6405  000218  0D01               	mullw	1
  6406  00021A  0E00               	movlw	low _TextSpi
  6407  00021C  24F3               	addwf	prodl,w,c
  6408  00021E  6ED9               	movwf	fsr2l,c
  6409  000220  0E03               	movlw	high _TextSpi
  6410  000222  20F4               	addwfc	prodh,w,c
  6411  000224  6EDA               	movwf	fsr2h,c
  6412  000226  50DF               	movf	indf2,w,c
  6413  000228  B4D8               	btfsc	status,2,c
  6414  00022A  D0BF               	goto	i2l315
  6415  00022C  D7DE               	goto	i2l289
  6416  00022E                     
  6417                           ;main.c: 602: for(int j=0;j<15;j++) {
  6418  00022E  0E00               	movlw	0
  6419  000230  6E20               	movwf	ISR@j_921+1,c
  6420  000232  0E00               	movlw	0
  6421  000234  6E1F               	movwf	ISR@j_921,c
  6422  000236                     i2l2900:
  6423  000236  BE20               	btfsc	ISR@j_921+1,7,c
  6424  000238  D006               	goto	i2l294
  6425  00023A  5020               	movf	ISR@j_921+1,w,c
  6426  00023C  E122               	bnz	i2l2914
  6427  00023E  0E0F               	movlw	15
  6428  000240  5C1F               	subwf	ISR@j_921,w,c
  6429  000242  B0D8               	btfsc	status,0,c
  6430  000244  D01E               	goto	i2l296
  6431  000246                     i2l294:
  6432                           
  6433                           ;main.c: 603: text_prgm[3][j] = '\0';
  6434  000246  0E2D               	movlw	low (_text_prgm+45)
  6435  000248  241F               	addwf	ISR@j_921,w,c
  6436  00024A  6ED9               	movwf	fsr2l,c
  6437  00024C  0E02               	movlw	high (_text_prgm+45)
  6438  00024E  2020               	addwfc	ISR@j_921+1,w,c
  6439  000250  6EDA               	movwf	fsr2h,c
  6440  000252  0E00               	movlw	0
  6441  000254  6EDF               	movwf	indf2,c
  6442  000256  4A1F               	infsnz	ISR@j_921,f,c
  6443  000258  2A20               	incf	ISR@j_921+1,f,c
  6444  00025A  D7ED               	goto	i2l2900
  6445  00025C                     
  6446                           ;main.c: 606: text_prgm[3][CptSpi] = TextSpi[CptSpi];
  6447  00025C  505A               	movf	_CptSpi,w,c
  6448  00025E  0D01               	mullw	1
  6449  000260  0E00               	movlw	low _TextSpi
  6450  000262  24F3               	addwf	prodl,w,c
  6451  000264  6ED9               	movwf	fsr2l,c
  6452  000266  0E03               	movlw	high _TextSpi
  6453  000268  20F4               	addwfc	prodh,w,c
  6454  00026A  6EDA               	movwf	fsr2h,c
  6455  00026C  505A               	movf	_CptSpi,w,c
  6456  00026E  0D01               	mullw	1
  6457  000270  0E2D               	movlw	low (_text_prgm+45)
  6458  000272  24F3               	addwf	prodl,w,c
  6459  000274  6EE1               	movwf	fsr1l,c
  6460  000276  0E02               	movlw	high (_text_prgm+45)
  6461  000278  20F4               	addwfc	prodh,w,c
  6462  00027A  6EE2               	movwf	fsr1h,c
  6463  00027C  CFDF FFE7          	movff	indf2,indf1
  6464                           
  6465                           ;main.c: 607: CptSpi++;
  6466  000280  2A5A               	incf	_CptSpi,f,c
  6467  000282                     i2l296:
  6468  000282                     i2l2914:
  6469  000282  0E0F               	movlw	15
  6470  000284  605A               	cpfslt	_CptSpi,c
  6471  000286  D091               	goto	i2l315
  6472  000288  505A               	movf	_CptSpi,w,c
  6473  00028A  0D01               	mullw	1
  6474  00028C  0E00               	movlw	low _TextSpi
  6475  00028E  24F3               	addwf	prodl,w,c
  6476  000290  6ED9               	movwf	fsr2l,c
  6477  000292  0E03               	movlw	high _TextSpi
  6478  000294  20F4               	addwfc	prodh,w,c
  6479  000296  6EDA               	movwf	fsr2h,c
  6480  000298  50DF               	movf	indf2,w,c
  6481  00029A  B4D8               	btfsc	status,2,c
  6482  00029C  D086               	goto	i2l315
  6483  00029E  D7DE               	goto	i2l297
  6484  0002A0                     
  6485                           ;main.c: 611: for(int j=0;j<15;j++) {
  6486  0002A0  0E00               	movlw	0
  6487  0002A2  6E22               	movwf	ISR@j_922+1,c
  6488  0002A4  0E00               	movlw	0
  6489  0002A6  6E21               	movwf	ISR@j_922,c
  6490  0002A8                     i2l2920:
  6491  0002A8  BE22               	btfsc	ISR@j_922+1,7,c
  6492  0002AA  D006               	goto	i2l302
  6493  0002AC  5022               	movf	ISR@j_922+1,w,c
  6494  0002AE  E122               	bnz	i2l2934
  6495  0002B0  0E0F               	movlw	15
  6496  0002B2  5C21               	subwf	ISR@j_922,w,c
  6497  0002B4  B0D8               	btfsc	status,0,c
  6498  0002B6  D01E               	goto	i2l304
  6499  0002B8                     i2l302:
  6500                           
  6501                           ;main.c: 612: text_prgm[4][j] = '\0';
  6502  0002B8  0E3C               	movlw	low (_text_prgm+60)
  6503  0002BA  2421               	addwf	ISR@j_922,w,c
  6504  0002BC  6ED9               	movwf	fsr2l,c
  6505  0002BE  0E02               	movlw	high (_text_prgm+60)
  6506  0002C0  2022               	addwfc	ISR@j_922+1,w,c
  6507  0002C2  6EDA               	movwf	fsr2h,c
  6508  0002C4  0E00               	movlw	0
  6509  0002C6  6EDF               	movwf	indf2,c
  6510  0002C8  4A21               	infsnz	ISR@j_922,f,c
  6511  0002CA  2A22               	incf	ISR@j_922+1,f,c
  6512  0002CC  D7ED               	goto	i2l2920
  6513  0002CE                     
  6514                           ;main.c: 615: text_prgm[4][CptSpi] = TextSpi[CptSpi];
  6515  0002CE  505A               	movf	_CptSpi,w,c
  6516  0002D0  0D01               	mullw	1
  6517  0002D2  0E00               	movlw	low _TextSpi
  6518  0002D4  24F3               	addwf	prodl,w,c
  6519  0002D6  6ED9               	movwf	fsr2l,c
  6520  0002D8  0E03               	movlw	high _TextSpi
  6521  0002DA  20F4               	addwfc	prodh,w,c
  6522  0002DC  6EDA               	movwf	fsr2h,c
  6523  0002DE  505A               	movf	_CptSpi,w,c
  6524  0002E0  0D01               	mullw	1
  6525  0002E2  0E3C               	movlw	low (_text_prgm+60)
  6526  0002E4  24F3               	addwf	prodl,w,c
  6527  0002E6  6EE1               	movwf	fsr1l,c
  6528  0002E8  0E02               	movlw	high (_text_prgm+60)
  6529  0002EA  20F4               	addwfc	prodh,w,c
  6530  0002EC  6EE2               	movwf	fsr1h,c
  6531  0002EE  CFDF FFE7          	movff	indf2,indf1
  6532                           
  6533                           ;main.c: 616: CptSpi++;
  6534  0002F2  2A5A               	incf	_CptSpi,f,c
  6535  0002F4                     i2l304:
  6536  0002F4                     i2l2934:
  6537  0002F4  0E0F               	movlw	15
  6538  0002F6  605A               	cpfslt	_CptSpi,c
  6539  0002F8  D058               	goto	i2l315
  6540  0002FA  505A               	movf	_CptSpi,w,c
  6541  0002FC  0D01               	mullw	1
  6542  0002FE  0E00               	movlw	low _TextSpi
  6543  000300  24F3               	addwf	prodl,w,c
  6544  000302  6ED9               	movwf	fsr2l,c
  6545  000304  0E03               	movlw	high _TextSpi
  6546  000306  20F4               	addwfc	prodh,w,c
  6547  000308  6EDA               	movwf	fsr2h,c
  6548  00030A  50DF               	movf	indf2,w,c
  6549  00030C  B4D8               	btfsc	status,2,c
  6550  00030E  D04D               	goto	i2l315
  6551  000310  D7DE               	goto	i2l305
  6552  000312                     i2l309:
  6553                           
  6554                           ; BSR set to: 0
  6555                           ;main.c: 620: PosX = TextSpi[0];
  6556  000312  C300  F0D5         	movff	_TextSpi,_PosX
  6557  000316  6BD6               	clrf	(_PosX+1)& (0+255),b
  6558                           
  6559                           ; BSR set to: 0
  6560                           ;main.c: 621: PosX = PosX << 8;
  6561  000318  51D5               	movf	_PosX& (0+255),w,b
  6562  00031A  6FD6               	movwf	(_PosX+1)& (0+255),b
  6563  00031C  6BD5               	clrf	_PosX& (0+255),b
  6564                           
  6565                           ; BSR set to: 0
  6566                           ;main.c: 622: PosX += TextSpi[1];
  6567  00031E  0103               	movlb	3	; () banked
  6568  000320  5101               	movf	(_TextSpi+1)& (0+255),w,b
  6569  000322  0100               	movlb	0	; () banked
  6570  000324  27D5               	addwf	_PosX& (0+255),f,b
  6571  000326  0E00               	movlw	0
  6572  000328  23D6               	addwfc	(_PosX+1)& (0+255),f,b
  6573                           
  6574                           ; BSR set to: 0
  6575                           ;main.c: 623: if(PosX > 750) {
  6576  00032A  BFD6               	btfsc	(_PosX+1)& (0+255),7,b
  6577  00032C  D03E               	goto	i2l315
  6578  00032E  0EEF               	movlw	239
  6579  000330  5DD5               	subwf	_PosX& (0+255),w,b
  6580  000332  0E02               	movlw	2
  6581  000334  59D6               	subwfb	(_PosX+1)& (0+255),w,b
  6582  000336  A0D8               	btfss	status,0,c
  6583  000338  D038               	goto	i2l315
  6584                           
  6585                           ; BSR set to: 0
  6586                           ;main.c: 624: PosX = 750;
  6587  00033A  0E02               	movlw	2
  6588  00033C  6FD6               	movwf	(_PosX+1)& (0+255),b
  6589  00033E  0EEE               	movlw	238
  6590  000340  6FD5               	movwf	_PosX& (0+255),b
  6591                           
  6592                           ; BSR set to: 0
  6593                           ;main.c: 625: }
  6594                           ;main.c: 626: break;
  6595  000342  D033               	goto	i2l315
  6596  000344                     i2l311:
  6597                           
  6598                           ; BSR set to: 0
  6599                           ;main.c: 628: PosY = TextSpi[0];
  6600  000344  C300  F0D3         	movff	_TextSpi,_PosY
  6601  000348  6BD4               	clrf	(_PosY+1)& (0+255),b
  6602                           
  6603                           ; BSR set to: 0
  6604                           ;main.c: 629: PosY = PosY << 8;
  6605  00034A  51D3               	movf	_PosY& (0+255),w,b
  6606  00034C  6FD4               	movwf	(_PosY+1)& (0+255),b
  6607  00034E  6BD3               	clrf	_PosY& (0+255),b
  6608                           
  6609                           ; BSR set to: 0
  6610                           ;main.c: 630: PosY += TextSpi[1];
  6611  000350  0103               	movlb	3	; () banked
  6612  000352  5101               	movf	(_TextSpi+1)& (0+255),w,b
  6613  000354  0100               	movlb	0	; () banked
  6614  000356  27D3               	addwf	_PosY& (0+255),f,b
  6615  000358  0E00               	movlw	0
  6616  00035A  23D4               	addwfc	(_PosY+1)& (0+255),f,b
  6617                           
  6618                           ; BSR set to: 0
  6619                           ;main.c: 631: if(PosY > 430) {
  6620  00035C  BFD4               	btfsc	(_PosY+1)& (0+255),7,b
  6621  00035E  D025               	goto	i2l315
  6622  000360  0EAF               	movlw	175
  6623  000362  5DD3               	subwf	_PosY& (0+255),w,b
  6624  000364  0E01               	movlw	1
  6625  000366  59D4               	subwfb	(_PosY+1)& (0+255),w,b
  6626  000368  A0D8               	btfss	status,0,c
  6627  00036A  D01F               	goto	i2l315
  6628                           
  6629                           ; BSR set to: 0
  6630                           ;main.c: 632: PosY = 430;
  6631  00036C  0E01               	movlw	1
  6632  00036E  6FD4               	movwf	(_PosY+1)& (0+255),b
  6633  000370  0EAE               	movlw	174
  6634  000372  6FD3               	movwf	_PosY& (0+255),b
  6635                           
  6636                           ; BSR set to: 0
  6637                           ;main.c: 641: }
  6638                           
  6639                           ; BSR set to: 0
  6640                           ;main.c: 640: break;
  6641                           
  6642                           ;main.c: 638: default:
  6643                           
  6644                           ; BSR set to: 0
  6645                           ;main.c: 637: break;
  6646                           
  6647                           ;main.c: 635: case 12:
  6648                           
  6649                           ; BSR set to: 0
  6650                           ;main.c: 633: }
  6651                           ;main.c: 634: break;
  6652  000374  D01A               	goto	i2l315
  6653  000376                     i2l267:
  6654                           
  6655                           ; BSR set to: 0
  6656                           
  6657                           ; BSR set to: 0
  6658  000376  51CF               	movf	_TypeVarSpi& (0+255),w,b
  6659                           
  6660                           ; Switch size 1, requested type "space"
  6661                           ; Number of cases is 8, Range of values is 1 to 12
  6662                           ; switch strategies available:
  6663                           ; Name         Instructions Cycles
  6664                           ; simple_byte           25    13 (average)
  6665                           ;	Chosen strategy is simple_byte
  6666  000378  0A01               	xorlw	1	; case 1
  6667  00037A  B4D8               	btfsc	status,2,c
  6668  00037C  D6AD               	goto	i2l268
  6669  00037E  0A03               	xorlw	3	; case 2
  6670  000380  B4D8               	btfsc	status,2,c
  6671  000382  D6E3               	goto	i2l277
  6672  000384  0A01               	xorlw	1	; case 3
  6673  000386  B4D8               	btfsc	status,2,c
  6674  000388  D719               	goto	i2l285
  6675  00038A  0A07               	xorlw	7	; case 4
  6676  00038C  B4D8               	btfsc	status,2,c
  6677  00038E  D74F               	goto	i2l293
  6678  000390  0A01               	xorlw	1	; case 5
  6679  000392  B4D8               	btfsc	status,2,c
  6680  000394  D785               	goto	i2l301
  6681  000396  0A03               	xorlw	3	; case 6
  6682  000398  B4D8               	btfsc	status,2,c
  6683  00039A  D7BB               	goto	i2l309
  6684  00039C  0A01               	xorlw	1	; case 7
  6685  00039E  B4D8               	btfsc	status,2,c
  6686  0003A0  D7D1               	goto	i2l311
  6687  0003A2  0A0B               	xorlw	11	; case 12
  6688                           
  6689                           ; BSR set to: 0
  6690                           
  6691                           ; BSR set to: 0
  6692  0003A4  D002               	goto	i2l315
  6693  0003A6                     L2:
  6694  0003A6  6E58               	movwf	_EtatSpi,c
  6695                           
  6696                           ;main.c: 644: break;
  6697  0003A8  D010               	goto	i2l261
  6698  0003AA                     i2l315:
  6699                           
  6700                           ;main.c: 646: EtatSpi = 0;
  6701  0003AA  0E00               	movlw	0
  6702  0003AC  D7FC               	goto	L2
  6703  0003AE                     i2l258:
  6704  0003AE  5058               	movf	_EtatSpi,w,c
  6705                           
  6706                           ; Switch size 1, requested type "space"
  6707                           ; Number of cases is 4, Range of values is 0 to 3
  6708                           ; switch strategies available:
  6709                           ; Name         Instructions Cycles
  6710                           ; simple_byte           13     7 (average)
  6711                           ;	Chosen strategy is simple_byte
  6712  0003B0  0A00               	xorlw	0	; case 0
  6713  0003B2  B4D8               	btfsc	status,2,c
  6714  0003B4  D654               	goto	i2l259
  6715  0003B6  0A01               	xorlw	1	; case 1
  6716  0003B8  B4D8               	btfsc	status,2,c
  6717  0003BA  D65F               	goto	i2l262
  6718  0003BC  0A03               	xorlw	3	; case 2
  6719  0003BE  B4D8               	btfsc	status,2,c
  6720  0003C0  D662               	goto	i2l263
  6721  0003C2  0A01               	xorlw	1	; case 3
  6722  0003C4  B4D8               	btfsc	status,2,c
  6723  0003C6  D679               	goto	i2l265
  6724  0003C8  D7F0               	goto	i2l315
  6725  0003CA                     i2l261:
  6726                           
  6727                           ;main.c: 649: Checksum += data_spi;
  6728  0003CA  5024               	movf	ISR@data_spi,w,c
  6729  0003CC  2653               	addwf	_Checksum,f,c
  6730  0003CE  0E00               	movlw	0
  6731  0003D0  2254               	addwfc	_Checksum+1,f,c
  6732                           
  6733                           ;main.c: 650: if(PrgmChoisi) {
  6734  0003D2  5056               	movf	_PrgmChoisi,w,c
  6735  0003D4  A4D8               	btfss	status,2,c
  6736  0003D6  D014               	goto	i2l317
  6737  0003D8  D023               	goto	i2l316
  6738  0003DA                     
  6739                           ;main.c: 653: SSPBUF = 4;
  6740  0003DA  0E04               	movlw	4
  6741  0003DC  D001               	goto	L3
  6742  0003DE                     
  6743                           ;main.c: 656: SSPBUF = 1;
  6744  0003DE  0E01               	movlw	1
  6745  0003E0                     L3:
  6746  0003E0  6EC9               	movwf	4041,c	;volatile
  6747                           
  6748                           ;main.c: 657: break;
  6749  0003E2  D01C               	goto	i2l319
  6750  0003E4                     i2l321:
  6751                           
  6752                           ;main.c: 659: SSPBUF = PosCursorPrgm;
  6753  0003E4  C0D0  FFC9         	movff	_PosCursorPrgm,4041	;volatile
  6754                           
  6755                           ;main.c: 660: break;
  6756  0003E8  D019               	goto	i2l319
  6757  0003EA                     
  6758                           ;main.c: 662: SSPBUF = 4 + 1 + PosCursorPrgm;
  6759  0003EA  0100               	movlb	0	; () banked
  6760  0003EC  51D0               	movf	_PosCursorPrgm& (0+255),w,b
  6761  0003EE  0F05               	addlw	5
  6762  0003F0  6EC9               	movwf	4041,c	;volatile
  6763                           
  6764                           ; BSR set to: 0
  6765                           ;main.c: 663: PrgmChoisi = 0;
  6766  0003F2  0E00               	movlw	0
  6767  0003F4  6E56               	movwf	_PrgmChoisi,c
  6768                           
  6769                           ; BSR set to: 0
  6770                           ;main.c: 664: CptSend = 0;
  6771  0003F6  0E00               	movlw	0
  6772  0003F8  D001               	goto	L4
  6773  0003FA                     
  6774                           ;main.c: 667: CptSend = 1;
  6775                           
  6776                           ; BSR set to: 0
  6777  0003FA  0E01               	movlw	1
  6778  0003FC                     L4:
  6779  0003FC  6E59               	movwf	_CptSend,c
  6780                           
  6781                           ;main.c: 669: }
  6782                           
  6783                           ;main.c: 668: break;
  6784  0003FE  D00E               	goto	i2l319
  6785  000400                     i2l317:
  6786  000400  5059               	movf	_CptSend,w,c
  6787                           
  6788                           ; Switch size 1, requested type "space"
  6789                           ; Number of cases is 4, Range of values is 1 to 4
  6790                           ; switch strategies available:
  6791                           ; Name         Instructions Cycles
  6792                           ; simple_byte           13     7 (average)
  6793                           ;	Chosen strategy is simple_byte
  6794  000402  0A01               	xorlw	1	; case 1
  6795  000404  B4D8               	btfsc	status,2,c
  6796  000406  D7E9               	goto	i2l318
  6797  000408  0A03               	xorlw	3	; case 2
  6798  00040A  B4D8               	btfsc	status,2,c
  6799  00040C  D7E8               	goto	i2l320
  6800  00040E  0A01               	xorlw	1	; case 3
  6801  000410  B4D8               	btfsc	status,2,c
  6802  000412  D7E8               	goto	i2l321
  6803  000414  0A07               	xorlw	7	; case 4
  6804  000416  B4D8               	btfsc	status,2,c
  6805  000418  D7E8               	goto	i2l322
  6806  00041A  D7EF               	goto	i2l323
  6807  00041C                     i2l319:
  6808                           
  6809                           ;main.c: 670: CptSend++;
  6810  00041C  2A59               	incf	_CptSend,f,c
  6811                           
  6812                           ;main.c: 671: } else {
  6813  00041E  D002               	goto	i2l324
  6814  000420                     i2l316:
  6815                           
  6816                           ;main.c: 672: SSPBUF = 0;
  6817  000420  0E00               	movlw	0
  6818  000422  6EC9               	movwf	4041,c	;volatile
  6819  000424                     i2l324:
  6820                           
  6821                           ;main.c: 673: }
  6822                           ;main.c: 674: }
  6823                           ;main.c: 676: if(RCIF) {
  6824  000424  AA9E               	btfss	3998,5,c	;volatile
  6825  000426  D05C               	goto	i2l334
  6826                           
  6827                           ;main.c: 677: char Receive;
  6828                           ;main.c: 678: RCIF = 0;
  6829  000428  9A9E               	bcf	3998,5,c	;volatile
  6830                           
  6831                           ;main.c: 679: Receive = RCREG;
  6832  00042A  CFAE F023          	movff	4014,ISR@Receive	;volatile
  6833                           
  6834                           ;main.c: 680: if(FlagSleep) {
  6835  00042E  5055               	movf	_FlagSleep,w,c
  6836  000430  B4D8               	btfsc	status,2,c
  6837  000432  D02B               	goto	i2l329
  6838                           
  6839                           ;main.c: 681: if(Receive == 0x68) {
  6840  000434  0E68               	movlw	104
  6841  000436  1823               	xorwf	ISR@Receive,w,c
  6842  000438  A4D8               	btfss	status,2,c
  6843  00043A  D052               	goto	i2l334
  6844                           
  6845                           ;main.c: 682: FlagSleep = 0;
  6846  00043C  0E00               	movlw	0
  6847  00043E  6E55               	movwf	_FlagSleep,c
  6848                           
  6849                           ;main.c: 683: FlagSpi = 1;
  6850  000440  0E01               	movlw	1
  6851  000442  0100               	movlb	0	; () banked
  6852  000444  D004               	goto	L5
  6853  000446                     
  6854                           ;main.c: 688: case 0x32:
  6855                           ;main.c: 689: case 0x33:
  6856                           ;main.c: 690: case 0x34:
  6857                           ;main.c: 691: EtatScreen = Receive-0x30;
  6858                           
  6859                           ; BSR set to: 0
  6860                           
  6861                           ; BSR set to: 0
  6862                           
  6863                           ; BSR set to: 0
  6864                           
  6865                           ; BSR set to: 0
  6866  000446  5023               	movf	ISR@Receive,w,c
  6867  000448  0FD0               	addlw	208
  6868  00044A  D004               	goto	L6
  6869  00044C                     i2l3004:
  6870                           
  6871                           ; BSR set to: 0
  6872                           ;main.c: 692: FlagSpi = 1;
  6873  00044C  0E01               	movlw	1
  6874  00044E                     L5:
  6875  00044E  6FD7               	movwf	_FlagSpi& (0+255),b
  6876                           
  6877                           ;main.c: 693: break;
  6878  000450  D047               	goto	i2l334
  6879  000452                     
  6880                           ;main.c: 695: case 0x42:
  6881                           ;main.c: 696: case 0x43:
  6882                           ;main.c: 697: case 0x44:
  6883                           ;main.c: 698: EtatScreen = 0;
  6884                           
  6885                           ; BSR set to: 0
  6886                           
  6887                           ; BSR set to: 0
  6888                           
  6889                           ; BSR set to: 0
  6890                           
  6891                           ; BSR set to: 0
  6892  000452  0E00               	movlw	0
  6893  000454                     L6:
  6894  000454  0100               	movlb	0	; () banked
  6895  000456  6FD2               	movwf	_EtatScreen& (0+255),b
  6896  000458  D7F9               	goto	i2l3004
  6897  00045A                     
  6898                           ;main.c: 702: AutoLight = 1;
  6899                           
  6900                           ; BSR set to: 0
  6901  00045A  0E01               	movlw	1
  6902  00045C  D001               	goto	L7
  6903  00045E                     
  6904                           ;main.c: 705: AutoLight = 0;
  6905                           
  6906                           ; BSR set to: 0
  6907  00045E  0E00               	movlw	0
  6908  000460                     L7:
  6909  000460  0100               	movlb	0	; () banked
  6910  000462  6FD1               	movwf	_AutoLight& (0+255),b
  6911                           
  6912                           ;main.c: 706: break;
  6913  000464  D03D               	goto	i2l334
  6914  000466                     
  6915                           ;main.c: 708: if(PosCursorPrgm > 0) {
  6916                           
  6917                           ; BSR set to: 0
  6918  000466  0100               	movlb	0	; () banked
  6919  000468  51D0               	movf	_PosCursorPrgm& (0+255),w,b
  6920  00046A  B4D8               	btfsc	status,2,c
  6921  00046C  D039               	goto	i2l334
  6922                           
  6923                           ; BSR set to: 0
  6924                           ;main.c: 709: PosCursorPrgm--;
  6925  00046E  07D0               	decf	_PosCursorPrgm& (0+255),f,b
  6926  000470  D7ED               	goto	i2l3004
  6927  000472                     
  6928                           ;main.c: 714: if(PosCursorPrgm < 5-1) {
  6929                           
  6930                           ; BSR set to: 0
  6931  000472  0E04               	movlw	4
  6932  000474  0100               	movlb	0	; () banked
  6933  000476  61D0               	cpfslt	_PosCursorPrgm& (0+255),b
  6934  000478  D033               	goto	i2l334
  6935                           
  6936                           ; BSR set to: 0
  6937                           ;main.c: 715: PosCursorPrgm++;
  6938  00047A  2BD0               	incf	_PosCursorPrgm& (0+255),f,b
  6939  00047C  D7E7               	goto	i2l3004
  6940  00047E                     
  6941                           ;main.c: 721: PrgmChoisi = 1;
  6942                           
  6943                           ; BSR set to: 0
  6944  00047E  0E01               	movlw	1
  6945  000480  6E56               	movwf	_PrgmChoisi,c
  6946                           
  6947                           ;main.c: 722: break;
  6948  000482  D02E               	goto	i2l334
  6949  000484                     
  6950                           ;main.c: 724: FlagSleep = 1;
  6951  000484  0E01               	movlw	1
  6952  000486  6E55               	movwf	_FlagSleep,c
  6953                           
  6954                           ;main.c: 729: }
  6955                           
  6956                           ;main.c: 728: break;
  6957                           
  6958                           ;main.c: 726: default:
  6959                           
  6960                           ;main.c: 725: break;
  6961  000488  D02B               	goto	i2l334
  6962  00048A                     i2l329:
  6963  00048A  5023               	movf	ISR@Receive,w,c
  6964                           
  6965                           ; Switch size 1, requested type "space"
  6966                           ; Number of cases is 14, Range of values is 49 to 68
  6967                           ; switch strategies available:
  6968                           ; Name         Instructions Cycles
  6969                           ; simple_byte           43    22 (average)
  6970                           ;	Chosen strategy is simple_byte
  6971  00048C  0A31               	xorlw	49	; case 49
  6972  00048E  B4D8               	btfsc	status,2,c
  6973  000490  D7DA               	goto	i2l330
  6974  000492  0A03               	xorlw	3	; case 50
  6975  000494  B4D8               	btfsc	status,2,c
  6976  000496  D7D7               	goto	i2l330
  6977  000498  0A01               	xorlw	1	; case 51
  6978  00049A  B4D8               	btfsc	status,2,c
  6979  00049C  D7D4               	goto	i2l330
  6980  00049E  0A07               	xorlw	7	; case 52
  6981  0004A0  B4D8               	btfsc	status,2,c
  6982  0004A2  D7D1               	goto	i2l330
  6983  0004A4  0A01               	xorlw	1	; case 53
  6984  0004A6  B4D8               	btfsc	status,2,c
  6985  0004A8  D7D8               	goto	i2l339
  6986  0004AA  0A03               	xorlw	3	; case 54
  6987  0004AC  B4D8               	btfsc	status,2,c
  6988  0004AE  D7D7               	goto	i2l340
  6989  0004B0  0A01               	xorlw	1	; case 55
  6990  0004B2  B4D8               	btfsc	status,2,c
  6991  0004B4  D7D8               	goto	i2l341
  6992  0004B6  0A0F               	xorlw	15	; case 56
  6993  0004B8  B4D8               	btfsc	status,2,c
  6994  0004BA  D7DB               	goto	i2l343
  6995  0004BC  0A01               	xorlw	1	; case 57
  6996  0004BE  B4D8               	btfsc	status,2,c
  6997  0004C0  D7DE               	goto	i2l345
  6998  0004C2  0A79               	xorlw	121	; case 64
  6999  0004C4  B4D8               	btfsc	status,2,c
  7000  0004C6  D7DE               	goto	i2l346
  7001  0004C8  0A01               	xorlw	1	; case 65
  7002  0004CA  B4D8               	btfsc	status,2,c
  7003  0004CC  D7C2               	goto	i2l335
  7004  0004CE  0A03               	xorlw	3	; case 66
  7005  0004D0  B4D8               	btfsc	status,2,c
  7006  0004D2  D7BF               	goto	i2l335
  7007  0004D4  0A01               	xorlw	1	; case 67
  7008  0004D6  B4D8               	btfsc	status,2,c
  7009  0004D8  D7BC               	goto	i2l335
  7010  0004DA  0A07               	xorlw	7	; case 68
  7011  0004DC  B4D8               	btfsc	status,2,c
  7012  0004DE  D7B9               	goto	i2l335
  7013  0004E0                     i2l334:
  7014  0004E0  C018  F05E         	movff	??_ISR+21,btemp+3
  7015  0004E4  C017  F05D         	movff	??_ISR+20,btemp+2
  7016  0004E8  C016  F05C         	movff	??_ISR+19,btemp+1
  7017  0004EC  C015  F05B         	movff	??_ISR+18,btemp
  7018  0004F0  C014  FFF5         	movff	??_ISR+17,tablat
  7019  0004F4  C013  FFF8         	movff	??_ISR+16,tblptru
  7020  0004F8  C012  FFF7         	movff	??_ISR+15,tblptrh
  7021  0004FC  C011  FFF6         	movff	??_ISR+14,tblptrl
  7022  000500  C010  FFF4         	movff	??_ISR+13,prodh
  7023  000504  C00F  FFF3         	movff	??_ISR+12,prodl
  7024  000508  C00E  FFDA         	movff	??_ISR+11,fsr2h
  7025  00050C  C00D  FFD9         	movff	??_ISR+10,fsr2l
  7026  000510  C00C  FFE2         	movff	??_ISR+9,fsr1h
  7027  000514  C00B  FFE1         	movff	??_ISR+8,fsr1l
  7028  000518  C00A  FFEA         	movff	??_ISR+7,fsr0h
  7029  00051C  C009  FFE9         	movff	??_ISR+6,fsr0l
  7030  000520  C008  FFFB         	movff	??_ISR+5,pclatu
  7031  000524  C007  FFFA         	movff	??_ISR+4,pclath
  7032  000528  925B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7033  00052A  0011               	retfie		f
  7034  00052C                     __end_of_ISR:
  7035                           	opt stack 0
  7036                           pclatu	equ	0xFFB
  7037                           pclath	equ	0xFFA
  7038                           tblptru	equ	0xFF8
  7039                           tblptrh	equ	0xFF7
  7040                           tblptrl	equ	0xFF6
  7041                           tablat	equ	0xFF5
  7042                           prodh	equ	0xFF4
  7043                           prodl	equ	0xFF3
  7044                           intcon	equ	0xFF2
  7045                           postinc0	equ	0xFEE
  7046                           fsr0h	equ	0xFEA
  7047                           fsr0l	equ	0xFE9
  7048                           wreg	equ	0xFE8
  7049                           indf1	equ	0xFE7
  7050                           postdec1	equ	0xFE5
  7051                           fsr1h	equ	0xFE2
  7052                           fsr1l	equ	0xFE1
  7053                           indf2	equ	0xFDF
  7054                           postinc2	equ	0xFDE
  7055                           postdec2	equ	0xFDD
  7056                           fsr2h	equ	0xFDA
  7057                           fsr2l	equ	0xFD9
  7058                           status	equ	0xFD8
  7059                           
  7060 ;; *************** function _Modulo *****************
  7061 ;; Defined at:
  7062 ;;		line 532 in file "main.c"
  7063 ;; Parameters:    Size  Location     Type
  7064 ;;  M_nombre        2    0[COMRAM] short 
  7065 ;; Auto vars:     Size  Location     Type
  7066 ;;		None
  7067 ;; Return value:  Size  Location     Type
  7068 ;;                  1    wreg      unsigned char 
  7069 ;; Registers used:
  7070 ;;		wreg, status,2, status,0
  7071 ;; Tracked objects:
  7072 ;;		On entry : 0/0
  7073 ;;		On exit  : 0/0
  7074 ;;		Unchanged: 0/0
  7075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7076 ;;      Params:         2       0       0       0       0       0       0
  7077 ;;      Locals:         0       0       0       0       0       0       0
  7078 ;;      Temps:          0       0       0       0       0       0       0
  7079 ;;      Totals:         2       0       0       0       0       0       0
  7080 ;;Total ram usage:        2 bytes
  7081 ;; Hardware stack levels used:    1
  7082 ;; This function calls:
  7083 ;;		Nothing
  7084 ;; This function is called by:
  7085 ;;		_ISR
  7086 ;; This function uses a non-reentrant model
  7087 ;;
  7088                           
  7089                           	psect	text29
  7090  001CA2                     __ptext29:
  7091                           	opt stack 0
  7092  001CA2                     _Modulo:
  7093                           	opt stack 25
  7094                           
  7095                           ;main.c: 533: while(M_nombre > 255) {
  7096                           
  7097                           ;incstack = 0
  7098  001CA2  D004               	goto	i2l249
  7099  001CA4                     
  7100                           ;main.c: 534: M_nombre -= 256;
  7101  001CA4  0E00               	movlw	0
  7102  001CA6  2601               	addwf	Modulo@M_nombre,f,c
  7103  001CA8  0EFF               	movlw	255
  7104  001CAA  2202               	addwfc	Modulo@M_nombre+1,f,c
  7105  001CAC                     i2l249:
  7106  001CAC  BE02               	btfsc	Modulo@M_nombre+1,7,c
  7107  001CAE  D003               	goto	i2u222_40
  7108  001CB0  0402               	decf	Modulo@M_nombre+1,w,c
  7109  001CB2  B0D8               	btfsc	status,0,c
  7110  001CB4  D7F7               	goto	i2l250
  7111  001CB6                     i2u222_40:
  7112                           
  7113                           ;main.c: 535: }
  7114                           ;main.c: 536: return M_nombre;
  7115  001CB6  5001               	movf	Modulo@M_nombre,w,c
  7116  001CB8  0012               	return	
  7117  001CBA                     __end_of_Modulo:
  7118                           	opt stack 0
  7119                           pclatu	equ	0xFFB
  7120                           pclath	equ	0xFFA
  7121                           tblptru	equ	0xFF8
  7122                           tblptrh	equ	0xFF7
  7123                           tblptrl	equ	0xFF6
  7124                           tablat	equ	0xFF5
  7125                           prodh	equ	0xFF4
  7126                           prodl	equ	0xFF3
  7127                           intcon	equ	0xFF2
  7128                           postinc0	equ	0xFEE
  7129                           fsr0h	equ	0xFEA
  7130                           fsr0l	equ	0xFE9
  7131                           wreg	equ	0xFE8
  7132                           indf1	equ	0xFE7
  7133                           postdec1	equ	0xFE5
  7134                           fsr1h	equ	0xFE2
  7135                           fsr1l	equ	0xFE1
  7136                           indf2	equ	0xFDF
  7137                           postinc2	equ	0xFDE
  7138                           postdec2	equ	0xFDD
  7139                           fsr2h	equ	0xFDA
  7140                           fsr2l	equ	0xFD9
  7141                           status	equ	0xFD8
  7142                           pclatu	equ	0xFFB
  7143                           pclath	equ	0xFFA
  7144                           tblptru	equ	0xFF8
  7145                           tblptrh	equ	0xFF7
  7146                           tblptrl	equ	0xFF6
  7147                           tablat	equ	0xFF5
  7148                           prodh	equ	0xFF4
  7149                           prodl	equ	0xFF3
  7150                           intcon	equ	0xFF2
  7151                           postinc0	equ	0xFEE
  7152                           fsr0h	equ	0xFEA
  7153                           fsr0l	equ	0xFE9
  7154                           wreg	equ	0xFE8
  7155                           indf1	equ	0xFE7
  7156                           postdec1	equ	0xFE5
  7157                           fsr1h	equ	0xFE2
  7158                           fsr1l	equ	0xFE1
  7159                           indf2	equ	0xFDF
  7160                           postinc2	equ	0xFDE
  7161                           postdec2	equ	0xFDD
  7162                           fsr2h	equ	0xFDA
  7163                           fsr2l	equ	0xFD9
  7164                           status	equ	0xFD8
  7165                           
  7166                           	psect	rparam
  7167  0000                     pclatu	equ	0xFFB
  7168                           pclath	equ	0xFFA
  7169                           tblptru	equ	0xFF8
  7170                           tblptrh	equ	0xFF7
  7171                           tblptrl	equ	0xFF6
  7172                           tablat	equ	0xFF5
  7173                           prodh	equ	0xFF4
  7174                           prodl	equ	0xFF3
  7175                           intcon	equ	0xFF2
  7176                           postinc0	equ	0xFEE
  7177                           fsr0h	equ	0xFEA
  7178                           fsr0l	equ	0xFE9
  7179                           wreg	equ	0xFE8
  7180                           indf1	equ	0xFE7
  7181                           postdec1	equ	0xFE5
  7182                           fsr1h	equ	0xFE2
  7183                           fsr1l	equ	0xFE1
  7184                           indf2	equ	0xFDF
  7185                           postinc2	equ	0xFDE
  7186                           postdec2	equ	0xFDD
  7187                           fsr2h	equ	0xFDA
  7188                           fsr2l	equ	0xFD9
  7189                           status	equ	0xFD8
  7190                           
  7191                           	psect	temp
  7192  00005B                     btemp:
  7193                           	opt stack 0
  7194  00005B                     	ds	1
  7195  0000                     int$flags	set	btemp
  7196  0000                     wtemp6	set	btemp+1
  7197                           pclatu	equ	0xFFB
  7198                           pclath	equ	0xFFA
  7199                           tblptru	equ	0xFF8
  7200                           tblptrh	equ	0xFF7
  7201                           tblptrl	equ	0xFF6
  7202                           tablat	equ	0xFF5
  7203                           prodh	equ	0xFF4
  7204                           prodl	equ	0xFF3
  7205                           intcon	equ	0xFF2
  7206                           postinc0	equ	0xFEE
  7207                           fsr0h	equ	0xFEA
  7208                           fsr0l	equ	0xFE9
  7209                           wreg	equ	0xFE8
  7210                           indf1	equ	0xFE7
  7211                           postdec1	equ	0xFE5
  7212                           fsr1h	equ	0xFE2
  7213                           fsr1l	equ	0xFE1
  7214                           indf2	equ	0xFDF
  7215                           postinc2	equ	0xFDE
  7216                           postdec2	equ	0xFDD
  7217                           fsr2h	equ	0xFDA
  7218                           fsr2l	equ	0xFD9
  7219                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    30
    Data        82
    BSS         461
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     82      90
    BANK0           128     76      88
    BANK1           256      0     252
    BANK2           256      0      75
    BANK3           256      0     196
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> floor@expon(BANK0[2]), 

    PrintS@s_printS	PTR const unsigned char  size(2) Largest target is 252
		 -> SendMsgSreen(BANK1[252]), 


Critical Paths under _main in COMRAM

    _floor->___altoft
    ___fttol->___ftdiv
    ___altoft->___fttol
    ___ftmul->___ftneg
    ___ftadd->___ftneg
    ___ftneg->___awtoft
    ___ftdiv->___ftpack
    ___awtoft->___fttol
    ___lwtoft->___ftpack
    _PrintS->_PrintC

Critical Paths under _ISR in COMRAM

    _ISR->_Modulo

Critical Paths under _main in BANK0

    _main->_exp
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___ftadd
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    ___ftadd->___ftmul

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                21    21      0   68697
                                             55 BANK0     21    21      0
                            _ADCInit
                                _Adc
                         _ClearArray
                          _ClockInit
                           _InitTmr0
                             _PrintS
                            _SpiInit
                           _UartInit
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lwtoft
                                _exp
 ---------------------------------------------------------------------------------
 (1) _exp                                                  9     6      3   42630
                                             46 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
 ---------------------------------------------------------------------------------
 (2) _ldexp                                                7     2      5     400
                                             39 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (2) _floor                                                8     5      3   11083
                                             27 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                7     2      5     360
                                             36 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     936
                                             59 COMRAM    15    11      4
                            ___ftdiv (ARG)
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     744
                                             36 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (3) ___altoft                                            10     6      4    3307
                                             74 COMRAM     8     4      4
                                              0 BANK0      2     2      0
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (2) _eval_poly                                           12     5      7   10446
                                             27 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     463
                                             36 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4181
                                              0 BANK0     15     9      6
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5694
                                             27 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    5278
                                             15 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                            ___fttol (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     349
                                             78 COMRAM     3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    4653
                                             44 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    3506
                                             74 COMRAM     4     1      3
                            ___ftdiv (ARG)
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    3134
                                             44 COMRAM     3     0      3
                                _Adc (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    3013
                                             36 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4    1516
                                             36 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _UartInit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SpiInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PrintS                                               2     0      2     599
                                             37 COMRAM     2     0      2
                             _PrintC
 ---------------------------------------------------------------------------------
 (2) _PrintC                                               1     1      0      22
                                             36 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitTmr0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ClockInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ClearArray                                           1     1      0      69
                                             36 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Adc                                                  5     3      2      22
                                             36 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ADCInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 34    34      0     639
                                              2 COMRAM    34    34      0
                             _Modulo
 ---------------------------------------------------------------------------------
 (6) _Modulo                                               2     0      2     121
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCInit
   _Adc
   _ClearArray
   _ClockInit
   _InitTmr0
   _PrintS
     _PrintC
   _SpiInit
   _UartInit
   ___awdiv
   ___awtoft
     ___ftdiv (ARG)
       ___ftpack
     ___ftpack (ARG)
     ___fttol (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
   ___ftadd
     ___awtoft (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___fttol (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___ftdiv (ARG)
       ___ftpack
     ___ftmul (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
       ___awtoft (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___fttol (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___ftpack (ARG)
     ___fttol (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___wmul (ARG)
   ___ftdiv
     ___ftpack
   ___ftge
   ___ftmul
     ___ftdiv (ARG)
       ___ftpack
     ___ftneg (ARG)
       ___awtoft (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___fttol (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___ftpack (ARG)
   ___ftneg
     ___awtoft (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___fttol (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___ftdiv (ARG)
       ___ftpack
     ___fttol (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
   ___fttol
     ___ftdiv (ARG)
       ___ftpack
     ___ftpack (ARG)
   ___lwtoft
     _Adc (ARG)
     ___ftpack (ARG)
   _exp
     ___awtoft
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___fttol (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___ftdiv
       ___ftpack
     ___ftge
     ___ftmul
       ___ftdiv (ARG)
         ___ftpack
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftneg
       ___awtoft (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___fttol (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___ftsub
       ___awtoft (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___wmul (ARG)
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
     _eval_poly
       ___ftadd
         ___awtoft (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___wmul (ARG)
       ___ftmul
         ___ftdiv (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___wmul
     _floor
       ___altoft
         ___ftpack
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___wmul (ARG)
       ___ftge
       ___fttol
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
       _frexp
     _ldexp
       _eval_poly (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___fttol (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___wmul (ARG)
         ___ftmul
           ___ftdiv (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___wmul

 _ISR (ROOT)
   _Modulo

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5EE      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0      C4      10       76.6%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      4B       8       29.3%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      FC       6       98.4%
BITBANK5            EF      0       0      15        0.0%
BANK5               EF      0       0      13        0.0%
BITBANK0            80      0       0       3        0.0%
BANK0               80     4C      58       4       68.8%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     52      5A       1       71.4%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2BD      14        0.0%
DATA                 0      0     2BD      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun May 19 17:55:00 2019

           ___altoft@exp 0080              main@CptTmr0 00C1              _SSPSTATbits 000FC7  
          ___altoft@sign 0081             ___awdiv@sign 002A      ___wmul@multiplicand 0027  
            __CFG_BORV$3 000000             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000             ___ftadd@exp1 009A  
           ___ftadd@exp2 0099             ___ftadd@sign 0098                      l200 0D6C  
                    l201 0DBC                      l202 0DDA                      l209 1CD0  
                    l227 1B54                      l244 1BD8                      l181 0DE2  
                    l173 0662                      l238 1B1A                      l190 0C40  
                    l182 0994                      l239 1B08                      l183 0A06  
                    l175 0698                      l520 1904                      l600 14A4  
                    l184 09C2                      l433 197E                      l177 0774  
                    l434 1972                      l602 14CC                      l194 0CC6  
                    l178 07A2                      l523 192C                      l603 1548  
                    l195 0C96                      l179 0986                      l524 1936  
                    l516 18DE                      l525 1944                      l517 18EE  
                    l189 0AC0                      l710 132C                      l622 19E4  
                    l630 16BE                      l519 190C                      l703 1AA4  
                    l631 16B2                      l544 1AE2                      l560 0E56  
                    l561 0E8E                      l642 1074                      l626 164A  
                    l562 0EBE                      l715 1360                      l707 12C6  
                    l563 0FE8                      l652 10D0                      l716 1354  
                    l628 1690                      l564 0FBE                      l661 110E  
                    l653 10C6                      l709 133C                      l582 171E  
                    l662 1104                      l638 104A                      l718 137C  
                    l558 0E1E                      l583 1714                      l671 13B6  
                    l647 10DA                      l664 1132                      l680 189A  
                    l585 1752                      l673 13DE                      l665 114E  
                    l586 173C                      l674 141C                      l666 117E  
                    l690 1238                      l675 1442                      l588 177A  
                    l692 1250                      l589 1770                      l693 1260  
                    l686 11CE                      l679 186A                      l599 14B2  
                    l688 11F6                      l697 1C54                      l689 1228  
                    l961 1618                      l962 1598             __CFG_CPB$OFF 000000  
           __CFG_CPD$OFF 000000                      _ISR 0008                      _PSA 007EAB  
                    _Adc 1B3C                      _RX9 007D5E                      _TX9 007D66  
                    _WUE 007DC1                      _cpt 00CE                      _exp 0E04  
        __end_of_ADCInit 1C18                      prod 000FF3                      wreg 000FE8  
            main@adc_res 00C9               _TXSTA1bits 000FAC           Modulo@M_nombre 0001  
           __CFG_LVP$OFF 000000                     ?_ISR 0001                     ?_Adc 0025  
           ___ftdiv@cntr 0036                     ISR@j 0019             ___ftdiv@sign 003B  
           __CFG_WDT$OFF 000000                     l2034 18C6                     l2294 1CBC  
                   l2538 1BD0                     l3338 0FBE                     ?_exp 00AE  
                   _BRGH 007D62                     _CREN 007D5C                     _T0CS 007EAD  
                   _FERR 007D5A                     u2040 166A                     _T0SE 007EAC  
                   u3101 11B6                     u3030 10E2                     u2048 166E  
                   u3121 11DE                     u2260 1910                     u3060 1116  
                   u3310 0E98                     u3320 0E9A                     u3161 139E  
                   u3250 14BE                     u3500 0C62                     u3181 13C6  
                   u1821 12AA                     u2800 1706                     u1840 12E4  
                   u3520 0CE2                     u1780 1A0C                     u3460 0A36  
                   u3380 0684                     u2901 101C                     u1845 12DC  
                   u2840 1784                     u1880 1366                     u2930 103C  
                   u3547 0654                     u1788 1A0E                     u3398 0688  
                   u2960 1066                     u2891 1008                     _RCIE 007CED  
                   _RCIF 007CF5                     u2990 10A4                     _OERR 007D59  
                   _SPEN 007D5F                     _TXEN 007D65                     _SYNC 007D64  
                   _PosX 00D5                     _PosY 00D3                     _main 0620  
           ___ftpack@arg 0025             ___ftpack@exp 0028                     fsr0h 000FEA  
                   fsr1h 000FE2                     fsr2h 000FDA                     fsr0l 000FE9  
                   indf1 000FE7                     indf2 000FDF                     fsr1l 000FE1  
                   fsr2l 000FD9                     btemp 005B               _ClearArray 1BC8  
                   exp@x 00AE                     prodh 000FF4                     prodl 000FF3  
                   start 052C            __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000  
           ___ftmul@cntr 008D             ___param_bank 000000             ___ftmul@sign 008E  
                  ??_ISR 0003                    ??_Adc 0027             ___fttol@exp1 004A  
                  ??_exp 0053             ___fttol@lval 0046          __end_of_SpiInit 1BC8  
                  _ABDEN 007DC0                    ?_main 0001          __end_of___awdiv 194E  
        __end_of___ftadd 11A4                    _BRG16 007DC3          __end_of___ftdiv 1474  
        __end_of___ftneg 1C62          __end_of___ftmul 129A          ___awdiv@divisor 0027  
        __end_of___ftsub 1ACE          __end_of___fttol 138E                    _T0PS0 007EA8  
                  _T0PS1 007EA9                    _T0PS2 007EAA                    i2l301 02A0  
                  i2l302 02B8                    i2l311 0344                    i2l320 03DE  
                  i2l304 02F4                    i2l321 03E4                    i2l305 02CE  
                  i2l250 1CA4                    i2l330 0446                    i2l322 03EA  
                  i2l323 03FA                    i2l315 03AA                    i2l340 045E  
                  i2l324 0424                    i2l316 0420                    i2l260 006C  
                  i2l341 0466                    i2l317 0400                    i2l261 03CA  
                  i2l309 0312                    i2l334 04E0                    i2l318 03DA  
                  i2l262 007A                    i2l343 0472                    i2l335 0452  
                  i2l319 041C                    i2l271 012C                    i2l263 0086  
                  i2l280 019E                    i2l272 0106                    i2l249 1CAC  
                  i2l329 048A                    i2l345 047E                    i2l281 0178  
                  i2l265 00BA                    i2l346 0484                    i2l258 03AE  
                  i2l339 045A                    i2l267 0376                    i2l259 005E  
                  i2l268 00D8                    i2l293 022E                    i2l285 01BC  
                  i2l277 014A                    i2l269 00F0                    i2l294 0246  
                  i2l286 01D4                    i2l278 0162                    i2l296 0282  
                  i2l288 0210                    i2l297 025C                    i2l289 01EA  
        ___awdiv@counter 0029                    _RCREG 000FAE                    _SENDB 007D63  
                  _TMR0H 000FD7                    _TMR0L 000FD6                    _SPBRG 000FAF  
                  _RXDTP 007DC5                    _TXCKP 007DC4            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
         __CFG_EBTRB$OFF 000000            ___awtoft@sign 004E                    _floor 1474  
                  _ldexp 1630                    _frexp 19C8                    _errno 00CC  
          ___ftpack@sign 0029               _EtatScreen 00D2                    pclath 000FFA  
                  tablat 000FF5                    status 000FD8                    wtemp6 005C  
         __CFG_PBADEN$ON 000000              exp@exponent 00B4              ldexp@newexp 00AA  
        __initialization 17A4             __end_of_main 0E04         __end_of_InitTmr0 1CA2  
              ??_ADCInit 0025                   ??_main 00B7            ___fttol@sign1 0045  
          __activetblptr 000002       __size_of_ClockInit 000E         __end_of_UartInit 1B9E  
         PrintC@c_printC 0025                   ?_floor 009B                   ?_ldexp 00A7  
                 ?_frexp 0025         __end_of___altoft 19C8                   _ADRESH 000FC4  
                 _ADRESL 000FC3                   _T08BIT 007EAE         ___awdiv@dividend 0025  
       __end_of___awtoft 1B06         __end_of___ftpack 17A4                   i2l3004 044C  
                 i2l2900 0236                   i2l2920 02A8                   i2l2840 00E0  
                 i2l2914 0282                   i2l2860 0152                   i2l2934 02F4  
                 i2l2854 012C                   i2l2880 01C4                   i2l2874 019E  
                 i2l2894 0210         __end_of___lwtoft 1C86                   _TMR0IF 007F92  
                 _TMR0ON 007EAF                   _SPBRGH 000FB0                   _TRISA5 007C95  
                 _TRISC3 007CA3                   _TRISC4 007CA4                   _TRISC5 007CA5  
                 _TRISC6 007CA6                   _TRISC7 007CA7                   _SSPBUF 000FC9  
            ?_ClearArray 0001                   _TXREG1 000FAD               _PrgmChoisi 0056  
                 _CptSpi 005A           __CFG_XINST$OFF 000000                   _Modulo 1CA2  
              ??_SpiInit 0025                   _PrintC 1CBA                   _PrintS 1B06  
                 ___ftge 183A                   ___wmul 1C18                ??___awdiv 0029  
              ??___ftadd 0095           __CFG_STVREN$ON 000000                ??___ftdiv 0033  
              ??___ftneg 0052                ??___ftmul 0086                ??___ftsub 0052  
              ??___fttol 0040                   clear_0 1802                   clear_1 180E  
                 clear_2 181A         ___awdiv@quotient 002B                   floor@i 009E  
                 floor@x 009B    ___ftmul@f3_as_product 008A             __pdataCOMRAM 0059  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8         __end_ofexp@coeff 061F               __accesstop 0080  
__end_of__initialization 182C               ___altoft@c 004B               ___ftadd@f1 008F  
             ___ftadd@f2 0092               ___ftge@ff1 0025               ___ftge@ff2 0028  
           eval_poly@res 00A4            ___rparam_used 000001        __end_of_ClockInit 1CD6  
             ___ftdiv@f1 002D               ___ftdiv@f2 0030               ___ftdiv@f3 0037  
             ___ftneg@f1 004F      main@taille_text_spi 00C8               ___awtoft@c 004B  
             ___ftmul@f1 0080               ___ftmul@f2 0083               ___ftsub@f1 009B  
             ___ftsub@f2 009E               ___fttol@f1 003C           __pcstackCOMRAM 0001  
            ISR@data_spi 0024             __pidataBANK0 1CD6             __pidataBANK2 1A40  
             _TypeVarSpi 00CF            __end_of_floor 1556            __end_of_ldexp 16F6  
          __end_of_frexp 1A40               ___lwtoft@c 002D      __size_of_ClearArray 0028  
                ??_floor 0053                  ??_ldexp 00AC                  ??_frexp 002A  
             __pbssBANK0 00CC               __pbssBANK1 0100               __pbssBANK3 0300  
     __size_of_eval_poly 00DA                ?_InitTmr0 0001                  ?_Modulo 0001  
              ?_UartInit 0001                  ?_PrintC 0001                  ?_PrintS 0026  
                ?___ftge 0025           PrintS@s_printS 0026                  ?___wmul 0025  
              ?___altoft 004B                  _ADCInit 1BF0                ?___awtoft 004B  
              ?___ftpack 0025                ?___lwtoft 002D               ??_InitTmr0 0025  
                _FlagSpi 00D7                  _CptSend 0059                  _EtatSpi 0058  
                __Hparam 0000                  __Lparam 0000               ??_UartInit 0025  
                _SpiInit 1B9E          __size_of_Modulo 0018                  _TextSpi 0300  
        __size_of_PrintC 000E          __size_of_PrintS 0036          __size_of___ftge 0090  
                ___awdiv 18CA                  ___ftadd 0FF6                  ___ftdiv 138E  
                ___ftneg 1C3E          __size_of___wmul 0026                  ___ftmul 11A4  
                ___ftsub 1A8C                  ___fttol 129A             __psmallconst 0600  
             ??___altoft 004F                  __pcinit 17A4               ??___awtoft 004E  
             ??___ftpack 002A        __end_of_eval_poly 1630                  __ramtop 0600  
                __ptext0 0620                  __ptext1 0E04                  __ptext2 1630  
                __ptext3 1474                  __ptext4 19C8                  __ptext5 129A  
                __ptext6 183A                  __ptext7 194E                  __ptext8 1556  
                __ptext9 1C18               ??___lwtoft 0030             __size_of_ISR 0524  
           __size_of_Adc 0032             __size_of_exp 01F2     end_of_initialization 182C  
                exp@sign 00B6            __Lmediumconst 0000             ??_ClearArray 0025  
                postdec1 000FE5                  postdec2 000FDD                  postinc0 000FEE  
                postinc2 000FDE       __end_of_ClearArray 1BF0                _TRISAbits 000F92  
              _TRISCbits 000F94              ___ftdiv@exp 003A     main@taille_text_prgm 00C7  
          _PosCursorPrgm 00D0              ___ftmul@exp 0089                _FlagSleep 0055  
              _ClockInit 1CC8           __end_of_Modulo 1CBA           __end_of_PrintC 1CC8  
         __end_of_PrintS 1B3C           __end_of___ftge 18CA           __end_of___wmul 1C3E  
          __pidataCOMRAM 1CDB                _AutoLight 00D1               floor@expon 00A1  
    start_initialization 17A4               eval_poly@d 009E               eval_poly@n 00A0  
             eval_poly@x 009B              __end_of_ISR 052C              __end_of_Adc 1B6E  
             ldexp@value 00A7              __end_of_exp 0FF6               frexp@value 0025  
       __CFG_OSC$INTIO67 000000        __size_of_InitTmr0 001C                 ??_Modulo 0003  
               ??_PrintC 0025                 ??_PrintS 0028                 ??___ftge 002B  
             ?_ClockInit 0001                 ??___wmul 0029        __size_of_UartInit 0030  
            __pdataBANK0 00D3              __pdataBANK2 0200         __CFG_LPT1OSC$OFF 000000  
               ?_ADCInit 0001               ISR@Receive 0023        __size_of___altoft 007A  
      __size_of___awtoft 0038        __size_of___ftpack 00AE              __pbssCOMRAM 0053  
      __size_of___lwtoft 0024            __pcstackBANK0 0080                 ISR@j_920 001D  
               ISR@j_921 001F                 ISR@j_922 0021                 ISR@j_919 001B  
              _main$1530 00C2                _main$1531 00C5                _main$1528 00BB  
              _main$1529 00BE                 ?_SpiInit 0001        __CFG_CCP2MX$PORTC 000000  
              __pintcode 0008                 ?___awdiv 0025                 ?___ftadd 008F  
               ?___ftdiv 002D                 ?___ftneg 004F                 ?___ftmul 0080  
               ?___ftsub 009B                 ?___fttol 003C              __smallconst 0600  
              _eval_poly 1556             _SendMsgSreen 0100             _TailleMsgSpi 0057  
         __size_of_floor 00E2           __size_of_ldexp 00C6           __size_of_frexp 0078  
             Adc@channel 0029           ___wmul@product 0029                 _LATAbits 000F89  
               _LATCbits 000F8B                 _PIE1bits 000F9D                 i2u222_40 1CB6  
               _PIR1bits 000F9E         __CFG_WDTPS$32768 000000              ??_ClockInit 0025  
              _text_prgm 0200         __size_of_ADCInit 0028               _ADCON0bits 000FC2  
             _ADCON1bits 000FC1               _ADCON2bits 000FC0        ___wmul@multiplier 0025  
             ?_eval_poly 009B                 _Checksum 0053                copy_data0 17B8  
              copy_data1 17D8                 _InitTmr0 1C86                frexp@eptr 0028  
               __Hrparam 0000                 _UartInit 1B6E                 __Lrparam 0000  
     __CFG_BOREN$SBORDIS 000000         __size_of_SpiInit 002A         __size_of___awdiv 0084  
       __size_of___ftadd 01AE         __size_of___ftdiv 00E6         __size_of___ftneg 0024  
               ___altoft 194E         __size_of___ftmul 00F6         __size_of___ftsub 0042  
       __size_of___fttol 00F4                 ___awtoft 1ACE                 ___ftpack 16F6  
               ___lwtoft 1C62                 _exp$1532 00B1                 __ptext10 11A4  
               __ptext11 1A8C                 __ptext20 1B9E                 __ptext12 0FF6  
               __ptext21 1B06                 __ptext13 1C3E                 __ptext22 1CBA  
               __ptext14 138E                 __ptext23 1C86                 __ptext15 1ACE  
               __ptext24 1CC8                 __ptext16 1C62                 __ptext25 1BC8  
               __ptext17 16F6                 __ptext26 1B3C                 __ptext18 18CA  
               __ptext27 1BF0                 __ptext19 1B6E                 __ptext29 1CA2  
          __size_of_main 07E4                 int$flags 005B                 exp@coeff 0601  
            _OSCTUNEbits 000F9B               _INTCONbits 000FF2              ??_eval_poly 00A2  
               intlevel2 0000               _OSCCONbits 000FD3       ClearArray@cpt_vide 0025  
            _SSPCON1bits 000FC6  
