

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu May 30 20:47:21 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18LF2520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    51                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    52                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    53  0000                     
    54                           ; Version 1.45
    55                           ; Generated 16/11/2017 GMT
    56                           ; 
    57                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC18LF2520 Definitions
    86                           ; 
    87                           ; SFR Addresses
    88  0000                     
    89                           	psect	idataCOMRAM
    90  001EEF                     __pidataCOMRAM:
    91                           	opt stack 0
    92                           
    93                           ;initializer for _CptSend
    94  001EEF  01                 	db	1
    95                           
    96                           ;initializer for _CptSpi
    97  001EF0  01                 	db	1
    98                           
    99                           	psect	idataBANK0
   100  001EEA                     __pidataBANK0:
   101                           	opt stack 0
   102                           
   103                           ;initializer for _PosY
   104  001EEA  00F0               	dw	240
   105                           
   106                           ;initializer for _PosX
   107  001EEC  0190               	dw	400
   108                           
   109                           ;initializer for _FlagSpi
   110  001EEE  01                 	db	1
   111                           
   112                           	psect	idataBANK2
   113  001C26                     __pidataBANK2:
   114                           	opt stack 0
   115                           
   116                           ;initializer for _text_prgm
   117  001C26  70                 	db	112
   118  001C27  72                 	db	114
   119  001C28  67                 	db	103
   120  001C29  6D                 	db	109
   121  001C2A  44                 	db	68
   122  001C2B  72                 	db	114
   123  001C2C  6F                 	db	111
   124  001C2D  69                 	db	105
   125  001C2E  74                 	db	116
   126  001C2F  65                 	db	101
   127  001C30  00                 	db	0
   128  001C31  00                 	db	0
   129  001C32  00                 	db	0
   130  001C33  00                 	db	0
   131  001C34  00                 	db	0
   132  001C35  70                 	db	112
   133  001C36  72                 	db	114
   134  001C37  67                 	db	103
   135  001C38  6D                 	db	109
   136  001C39  47                 	db	71
   137  001C3A  61                 	db	97
   138  001C3B  75                 	db	117
   139  001C3C  63                 	db	99
   140  001C3D  68                 	db	104
   141  001C3E  65                 	db	101
   142  001C3F  00                 	db	0
   143  001C40  00                 	db	0
   144  001C41  00                 	db	0
   145  001C42  00                 	db	0
   146  001C43  00                 	db	0
   147  001C44  70                 	db	112
   148  001C45  72                 	db	114
   149  001C46  67                 	db	103
   150  001C47  6D                 	db	109
   151  001C48  42                 	db	66
   152  001C49  6C                 	db	108
   153  001C4A  65                 	db	101
   154  001C4B  75                 	db	117
   155  001C4C  00                 	db	0
   156  001C4D  00                 	db	0
   157  001C4E  00                 	db	0
   158  001C4F  00                 	db	0
   159  001C50  00                 	db	0
   160  001C51  00                 	db	0
   161  001C52  00                 	db	0
   162  001C53  70                 	db	112
   163  001C54  72                 	db	114
   164  001C55  67                 	db	103
   165  001C56  6D                 	db	109
   166  001C57  42                 	db	66
   167  001C58  6C                 	db	108
   168  001C59  61                 	db	97
   169  001C5A  6E                 	db	110
   170  001C5B  63                 	db	99
   171  001C5C  00                 	db	0
   172  001C5D  00                 	db	0
   173  001C5E  00                 	db	0
   174  001C5F  00                 	db	0
   175  001C60  00                 	db	0
   176  001C61  00                 	db	0
   177  001C62  70                 	db	112
   178  001C63  72                 	db	114
   179  001C64  67                 	db	103
   180  001C65  6D                 	db	109
   181  001C66  52                 	db	82
   182  001C67  6F                 	db	111
   183  001C68  75                 	db	117
   184  001C69  67                 	db	103
   185  001C6A  65                 	db	101
   186  001C6B  00                 	db	0
   187  001C6C  00                 	db	0
   188  001C6D  00                 	db	0
   189  001C6E  00                 	db	0
   190  001C6F  00                 	db	0
   191  001C70  00                 	db	0
   192                           
   193                           	psect	smallconst
   194  000722                     __psmallconst:
   195                           	opt stack 0
   196  000722  00                 	db	0
   197  000723                     exp@coeff:
   198                           	opt stack 0
   199  000723  00                 	db	0
   200  000724  80                 	db	128
   201  000725  3F                 	db	63
   202  000726  72                 	db	114
   203  000727  31                 	db	49
   204  000728  3F                 	db	63
   205  000729  FE                 	db	254
   206  00072A  75                 	db	117
   207  00072B  3E                 	db	62
   208  00072C  58                 	db	88
   209  00072D  63                 	db	99
   210  00072E  3D                 	db	61
   211  00072F  95                 	db	149
   212  000730  1D                 	db	29
   213  000731  3C                 	db	60
   214  000732  C5                 	db	197
   215  000733  AE                 	db	174
   216  000734  3A                 	db	58
   217  000735  79                 	db	121
   218  000736  21                 	db	33
   219  000737  39                 	db	57
   220  000738  94                 	db	148
   221  000739  80                 	db	128
   222  00073A  37                 	db	55
   223  00073B  93                 	db	147
   224  00073C  A7                 	db	167
   225  00073D  35                 	db	53
   226  00073E  56                 	db	86
   227  00073F  15                 	db	21
   228  000740  34                 	db	52
   229  000741                     __end_ofexp@coeff:
   230                           	opt stack 0
   231  0000                     _RCREG	set	4014
   232  0000                     _TXREG1	set	4013
   233  0000                     _TXSTA1bits	set	4012
   234  0000                     _ADRESL	set	4035
   235  0000                     _ADRESH	set	4036
   236  0000                     _ADCON0bits	set	4034
   237  0000                     _SPBRG	set	4015
   238  0000                     _SPBRGH	set	4016
   239  0000                     _INTCONbits	set	4082
   240  0000                     _SSPBUF	set	4041
   241  0000                     _SSPCON1bits	set	4038
   242  0000                     _SSPSTATbits	set	4039
   243  0000                     _PIE1bits	set	3997
   244  0000                     _PIR1bits	set	3998
   245  0000                     _LATAbits	set	3977
   246  0000                     _ADCON2bits	set	4032
   247  0000                     _ADCON1bits	set	4033
   248  0000                     _TRISAbits	set	3986
   249  0000                     _OSCTUNEbits	set	3995
   250  0000                     _OSCCONbits	set	4051
   251  0000                     _LATCbits	set	3979
   252  0000                     _TMR0H	set	4055
   253  0000                     _TMR0L	set	4054
   254  0000                     _TRISCbits	set	3988
   255  0000                     _TMR0ON	set	32431
   256  0000                     _T0PS0	set	32424
   257  0000                     _T0PS1	set	32425
   258  0000                     _T0PS2	set	32426
   259  0000                     _PSA	set	32427
   260  0000                     _T0SE	set	32428
   261  0000                     _T0CS	set	32429
   262  0000                     _T08BIT	set	32430
   263  0000                     _SPEN	set	32095
   264  0000                     _TXEN	set	32101
   265  0000                     _RCIF	set	31989
   266  0000                     _RCIE	set	31981
   267  0000                     _ABDEN	set	32192
   268  0000                     _WUE	set	32193
   269  0000                     _BRG16	set	32195
   270  0000                     _TXCKP	set	32196
   271  0000                     _RXDTP	set	32197
   272  0000                     _OERR	set	32089
   273  0000                     _FERR	set	32090
   274  0000                     _CREN	set	32092
   275  0000                     _RX9	set	32094
   276  0000                     _BRGH	set	32098
   277  0000                     _SENDB	set	32099
   278  0000                     _SYNC	set	32100
   279  0000                     _TX9	set	32102
   280  0000                     _TRISC7	set	31911
   281  0000                     _TRISC6	set	31910
   282  0000                     _TRISC5	set	31909
   283  0000                     _TRISC4	set	31908
   284  0000                     _TRISC3	set	31907
   285  0000                     _TRISA5	set	31893
   286  0000                     _TMR0IF	set	32658
   287                           
   288                           ; #config settings
   289  000741  00                 	db	0	; dummy byte at the end
   290  0000                     
   291                           	psect	cinit
   292  00198A                     __pcinit:
   293                           	opt stack 0
   294  00198A                     start_initialization:
   295                           	opt stack 0
   296  00198A                     __initialization:
   297                           	opt stack 0
   298                           
   299                           ; Initialize objects allocated to BANK2 (75 bytes)
   300                           ; load TBLPTR registers with __pidataBANK2
   301  00198A  0E26               	movlw	low __pidataBANK2
   302  00198C  6EF6               	movwf	tblptrl,c
   303  00198E  0E1C               	movlw	high __pidataBANK2
   304  001990  6EF7               	movwf	tblptrh,c
   305  001992  0E00               	movlw	low (__pidataBANK2 shr (0+16))
   306  001994  6EF8               	movwf	tblptru,c
   307  001996  EE02  F000         	lfsr	0,__pdataBANK2
   308  00199A  EE10 F04B          	lfsr	1,75
   309  00199E                     copy_data0:
   310  00199E  0009               	tblrd		*+
   311  0019A0  CFF5 FFEE          	movff	tablat,postinc0
   312  0019A4  50E5               	movf	postdec1,w,c
   313  0019A6  50E1               	movf	fsr1l,w,c
   314  0019A8  E1FA               	bnz	copy_data0
   315                           
   316                           ; Initialize objects allocated to BANK0 (5 bytes)
   317                           ; load TBLPTR registers with __pidataBANK0
   318  0019AA  0EEA               	movlw	low __pidataBANK0
   319  0019AC  6EF6               	movwf	tblptrl,c
   320  0019AE  0E1E               	movlw	high __pidataBANK0
   321  0019B0  6EF7               	movwf	tblptrh,c
   322  0019B2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   323  0019B4  6EF8               	movwf	tblptru,c
   324  0019B6  EE00  F0DD         	lfsr	0,__pdataBANK0
   325  0019BA  EE10 F005          	lfsr	1,5
   326  0019BE                     copy_data1:
   327  0019BE  0009               	tblrd		*+
   328  0019C0  CFF5 FFEE          	movff	tablat,postinc0
   329  0019C4  50E5               	movf	postdec1,w,c
   330  0019C6  50E1               	movf	fsr1l,w,c
   331  0019C8  E1FA               	bnz	copy_data1
   332                           
   333                           ; Initialize objects allocated to COMRAM (2 bytes)
   334                           ; load TBLPTR registers with __pidataCOMRAM
   335  0019CA  0EEF               	movlw	low __pidataCOMRAM
   336  0019CC  6EF6               	movwf	tblptrl,c
   337  0019CE  0E1E               	movlw	high __pidataCOMRAM
   338  0019D0  6EF7               	movwf	tblptrh,c
   339  0019D2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   340  0019D4  6EF8               	movwf	tblptru,c
   341  0019D6  0009               	tblrd		*+	;fetch initializer
   342  0019D8  CFF5 F05E          	movff	tablat,__pdataCOMRAM
   343  0019DC  0009               	tblrd		*+	;fetch initializer
   344  0019DE  CFF5 F05F          	movff	tablat,__pdataCOMRAM+1
   345                           
   346                           ; Clear objects allocated to BANK3 (196 bytes)
   347  0019E2  EE03  F000         	lfsr	0,__pbssBANK3
   348  0019E6  0EC4               	movlw	196
   349  0019E8                     clear_0:
   350  0019E8  6AEE               	clrf	postinc0,c
   351  0019EA  06E8               	decf	wreg,f,c
   352  0019EC  E1FD               	bnz	clear_0
   353                           
   354                           ; Clear objects allocated to BANK1 (252 bytes)
   355  0019EE  EE01  F000         	lfsr	0,__pbssBANK1
   356  0019F2  0EFC               	movlw	252
   357  0019F4                     clear_1:
   358  0019F4  6AEE               	clrf	postinc0,c
   359  0019F6  06E8               	decf	wreg,f,c
   360  0019F8  E1FD               	bnz	clear_1
   361                           
   362                           ; Clear objects allocated to BANK0 (11 bytes)
   363  0019FA  EE00  F0D2         	lfsr	0,__pbssBANK0
   364  0019FE  0E0B               	movlw	11
   365  001A00                     clear_2:
   366  001A00  6AEE               	clrf	postinc0,c
   367  001A02  06E8               	decf	wreg,f,c
   368  001A04  E1FD               	bnz	clear_2
   369                           
   370                           ; Clear objects allocated to COMRAM (22 bytes)
   371  001A06  EE00  F048         	lfsr	0,__pbssCOMRAM
   372  001A0A  0E16               	movlw	22
   373  001A0C                     clear_3:
   374  001A0C  6AEE               	clrf	postinc0,c
   375  001A0E  06E8               	decf	wreg,f,c
   376  001A10  E1FD               	bnz	clear_3
   377  001A12                     end_of_initialization:
   378                           	opt stack 0
   379  001A12                     __end_of__initialization:
   380                           	opt stack 0
   381  001A12  9060               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   382  001A14  9260               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   383  001A16  0E00               	movlw	low (__Lmediumconst shr (0+16))
   384  001A18  6EF8               	movwf	tblptru,c
   385  001A1A  0100               	movlb	0
   386  001A1C  EFA1  F003         	goto	_main	;jump to C main() function
   387                           tblptru	equ	0xFF8
   388                           tblptrh	equ	0xFF7
   389                           tblptrl	equ	0xFF6
   390                           tablat	equ	0xFF5
   391                           postinc0	equ	0xFEE
   392                           wreg	equ	0xFE8
   393                           postdec1	equ	0xFE5
   394                           fsr1l	equ	0xFE1
   395                           
   396                           	psect	bssCOMRAM
   397  000048                     __pbssCOMRAM:
   398                           	opt stack 0
   399  000048                     _TabPileSend:
   400                           	opt stack 0
   401  000048                     	ds	10
   402  000052                     _Checksum:
   403                           	opt stack 0
   404  000052                     	ds	2
   405  000054                     _CptPile:
   406                           	opt stack 0
   407  000054                     	ds	1
   408  000055                     _CptReadPile:
   409                           	opt stack 0
   410  000055                     	ds	1
   411  000056                     _SendNbSpi:
   412                           	opt stack 0
   413  000056                     	ds	1
   414  000057                     _CptSpiSend:
   415                           	opt stack 0
   416  000057                     	ds	1
   417  000058                     _Stop:
   418                           	opt stack 0
   419  000058                     	ds	1
   420  000059                     _PrgmSens:
   421                           	opt stack 0
   422  000059                     	ds	1
   423  00005A                     _FlagSleep:
   424                           	opt stack 0
   425  00005A                     	ds	1
   426  00005B                     _PrgmChoisi:
   427                           	opt stack 0
   428  00005B                     	ds	1
   429  00005C                     _TailleMsgSpi:
   430                           	opt stack 0
   431  00005C                     	ds	1
   432  00005D                     _EtatSpi:
   433                           	opt stack 0
   434  00005D                     	ds	1
   435                           tblptru	equ	0xFF8
   436                           tblptrh	equ	0xFF7
   437                           tblptrl	equ	0xFF6
   438                           tablat	equ	0xFF5
   439                           postinc0	equ	0xFEE
   440                           wreg	equ	0xFE8
   441                           postdec1	equ	0xFE5
   442                           fsr1l	equ	0xFE1
   443                           
   444                           	psect	dataCOMRAM
   445  00005E                     __pdataCOMRAM:
   446                           	opt stack 0
   447  00005E                     _CptSend:
   448                           	opt stack 0
   449  00005E                     	ds	1
   450  00005F                     _CptSpi:
   451                           	opt stack 0
   452  00005F                     	ds	1
   453                           tblptru	equ	0xFF8
   454                           tblptrh	equ	0xFF7
   455                           tblptrl	equ	0xFF6
   456                           tablat	equ	0xFF5
   457                           postinc0	equ	0xFEE
   458                           wreg	equ	0xFE8
   459                           postdec1	equ	0xFE5
   460                           fsr1l	equ	0xFE1
   461                           
   462                           	psect	bssBANK0
   463  0000D2                     __pbssBANK0:
   464                           	opt stack 0
   465  0000D2                     _errno:
   466                           	opt stack 0
   467  0000D2                     	ds	2
   468  0000D4                     _Score:
   469                           	opt stack 0
   470  0000D4                     	ds	2
   471  0000D6                     _TailleTerm:
   472                           	opt stack 0
   473  0000D6                     	ds	2
   474  0000D8                     _cpt:
   475                           	opt stack 0
   476  0000D8                     	ds	1
   477  0000D9                     _TypeVarSpi:
   478                           	opt stack 0
   479  0000D9                     	ds	1
   480  0000DA                     _PosCursorPrgm:
   481                           	opt stack 0
   482  0000DA                     	ds	1
   483  0000DB                     _AutoLight:
   484                           	opt stack 0
   485  0000DB                     	ds	1
   486  0000DC                     _EtatScreen:
   487                           	opt stack 0
   488  0000DC                     	ds	1
   489                           tblptru	equ	0xFF8
   490                           tblptrh	equ	0xFF7
   491                           tblptrl	equ	0xFF6
   492                           tablat	equ	0xFF5
   493                           postinc0	equ	0xFEE
   494                           wreg	equ	0xFE8
   495                           postdec1	equ	0xFE5
   496                           fsr1l	equ	0xFE1
   497                           
   498                           	psect	dataBANK0
   499  0000DD                     __pdataBANK0:
   500                           	opt stack 0
   501  0000DD                     _PosY:
   502                           	opt stack 0
   503  0000DD                     	ds	2
   504  0000DF                     _PosX:
   505                           	opt stack 0
   506  0000DF                     	ds	2
   507  0000E1                     _FlagSpi:
   508                           	opt stack 0
   509  0000E1                     	ds	1
   510                           tblptru	equ	0xFF8
   511                           tblptrh	equ	0xFF7
   512                           tblptrl	equ	0xFF6
   513                           tablat	equ	0xFF5
   514                           postinc0	equ	0xFEE
   515                           wreg	equ	0xFE8
   516                           postdec1	equ	0xFE5
   517                           fsr1l	equ	0xFE1
   518                           
   519                           	psect	bssBANK1
   520  000100                     __pbssBANK1:
   521                           	opt stack 0
   522  000100                     _SendMsgSreen:
   523                           	opt stack 0
   524  000100                     	ds	252
   525                           tblptru	equ	0xFF8
   526                           tblptrh	equ	0xFF7
   527                           tblptrl	equ	0xFF6
   528                           tablat	equ	0xFF5
   529                           postinc0	equ	0xFEE
   530                           wreg	equ	0xFE8
   531                           postdec1	equ	0xFE5
   532                           fsr1l	equ	0xFE1
   533                           
   534                           	psect	dataBANK2
   535  000200                     __pdataBANK2:
   536                           	opt stack 0
   537  000200                     _text_prgm:
   538                           	opt stack 0
   539  000200                     	ds	75
   540                           tblptru	equ	0xFF8
   541                           tblptrh	equ	0xFF7
   542                           tblptrl	equ	0xFF6
   543                           tablat	equ	0xFF5
   544                           postinc0	equ	0xFEE
   545                           wreg	equ	0xFE8
   546                           postdec1	equ	0xFE5
   547                           fsr1l	equ	0xFE1
   548                           
   549                           	psect	bssBANK3
   550  000300                     __pbssBANK3:
   551                           	opt stack 0
   552  000300                     _TextSpi:
   553                           	opt stack 0
   554  000300                     	ds	196
   555                           tblptru	equ	0xFF8
   556                           tblptrh	equ	0xFF7
   557                           tblptrl	equ	0xFF6
   558                           tablat	equ	0xFF5
   559                           postinc0	equ	0xFEE
   560                           wreg	equ	0xFE8
   561                           postdec1	equ	0xFE5
   562                           fsr1l	equ	0xFE1
   563                           
   564                           	psect	cstackBANK0
   565  000080                     __pcstackBANK0:
   566                           	opt stack 0
   567  000080                     ?___altoft:
   568                           	opt stack 0
   569  000080                     ?___awtoft:
   570                           	opt stack 0
   571  000080                     ___awtoft@c:
   572                           	opt stack 0
   573  000080                     ___altoft@c:
   574                           	opt stack 0
   575                           
   576                           ; 4 bytes @ 0x0
   577  000080                     	ds	3
   578  000083                     ?___ftneg:
   579                           	opt stack 0
   580  000083                     ___ftneg@f1:
   581                           	opt stack 0
   582                           
   583                           ; 3 bytes @ 0x3
   584  000083                     	ds	1
   585  000084                     ??___altoft:
   586                           
   587                           ; 1 bytes @ 0x4
   588  000084                     	ds	2
   589  000086                     ?___ftmul:
   590                           	opt stack 0
   591  000086                     ___ftmul@f1:
   592                           	opt stack 0
   593                           
   594                           ; 3 bytes @ 0x6
   595  000086                     	ds	3
   596  000089                     ___ftmul@f2:
   597                           	opt stack 0
   598                           
   599                           ; 3 bytes @ 0x9
   600  000089                     	ds	3
   601  00008C                     ??___ftmul:
   602                           
   603                           ; 1 bytes @ 0xC
   604  00008C                     	ds	3
   605  00008F                     ___ftmul@exp:
   606                           	opt stack 0
   607                           
   608                           ; 1 bytes @ 0xF
   609  00008F                     	ds	1
   610  000090                     ___ftmul@f3_as_product:
   611                           	opt stack 0
   612                           
   613                           ; 3 bytes @ 0x10
   614  000090                     	ds	3
   615  000093                     ___ftmul@cntr:
   616                           	opt stack 0
   617                           
   618                           ; 1 bytes @ 0x13
   619  000093                     	ds	1
   620  000094                     ___ftmul@sign:
   621                           	opt stack 0
   622                           
   623                           ; 1 bytes @ 0x14
   624  000094                     	ds	1
   625  000095                     ?___ftadd:
   626                           	opt stack 0
   627  000095                     ___ftadd@f1:
   628                           	opt stack 0
   629                           
   630                           ; 3 bytes @ 0x15
   631  000095                     	ds	3
   632  000098                     ___ftadd@f2:
   633                           	opt stack 0
   634                           
   635                           ; 3 bytes @ 0x18
   636  000098                     	ds	3
   637  00009B                     ??___ftadd:
   638                           
   639                           ; 1 bytes @ 0x1B
   640  00009B                     	ds	3
   641  00009E                     ___ftadd@sign:
   642                           	opt stack 0
   643                           
   644                           ; 1 bytes @ 0x1E
   645  00009E                     	ds	1
   646  00009F                     ___ftadd@exp2:
   647                           	opt stack 0
   648                           
   649                           ; 1 bytes @ 0x1F
   650  00009F                     	ds	1
   651  0000A0                     ___ftadd@exp1:
   652                           	opt stack 0
   653                           
   654                           ; 1 bytes @ 0x20
   655  0000A0                     	ds	1
   656  0000A1                     ?___ftsub:
   657                           	opt stack 0
   658  0000A1                     ?_floor:
   659                           	opt stack 0
   660  0000A1                     ?_eval_poly:
   661                           	opt stack 0
   662  0000A1                     floor@x:
   663                           	opt stack 0
   664  0000A1                     ___ftsub@f1:
   665                           	opt stack 0
   666  0000A1                     eval_poly@x:
   667                           	opt stack 0
   668                           
   669                           ; 3 bytes @ 0x21
   670  0000A1                     	ds	3
   671  0000A4                     eval_poly@d:
   672                           	opt stack 0
   673  0000A4                     floor@i:
   674                           	opt stack 0
   675  0000A4                     ___ftsub@f2:
   676                           	opt stack 0
   677                           
   678                           ; 3 bytes @ 0x24
   679  0000A4                     	ds	2
   680  0000A6                     eval_poly@n:
   681                           	opt stack 0
   682                           
   683                           ; 2 bytes @ 0x26
   684  0000A6                     	ds	1
   685  0000A7                     floor@expon:
   686                           	opt stack 0
   687                           
   688                           ; 2 bytes @ 0x27
   689  0000A7                     	ds	1
   690  0000A8                     ??_eval_poly:
   691                           
   692                           ; 1 bytes @ 0x28
   693  0000A8                     	ds	2
   694  0000AA                     eval_poly@res:
   695                           	opt stack 0
   696                           
   697                           ; 3 bytes @ 0x2A
   698  0000AA                     	ds	3
   699  0000AD                     ?_ldexp:
   700                           	opt stack 0
   701  0000AD                     ldexp@value:
   702                           	opt stack 0
   703                           
   704                           ; 3 bytes @ 0x2D
   705  0000AD                     	ds	3
   706  0000B0                     ldexp@newexp:
   707                           	opt stack 0
   708                           
   709                           ; 2 bytes @ 0x30
   710  0000B0                     	ds	2
   711  0000B2                     ??_ldexp:
   712                           
   713                           ; 1 bytes @ 0x32
   714  0000B2                     	ds	2
   715  0000B4                     ?_exp:
   716                           	opt stack 0
   717  0000B4                     exp@x:
   718                           	opt stack 0
   719                           
   720                           ; 3 bytes @ 0x34
   721  0000B4                     	ds	3
   722  0000B7                     _exp$1536:
   723                           	opt stack 0
   724                           
   725                           ; 3 bytes @ 0x37
   726  0000B7                     	ds	3
   727  0000BA                     exp@exponent:
   728                           	opt stack 0
   729                           
   730                           ; 2 bytes @ 0x3A
   731  0000BA                     	ds	2
   732  0000BC                     exp@sign:
   733                           	opt stack 0
   734                           
   735                           ; 1 bytes @ 0x3C
   736  0000BC                     	ds	1
   737  0000BD                     ??_main:
   738                           
   739                           ; 1 bytes @ 0x3D
   740  0000BD                     	ds	4
   741  0000C1                     _main$1532:
   742                           	opt stack 0
   743                           
   744                           ; 3 bytes @ 0x41
   745  0000C1                     	ds	3
   746  0000C4                     _main$1533:
   747                           	opt stack 0
   748                           
   749                           ; 3 bytes @ 0x44
   750  0000C4                     	ds	3
   751  0000C7                     main@CptTmr0:
   752                           	opt stack 0
   753                           
   754                           ; 1 bytes @ 0x47
   755  0000C7                     	ds	1
   756  0000C8                     _main$1534:
   757                           	opt stack 0
   758                           
   759                           ; 3 bytes @ 0x48
   760  0000C8                     	ds	3
   761  0000CB                     _main$1535:
   762                           	opt stack 0
   763                           
   764                           ; 2 bytes @ 0x4B
   765  0000CB                     	ds	2
   766  0000CD                     main@taille_text_spi:
   767                           	opt stack 0
   768                           
   769                           ; 1 bytes @ 0x4D
   770  0000CD                     	ds	1
   771  0000CE                     main@taille_text_prgm:
   772                           	opt stack 0
   773                           
   774                           ; 1 bytes @ 0x4E
   775  0000CE                     	ds	1
   776  0000CF                     main@adc_res:
   777                           	opt stack 0
   778                           
   779                           ; 3 bytes @ 0x4F
   780  0000CF                     	ds	3
   781                           tblptru	equ	0xFF8
   782                           tblptrh	equ	0xFF7
   783                           tblptrl	equ	0xFF6
   784                           tablat	equ	0xFF5
   785                           postinc0	equ	0xFEE
   786                           wreg	equ	0xFE8
   787                           postdec1	equ	0xFE5
   788                           fsr1l	equ	0xFE1
   789                           
   790                           	psect	cstackCOMRAM
   791  000001                     __pcstackCOMRAM:
   792                           	opt stack 0
   793  000001                     ___lbmod@divisor:
   794                           	opt stack 0
   795  000001                     Modulo@M_nombre:
   796                           	opt stack 0
   797                           
   798                           ; 2 bytes @ 0x0
   799  000001                     	ds	1
   800  000002                     ___lbmod@dividend:
   801                           	opt stack 0
   802                           
   803                           ; 1 bytes @ 0x1
   804  000002                     	ds	1
   805  000003                     ___lbmod@counter:
   806                           	opt stack 0
   807                           
   808                           ; 1 bytes @ 0x2
   809  000003                     	ds	1
   810  000004                     ___lbmod@rem:
   811                           	opt stack 0
   812                           
   813                           ; 1 bytes @ 0x3
   814  000004                     	ds	1
   815  000005                     ??_ISR:
   816                           
   817                           ; 1 bytes @ 0x4
   818  000005                     	ds	25
   819  00001E                     ISR@Receive:
   820                           	opt stack 0
   821                           
   822                           ; 1 bytes @ 0x1D
   823  00001E                     	ds	1
   824  00001F                     ISR@data_spi:
   825                           	opt stack 0
   826                           
   827                           ; 1 bytes @ 0x1E
   828  00001F                     	ds	1
   829  000020                     ?_Adc:
   830                           	opt stack 0
   831  000020                     ?___wmul:
   832                           	opt stack 0
   833  000020                     ?___awdiv:
   834                           	opt stack 0
   835  000020                     ?___ftpack:
   836                           	opt stack 0
   837  000020                     PrintC@c_printC:
   838                           	opt stack 0
   839  000020                     ClearArray@cpt_vide:
   840                           	opt stack 0
   841  000020                     ___wmul@multiplier:
   842                           	opt stack 0
   843  000020                     ___awdiv@dividend:
   844                           	opt stack 0
   845  000020                     ___ftpack@arg:
   846                           	opt stack 0
   847  000020                     frexp@value:
   848                           	opt stack 0
   849  000020                     ___ftge@ff1:
   850                           	opt stack 0
   851                           
   852                           ; 3 bytes @ 0x1F
   853  000020                     	ds	1
   854  000021                     PrintS@s_printS:
   855                           	opt stack 0
   856                           
   857                           ; 2 bytes @ 0x20
   858  000021                     	ds	1
   859  000022                     ??_Adc:
   860  000022                     ___wmul@multiplicand:
   861                           	opt stack 0
   862  000022                     ___awdiv@divisor:
   863                           	opt stack 0
   864                           
   865                           ; 2 bytes @ 0x21
   866  000022                     	ds	1
   867  000023                     ___ftpack@exp:
   868                           	opt stack 0
   869  000023                     frexp@eptr:
   870                           	opt stack 0
   871  000023                     ___ftge@ff2:
   872                           	opt stack 0
   873                           
   874                           ; 3 bytes @ 0x22
   875  000023                     	ds	1
   876  000024                     Adc@channel:
   877                           	opt stack 0
   878  000024                     ___awdiv@counter:
   879                           	opt stack 0
   880  000024                     ___ftpack@sign:
   881                           	opt stack 0
   882  000024                     ___wmul@product:
   883                           	opt stack 0
   884                           
   885                           ; 2 bytes @ 0x23
   886  000024                     	ds	1
   887  000025                     ??___ftpack:
   888  000025                     ??_frexp:
   889  000025                     ___awdiv@sign:
   890                           	opt stack 0
   891                           
   892                           ; 1 bytes @ 0x24
   893  000025                     	ds	1
   894  000026                     ??___ftge:
   895  000026                     ___awdiv@quotient:
   896                           	opt stack 0
   897                           
   898                           ; 2 bytes @ 0x25
   899  000026                     	ds	2
   900  000028                     ?___ftdiv:
   901                           	opt stack 0
   902  000028                     ?___lwtoft:
   903                           	opt stack 0
   904  000028                     ___lwtoft@c:
   905                           	opt stack 0
   906  000028                     ___ftdiv@f1:
   907                           	opt stack 0
   908                           
   909                           ; 3 bytes @ 0x27
   910  000028                     	ds	3
   911  00002B                     ___ftdiv@f2:
   912                           	opt stack 0
   913                           
   914                           ; 3 bytes @ 0x2A
   915  00002B                     	ds	3
   916  00002E                     ??___ftdiv:
   917                           
   918                           ; 1 bytes @ 0x2D
   919  00002E                     	ds	3
   920  000031                     ___ftdiv@cntr:
   921                           	opt stack 0
   922                           
   923                           ; 1 bytes @ 0x30
   924  000031                     	ds	1
   925  000032                     ___ftdiv@f3:
   926                           	opt stack 0
   927                           
   928                           ; 3 bytes @ 0x31
   929  000032                     	ds	3
   930  000035                     ___ftdiv@exp:
   931                           	opt stack 0
   932                           
   933                           ; 1 bytes @ 0x34
   934  000035                     	ds	1
   935  000036                     ___ftdiv@sign:
   936                           	opt stack 0
   937                           
   938                           ; 1 bytes @ 0x35
   939  000036                     	ds	1
   940  000037                     ?___fttol:
   941                           	opt stack 0
   942  000037                     ___fttol@f1:
   943                           	opt stack 0
   944                           
   945                           ; 3 bytes @ 0x36
   946  000037                     	ds	4
   947  00003B                     ??___fttol:
   948                           
   949                           ; 1 bytes @ 0x3A
   950  00003B                     	ds	5
   951  000040                     ___fttol@sign1:
   952                           	opt stack 0
   953                           
   954                           ; 1 bytes @ 0x3F
   955  000040                     	ds	1
   956  000041                     ___fttol@lval:
   957                           	opt stack 0
   958                           
   959                           ; 4 bytes @ 0x40
   960  000041                     	ds	4
   961  000045                     ___fttol@exp1:
   962                           	opt stack 0
   963                           
   964                           ; 1 bytes @ 0x44
   965  000045                     	ds	1
   966  000046                     ___altoft@exp:
   967                           	opt stack 0
   968  000046                     ___awtoft@sign:
   969                           	opt stack 0
   970                           
   971                           ; 1 bytes @ 0x45
   972  000046                     	ds	1
   973  000047                     ___altoft@sign:
   974                           	opt stack 0
   975                           
   976                           ; 1 bytes @ 0x46
   977  000047                     	ds	1
   978  000048                     tblptru	equ	0xFF8
   979                           tblptrh	equ	0xFF7
   980                           tblptrl	equ	0xFF6
   981                           tablat	equ	0xFF5
   982                           postinc0	equ	0xFEE
   983                           wreg	equ	0xFE8
   984                           postdec1	equ	0xFE5
   985                           fsr1l	equ	0xFE1
   986                           
   987                           ; 1 bytes @ 0x47
   988 ;;
   989 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   990 ;;
   991 ;; *************** function _main *****************
   992 ;; Defined at:
   993 ;;		line 173 in file "main.c"
   994 ;; Parameters:    Size  Location     Type
   995 ;;		None
   996 ;; Auto vars:     Size  Location     Type
   997 ;;  adc_res         3   79[BANK0 ] float 
   998 ;;  taille_text_    1   78[BANK0 ] unsigned char 
   999 ;;  taille_text_    1   77[BANK0 ] unsigned char 
  1000 ;;  CptTmr0         1   71[BANK0 ] unsigned char 
  1001 ;; Return value:  Size  Location     Type
  1002 ;;                  1    wreg      void 
  1003 ;; Registers used:
  1004 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1005 ;; Tracked objects:
  1006 ;;		On entry : 0/0
  1007 ;;		On exit  : 0/0
  1008 ;;		Unchanged: 0/0
  1009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1010 ;;      Params:         0       0       0       0       0       0       0
  1011 ;;      Locals:         0      17       0       0       0       0       0
  1012 ;;      Temps:          0       4       0       0       0       0       0
  1013 ;;      Totals:         0      21       0       0       0       0       0
  1014 ;;Total ram usage:       21 bytes
  1015 ;; Hardware stack levels required when called:    6
  1016 ;; This function calls:
  1017 ;;		_ADCInit
  1018 ;;		_Adc
  1019 ;;		_ClearArray
  1020 ;;		_ClockInit
  1021 ;;		_InitTmr0
  1022 ;;		_PrintS
  1023 ;;		_SpiInit
  1024 ;;		_UartInit
  1025 ;;		___awdiv
  1026 ;;		___awtoft
  1027 ;;		___ftadd
  1028 ;;		___ftdiv
  1029 ;;		___ftge
  1030 ;;		___ftmul
  1031 ;;		___ftneg
  1032 ;;		___fttol
  1033 ;;		___lwtoft
  1034 ;;		_exp
  1035 ;; This function is called by:
  1036 ;;		Startup code after reset
  1037 ;; This function uses a non-reentrant model
  1038 ;;
  1039                           
  1040                           	psect	text0
  1041  000742                     __ptext0:
  1042                           	opt stack 0
  1043  000742                     _main:
  1044                           	opt stack 25
  1045                           
  1046                           ;main.c: 174: ClockInit();
  1047                           
  1048                           ;incstack = 0
  1049  000742  EC6E  F00F         	call	_ClockInit	;wreg free
  1050                           
  1051                           ;main.c: 175: ADCInit();
  1052  000746  EC01  F00F         	call	_ADCInit	;wreg free
  1053                           
  1054                           ;main.c: 176: SpiInit();
  1055  00074A  ECC3  F00E         	call	_SpiInit	;wreg free
  1056                           
  1057                           ;main.c: 177: UartInit();
  1058  00074E  ECAB  F00E         	call	_UartInit	;wreg free
  1059                           
  1060                           ;main.c: 178: TRISCbits.TRISC1=0;
  1061  000752  9294               	bcf	3988,1,c	;volatile
  1062                           
  1063                           ;main.c: 179: InitTmr0();
  1064  000754  EC4D  F00F         	call	_InitTmr0	;wreg free
  1065                           
  1066                           ;main.c: 181: char CptTmr0 = 0;
  1067  000758  0E00               	movlw	0
  1068  00075A  0100               	movlb	0	; () banked
  1069  00075C  6FC7               	movwf	main@CptTmr0& (0+255),b
  1070                           
  1071                           ; BSR set to: 0
  1072                           ;main.c: 182: float adc_res = 0;
  1073  00075E  0E00               	movlw	0
  1074  000760  6FCF               	movwf	main@adc_res& (0+255),b
  1075  000762  0E00               	movlw	0
  1076  000764  6FD0               	movwf	(main@adc_res+1)& (0+255),b
  1077  000766  0E00               	movlw	0
  1078  000768  6FD1               	movwf	(main@adc_res+2)& (0+255),b
  1079                           
  1080                           ; BSR set to: 0
  1081                           ;main.c: 183: unsigned char taille_text_prgm;
  1082                           ;main.c: 184: unsigned char taille_text_spi;
  1083                           ;main.c: 185: _delay((unsigned long)((2000)*(32000000/4000.0)));
  1084  00076A  0E52               	movlw	82
  1085  00076C  0100               	movlb	0	; () banked
  1086  00076E  6FBE               	movwf	(??_main+1)& (0+255),b
  1087  000770  0E2B               	movlw	43
  1088  000772  6FBD               	movwf	??_main& (0+255),b
  1089  000774  0E00               	movlw	0
  1090  000776                     u3487:
  1091  000776  2EE8               	decfsz	wreg,f,c
  1092  000778  D7FE               	bra	u3487
  1093  00077A  2FBD               	decfsz	??_main& (0+255),f,b
  1094  00077C  D7FC               	bra	u3487
  1095  00077E  2FBE               	decfsz	(??_main+1)& (0+255),f,b
  1096  000780  D7FA               	bra	u3487
  1097  000782  F000               	nop	
  1098  000784                     
  1099                           ;main.c: 188: if(TMR0IF) {
  1100  000784  A4F2               	btfss	intcon,2,c	;volatile
  1101  000786  D7FE               	goto	l191
  1102                           
  1103                           ;main.c: 189: TMR0L = 0xB0;
  1104  000788  0EB0               	movlw	176
  1105  00078A  6ED6               	movwf	4054,c	;volatile
  1106                           
  1107                           ;main.c: 190: TMR0H = 0x3C;
  1108  00078C  0E3C               	movlw	60
  1109  00078E  6ED7               	movwf	4055,c	;volatile
  1110                           
  1111                           ;main.c: 191: TMR0IF = 0;
  1112  000790  94F2               	bcf	intcon,2,c	;volatile
  1113                           
  1114                           ;main.c: 192: CptTmr0++;
  1115  000792  0100               	movlb	0	; () banked
  1116  000794  2BC7               	incf	main@CptTmr0& (0+255),f,b
  1117                           
  1118                           ; BSR set to: 0
  1119                           ;main.c: 193: if(CptTmr0 > 10) {
  1120  000796  0E0A               	movlw	10
  1121  000798  65C7               	cpfsgt	main@CptTmr0& (0+255),b
  1122  00079A  D00F               	goto	l193
  1123                           
  1124                           ; BSR set to: 0
  1125                           ;main.c: 194: LATCbits.LATC1=!(LATCbits.LATC1);
  1126  00079C  B28B               	btfsc	3979,1,c	;volatile
  1127  00079E  D003               	goto	u3330
  1128  0007A0  6BBD               	clrf	??_main& (0+255),b
  1129  0007A2  2BBD               	incf	??_main& (0+255),f,b
  1130  0007A4  D002               	goto	u3348
  1131  0007A6                     u3330:
  1132  0007A6  0100               	movlb	0	; () banked
  1133  0007A8  6BBD               	clrf	??_main& (0+255),b
  1134  0007AA                     u3348:
  1135  0007AA  47BD               	rlncf	??_main& (0+255),f,b
  1136  0007AC  508B               	movf	3979,w,c	;volatile
  1137  0007AE  19BD               	xorwf	??_main& (0+255),w,b
  1138  0007B0  0BFD               	andlw	-3
  1139  0007B2  19BD               	xorwf	??_main& (0+255),w,b
  1140  0007B4  6E8B               	movwf	3979,c	;volatile
  1141                           
  1142                           ; BSR set to: 0
  1143                           ;main.c: 195: CptTmr0 = 0;
  1144  0007B6  0E00               	movlw	0
  1145  0007B8  6FC7               	movwf	main@CptTmr0& (0+255),b
  1146  0007BA                     l193:
  1147                           
  1148                           ; BSR set to: 0
  1149                           ;main.c: 196: }
  1150                           ;main.c: 197: if(AutoLight) {
  1151                           
  1152                           ; BSR set to: 0
  1153  0007BA  51DB               	movf	_AutoLight& (0+255),w,b
  1154  0007BC  B4D8               	btfsc	status,2,c
  1155  0007BE  D174               	goto	l197
  1156                           
  1157                           ; BSR set to: 0
  1158                           ;main.c: 198: adc_res = Adc(1);
  1159  0007C0  0E01               	movlw	1
  1160  0007C2  EC92  F00E         	call	_Adc
  1161  0007C6  C020  F028         	movff	?_Adc,___lwtoft@c
  1162  0007CA  C021  F029         	movff	?_Adc+1,___lwtoft@c+1
  1163  0007CE  EC3B  F00F         	call	___lwtoft	;wreg free
  1164  0007D2  C028  F0CF         	movff	?___lwtoft,main@adc_res
  1165  0007D6  C029  F0D0         	movff	?___lwtoft+1,main@adc_res+1
  1166  0007DA  C02A  F0D1         	movff	?___lwtoft+2,main@adc_res+2
  1167                           
  1168                           ;main.c: 209: adc_res = 90*exp(-(adc_res/901));
  1169  0007DE  0E40               	movlw	64
  1170  0007E0  6E2B               	movwf	___ftdiv@f2,c
  1171  0007E2  0E61               	movlw	97
  1172  0007E4  6E2C               	movwf	___ftdiv@f2+1,c
  1173  0007E6  0E44               	movlw	68
  1174  0007E8  6E2D               	movwf	___ftdiv@f2+2,c
  1175  0007EA  C0CF  F028         	movff	main@adc_res,___ftdiv@f1
  1176  0007EE  C0D0  F029         	movff	main@adc_res+1,___ftdiv@f1+1
  1177  0007F2  C0D1  F02A         	movff	main@adc_res+2,___ftdiv@f1+2
  1178  0007F6  ECBA  F00A         	call	___ftdiv	;wreg free
  1179  0007FA  C028  F083         	movff	?___ftdiv,___ftneg@f1
  1180  0007FE  C029  F084         	movff	?___ftdiv+1,___ftneg@f1+1
  1181  000802  C02A  F085         	movff	?___ftdiv+2,___ftneg@f1+2
  1182  000806  EC28  F00F         	call	___ftneg	;wreg free
  1183  00080A  C083  F0C1         	movff	?___ftneg,_main$1532
  1184  00080E  C084  F0C2         	movff	?___ftneg+1,_main$1532+1
  1185  000812  C085  F0C3         	movff	?___ftneg+2,_main$1532+2
  1186                           
  1187                           ;main.c: 209: adc_res = 90*exp(-(adc_res/901));
  1188  000816  C0C1  F0B4         	movff	_main$1532,exp@x
  1189  00081A  C0C2  F0B5         	movff	_main$1532+1,exp@x+1
  1190  00081E  C0C3  F0B6         	movff	_main$1532+2,exp@x+2
  1191  000822  ECF5  F007         	call	_exp	;wreg free
  1192  000826  C0B4  F0C4         	movff	?_exp,_main$1533
  1193  00082A  C0B5  F0C5         	movff	?_exp+1,_main$1533+1
  1194  00082E  C0B6  F0C6         	movff	?_exp+2,_main$1533+2
  1195                           
  1196                           ;main.c: 209: adc_res = 90*exp(-(adc_res/901));
  1197  000832  C0C4  F086         	movff	_main$1533,___ftmul@f1
  1198  000836  C0C5  F087         	movff	_main$1533+1,___ftmul@f1+1
  1199  00083A  C0C6  F088         	movff	_main$1533+2,___ftmul@f1+2
  1200  00083E  0E00               	movlw	0
  1201  000840  0100               	movlb	0	; () banked
  1202  000842  6F89               	movwf	___ftmul@f2& (0+255),b
  1203  000844  0EB4               	movlw	180
  1204  000846  6F8A               	movwf	(___ftmul@f2+1)& (0+255),b
  1205  000848  0E42               	movlw	66
  1206  00084A  6F8B               	movwf	(___ftmul@f2+2)& (0+255),b
  1207  00084C  ECC5  F009         	call	___ftmul	;wreg free
  1208  000850  C086  F0CF         	movff	?___ftmul,main@adc_res
  1209  000854  C087  F0D0         	movff	?___ftmul+1,main@adc_res+1
  1210  000858  C088  F0D1         	movff	?___ftmul+2,main@adc_res+2
  1211                           
  1212                           ;main.c: 210: adc_res = (int)(adc_res);
  1213  00085C  C0CF  F037         	movff	main@adc_res,___fttol@f1
  1214  000860  C0D0  F038         	movff	main@adc_res+1,___fttol@f1+1
  1215  000864  C0D1  F039         	movff	main@adc_res+2,___fttol@f1+2
  1216  000868  EC40  F00A         	call	___fttol	;wreg free
  1217  00086C  C037  F080         	movff	?___fttol,___awtoft@c
  1218  000870  C038  F081         	movff	?___fttol+1,___awtoft@c+1
  1219  000874  EC5A  F00E         	call	___awtoft	;wreg free
  1220  000878  C080  F0CF         	movff	?___awtoft,main@adc_res
  1221  00087C  C081  F0D0         	movff	?___awtoft+1,main@adc_res+1
  1222  000880  C082  F0D1         	movff	?___awtoft+2,main@adc_res+2
  1223                           
  1224                           ;main.c: 211: if(adc_res < 0) {
  1225  000884  0100               	movlb	0	; () banked
  1226  000886  AFD1               	btfss	(main@adc_res+2)& (0+255),7,b
  1227  000888  D006               	goto	l195
  1228                           
  1229                           ; BSR set to: 0
  1230                           ;main.c: 212: adc_res = 0;
  1231  00088A  0E00               	movlw	0
  1232  00088C  6FCF               	movwf	main@adc_res& (0+255),b
  1233  00088E  0E00               	movlw	0
  1234  000890  6FD0               	movwf	(main@adc_res+1)& (0+255),b
  1235  000892  0E00               	movlw	0
  1236  000894  6FD1               	movwf	(main@adc_res+2)& (0+255),b
  1237  000896                     l195:
  1238                           
  1239                           ; BSR set to: 0
  1240                           ;main.c: 213: }
  1241                           ;main.c: 214: if(adc_res > 99) {
  1242                           
  1243                           ; BSR set to: 0
  1244  000896  0E00               	movlw	0
  1245  000898  6E20               	movwf	___ftge@ff1,c
  1246  00089A  0EC6               	movlw	198
  1247  00089C  6E21               	movwf	___ftge@ff1+1,c
  1248  00089E  0E42               	movlw	66
  1249  0008A0  6E22               	movwf	___ftge@ff1+2,c
  1250  0008A2  C0CF  F023         	movff	main@adc_res,___ftge@ff2
  1251  0008A6  C0D0  F024         	movff	main@adc_res+1,___ftge@ff2+1
  1252  0008AA  C0D1  F025         	movff	main@adc_res+2,___ftge@ff2+2
  1253  0008AE  EC10  F00D         	call	___ftge	;wreg free
  1254  0008B2  B0D8               	btfsc	status,0,c
  1255  0008B4  D007               	goto	l196
  1256                           
  1257                           ;main.c: 215: adc_res = 99;
  1258  0008B6  0E00               	movlw	0
  1259  0008B8  0100               	movlb	0	; () banked
  1260  0008BA  6FCF               	movwf	main@adc_res& (0+255),b
  1261  0008BC  0EC6               	movlw	198
  1262  0008BE  6FD0               	movwf	(main@adc_res+1)& (0+255),b
  1263  0008C0  0E42               	movlw	66
  1264  0008C2  6FD1               	movwf	(main@adc_res+2)& (0+255),b
  1265  0008C4                     l196:
  1266                           
  1267                           ;main.c: 216: }
  1268                           ;main.c: 219: SendMsgSreen[0] = 0x64;
  1269  0008C4  0E64               	movlw	100
  1270  0008C6  0101               	movlb	1	; () banked
  1271  0008C8  6F00               	movwf	_SendMsgSreen& (0+255),b
  1272                           
  1273                           ;main.c: 220: SendMsgSreen[1] = 0x69;
  1274  0008CA  0E69               	movlw	105
  1275  0008CC  6F01               	movwf	(_SendMsgSreen+1)& (0+255),b
  1276                           
  1277                           ;main.c: 221: SendMsgSreen[2] = 0x6D;
  1278  0008CE  0E6D               	movlw	109
  1279  0008D0  6F02               	movwf	(_SendMsgSreen+2)& (0+255),b
  1280                           
  1281                           ;main.c: 222: SendMsgSreen[3] = 0x3D;
  1282  0008D2  0E3D               	movlw	61
  1283  0008D4  6F03               	movwf	(_SendMsgSreen+3)& (0+255),b
  1284                           
  1285                           ; BSR set to: 1
  1286                           ;main.c: 223: SendMsgSreen[4] = 0x30 + (char)(adc_res/10);
  1287  0008D6  0E00               	movlw	0
  1288  0008D8  6E2B               	movwf	___ftdiv@f2,c
  1289  0008DA  0E20               	movlw	32
  1290  0008DC  6E2C               	movwf	___ftdiv@f2+1,c
  1291  0008DE  0E41               	movlw	65
  1292  0008E0  6E2D               	movwf	___ftdiv@f2+2,c
  1293  0008E2  C0CF  F028         	movff	main@adc_res,___ftdiv@f1
  1294  0008E6  C0D0  F029         	movff	main@adc_res+1,___ftdiv@f1+1
  1295  0008EA  C0D1  F02A         	movff	main@adc_res+2,___ftdiv@f1+2
  1296  0008EE  ECBA  F00A         	call	___ftdiv	;wreg free
  1297  0008F2  C028  F037         	movff	?___ftdiv,___fttol@f1
  1298  0008F6  C029  F038         	movff	?___ftdiv+1,___fttol@f1+1
  1299  0008FA  C02A  F039         	movff	?___ftdiv+2,___fttol@f1+2
  1300  0008FE  EC40  F00A         	call	___fttol	;wreg free
  1301  000902  5037               	movf	?___fttol,w,c
  1302  000904  0F30               	addlw	48
  1303  000906  0101               	movlb	1	; () banked
  1304  000908  6F04               	movwf	(_SendMsgSreen+4)& (0+255),b
  1305                           
  1306                           ; BSR set to: 1
  1307                           ;main.c: 224: SendMsgSreen[5] = 0x30 + (char)(adc_res-(10*(char)(adc_res/10)));
  1308  00090A  C0CF  F098         	movff	main@adc_res,___ftadd@f2
  1309  00090E  C0D0  F099         	movff	main@adc_res+1,___ftadd@f2+1
  1310  000912  C0D1  F09A         	movff	main@adc_res+2,___ftadd@f2+2
  1311  000916  0E00               	movlw	0
  1312  000918  6E2B               	movwf	___ftdiv@f2,c
  1313  00091A  0E20               	movlw	32
  1314  00091C  6E2C               	movwf	___ftdiv@f2+1,c
  1315  00091E  0E41               	movlw	65
  1316  000920  6E2D               	movwf	___ftdiv@f2+2,c
  1317  000922  C0CF  F028         	movff	main@adc_res,___ftdiv@f1
  1318  000926  C0D0  F029         	movff	main@adc_res+1,___ftdiv@f1+1
  1319  00092A  C0D1  F02A         	movff	main@adc_res+2,___ftdiv@f1+2
  1320  00092E  ECBA  F00A         	call	___ftdiv	;wreg free
  1321  000932  C028  F037         	movff	?___ftdiv,___fttol@f1
  1322  000936  C029  F038         	movff	?___ftdiv+1,___fttol@f1+1
  1323  00093A  C02A  F039         	movff	?___ftdiv+2,___fttol@f1+2
  1324  00093E  EC40  F00A         	call	___fttol	;wreg free
  1325  000942  5037               	movf	?___fttol,w,c
  1326  000944  0D0A               	mullw	10
  1327  000946  CFF3 F080          	movff	prodl,___awtoft@c
  1328  00094A  CFF4 F081          	movff	prodh,___awtoft@c+1
  1329  00094E  EC5A  F00E         	call	___awtoft	;wreg free
  1330  000952  C080  F083         	movff	?___awtoft,___ftneg@f1
  1331  000956  C081  F084         	movff	?___awtoft+1,___ftneg@f1+1
  1332  00095A  C082  F085         	movff	?___awtoft+2,___ftneg@f1+2
  1333  00095E  EC28  F00F         	call	___ftneg	;wreg free
  1334  000962  C083  F095         	movff	?___ftneg,___ftadd@f1
  1335  000966  C084  F096         	movff	?___ftneg+1,___ftadd@f1+1
  1336  00096A  C085  F097         	movff	?___ftneg+2,___ftadd@f1+2
  1337  00096E  ECEE  F008         	call	___ftadd	;wreg free
  1338  000972  C095  F0C8         	movff	?___ftadd,_main$1534
  1339  000976  C096  F0C9         	movff	?___ftadd+1,_main$1534+1
  1340  00097A  C097  F0CA         	movff	?___ftadd+2,_main$1534+2
  1341                           
  1342                           ;main.c: 224: SendMsgSreen[5] = 0x30 + (char)(adc_res-(10*(char)(adc_res/10)));
  1343  00097E  C0C8  F037         	movff	_main$1534,___fttol@f1
  1344  000982  C0C9  F038         	movff	_main$1534+1,___fttol@f1+1
  1345  000986  C0CA  F039         	movff	_main$1534+2,___fttol@f1+2
  1346  00098A  EC40  F00A         	call	___fttol	;wreg free
  1347  00098E  5037               	movf	?___fttol,w,c
  1348  000990  0F30               	addlw	48
  1349  000992  0101               	movlb	1	; () banked
  1350  000994  6F05               	movwf	(_SendMsgSreen+5)& (0+255),b
  1351                           
  1352                           ; BSR set to: 1
  1353                           ;main.c: 225: SendMsgSreen[6] = 0xFF;
  1354  000996  6906               	setf	(_SendMsgSreen+6)& (0+255),b
  1355                           
  1356                           ; BSR set to: 1
  1357                           ;main.c: 226: SendMsgSreen[7] = 0xFF;
  1358  000998  6907               	setf	(_SendMsgSreen+7)& (0+255),b
  1359                           
  1360                           ; BSR set to: 1
  1361                           ;main.c: 227: SendMsgSreen[8] = 0xFF;
  1362  00099A  6908               	setf	(_SendMsgSreen+8)& (0+255),b
  1363                           
  1364                           ; BSR set to: 1
  1365                           ;main.c: 228: PrintS(SendMsgSreen);
  1366  00099C  0E00               	movlw	low _SendMsgSreen
  1367  00099E  6E21               	movwf	PrintS@s_printS,c
  1368  0009A0  0E01               	movlw	high _SendMsgSreen
  1369  0009A2  6E22               	movwf	PrintS@s_printS+1,c
  1370  0009A4  EC77  F00E         	call	_PrintS	;wreg free
  1371                           
  1372                           ;main.c: 229: ClearArray();
  1373  0009A8  ECED  F00E         	call	_ClearArray	;wreg free
  1374                           
  1375                           ;main.c: 230: if(EtatScreen == 0) {
  1376  0009AC  0100               	movlb	0	; () banked
  1377  0009AE  51DC               	movf	_EtatScreen& (0+255),w,b
  1378  0009B0  A4D8               	btfss	status,2,c
  1379  0009B2  D07A               	goto	l197
  1380                           
  1381                           ; BSR set to: 0
  1382                           ;main.c: 233: SendMsgSreen[0] = 0x68;
  1383  0009B4  0E68               	movlw	104
  1384  0009B6  0101               	movlb	1	; () banked
  1385  0009B8  6F00               	movwf	_SendMsgSreen& (0+255),b
  1386                           
  1387                           ;main.c: 234: SendMsgSreen[1] = 0x30;
  1388  0009BA  0E30               	movlw	48
  1389  0009BC  6F01               	movwf	(_SendMsgSreen+1)& (0+255),b
  1390                           
  1391                           ;main.c: 235: SendMsgSreen[2] = 0x2E;
  1392  0009BE  0E2E               	movlw	46
  1393  0009C0  6F02               	movwf	(_SendMsgSreen+2)& (0+255),b
  1394                           
  1395                           ;main.c: 236: SendMsgSreen[3] = 0x76;
  1396  0009C2  0E76               	movlw	118
  1397  0009C4  6F03               	movwf	(_SendMsgSreen+3)& (0+255),b
  1398                           
  1399                           ;main.c: 237: SendMsgSreen[4] = 0x61;
  1400  0009C6  0E61               	movlw	97
  1401  0009C8  6F04               	movwf	(_SendMsgSreen+4)& (0+255),b
  1402                           
  1403                           ;main.c: 238: SendMsgSreen[5] = 0x6C;
  1404  0009CA  0E6C               	movlw	108
  1405  0009CC  6F05               	movwf	(_SendMsgSreen+5)& (0+255),b
  1406                           
  1407                           ;main.c: 239: SendMsgSreen[6] = 0x3D;
  1408  0009CE  0E3D               	movlw	61
  1409  0009D0  6F06               	movwf	(_SendMsgSreen+6)& (0+255),b
  1410                           
  1411                           ; BSR set to: 1
  1412                           ;main.c: 240: SendMsgSreen[7] = 0x30 + (char)(adc_res/10);
  1413  0009D2  0E00               	movlw	0
  1414  0009D4  6E2B               	movwf	___ftdiv@f2,c
  1415  0009D6  0E20               	movlw	32
  1416  0009D8  6E2C               	movwf	___ftdiv@f2+1,c
  1417  0009DA  0E41               	movlw	65
  1418  0009DC  6E2D               	movwf	___ftdiv@f2+2,c
  1419  0009DE  C0CF  F028         	movff	main@adc_res,___ftdiv@f1
  1420  0009E2  C0D0  F029         	movff	main@adc_res+1,___ftdiv@f1+1
  1421  0009E6  C0D1  F02A         	movff	main@adc_res+2,___ftdiv@f1+2
  1422  0009EA  ECBA  F00A         	call	___ftdiv	;wreg free
  1423  0009EE  C028  F037         	movff	?___ftdiv,___fttol@f1
  1424  0009F2  C029  F038         	movff	?___ftdiv+1,___fttol@f1+1
  1425  0009F6  C02A  F039         	movff	?___ftdiv+2,___fttol@f1+2
  1426  0009FA  EC40  F00A         	call	___fttol	;wreg free
  1427  0009FE  5037               	movf	?___fttol,w,c
  1428  000A00  0F30               	addlw	48
  1429  000A02  0101               	movlb	1	; () banked
  1430  000A04  6F07               	movwf	(_SendMsgSreen+7)& (0+255),b
  1431                           
  1432                           ; BSR set to: 1
  1433                           ;main.c: 241: SendMsgSreen[8] = 0x30 + (char)(adc_res-(10*(char)(adc_res/10)));
  1434  000A06  C0CF  F098         	movff	main@adc_res,___ftadd@f2
  1435  000A0A  C0D0  F099         	movff	main@adc_res+1,___ftadd@f2+1
  1436  000A0E  C0D1  F09A         	movff	main@adc_res+2,___ftadd@f2+2
  1437  000A12  0E00               	movlw	0
  1438  000A14  6E2B               	movwf	___ftdiv@f2,c
  1439  000A16  0E20               	movlw	32
  1440  000A18  6E2C               	movwf	___ftdiv@f2+1,c
  1441  000A1A  0E41               	movlw	65
  1442  000A1C  6E2D               	movwf	___ftdiv@f2+2,c
  1443  000A1E  C0CF  F028         	movff	main@adc_res,___ftdiv@f1
  1444  000A22  C0D0  F029         	movff	main@adc_res+1,___ftdiv@f1+1
  1445  000A26  C0D1  F02A         	movff	main@adc_res+2,___ftdiv@f1+2
  1446  000A2A  ECBA  F00A         	call	___ftdiv	;wreg free
  1447  000A2E  C028  F037         	movff	?___ftdiv,___fttol@f1
  1448  000A32  C029  F038         	movff	?___ftdiv+1,___fttol@f1+1
  1449  000A36  C02A  F039         	movff	?___ftdiv+2,___fttol@f1+2
  1450  000A3A  EC40  F00A         	call	___fttol	;wreg free
  1451  000A3E  5037               	movf	?___fttol,w,c
  1452  000A40  0D0A               	mullw	10
  1453  000A42  CFF3 F080          	movff	prodl,___awtoft@c
  1454  000A46  CFF4 F081          	movff	prodh,___awtoft@c+1
  1455  000A4A  EC5A  F00E         	call	___awtoft	;wreg free
  1456  000A4E  C080  F083         	movff	?___awtoft,___ftneg@f1
  1457  000A52  C081  F084         	movff	?___awtoft+1,___ftneg@f1+1
  1458  000A56  C082  F085         	movff	?___awtoft+2,___ftneg@f1+2
  1459  000A5A  EC28  F00F         	call	___ftneg	;wreg free
  1460  000A5E  C083  F095         	movff	?___ftneg,___ftadd@f1
  1461  000A62  C084  F096         	movff	?___ftneg+1,___ftadd@f1+1
  1462  000A66  C085  F097         	movff	?___ftneg+2,___ftadd@f1+2
  1463  000A6A  ECEE  F008         	call	___ftadd	;wreg free
  1464  000A6E  C095  F0C8         	movff	?___ftadd,_main$1534
  1465  000A72  C096  F0C9         	movff	?___ftadd+1,_main$1534+1
  1466  000A76  C097  F0CA         	movff	?___ftadd+2,_main$1534+2
  1467                           
  1468                           ;main.c: 241: SendMsgSreen[8] = 0x30 + (char)(adc_res-(10*(char)(adc_res/10)));
  1469  000A7A  C0C8  F037         	movff	_main$1534,___fttol@f1
  1470  000A7E  C0C9  F038         	movff	_main$1534+1,___fttol@f1+1
  1471  000A82  C0CA  F039         	movff	_main$1534+2,___fttol@f1+2
  1472  000A86  EC40  F00A         	call	___fttol	;wreg free
  1473  000A8A  5037               	movf	?___fttol,w,c
  1474  000A8C  0F30               	addlw	48
  1475  000A8E  0101               	movlb	1	; () banked
  1476  000A90  6F08               	movwf	(_SendMsgSreen+8)& (0+255),b
  1477                           
  1478                           ; BSR set to: 1
  1479                           ;main.c: 242: SendMsgSreen[9] = 0xFF;
  1480  000A92  6909               	setf	(_SendMsgSreen+9)& (0+255),b
  1481                           
  1482                           ; BSR set to: 1
  1483                           ;main.c: 243: SendMsgSreen[10] = 0xFF;
  1484  000A94  690A               	setf	(_SendMsgSreen+10)& (0+255),b
  1485                           
  1486                           ; BSR set to: 1
  1487                           ;main.c: 244: SendMsgSreen[11] = 0xFF;
  1488  000A96  690B               	setf	(_SendMsgSreen+11)& (0+255),b
  1489                           
  1490                           ; BSR set to: 1
  1491                           ;main.c: 245: PrintS(SendMsgSreen);
  1492  000A98  0E00               	movlw	low _SendMsgSreen
  1493  000A9A  6E21               	movwf	PrintS@s_printS,c
  1494  000A9C  0E01               	movlw	high _SendMsgSreen
  1495  000A9E  6E22               	movwf	PrintS@s_printS+1,c
  1496  000AA0  EC77  F00E         	call	_PrintS	;wreg free
  1497                           
  1498                           ;main.c: 246: ClearArray();
  1499  000AA4  ECED  F00E         	call	_ClearArray	;wreg free
  1500  000AA8                     l197:
  1501                           
  1502                           ;main.c: 247: }
  1503                           ;main.c: 248: }
  1504                           ;main.c: 249: if(FlagSpi) {
  1505  000AA8  0100               	movlb	0	; () banked
  1506  000AAA  51E1               	movf	_FlagSpi& (0+255),w,b
  1507  000AAC  B4D8               	btfsc	status,2,c
  1508  000AAE  D66A               	goto	l191
  1509                           
  1510                           ; BSR set to: 0
  1511                           ;main.c: 250: FlagSpi = 0;
  1512  000AB0  0E00               	movlw	0
  1513  000AB2  6FE1               	movwf	_FlagSpi& (0+255),b
  1514                           
  1515                           ;main.c: 251: switch(EtatScreen) {
  1516  000AB4  D288               	goto	l199
  1517  000AB6                     
  1518                           ; BSR set to: 0
  1519                           ;main.c: 255: SendMsgSreen[0] = 0x74;
  1520                           
  1521                           ; BSR set to: 0
  1522  000AB6  0E74               	movlw	116
  1523  000AB8  0101               	movlb	1	; () banked
  1524  000ABA  6F00               	movwf	_SendMsgSreen& (0+255),b
  1525                           
  1526                           ;main.c: 256: SendMsgSreen[1] = 0x30;
  1527  000ABC  0E30               	movlw	48
  1528  000ABE  6F01               	movwf	(_SendMsgSreen+1)& (0+255),b
  1529                           
  1530                           ;main.c: 257: SendMsgSreen[2] = 0x2E;
  1531  000AC0  0E2E               	movlw	46
  1532  000AC2  6F02               	movwf	(_SendMsgSreen+2)& (0+255),b
  1533                           
  1534                           ;main.c: 258: SendMsgSreen[3] = 0x74;
  1535  000AC4  0E74               	movlw	116
  1536  000AC6  6F03               	movwf	(_SendMsgSreen+3)& (0+255),b
  1537                           
  1538                           ;main.c: 259: SendMsgSreen[4] = 0x78;
  1539  000AC8  0E78               	movlw	120
  1540  000ACA  6F04               	movwf	(_SendMsgSreen+4)& (0+255),b
  1541                           
  1542                           ;main.c: 260: SendMsgSreen[5] = 0x74;
  1543  000ACC  0E74               	movlw	116
  1544  000ACE  6F05               	movwf	(_SendMsgSreen+5)& (0+255),b
  1545                           
  1546                           ;main.c: 261: SendMsgSreen[6] = 0x3D;
  1547  000AD0  0E3D               	movlw	61
  1548  000AD2  6F06               	movwf	(_SendMsgSreen+6)& (0+255),b
  1549                           
  1550                           ;main.c: 262: SendMsgSreen[7] = 0x22;
  1551  000AD4  0E22               	movlw	34
  1552  000AD6  6F07               	movwf	(_SendMsgSreen+7)& (0+255),b
  1553                           
  1554                           ;main.c: 263: SendMsgSreen[8] = 0x3E;
  1555  000AD8  0E3E               	movlw	62
  1556  000ADA  6F08               	movwf	(_SendMsgSreen+8)& (0+255),b
  1557                           
  1558                           ;main.c: 264: taille_text_prgm = 0;
  1559  000ADC  0E00               	movlw	0
  1560  000ADE  0100               	movlb	0	; () banked
  1561  000AE0  6FCE               	movwf	main@taille_text_prgm& (0+255),b
  1562                           
  1563                           ;main.c: 265: while(taille_text_prgm < 15 && text_prgm[PosCursorPrgm][taille_text_prgm] 
      +                          != 0) {
  1564  000AE2  D022               	goto	l201
  1565  000AE4                     
  1566                           ; BSR set to: 0
  1567                           ;main.c: 266: SendMsgSreen[taille_text_prgm+9] = text_prgm[PosCursorPrgm][taille_text_pr
      +                          gm];
  1568                           
  1569                           ; BSR set to: 0
  1570  000AE4  51DA               	movf	_PosCursorPrgm& (0+255),w,b
  1571  000AE6  0D0F               	mullw	15
  1572  000AE8  0E00               	movlw	low _text_prgm
  1573  000AEA  6FBD               	movwf	??_main& (0+255),b
  1574  000AEC  0E02               	movlw	high _text_prgm
  1575  000AEE  6FBE               	movwf	(??_main+1)& (0+255),b
  1576  000AF0  50F3               	movf	prodl,w,c
  1577  000AF2  27BD               	addwf	??_main& (0+255),f,b
  1578  000AF4  50F4               	movf	prodh,w,c
  1579  000AF6  23BE               	addwfc	(??_main+1)& (0+255),f,b
  1580  000AF8  51CE               	movf	main@taille_text_prgm& (0+255),w,b
  1581  000AFA  0D01               	mullw	1
  1582  000AFC  50F3               	movf	prodl,w,c
  1583  000AFE  25BD               	addwf	??_main& (0+255),w,b
  1584  000B00  6ED9               	movwf	fsr2l,c
  1585  000B02  50F4               	movf	prodh,w,c
  1586  000B04  21BE               	addwfc	(??_main+1)& (0+255),w,b
  1587  000B06  6EDA               	movwf	fsr2h,c
  1588  000B08  51CE               	movf	main@taille_text_prgm& (0+255),w,b
  1589  000B0A  6FBF               	movwf	(??_main+2)& (0+255),b
  1590  000B0C  6BC0               	clrf	(??_main+3)& (0+255),b
  1591  000B0E  0E09               	movlw	9
  1592  000B10  27BF               	addwf	(??_main+2)& (0+255),f,b
  1593  000B12  0E00               	movlw	0
  1594  000B14  23C0               	addwfc	(??_main+3)& (0+255),f,b
  1595  000B16  0E00               	movlw	low _SendMsgSreen
  1596  000B18  25BF               	addwf	(??_main+2)& (0+255),w,b
  1597  000B1A  6EE1               	movwf	fsr1l,c
  1598  000B1C  0E01               	movlw	high _SendMsgSreen
  1599  000B1E  21C0               	addwfc	(??_main+3)& (0+255),w,b
  1600  000B20  6EE2               	movwf	fsr1h,c
  1601  000B22  CFDF FFE7          	movff	indf2,indf1
  1602                           
  1603                           ; BSR set to: 0
  1604                           ;main.c: 267: taille_text_prgm++;
  1605  000B26  2BCE               	incf	main@taille_text_prgm& (0+255),f,b
  1606  000B28                     l201:
  1607                           
  1608                           ; BSR set to: 0
  1609                           
  1610                           ; BSR set to: 0
  1611  000B28  0E0F               	movlw	15
  1612  000B2A  61CE               	cpfslt	main@taille_text_prgm& (0+255),b
  1613  000B2C  D015               	goto	u3410
  1614                           
  1615                           ; BSR set to: 0
  1616  000B2E  51DA               	movf	_PosCursorPrgm& (0+255),w,b
  1617  000B30  0D0F               	mullw	15
  1618  000B32  0E00               	movlw	low _text_prgm
  1619  000B34  6FBD               	movwf	??_main& (0+255),b
  1620  000B36  0E02               	movlw	high _text_prgm
  1621  000B38  6FBE               	movwf	(??_main+1)& (0+255),b
  1622  000B3A  50F3               	movf	prodl,w,c
  1623  000B3C  27BD               	addwf	??_main& (0+255),f,b
  1624  000B3E  50F4               	movf	prodh,w,c
  1625  000B40  23BE               	addwfc	(??_main+1)& (0+255),f,b
  1626  000B42  51CE               	movf	main@taille_text_prgm& (0+255),w,b
  1627  000B44  0D01               	mullw	1
  1628  000B46  50F3               	movf	prodl,w,c
  1629  000B48  25BD               	addwf	??_main& (0+255),w,b
  1630  000B4A  6ED9               	movwf	fsr2l,c
  1631  000B4C  50F4               	movf	prodh,w,c
  1632  000B4E  21BE               	addwfc	(??_main+1)& (0+255),w,b
  1633  000B50  6EDA               	movwf	fsr2h,c
  1634  000B52  50DF               	movf	indf2,w,c
  1635  000B54  A4D8               	btfss	status,2,c
  1636  000B56  D7C6               	goto	l202
  1637  000B58                     u3410:
  1638                           
  1639                           ; BSR set to: 0
  1640                           ;main.c: 268: }
  1641                           ;main.c: 269: SendMsgSreen[taille_text_prgm+9] = 0x22;
  1642                           
  1643                           ; BSR set to: 0
  1644                           
  1645                           ; BSR set to: 0
  1646  000B58  51CE               	movf	main@taille_text_prgm& (0+255),w,b
  1647  000B5A  6FBD               	movwf	??_main& (0+255),b
  1648  000B5C  6BBE               	clrf	(??_main+1)& (0+255),b
  1649  000B5E  0E09               	movlw	9
  1650  000B60  27BD               	addwf	??_main& (0+255),f,b
  1651  000B62  0E00               	movlw	0
  1652  000B64  23BE               	addwfc	(??_main+1)& (0+255),f,b
  1653  000B66  0E00               	movlw	low _SendMsgSreen
  1654  000B68  25BD               	addwf	??_main& (0+255),w,b
  1655  000B6A  6ED9               	movwf	fsr2l,c
  1656  000B6C  0E01               	movlw	high _SendMsgSreen
  1657  000B6E  21BE               	addwfc	(??_main+1)& (0+255),w,b
  1658  000B70  6EDA               	movwf	fsr2h,c
  1659  000B72  0E22               	movlw	34
  1660  000B74  6EDF               	movwf	indf2,c
  1661                           
  1662                           ;main.c: 270: SendMsgSreen[taille_text_prgm+10] = 0xFF;
  1663  000B76  51CE               	movf	main@taille_text_prgm& (0+255),w,b
  1664  000B78  6FBD               	movwf	??_main& (0+255),b
  1665  000B7A  6BBE               	clrf	(??_main+1)& (0+255),b
  1666  000B7C  0E0A               	movlw	10
  1667  000B7E  27BD               	addwf	??_main& (0+255),f,b
  1668  000B80  0E00               	movlw	0
  1669  000B82  23BE               	addwfc	(??_main+1)& (0+255),f,b
  1670  000B84  0E00               	movlw	low _SendMsgSreen
  1671  000B86  25BD               	addwf	??_main& (0+255),w,b
  1672  000B88  6ED9               	movwf	fsr2l,c
  1673  000B8A  0E01               	movlw	high _SendMsgSreen
  1674  000B8C  21BE               	addwfc	(??_main+1)& (0+255),w,b
  1675  000B8E  6EDA               	movwf	fsr2h,c
  1676  000B90  0EFF               	movlw	255
  1677  000B92  6EDF               	movwf	indf2,c
  1678                           
  1679                           ;main.c: 271: SendMsgSreen[taille_text_prgm+11] = 0xFF;
  1680  000B94  51CE               	movf	main@taille_text_prgm& (0+255),w,b
  1681  000B96  6FBD               	movwf	??_main& (0+255),b
  1682  000B98  6BBE               	clrf	(??_main+1)& (0+255),b
  1683  000B9A  0E0B               	movlw	11
  1684  000B9C  27BD               	addwf	??_main& (0+255),f,b
  1685  000B9E  0E00               	movlw	0
  1686  000BA0  23BE               	addwfc	(??_main+1)& (0+255),f,b
  1687  000BA2  0E00               	movlw	low _SendMsgSreen
  1688  000BA4  25BD               	addwf	??_main& (0+255),w,b
  1689  000BA6  6ED9               	movwf	fsr2l,c
  1690  000BA8  0E01               	movlw	high _SendMsgSreen
  1691  000BAA  21BE               	addwfc	(??_main+1)& (0+255),w,b
  1692  000BAC  6EDA               	movwf	fsr2h,c
  1693  000BAE  0EFF               	movlw	255
  1694  000BB0  6EDF               	movwf	indf2,c
  1695                           
  1696                           ;main.c: 272: SendMsgSreen[taille_text_prgm+12] = 0xFF;
  1697  000BB2  51CE               	movf	main@taille_text_prgm& (0+255),w,b
  1698  000BB4  6FBD               	movwf	??_main& (0+255),b
  1699  000BB6  6BBE               	clrf	(??_main+1)& (0+255),b
  1700  000BB8  0E0C               	movlw	12
  1701  000BBA  27BD               	addwf	??_main& (0+255),f,b
  1702  000BBC  0E00               	movlw	0
  1703  000BBE  23BE               	addwfc	(??_main+1)& (0+255),f,b
  1704  000BC0  0E00               	movlw	low _SendMsgSreen
  1705  000BC2  25BD               	addwf	??_main& (0+255),w,b
  1706  000BC4  6ED9               	movwf	fsr2l,c
  1707  000BC6  0E01               	movlw	high _SendMsgSreen
  1708  000BC8  21BE               	addwfc	(??_main+1)& (0+255),w,b
  1709  000BCA  6EDA               	movwf	fsr2h,c
  1710  000BCC  0EFF               	movlw	255
  1711  000BCE  6EDF               	movwf	indf2,c
  1712                           
  1713                           ; BSR set to: 0
  1714                           ;main.c: 273: PrintS(SendMsgSreen);
  1715  000BD0  0E00               	movlw	low _SendMsgSreen
  1716  000BD2  6E21               	movwf	PrintS@s_printS,c
  1717  000BD4  0E01               	movlw	high _SendMsgSreen
  1718  000BD6  6E22               	movwf	PrintS@s_printS+1,c
  1719  000BD8  EC77  F00E         	call	_PrintS	;wreg free
  1720                           
  1721                           ;main.c: 274: ClearArray();
  1722  000BDC  ECED  F00E         	call	_ClearArray	;wreg free
  1723                           
  1724                           ;main.c: 275: SendMsgSreen[0] = 0x6E;
  1725  000BE0  0E6E               	movlw	110
  1726  000BE2  0101               	movlb	1	; () banked
  1727  000BE4  6F00               	movwf	_SendMsgSreen& (0+255),b
  1728                           
  1729                           ; BSR set to: 1
  1730                           ;main.c: 276: SendMsgSreen[1] = 0x30;
  1731  000BE6  0E30               	movlw	48
  1732  000BE8  6F01               	movwf	(_SendMsgSreen+1)& (0+255),b
  1733                           
  1734                           ; BSR set to: 1
  1735                           ;main.c: 277: SendMsgSreen[2] = 0x2E;
  1736  000BEA  0E2E               	movlw	46
  1737  000BEC  6F02               	movwf	(_SendMsgSreen+2)& (0+255),b
  1738                           
  1739                           ; BSR set to: 1
  1740                           ;main.c: 278: SendMsgSreen[3] = 0x76;
  1741  000BEE  0E76               	movlw	118
  1742  000BF0  6F03               	movwf	(_SendMsgSreen+3)& (0+255),b
  1743                           
  1744                           ; BSR set to: 1
  1745                           ;main.c: 279: SendMsgSreen[4] = 0x61;
  1746  000BF2  0E61               	movlw	97
  1747  000BF4  6F04               	movwf	(_SendMsgSreen+4)& (0+255),b
  1748                           
  1749                           ; BSR set to: 1
  1750                           ;main.c: 280: SendMsgSreen[5] = 0x6C;
  1751  000BF6  0E6C               	movlw	108
  1752  000BF8  6F05               	movwf	(_SendMsgSreen+5)& (0+255),b
  1753                           
  1754                           ; BSR set to: 1
  1755                           ;main.c: 281: SendMsgSreen[6] = 0x3D;
  1756  000BFA  0E3D               	movlw	61
  1757  000BFC  6F06               	movwf	(_SendMsgSreen+6)& (0+255),b
  1758                           
  1759                           ; BSR set to: 1
  1760                           ;main.c: 282: SendMsgSreen[7] = 0x30 + (char)(Score/100);
  1761  000BFE  C0D4  F020         	movff	_Score,___awdiv@dividend
  1762  000C02  C0D5  F021         	movff	_Score+1,___awdiv@dividend+1
  1763  000C06  0E00               	movlw	0
  1764  000C08  6E23               	movwf	___awdiv@divisor+1,c
  1765  000C0A  0E64               	movlw	100
  1766  000C0C  6E22               	movwf	___awdiv@divisor,c
  1767  000C0E  EC58  F00D         	call	___awdiv	;wreg free
  1768  000C12  5020               	movf	?___awdiv,w,c
  1769  000C14  0F30               	addlw	48
  1770  000C16  0101               	movlb	1	; () banked
  1771  000C18  6F07               	movwf	(_SendMsgSreen+7)& (0+255),b
  1772                           
  1773                           ; BSR set to: 1
  1774                           ;main.c: 283: SendMsgSreen[8] = 0x30 + (char)((Score-((char)(Score/100)*100))/10);
  1775  000C1A  0E00               	movlw	0
  1776  000C1C  6E23               	movwf	___awdiv@divisor+1,c
  1777  000C1E  0E64               	movlw	100
  1778  000C20  6E22               	movwf	___awdiv@divisor,c
  1779  000C22  C0D4  F020         	movff	_Score,___awdiv@dividend
  1780  000C26  C0D5  F021         	movff	_Score+1,___awdiv@dividend+1
  1781  000C2A  EC58  F00D         	call	___awdiv	;wreg free
  1782  000C2E  5020               	movf	?___awdiv,w,c
  1783  000C30  0D64               	mullw	100
  1784  000C32  1EF3               	comf	prodl,f,c
  1785  000C34  1EF4               	comf	prodh,f,c
  1786  000C36  4AF3               	infsnz	prodl,f,c
  1787  000C38  2AF4               	incf	prodh,f,c
  1788  000C3A  0100               	movlb	0	; () banked
  1789  000C3C  51D4               	movf	_Score& (0+255),w,b
  1790  000C3E  24F3               	addwf	prodl,w,c
  1791  000C40  6FCB               	movwf	_main$1535& (0+255),b
  1792  000C42  51D5               	movf	(_Score+1)& (0+255),w,b
  1793  000C44  20F4               	addwfc	prodh,w,c
  1794  000C46  6FCC               	movwf	(_main$1535+1)& (0+255),b
  1795                           
  1796                           ; BSR set to: 0
  1797                           ;main.c: 283: SendMsgSreen[8] = 0x30 + (char)((Score-((char)(Score/100)*100))/10);
  1798  000C48  C0CB  F020         	movff	_main$1535,___awdiv@dividend
  1799  000C4C  C0CC  F021         	movff	_main$1535+1,___awdiv@dividend+1
  1800  000C50  0E00               	movlw	0
  1801  000C52  6E23               	movwf	___awdiv@divisor+1,c
  1802  000C54  0E0A               	movlw	10
  1803  000C56  6E22               	movwf	___awdiv@divisor,c
  1804  000C58  EC58  F00D         	call	___awdiv	;wreg free
  1805  000C5C  5020               	movf	?___awdiv,w,c
  1806  000C5E  0F30               	addlw	48
  1807  000C60  0101               	movlb	1	; () banked
  1808  000C62  6F08               	movwf	(_SendMsgSreen+8)& (0+255),b
  1809                           
  1810                           ; BSR set to: 1
  1811                           ;main.c: 284: SendMsgSreen[9] = 0x30 + (char)((Score-((char)(Score/10)*10)));
  1812  000C64  C0D4  F020         	movff	_Score,___awdiv@dividend
  1813  000C68  C0D5  F021         	movff	_Score+1,___awdiv@dividend+1
  1814  000C6C  0E00               	movlw	0
  1815  000C6E  6E23               	movwf	___awdiv@divisor+1,c
  1816  000C70  0E0A               	movlw	10
  1817  000C72  6E22               	movwf	___awdiv@divisor,c
  1818  000C74  EC58  F00D         	call	___awdiv	;wreg free
  1819  000C78  5020               	movf	?___awdiv,w,c
  1820  000C7A  0D0A               	mullw	10
  1821  000C7C  50F3               	movf	prodl,w,c
  1822  000C7E  0800               	sublw	0
  1823  000C80  0100               	movlb	0	; () banked
  1824  000C82  25D4               	addwf	_Score& (0+255),w,b
  1825  000C84  0F30               	addlw	48
  1826  000C86  0101               	movlb	1	; () banked
  1827  000C88  6F09               	movwf	(_SendMsgSreen+9)& (0+255),b
  1828                           
  1829                           ; BSR set to: 1
  1830                           ;main.c: 285: SendMsgSreen[10] = 0xFF;
  1831  000C8A  690A               	setf	(_SendMsgSreen+10)& (0+255),b
  1832                           
  1833                           ; BSR set to: 1
  1834                           ;main.c: 286: SendMsgSreen[11] = 0xFF;
  1835  000C8C  690B               	setf	(_SendMsgSreen+11)& (0+255),b
  1836                           
  1837                           ; BSR set to: 1
  1838                           ;main.c: 287: SendMsgSreen[12] = 0xFF;
  1839  000C8E  690C               	setf	(_SendMsgSreen+12)& (0+255),b
  1840                           
  1841                           ; BSR set to: 1
  1842                           ;main.c: 288: PrintS(SendMsgSreen);
  1843  000C90  0E00               	movlw	low _SendMsgSreen
  1844  000C92  6E21               	movwf	PrintS@s_printS,c
  1845  000C94  0E01               	movlw	high _SendMsgSreen
  1846  000C96  6E22               	movwf	PrintS@s_printS+1,c
  1847  000C98  EC77  F00E         	call	_PrintS	;wreg free
  1848                           
  1849                           ;main.c: 289: ClearArray();
  1850  000C9C  ECED  F00E         	call	_ClearArray	;wreg free
  1851                           
  1852                           ;main.c: 290: break;
  1853  000CA0  D571               	goto	l191
  1854  000CA2                     
  1855                           ;main.c: 294: FlagSpi = 1;
  1856  000CA2  0E01               	movlw	1
  1857  000CA4  0100               	movlb	0	; () banked
  1858  000CA6  6FE1               	movwf	_FlagSpi& (0+255),b
  1859                           
  1860                           ;main.c: 295: SendMsgSreen[0] = 0x72;
  1861  000CA8  0E72               	movlw	114
  1862  000CAA  0101               	movlb	1	; () banked
  1863  000CAC  6F00               	movwf	_SendMsgSreen& (0+255),b
  1864                           
  1865                           ;main.c: 296: SendMsgSreen[1] = 0x65;
  1866  000CAE  0E65               	movlw	101
  1867  000CB0  6F01               	movwf	(_SendMsgSreen+1)& (0+255),b
  1868                           
  1869                           ;main.c: 297: SendMsgSreen[2] = 0x66;
  1870  000CB2  0E66               	movlw	102
  1871  000CB4  6F02               	movwf	(_SendMsgSreen+2)& (0+255),b
  1872                           
  1873                           ;main.c: 298: SendMsgSreen[3] = 0x20;
  1874  000CB6  0E20               	movlw	32
  1875  000CB8  6F03               	movwf	(_SendMsgSreen+3)& (0+255),b
  1876                           
  1877                           ;main.c: 299: SendMsgSreen[4] = 0x30;
  1878  000CBA  0E30               	movlw	48
  1879  000CBC  6F04               	movwf	(_SendMsgSreen+4)& (0+255),b
  1880                           
  1881                           ; BSR set to: 1
  1882                           ;main.c: 300: SendMsgSreen[5] = 0xFF;
  1883  000CBE  6905               	setf	(_SendMsgSreen+5)& (0+255),b
  1884                           
  1885                           ; BSR set to: 1
  1886                           ;main.c: 301: SendMsgSreen[6] = 0xFF;
  1887  000CC0  6906               	setf	(_SendMsgSreen+6)& (0+255),b
  1888                           
  1889                           ; BSR set to: 1
  1890                           ;main.c: 302: SendMsgSreen[7] = 0xFF;
  1891  000CC2  6907               	setf	(_SendMsgSreen+7)& (0+255),b
  1892                           
  1893                           ; BSR set to: 1
  1894                           ;main.c: 303: PrintS(SendMsgSreen);
  1895  000CC4  0E00               	movlw	low _SendMsgSreen
  1896  000CC6  6E21               	movwf	PrintS@s_printS,c
  1897  000CC8  0E01               	movlw	high _SendMsgSreen
  1898  000CCA  6E22               	movwf	PrintS@s_printS+1,c
  1899  000CCC  EC77  F00E         	call	_PrintS	;wreg free
  1900                           
  1901                           ;main.c: 304: ClearArray();
  1902  000CD0  ECED  F00E         	call	_ClearArray	;wreg free
  1903                           
  1904                           ;main.c: 307: SendMsgSreen[0] = 0x70;
  1905  000CD4  0E70               	movlw	112
  1906  000CD6  0101               	movlb	1	; () banked
  1907  000CD8  6F00               	movwf	_SendMsgSreen& (0+255),b
  1908                           
  1909                           ; BSR set to: 1
  1910                           ;main.c: 308: SendMsgSreen[1] = 0x69;
  1911  000CDA  0E69               	movlw	105
  1912  000CDC  6F01               	movwf	(_SendMsgSreen+1)& (0+255),b
  1913                           
  1914                           ; BSR set to: 1
  1915                           ;main.c: 309: SendMsgSreen[2] = 0x63;
  1916  000CDE  0E63               	movlw	99
  1917  000CE0  6F02               	movwf	(_SendMsgSreen+2)& (0+255),b
  1918                           
  1919                           ; BSR set to: 1
  1920                           ;main.c: 310: SendMsgSreen[3] = 0x20;
  1921  000CE2  0E20               	movlw	32
  1922  000CE4  6F03               	movwf	(_SendMsgSreen+3)& (0+255),b
  1923                           
  1924                           ; BSR set to: 1
  1925                           ;main.c: 311: SendMsgSreen[4] = 0x30 + (char)(PosX/100);
  1926  000CE6  C0DF  F020         	movff	_PosX,___awdiv@dividend
  1927  000CEA  C0E0  F021         	movff	_PosX+1,___awdiv@dividend+1
  1928  000CEE  0E00               	movlw	0
  1929  000CF0  6E23               	movwf	___awdiv@divisor+1,c
  1930  000CF2  0E64               	movlw	100
  1931  000CF4  6E22               	movwf	___awdiv@divisor,c
  1932  000CF6  EC58  F00D         	call	___awdiv	;wreg free
  1933  000CFA  5020               	movf	?___awdiv,w,c
  1934  000CFC  0F30               	addlw	48
  1935  000CFE  0101               	movlb	1	; () banked
  1936  000D00  6F04               	movwf	(_SendMsgSreen+4)& (0+255),b
  1937                           
  1938                           ; BSR set to: 1
  1939                           ;main.c: 312: SendMsgSreen[5] = 0x30 + (char)((PosX-(100*(char)(PosX/100)))/10);
  1940  000D02  0E00               	movlw	0
  1941  000D04  6E23               	movwf	___awdiv@divisor+1,c
  1942  000D06  0E64               	movlw	100
  1943  000D08  6E22               	movwf	___awdiv@divisor,c
  1944  000D0A  C0DF  F020         	movff	_PosX,___awdiv@dividend
  1945  000D0E  C0E0  F021         	movff	_PosX+1,___awdiv@dividend+1
  1946  000D12  EC58  F00D         	call	___awdiv	;wreg free
  1947  000D16  5020               	movf	?___awdiv,w,c
  1948  000D18  0D64               	mullw	100
  1949  000D1A  1EF3               	comf	prodl,f,c
  1950  000D1C  1EF4               	comf	prodh,f,c
  1951  000D1E  4AF3               	infsnz	prodl,f,c
  1952  000D20  2AF4               	incf	prodh,f,c
  1953  000D22  0100               	movlb	0	; () banked
  1954  000D24  51DF               	movf	_PosX& (0+255),w,b
  1955  000D26  24F3               	addwf	prodl,w,c
  1956  000D28  6FCB               	movwf	_main$1535& (0+255),b
  1957  000D2A  51E0               	movf	(_PosX+1)& (0+255),w,b
  1958  000D2C  20F4               	addwfc	prodh,w,c
  1959  000D2E  6FCC               	movwf	(_main$1535+1)& (0+255),b
  1960                           
  1961                           ; BSR set to: 0
  1962                           ;main.c: 312: SendMsgSreen[5] = 0x30 + (char)((PosX-(100*(char)(PosX/100)))/10);
  1963  000D30  C0CB  F020         	movff	_main$1535,___awdiv@dividend
  1964  000D34  C0CC  F021         	movff	_main$1535+1,___awdiv@dividend+1
  1965  000D38  0E00               	movlw	0
  1966  000D3A  6E23               	movwf	___awdiv@divisor+1,c
  1967  000D3C  0E0A               	movlw	10
  1968  000D3E  6E22               	movwf	___awdiv@divisor,c
  1969  000D40  EC58  F00D         	call	___awdiv	;wreg free
  1970  000D44  5020               	movf	?___awdiv,w,c
  1971  000D46  0F30               	addlw	48
  1972  000D48  0101               	movlb	1	; () banked
  1973  000D4A  6F05               	movwf	(_SendMsgSreen+5)& (0+255),b
  1974                           
  1975                           ; BSR set to: 1
  1976                           ;main.c: 313: SendMsgSreen[6] = 0x30 + (char)(PosX-(10*(char)(PosX/10)));
  1977  000D4C  C0DF  F020         	movff	_PosX,___awdiv@dividend
  1978  000D50  C0E0  F021         	movff	_PosX+1,___awdiv@dividend+1
  1979  000D54  0E00               	movlw	0
  1980  000D56  6E23               	movwf	___awdiv@divisor+1,c
  1981  000D58  0E0A               	movlw	10
  1982  000D5A  6E22               	movwf	___awdiv@divisor,c
  1983  000D5C  EC58  F00D         	call	___awdiv	;wreg free
  1984  000D60  5020               	movf	?___awdiv,w,c
  1985  000D62  0D0A               	mullw	10
  1986  000D64  50F3               	movf	prodl,w,c
  1987  000D66  0800               	sublw	0
  1988  000D68  0100               	movlb	0	; () banked
  1989  000D6A  25DF               	addwf	_PosX& (0+255),w,b
  1990  000D6C  0F30               	addlw	48
  1991  000D6E  0101               	movlb	1	; () banked
  1992  000D70  6F06               	movwf	(_SendMsgSreen+6)& (0+255),b
  1993                           
  1994                           ; BSR set to: 1
  1995                           ;main.c: 314: SendMsgSreen[7] = 0x2C;
  1996  000D72  0E2C               	movlw	44
  1997  000D74  6F07               	movwf	(_SendMsgSreen+7)& (0+255),b
  1998                           
  1999                           ; BSR set to: 1
  2000                           ;main.c: 315: SendMsgSreen[8] = 0x30 + (char)(PosY/100);
  2001  000D76  C0DD  F020         	movff	_PosY,___awdiv@dividend
  2002  000D7A  C0DE  F021         	movff	_PosY+1,___awdiv@dividend+1
  2003  000D7E  0E00               	movlw	0
  2004  000D80  6E23               	movwf	___awdiv@divisor+1,c
  2005  000D82  0E64               	movlw	100
  2006  000D84  6E22               	movwf	___awdiv@divisor,c
  2007  000D86  EC58  F00D         	call	___awdiv	;wreg free
  2008  000D8A  5020               	movf	?___awdiv,w,c
  2009  000D8C  0F30               	addlw	48
  2010  000D8E  0101               	movlb	1	; () banked
  2011  000D90  6F08               	movwf	(_SendMsgSreen+8)& (0+255),b
  2012                           
  2013                           ;main.c: 316: SendMsgSreen[9] = 0x30 + (char)((PosY-(100*(char)(PosY/100)))/10);
  2014  000D92  0E00               	movlw	0
  2015  000D94  6E23               	movwf	___awdiv@divisor+1,c
  2016  000D96  0E64               	movlw	100
  2017  000D98  6E22               	movwf	___awdiv@divisor,c
  2018  000D9A  C0DD  F020         	movff	_PosY,___awdiv@dividend
  2019  000D9E  C0DE  F021         	movff	_PosY+1,___awdiv@dividend+1
  2020  000DA2  EC58  F00D         	call	___awdiv	;wreg free
  2021  000DA6  5020               	movf	?___awdiv,w,c
  2022  000DA8  0D64               	mullw	100
  2023  000DAA  1EF3               	comf	prodl,f,c
  2024  000DAC  1EF4               	comf	prodh,f,c
  2025  000DAE  4AF3               	infsnz	prodl,f,c
  2026  000DB0  2AF4               	incf	prodh,f,c
  2027  000DB2  0100               	movlb	0	; () banked
  2028  000DB4  51DD               	movf	_PosY& (0+255),w,b
  2029  000DB6  24F3               	addwf	prodl,w,c
  2030  000DB8  6FCB               	movwf	_main$1535& (0+255),b
  2031  000DBA  51DE               	movf	(_PosY+1)& (0+255),w,b
  2032  000DBC  20F4               	addwfc	prodh,w,c
  2033  000DBE  6FCC               	movwf	(_main$1535+1)& (0+255),b
  2034                           
  2035                           ; BSR set to: 0
  2036                           ;main.c: 316: SendMsgSreen[9] = 0x30 + (char)((PosY-(100*(char)(PosY/100)))/10);
  2037  000DC0  C0CB  F020         	movff	_main$1535,___awdiv@dividend
  2038  000DC4  C0CC  F021         	movff	_main$1535+1,___awdiv@dividend+1
  2039  000DC8  0E00               	movlw	0
  2040  000DCA  6E23               	movwf	___awdiv@divisor+1,c
  2041  000DCC  0E0A               	movlw	10
  2042  000DCE  6E22               	movwf	___awdiv@divisor,c
  2043  000DD0  EC58  F00D         	call	___awdiv	;wreg free
  2044  000DD4  5020               	movf	?___awdiv,w,c
  2045  000DD6  0F30               	addlw	48
  2046  000DD8  0101               	movlb	1	; () banked
  2047  000DDA  6F09               	movwf	(_SendMsgSreen+9)& (0+255),b
  2048                           
  2049                           ; BSR set to: 1
  2050                           ;main.c: 317: SendMsgSreen[10] = 0x30 + (char)(PosY-(10*(char)(PosY/10)));
  2051  000DDC  C0DD  F020         	movff	_PosY,___awdiv@dividend
  2052  000DE0  C0DE  F021         	movff	_PosY+1,___awdiv@dividend+1
  2053  000DE4  0E00               	movlw	0
  2054  000DE6  6E23               	movwf	___awdiv@divisor+1,c
  2055  000DE8  0E0A               	movlw	10
  2056  000DEA  6E22               	movwf	___awdiv@divisor,c
  2057  000DEC  EC58  F00D         	call	___awdiv	;wreg free
  2058  000DF0  5020               	movf	?___awdiv,w,c
  2059  000DF2  0D0A               	mullw	10
  2060  000DF4  50F3               	movf	prodl,w,c
  2061  000DF6  0800               	sublw	0
  2062  000DF8  0100               	movlb	0	; () banked
  2063  000DFA  25DD               	addwf	_PosY& (0+255),w,b
  2064  000DFC  0F30               	addlw	48
  2065  000DFE  0101               	movlb	1	; () banked
  2066  000E00  6F0A               	movwf	(_SendMsgSreen+10)& (0+255),b
  2067                           
  2068                           ; BSR set to: 1
  2069                           ;main.c: 318: SendMsgSreen[11] = 0x2C;
  2070  000E02  0E2C               	movlw	44
  2071  000E04  6F0B               	movwf	(_SendMsgSreen+11)& (0+255),b
  2072                           
  2073                           ; BSR set to: 1
  2074                           ;main.c: 319: SendMsgSreen[12] = 0x32;
  2075  000E06  0E32               	movlw	50
  2076  000E08  6F0C               	movwf	(_SendMsgSreen+12)& (0+255),b
  2077                           
  2078                           ; BSR set to: 1
  2079                           ;main.c: 320: SendMsgSreen[13] = 0xFF;
  2080  000E0A  690D               	setf	(_SendMsgSreen+13)& (0+255),b
  2081                           
  2082                           ; BSR set to: 1
  2083                           ;main.c: 321: SendMsgSreen[14] = 0xFF;
  2084  000E0C  690E               	setf	(_SendMsgSreen+14)& (0+255),b
  2085                           
  2086                           ; BSR set to: 1
  2087                           ;main.c: 322: SendMsgSreen[15] = 0xFF;
  2088  000E0E  690F               	setf	(_SendMsgSreen+15)& (0+255),b
  2089                           
  2090                           ; BSR set to: 1
  2091                           ;main.c: 323: PrintS(SendMsgSreen);
  2092  000E10  0E00               	movlw	low _SendMsgSreen
  2093  000E12  6E21               	movwf	PrintS@s_printS,c
  2094  000E14  0E01               	movlw	high _SendMsgSreen
  2095  000E16  6E22               	movwf	PrintS@s_printS+1,c
  2096  000E18  EC77  F00E         	call	_PrintS	;wreg free
  2097                           
  2098                           ;main.c: 324: ClearArray();
  2099  000E1C  ECED  F00E         	call	_ClearArray	;wreg free
  2100                           
  2101                           ;main.c: 325: break;
  2102  000E20  D4B1               	goto	l191
  2103  000E22                     
  2104                           ;main.c: 329: if(TypeVarSpi == 8 || TypeVarSpi == 9 || TypeVarSpi == 10 || TypeVarSpi ==
      +                           11) {
  2105  000E22  0E08               	movlw	8
  2106  000E24  0100               	movlb	0	; () banked
  2107  000E26  19D9               	xorwf	_TypeVarSpi& (0+255),w,b
  2108  000E28  B4D8               	btfsc	status,2,c
  2109  000E2A  D00C               	goto	u3450
  2110                           
  2111                           ; BSR set to: 0
  2112  000E2C  0E09               	movlw	9
  2113  000E2E  19D9               	xorwf	_TypeVarSpi& (0+255),w,b
  2114  000E30  B4D8               	btfsc	status,2,c
  2115  000E32  D008               	goto	u3450
  2116                           
  2117                           ; BSR set to: 0
  2118  000E34  0E0A               	movlw	10
  2119  000E36  19D9               	xorwf	_TypeVarSpi& (0+255),w,b
  2120  000E38  B4D8               	btfsc	status,2,c
  2121  000E3A  D004               	goto	u3450
  2122                           
  2123                           ; BSR set to: 0
  2124  000E3C  0E0B               	movlw	11
  2125  000E3E  19D9               	xorwf	_TypeVarSpi& (0+255),w,b
  2126  000E40  A4D8               	btfss	status,2,c
  2127  000E42  D4A0               	goto	l191
  2128  000E44                     u3450:
  2129                           
  2130                           ; BSR set to: 0
  2131                           ;main.c: 330: TypeVarSpi -= 8;
  2132                           
  2133                           ; BSR set to: 0
  2134  000E44  0E08               	movlw	8
  2135  000E46  5FD9               	subwf	_TypeVarSpi& (0+255),f,b
  2136                           
  2137                           ; BSR set to: 0
  2138                           ;main.c: 331: SendMsgSreen[0] = 0x74;
  2139  000E48  0E74               	movlw	116
  2140  000E4A  0101               	movlb	1	; () banked
  2141  000E4C  6F00               	movwf	_SendMsgSreen& (0+255),b
  2142                           
  2143                           ; BSR set to: 1
  2144                           ;main.c: 332: SendMsgSreen[1] = 0x30 + TypeVarSpi;
  2145  000E4E  0100               	movlb	0	; () banked
  2146  000E50  51D9               	movf	_TypeVarSpi& (0+255),w,b
  2147  000E52  0F30               	addlw	48
  2148  000E54  0101               	movlb	1	; () banked
  2149  000E56  6F01               	movwf	(_SendMsgSreen+1)& (0+255),b
  2150                           
  2151                           ;main.c: 333: SendMsgSreen[2] = 0x2E;
  2152  000E58  0E2E               	movlw	46
  2153  000E5A  6F02               	movwf	(_SendMsgSreen+2)& (0+255),b
  2154                           
  2155                           ;main.c: 334: SendMsgSreen[3] = 0x74;
  2156  000E5C  0E74               	movlw	116
  2157  000E5E  6F03               	movwf	(_SendMsgSreen+3)& (0+255),b
  2158                           
  2159                           ;main.c: 335: SendMsgSreen[4] = 0x78;
  2160  000E60  0E78               	movlw	120
  2161  000E62  6F04               	movwf	(_SendMsgSreen+4)& (0+255),b
  2162                           
  2163                           ;main.c: 336: SendMsgSreen[5] = 0x74;
  2164  000E64  0E74               	movlw	116
  2165  000E66  6F05               	movwf	(_SendMsgSreen+5)& (0+255),b
  2166                           
  2167                           ;main.c: 337: SendMsgSreen[6] = 0x3D;
  2168  000E68  0E3D               	movlw	61
  2169  000E6A  6F06               	movwf	(_SendMsgSreen+6)& (0+255),b
  2170                           
  2171                           ;main.c: 338: SendMsgSreen[7] = 0x22;
  2172  000E6C  0E22               	movlw	34
  2173  000E6E  6F07               	movwf	(_SendMsgSreen+7)& (0+255),b
  2174                           
  2175                           ;main.c: 339: taille_text_spi = 0;
  2176  000E70  0E00               	movlw	0
  2177  000E72  0100               	movlb	0	; () banked
  2178  000E74  6FCD               	movwf	main@taille_text_spi& (0+255),b
  2179                           
  2180                           ;main.c: 344: while(taille_text_spi < TailleTerm) {
  2181  000E76  D018               	goto	l212
  2182  000E78                     
  2183                           ; BSR set to: 0
  2184                           ;main.c: 345: SendMsgSreen[taille_text_spi+8] = TextSpi[taille_text_spi];
  2185                           
  2186                           ; BSR set to: 0
  2187  000E78  51CD               	movf	main@taille_text_spi& (0+255),w,b
  2188  000E7A  0D01               	mullw	1
  2189  000E7C  0E00               	movlw	low _TextSpi
  2190  000E7E  24F3               	addwf	prodl,w,c
  2191  000E80  6ED9               	movwf	fsr2l,c
  2192  000E82  0E03               	movlw	high _TextSpi
  2193  000E84  20F4               	addwfc	prodh,w,c
  2194  000E86  6EDA               	movwf	fsr2h,c
  2195  000E88  51CD               	movf	main@taille_text_spi& (0+255),w,b
  2196  000E8A  6FBD               	movwf	??_main& (0+255),b
  2197  000E8C  6BBE               	clrf	(??_main+1)& (0+255),b
  2198  000E8E  0E08               	movlw	8
  2199  000E90  27BD               	addwf	??_main& (0+255),f,b
  2200  000E92  0E00               	movlw	0
  2201  000E94  23BE               	addwfc	(??_main+1)& (0+255),f,b
  2202  000E96  0E00               	movlw	low _SendMsgSreen
  2203  000E98  25BD               	addwf	??_main& (0+255),w,b
  2204  000E9A  6EE1               	movwf	fsr1l,c
  2205  000E9C  0E01               	movlw	high _SendMsgSreen
  2206  000E9E  21BE               	addwfc	(??_main+1)& (0+255),w,b
  2207  000EA0  6EE2               	movwf	fsr1h,c
  2208  000EA2  CFDF FFE7          	movff	indf2,indf1
  2209                           
  2210                           ; BSR set to: 0
  2211                           ;main.c: 346: taille_text_spi++;
  2212  000EA6  2BCD               	incf	main@taille_text_spi& (0+255),f,b
  2213  000EA8                     l212:
  2214                           
  2215                           ; BSR set to: 0
  2216                           
  2217                           ; BSR set to: 0
  2218  000EA8  51CD               	movf	main@taille_text_spi& (0+255),w,b
  2219  000EAA  6FBD               	movwf	??_main& (0+255),b
  2220  000EAC  6BBE               	clrf	(??_main+1)& (0+255),b
  2221  000EAE  51D6               	movf	_TailleTerm& (0+255),w,b
  2222  000EB0  5DBD               	subwf	??_main& (0+255),w,b
  2223  000EB2  51BE               	movf	(??_main+1)& (0+255),w,b
  2224  000EB4  0A80               	xorlw	128
  2225  000EB6  6FBF               	movwf	(??_main+2)& (0+255),b
  2226  000EB8  51D7               	movf	(_TailleTerm+1)& (0+255),w,b
  2227  000EBA  0A80               	xorlw	128
  2228  000EBC  59BF               	subwfb	(??_main+2)& (0+255),w,b
  2229  000EBE  A0D8               	btfss	status,0,c
  2230  000EC0  D7DB               	goto	l213
  2231                           
  2232                           ; BSR set to: 0
  2233                           ;main.c: 347: }
  2234                           ;main.c: 348: SendMsgSreen[taille_text_spi+8] = 0x22;
  2235                           
  2236                           ; BSR set to: 0
  2237  000EC2  51CD               	movf	main@taille_text_spi& (0+255),w,b
  2238  000EC4  6FBD               	movwf	??_main& (0+255),b
  2239  000EC6  6BBE               	clrf	(??_main+1)& (0+255),b
  2240  000EC8  0E08               	movlw	8
  2241  000ECA  27BD               	addwf	??_main& (0+255),f,b
  2242  000ECC  0E00               	movlw	0
  2243  000ECE  23BE               	addwfc	(??_main+1)& (0+255),f,b
  2244  000ED0  0E00               	movlw	low _SendMsgSreen
  2245  000ED2  25BD               	addwf	??_main& (0+255),w,b
  2246  000ED4  6ED9               	movwf	fsr2l,c
  2247  000ED6  0E01               	movlw	high _SendMsgSreen
  2248  000ED8  21BE               	addwfc	(??_main+1)& (0+255),w,b
  2249  000EDA  6EDA               	movwf	fsr2h,c
  2250  000EDC  0E22               	movlw	34
  2251  000EDE  6EDF               	movwf	indf2,c
  2252                           
  2253                           ;main.c: 349: SendMsgSreen[taille_text_spi+9] = 0xFF;
  2254  000EE0  51CD               	movf	main@taille_text_spi& (0+255),w,b
  2255  000EE2  6FBD               	movwf	??_main& (0+255),b
  2256  000EE4  6BBE               	clrf	(??_main+1)& (0+255),b
  2257  000EE6  0E09               	movlw	9
  2258  000EE8  27BD               	addwf	??_main& (0+255),f,b
  2259  000EEA  0E00               	movlw	0
  2260  000EEC  23BE               	addwfc	(??_main+1)& (0+255),f,b
  2261  000EEE  0E00               	movlw	low _SendMsgSreen
  2262  000EF0  25BD               	addwf	??_main& (0+255),w,b
  2263  000EF2  6ED9               	movwf	fsr2l,c
  2264  000EF4  0E01               	movlw	high _SendMsgSreen
  2265  000EF6  21BE               	addwfc	(??_main+1)& (0+255),w,b
  2266  000EF8  6EDA               	movwf	fsr2h,c
  2267  000EFA  0EFF               	movlw	255
  2268  000EFC  6EDF               	movwf	indf2,c
  2269                           
  2270                           ;main.c: 350: SendMsgSreen[taille_text_spi+10] = 0xFF;
  2271  000EFE  51CD               	movf	main@taille_text_spi& (0+255),w,b
  2272  000F00  6FBD               	movwf	??_main& (0+255),b
  2273  000F02  6BBE               	clrf	(??_main+1)& (0+255),b
  2274  000F04  0E0A               	movlw	10
  2275  000F06  27BD               	addwf	??_main& (0+255),f,b
  2276  000F08  0E00               	movlw	0
  2277  000F0A  23BE               	addwfc	(??_main+1)& (0+255),f,b
  2278  000F0C  0E00               	movlw	low _SendMsgSreen
  2279  000F0E  25BD               	addwf	??_main& (0+255),w,b
  2280  000F10  6ED9               	movwf	fsr2l,c
  2281  000F12  0E01               	movlw	high _SendMsgSreen
  2282  000F14  21BE               	addwfc	(??_main+1)& (0+255),w,b
  2283  000F16  6EDA               	movwf	fsr2h,c
  2284  000F18  0EFF               	movlw	255
  2285  000F1A  6EDF               	movwf	indf2,c
  2286                           
  2287                           ;main.c: 351: SendMsgSreen[taille_text_spi+11] = 0xFF;
  2288  000F1C  51CD               	movf	main@taille_text_spi& (0+255),w,b
  2289  000F1E  6FBD               	movwf	??_main& (0+255),b
  2290  000F20  6BBE               	clrf	(??_main+1)& (0+255),b
  2291  000F22  0E0B               	movlw	11
  2292  000F24  27BD               	addwf	??_main& (0+255),f,b
  2293  000F26  0E00               	movlw	0
  2294  000F28  23BE               	addwfc	(??_main+1)& (0+255),f,b
  2295  000F2A  0E00               	movlw	low _SendMsgSreen
  2296  000F2C  25BD               	addwf	??_main& (0+255),w,b
  2297  000F2E  6ED9               	movwf	fsr2l,c
  2298  000F30  0E01               	movlw	high _SendMsgSreen
  2299  000F32  21BE               	addwfc	(??_main+1)& (0+255),w,b
  2300  000F34  6EDA               	movwf	fsr2h,c
  2301  000F36  0EFF               	movlw	255
  2302  000F38  6EDF               	movwf	indf2,c
  2303                           
  2304                           ; BSR set to: 0
  2305                           ;main.c: 352: PrintS(SendMsgSreen);
  2306  000F3A  0E00               	movlw	low _SendMsgSreen
  2307  000F3C  6E21               	movwf	PrintS@s_printS,c
  2308  000F3E  0E01               	movlw	high _SendMsgSreen
  2309  000F40  6E22               	movwf	PrintS@s_printS+1,c
  2310  000F42  EC77  F00E         	call	_PrintS	;wreg free
  2311                           
  2312                           ;main.c: 353: ClearArray();
  2313  000F46  ECED  F00E         	call	_ClearArray	;wreg free
  2314                           
  2315                           ;main.c: 358: break;
  2316                           
  2317                           ;main.c: 356: case 3:
  2318                           
  2319                           ;main.c: 354: }
  2320                           ;main.c: 355: break;
  2321  000F4A  D41C               	goto	l191
  2322  000F4C                     
  2323                           ;main.c: 362: FlagSpi = 1;
  2324  000F4C  0E01               	movlw	1
  2325  000F4E  0100               	movlb	0	; () banked
  2326  000F50  6FE1               	movwf	_FlagSpi& (0+255),b
  2327                           
  2328                           ;main.c: 363: SendMsgSreen[0] = 0x74;
  2329  000F52  0E74               	movlw	116
  2330  000F54  0101               	movlb	1	; () banked
  2331  000F56  6F00               	movwf	_SendMsgSreen& (0+255),b
  2332                           
  2333                           ;main.c: 364: SendMsgSreen[1] = 0x30;
  2334  000F58  0E30               	movlw	48
  2335  000F5A  6F01               	movwf	(_SendMsgSreen+1)& (0+255),b
  2336                           
  2337                           ;main.c: 365: SendMsgSreen[2] = 0x2E;
  2338  000F5C  0E2E               	movlw	46
  2339  000F5E  6F02               	movwf	(_SendMsgSreen+2)& (0+255),b
  2340                           
  2341                           ;main.c: 366: SendMsgSreen[3] = 0x74;
  2342  000F60  0E74               	movlw	116
  2343  000F62  6F03               	movwf	(_SendMsgSreen+3)& (0+255),b
  2344                           
  2345                           ;main.c: 367: SendMsgSreen[4] = 0x78;
  2346  000F64  0E78               	movlw	120
  2347  000F66  6F04               	movwf	(_SendMsgSreen+4)& (0+255),b
  2348                           
  2349                           ;main.c: 368: SendMsgSreen[5] = 0x74;
  2350  000F68  0E74               	movlw	116
  2351  000F6A  6F05               	movwf	(_SendMsgSreen+5)& (0+255),b
  2352                           
  2353                           ;main.c: 369: SendMsgSreen[6] = 0x3D;
  2354  000F6C  0E3D               	movlw	61
  2355  000F6E  6F06               	movwf	(_SendMsgSreen+6)& (0+255),b
  2356                           
  2357                           ;main.c: 370: SendMsgSreen[7] = 0x22;
  2358  000F70  0E22               	movlw	34
  2359  000F72  6F07               	movwf	(_SendMsgSreen+7)& (0+255),b
  2360                           
  2361                           ;main.c: 371: SendMsgSreen[8] = 0x74;
  2362  000F74  0E74               	movlw	116
  2363  000F76  6F08               	movwf	(_SendMsgSreen+8)& (0+255),b
  2364                           
  2365                           ;main.c: 372: SendMsgSreen[9] = 0x65;
  2366  000F78  0E65               	movlw	101
  2367  000F7A  6F09               	movwf	(_SendMsgSreen+9)& (0+255),b
  2368                           
  2369                           ;main.c: 373: SendMsgSreen[10] = 0x73;
  2370  000F7C  0E73               	movlw	115
  2371  000F7E  6F0A               	movwf	(_SendMsgSreen+10)& (0+255),b
  2372                           
  2373                           ;main.c: 374: SendMsgSreen[11] = 0x74;
  2374  000F80  0E74               	movlw	116
  2375  000F82  6F0B               	movwf	(_SendMsgSreen+11)& (0+255),b
  2376                           
  2377                           ; BSR set to: 1
  2378                           ;main.c: 375: SendMsgSreen[12] = 0x30 + cpt;
  2379  000F84  0100               	movlb	0	; () banked
  2380  000F86  51D8               	movf	_cpt& (0+255),w,b
  2381  000F88  0F30               	addlw	48
  2382  000F8A  0101               	movlb	1	; () banked
  2383  000F8C  6F0C               	movwf	(_SendMsgSreen+12)& (0+255),b
  2384                           
  2385                           ; BSR set to: 1
  2386                           ;main.c: 376: cpt++;
  2387  000F8E  0100               	movlb	0	; () banked
  2388  000F90  2BD8               	incf	_cpt& (0+255),f,b
  2389                           
  2390                           ; BSR set to: 0
  2391                           ;main.c: 377: if(cpt > 9) {cpt = 0;}
  2392  000F92  0E09               	movlw	9
  2393  000F94  65D8               	cpfsgt	_cpt& (0+255),b
  2394  000F96  D002               	goto	l217
  2395                           
  2396                           ; BSR set to: 0
  2397  000F98  0E00               	movlw	0
  2398  000F9A  6FD8               	movwf	_cpt& (0+255),b
  2399  000F9C                     l217:
  2400                           
  2401                           ; BSR set to: 0
  2402                           ;main.c: 378: SendMsgSreen[13] = 0x22;
  2403  000F9C  0E22               	movlw	34
  2404  000F9E  0101               	movlb	1	; () banked
  2405  000FA0  6F0D               	movwf	(_SendMsgSreen+13)& (0+255),b
  2406                           
  2407                           ; BSR set to: 1
  2408                           ;main.c: 379: SendMsgSreen[14] = 0xFF;
  2409  000FA2  690E               	setf	(_SendMsgSreen+14)& (0+255),b
  2410                           
  2411                           ; BSR set to: 1
  2412                           ;main.c: 380: SendMsgSreen[15] = 0xFF;
  2413  000FA4  690F               	setf	(_SendMsgSreen+15)& (0+255),b
  2414                           
  2415                           ; BSR set to: 1
  2416                           ;main.c: 381: SendMsgSreen[16] = 0xFF;
  2417  000FA6  6910               	setf	(_SendMsgSreen+16)& (0+255),b
  2418                           
  2419                           ; BSR set to: 1
  2420                           ;main.c: 382: PrintS(SendMsgSreen);
  2421  000FA8  0E00               	movlw	low _SendMsgSreen
  2422  000FAA  6E21               	movwf	PrintS@s_printS,c
  2423  000FAC  0E01               	movlw	high _SendMsgSreen
  2424  000FAE  6E22               	movwf	PrintS@s_printS+1,c
  2425  000FB0  EC77  F00E         	call	_PrintS	;wreg free
  2426                           
  2427                           ;main.c: 383: ClearArray();
  2428  000FB4  ECED  F00E         	call	_ClearArray	;wreg free
  2429                           
  2430                           ;main.c: 384: break;
  2431  000FB8  EFC2  F003         	goto	l191
  2432  000FBC                     
  2433                           ;main.c: 386: EtatScreen = 0;
  2434  000FBC  0E00               	movlw	0
  2435  000FBE  0100               	movlb	0	; () banked
  2436  000FC0  6FDC               	movwf	_EtatScreen& (0+255),b
  2437                           
  2438                           ; BSR set to: 0
  2439                           ;main.c: 388: }
  2440                           
  2441                           ;main.c: 387: break;
  2442  000FC2  EFC2  F003         	goto	l191
  2443  000FC6                     l199:
  2444                           
  2445                           ; BSR set to: 0
  2446                           
  2447                           ; BSR set to: 0
  2448  000FC6  51DC               	movf	_EtatScreen& (0+255),w,b
  2449                           
  2450                           ; Switch size 1, requested type "space"
  2451                           ; Number of cases is 5, Range of values is 0 to 4
  2452                           ; switch strategies available:
  2453                           ; Name         Instructions Cycles
  2454                           ; simple_byte           16     9 (average)
  2455                           ;	Chosen strategy is simple_byte
  2456  000FC8  0A00               	xorlw	0	; case 0
  2457  000FCA  B4D8               	btfsc	status,2,c
  2458  000FCC  D574               	goto	l200
  2459  000FCE  0A01               	xorlw	1	; case 1
  2460  000FD0  B4D8               	btfsc	status,2,c
  2461  000FD2  D667               	goto	l207
  2462  000FD4  0A03               	xorlw	3	; case 2
  2463  000FD6  B4D8               	btfsc	status,2,c
  2464  000FD8  D724               	goto	l208
  2465  000FDA  0A01               	xorlw	1	; case 3
  2466  000FDC  B4D8               	btfsc	status,2,c
  2467  000FDE  EFC2  F003         	goto	l191
  2468  000FE2  0A07               	xorlw	7	; case 4
  2469  000FE4  B4D8               	btfsc	status,2,c
  2470  000FE6  D7B2               	goto	l216
  2471  000FE8  D7E9               	goto	l218
  2472  000FEA                     __end_of_main:
  2473                           	opt stack 0
  2474                           tblptru	equ	0xFF8
  2475                           tblptrh	equ	0xFF7
  2476                           tblptrl	equ	0xFF6
  2477                           tablat	equ	0xFF5
  2478                           prodh	equ	0xFF4
  2479                           prodl	equ	0xFF3
  2480                           intcon	equ	0xFF2
  2481                           postinc0	equ	0xFEE
  2482                           wreg	equ	0xFE8
  2483                           indf1	equ	0xFE7
  2484                           postdec1	equ	0xFE5
  2485                           fsr1h	equ	0xFE2
  2486                           fsr1l	equ	0xFE1
  2487                           indf2	equ	0xFDF
  2488                           fsr2h	equ	0xFDA
  2489                           fsr2l	equ	0xFD9
  2490                           status	equ	0xFD8
  2491                           
  2492 ;; *************** function _exp *****************
  2493 ;; Defined at:
  2494 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
  2495 ;; Parameters:    Size  Location     Type
  2496 ;;  x               3   52[BANK0 ] void 
  2497 ;; Auto vars:     Size  Location     Type
  2498 ;;  exponent        2   58[BANK0 ] int 
  2499 ;;  sign            1   60[BANK0 ] unsigned char 
  2500 ;; Return value:  Size  Location     Type
  2501 ;;                  3   52[BANK0 ] unsigned char 
  2502 ;; Registers used:
  2503 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2504 ;; Tracked objects:
  2505 ;;		On entry : 0/0
  2506 ;;		On exit  : 0/0
  2507 ;;		Unchanged: 0/0
  2508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2509 ;;      Params:         0       3       0       0       0       0       0
  2510 ;;      Locals:         0       6       0       0       0       0       0
  2511 ;;      Temps:          0       0       0       0       0       0       0
  2512 ;;      Totals:         0       9       0       0       0       0       0
  2513 ;;Total ram usage:        9 bytes
  2514 ;; Hardware stack levels used:    1
  2515 ;; Hardware stack levels required when called:    5
  2516 ;; This function calls:
  2517 ;;		___awtoft
  2518 ;;		___ftdiv
  2519 ;;		___ftge
  2520 ;;		___ftmul
  2521 ;;		___ftneg
  2522 ;;		___ftsub
  2523 ;;		___fttol
  2524 ;;		_eval_poly
  2525 ;;		_floor
  2526 ;;		_ldexp
  2527 ;; This function is called by:
  2528 ;;		_main
  2529 ;; This function uses a non-reentrant model
  2530 ;;
  2531                           
  2532                           	psect	text1
  2533  000FEA                     __ptext1:
  2534                           	opt stack 0
  2535  000FEA                     _exp:
  2536                           	opt stack 25
  2537                           
  2538                           ; BSR set to: 0
  2539                           ;incstack = 0
  2540  000FEA  0100               	movlb	0	; () banked
  2541  000FEC  51B4               	movf	exp@x& (0+255),w,b
  2542  000FEE  11B5               	iorwf	(exp@x+1)& (0+255),w,b
  2543  000FF0  11B6               	iorwf	(exp@x+2)& (0+255),w,b
  2544  000FF2  A4D8               	btfss	status,2,c
  2545  000FF4  D007               	goto	l576
  2546                           
  2547                           ; BSR set to: 0
  2548  000FF6  0E00               	movlw	0
  2549  000FF8  6FB4               	movwf	?_exp& (0+255),b
  2550  000FFA  0E80               	movlw	128
  2551  000FFC  6FB5               	movwf	(?_exp+1)& (0+255),b
  2552  000FFE  0E3F               	movlw	63
  2553  001000  6FB6               	movwf	(?_exp+2)& (0+255),b
  2554                           
  2555                           ; BSR set to: 0
  2556  001002  0012               	return	
  2557  001004                     l576:
  2558                           
  2559                           ; BSR set to: 0
  2560                           
  2561                           ; BSR set to: 0
  2562  001004  0E72               	movlw	114
  2563  001006  6E20               	movwf	___ftge@ff1,c
  2564  001008  0E31               	movlw	49
  2565  00100A  6E21               	movwf	___ftge@ff1+1,c
  2566  00100C  0E44               	movlw	68
  2567  00100E  6E22               	movwf	___ftge@ff1+2,c
  2568  001010  C0B4  F023         	movff	exp@x,___ftge@ff2
  2569  001014  C0B5  F024         	movff	exp@x+1,___ftge@ff2+1
  2570  001018  C0B6  F025         	movff	exp@x+2,___ftge@ff2+2
  2571  00101C  EC10  F00D         	call	___ftge	;wreg free
  2572  001020  B0D8               	btfsc	status,0,c
  2573  001022  D00C               	goto	l578
  2574  001024  0E00               	movlw	0
  2575  001026  0100               	movlb	0	; () banked
  2576  001028  6FD3               	movwf	(_errno+1)& (0+255),b
  2577  00102A  0E22               	movlw	34
  2578  00102C  6FD2               	movwf	_errno& (0+255),b
  2579  00102E  0EFF               	movlw	255
  2580  001030  6FB4               	movwf	?_exp& (0+255),b
  2581  001032  0E7F               	movlw	127
  2582  001034  6FB5               	movwf	(?_exp+1)& (0+255),b
  2583  001036  0E7F               	movlw	127
  2584  001038  6FB6               	movwf	(?_exp+2)& (0+255),b
  2585                           
  2586                           ; BSR set to: 0
  2587  00103A  0012               	return	
  2588  00103C                     l578:
  2589                           
  2590                           ; BSR set to: 0
  2591  00103C  C0B4  F020         	movff	exp@x,___ftge@ff1
  2592  001040  C0B5  F021         	movff	exp@x+1,___ftge@ff1+1
  2593  001044  C0B6  F022         	movff	exp@x+2,___ftge@ff1+2
  2594  001048  0E49               	movlw	73
  2595  00104A  6E23               	movwf	___ftge@ff2,c
  2596  00104C  0E3A               	movlw	58
  2597  00104E  6E24               	movwf	___ftge@ff2+1,c
  2598  001050  0EC4               	movlw	196
  2599  001052  6E25               	movwf	___ftge@ff2+2,c
  2600  001054  EC10  F00D         	call	___ftge	;wreg free
  2601  001058  B0D8               	btfsc	status,0,c
  2602  00105A  D00C               	goto	l579
  2603  00105C  0E00               	movlw	0
  2604  00105E  0100               	movlb	0	; () banked
  2605  001060  6FD3               	movwf	(_errno+1)& (0+255),b
  2606  001062  0E22               	movlw	34
  2607  001064  6FD2               	movwf	_errno& (0+255),b
  2608  001066  0E00               	movlw	0
  2609  001068  6FB4               	movwf	?_exp& (0+255),b
  2610  00106A  0E00               	movlw	0
  2611  00106C  6FB5               	movwf	(?_exp+1)& (0+255),b
  2612  00106E  0E00               	movlw	0
  2613  001070  6FB6               	movwf	(?_exp+2)& (0+255),b
  2614                           
  2615                           ; BSR set to: 0
  2616  001072  0012               	return	
  2617  001074                     l579:
  2618                           
  2619                           ; BSR set to: 0
  2620  001074  0100               	movlb	0	; () banked
  2621  001076  AFB6               	btfss	(exp@x+2)& (0+255),7,b
  2622  001078  D002               	goto	u3260
  2623  00107A  0E01               	movlw	1
  2624  00107C  D001               	goto	u3270
  2625  00107E                     u3260:
  2626  00107E  0E00               	movlw	0
  2627  001080                     u3270:
  2628  001080  6FBC               	movwf	exp@sign& (0+255),b
  2629                           
  2630                           ; BSR set to: 0
  2631  001082  51BC               	movf	exp@sign& (0+255),w,b
  2632  001084  B4D8               	btfsc	status,2,c
  2633  001086  D00E               	goto	l580
  2634                           
  2635                           ; BSR set to: 0
  2636  001088  C0B4  F083         	movff	exp@x,___ftneg@f1
  2637  00108C  C0B5  F084         	movff	exp@x+1,___ftneg@f1+1
  2638  001090  C0B6  F085         	movff	exp@x+2,___ftneg@f1+2
  2639  001094  EC28  F00F         	call	___ftneg	;wreg free
  2640  001098  C083  F0B4         	movff	?___ftneg,exp@x
  2641  00109C  C084  F0B5         	movff	?___ftneg+1,exp@x+1
  2642  0010A0  C085  F0B6         	movff	?___ftneg+2,exp@x+2
  2643  0010A4                     l580:
  2644  0010A4  C0B4  F086         	movff	exp@x,___ftmul@f1
  2645  0010A8  C0B5  F087         	movff	exp@x+1,___ftmul@f1+1
  2646  0010AC  C0B6  F088         	movff	exp@x+2,___ftmul@f1+2
  2647  0010B0  0EAA               	movlw	170
  2648  0010B2  0100               	movlb	0	; () banked
  2649  0010B4  6F89               	movwf	___ftmul@f2& (0+255),b
  2650  0010B6  0EB8               	movlw	184
  2651  0010B8  6F8A               	movwf	(___ftmul@f2+1)& (0+255),b
  2652  0010BA  0E3F               	movlw	63
  2653  0010BC  6F8B               	movwf	(___ftmul@f2+2)& (0+255),b
  2654  0010BE  ECC5  F009         	call	___ftmul	;wreg free
  2655  0010C2  C086  F0B4         	movff	?___ftmul,exp@x
  2656  0010C6  C087  F0B5         	movff	?___ftmul+1,exp@x+1
  2657  0010CA  C088  F0B6         	movff	?___ftmul+2,exp@x+2
  2658  0010CE  C0B4  F0A1         	movff	exp@x,floor@x
  2659  0010D2  C0B5  F0A2         	movff	exp@x+1,floor@x+1
  2660  0010D6  C0B6  F0A3         	movff	exp@x+2,floor@x+2
  2661  0010DA  EC2D  F00B         	call	_floor	;wreg free
  2662  0010DE  C0A1  F0B7         	movff	?_floor,_exp$1536
  2663  0010E2  C0A2  F0B8         	movff	?_floor+1,_exp$1536+1
  2664  0010E6  C0A3  F0B9         	movff	?_floor+2,_exp$1536+2
  2665  0010EA  C0B7  F037         	movff	_exp$1536,___fttol@f1
  2666  0010EE  C0B8  F038         	movff	_exp$1536+1,___fttol@f1+1
  2667  0010F2  C0B9  F039         	movff	_exp$1536+2,___fttol@f1+2
  2668  0010F6  EC40  F00A         	call	___fttol	;wreg free
  2669  0010FA  C037  F0BA         	movff	?___fttol,exp@exponent
  2670  0010FE  C038  F0BB         	movff	?___fttol+1,exp@exponent+1
  2671  001102  C0B4  F0A1         	movff	exp@x,___ftsub@f1
  2672  001106  C0B5  F0A2         	movff	exp@x+1,___ftsub@f1+1
  2673  00110A  C0B6  F0A3         	movff	exp@x+2,___ftsub@f1+2
  2674  00110E  C0BA  F080         	movff	exp@exponent,___awtoft@c
  2675  001112  C0BB  F081         	movff	exp@exponent+1,___awtoft@c+1
  2676  001116  EC5A  F00E         	call	___awtoft	;wreg free
  2677  00111A  C080  F0A4         	movff	?___awtoft,___ftsub@f2
  2678  00111E  C081  F0A5         	movff	?___awtoft+1,___ftsub@f2+1
  2679  001122  C082  F0A6         	movff	?___awtoft+2,___ftsub@f2+2
  2680  001126  EC39  F00E         	call	___ftsub	;wreg free
  2681  00112A  C0A1  F0B4         	movff	?___ftsub,exp@x
  2682  00112E  C0A2  F0B5         	movff	?___ftsub+1,exp@x+1
  2683  001132  C0A3  F0B6         	movff	?___ftsub+2,exp@x+2
  2684  001136  C0B4  F0A1         	movff	exp@x,eval_poly@x
  2685  00113A  C0B5  F0A2         	movff	exp@x+1,eval_poly@x+1
  2686  00113E  C0B6  F0A3         	movff	exp@x+2,eval_poly@x+2
  2687  001142  0E23               	movlw	low exp@coeff
  2688  001144  0100               	movlb	0	; () banked
  2689  001146  6FA4               	movwf	eval_poly@d& (0+255),b
  2690  001148  0E07               	movlw	high exp@coeff
  2691  00114A  6FA5               	movwf	(eval_poly@d+1)& (0+255),b
  2692  00114C  0E00               	movlw	0
  2693  00114E  6FA7               	movwf	(eval_poly@n+1)& (0+255),b
  2694  001150  0E09               	movlw	9
  2695  001152  6FA6               	movwf	eval_poly@n& (0+255),b
  2696  001154  EC9E  F00B         	call	_eval_poly	;wreg free
  2697  001158  C0A1  F0AD         	movff	?_eval_poly,ldexp@value
  2698  00115C  C0A2  F0AE         	movff	?_eval_poly+1,ldexp@value+1
  2699  001160  C0A3  F0AF         	movff	?_eval_poly+2,ldexp@value+2
  2700  001164  C0BA  F0B0         	movff	exp@exponent,ldexp@newexp
  2701  001168  C0BB  F0B1         	movff	exp@exponent+1,ldexp@newexp+1
  2702  00116C  EC0B  F00C         	call	_ldexp	;wreg free
  2703  001170  C0AD  F0B4         	movff	?_ldexp,exp@x
  2704  001174  C0AE  F0B5         	movff	?_ldexp+1,exp@x+1
  2705  001178  C0AF  F0B6         	movff	?_ldexp+2,exp@x+2
  2706  00117C  0100               	movlb	0	; () banked
  2707  00117E  51BC               	movf	exp@sign& (0+255),w,b
  2708  001180  B4D8               	btfsc	status,2,c
  2709  001182  D025               	goto	l581
  2710                           
  2711                           ; BSR set to: 0
  2712  001184  29B4               	incf	exp@x& (0+255),w,b
  2713  001186  E10E               	bnz	l3520
  2714  001188  0E7F               	movlw	127
  2715  00118A  19B5               	xorwf	(exp@x+1)& (0+255),w,b
  2716  00118C  E10B               	bnz	l3520
  2717  00118E  0E7F               	movlw	127
  2718  001190  19B6               	xorwf	(exp@x+2)& (0+255),w,b
  2719  001192  A4D8               	btfss	status,2,c
  2720  001194  D007               	goto	l582
  2721                           
  2722                           ; BSR set to: 0
  2723  001196  0E00               	movlw	0
  2724  001198  6FB4               	movwf	?_exp& (0+255),b
  2725  00119A  0E00               	movlw	0
  2726  00119C  6FB5               	movwf	(?_exp+1)& (0+255),b
  2727  00119E  0E00               	movlw	0
  2728  0011A0  6FB6               	movwf	(?_exp+2)& (0+255),b
  2729                           
  2730                           ; BSR set to: 0
  2731  0011A2  0012               	return	
  2732  0011A4                     l582:
  2733  0011A4                     l3520:
  2734                           
  2735                           ; BSR set to: 0
  2736  0011A4  0E00               	movlw	0
  2737  0011A6  6E28               	movwf	___ftdiv@f1,c
  2738  0011A8  0E80               	movlw	128
  2739  0011AA  6E29               	movwf	___ftdiv@f1+1,c
  2740  0011AC  0E3F               	movlw	63
  2741  0011AE  6E2A               	movwf	___ftdiv@f1+2,c
  2742  0011B0  C0B4  F02B         	movff	exp@x,___ftdiv@f2
  2743  0011B4  C0B5  F02C         	movff	exp@x+1,___ftdiv@f2+1
  2744  0011B8  C0B6  F02D         	movff	exp@x+2,___ftdiv@f2+2
  2745  0011BC  ECBA  F00A         	call	___ftdiv	;wreg free
  2746  0011C0  C028  F0B4         	movff	?___ftdiv,?_exp
  2747  0011C4  C029  F0B5         	movff	?___ftdiv+1,?_exp+1
  2748  0011C8  C02A  F0B6         	movff	?___ftdiv+2,?_exp+2
  2749  0011CC  0012               	return	
  2750  0011CE                     l581:
  2751                           
  2752                           ; BSR set to: 0
  2753  0011CE  C0B4  F0B4         	movff	exp@x,?_exp
  2754  0011D2  C0B5  F0B5         	movff	exp@x+1,?_exp+1
  2755  0011D6  C0B6  F0B6         	movff	exp@x+2,?_exp+2
  2756  0011DA  0012               	return		;funcret
  2757  0011DC                     __end_of_exp:
  2758                           	opt stack 0
  2759                           tblptru	equ	0xFF8
  2760                           tblptrh	equ	0xFF7
  2761                           tblptrl	equ	0xFF6
  2762                           tablat	equ	0xFF5
  2763                           prodh	equ	0xFF4
  2764                           prodl	equ	0xFF3
  2765                           intcon	equ	0xFF2
  2766                           postinc0	equ	0xFEE
  2767                           wreg	equ	0xFE8
  2768                           indf1	equ	0xFE7
  2769                           postdec1	equ	0xFE5
  2770                           fsr1h	equ	0xFE2
  2771                           fsr1l	equ	0xFE1
  2772                           indf2	equ	0xFDF
  2773                           fsr2h	equ	0xFDA
  2774                           fsr2l	equ	0xFD9
  2775                           status	equ	0xFD8
  2776                           
  2777 ;; *************** function _ldexp *****************
  2778 ;; Defined at:
  2779 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  2780 ;; Parameters:    Size  Location     Type
  2781 ;;  value           3   45[BANK0 ] unsigned char 
  2782 ;;  newexp          2   48[BANK0 ] int 
  2783 ;; Auto vars:     Size  Location     Type
  2784 ;;		None
  2785 ;; Return value:  Size  Location     Type
  2786 ;;                  3   45[BANK0 ] int 
  2787 ;; Registers used:
  2788 ;;		wreg, status,2, status,0
  2789 ;; Tracked objects:
  2790 ;;		On entry : 0/0
  2791 ;;		On exit  : 0/0
  2792 ;;		Unchanged: 0/0
  2793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2794 ;;      Params:         0       5       0       0       0       0       0
  2795 ;;      Locals:         0       0       0       0       0       0       0
  2796 ;;      Temps:          0       2       0       0       0       0       0
  2797 ;;      Totals:         0       7       0       0       0       0       0
  2798 ;;Total ram usage:        7 bytes
  2799 ;; Hardware stack levels used:    1
  2800 ;; Hardware stack levels required when called:    2
  2801 ;; This function calls:
  2802 ;;		Nothing
  2803 ;; This function is called by:
  2804 ;;		_exp
  2805 ;; This function uses a non-reentrant model
  2806 ;;
  2807                           
  2808                           	psect	text2
  2809  001816                     __ptext2:
  2810                           	opt stack 0
  2811  001816                     _ldexp:
  2812                           	opt stack 27
  2813                           
  2814                           ;incstack = 0
  2815  001816  0100               	movlb	0	; () banked
  2816  001818  51AD               	movf	ldexp@value& (0+255),w,b
  2817  00181A  11AE               	iorwf	(ldexp@value+1)& (0+255),w,b
  2818  00181C  11AF               	iorwf	(ldexp@value+2)& (0+255),w,b
  2819  00181E  A4D8               	btfss	status,2,c
  2820  001820  D007               	goto	l644
  2821                           
  2822                           ; BSR set to: 0
  2823  001822  0E00               	movlw	0
  2824  001824  6FAD               	movwf	?_ldexp& (0+255),b
  2825  001826  0E00               	movlw	0
  2826  001828  6FAE               	movwf	(?_ldexp+1)& (0+255),b
  2827  00182A  0E00               	movlw	0
  2828  00182C  6FAF               	movwf	(?_ldexp+2)& (0+255),b
  2829                           
  2830                           ; BSR set to: 0
  2831  00182E  0012               	return	
  2832  001830                     l644:
  2833                           
  2834                           ; BSR set to: 0
  2835                           
  2836                           ; BSR set to: 0
  2837  001830  51AF               	movf	(ldexp@value+2)& (0+255),w,b
  2838  001832  0B7F               	andlw	127
  2839  001834  6FB2               	movwf	??_ldexp& (0+255),b
  2840  001836  6BB3               	clrf	(??_ldexp+1)& (0+255),b
  2841  001838  90D8               	bcf	status,0,c
  2842  00183A  37B2               	rlcf	??_ldexp& (0+255),f,b
  2843  00183C  37B3               	rlcf	(??_ldexp+1)& (0+255),f,b
  2844  00183E  51B2               	movf	??_ldexp& (0+255),w,b
  2845  001840  27B0               	addwf	ldexp@newexp& (0+255),f,b
  2846  001842  51B3               	movf	(??_ldexp+1)& (0+255),w,b
  2847  001844  23B1               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  2848  001846  AFAE               	btfss	(ldexp@value+1)& (0+255),7,b
  2849  001848  D003               	goto	u2010
  2850  00184A  6BB2               	clrf	??_ldexp& (0+255),b
  2851  00184C  2BB2               	incf	??_ldexp& (0+255),f,b
  2852  00184E  D002               	goto	u2018
  2853  001850                     u2010:
  2854  001850  0100               	movlb	0	; () banked
  2855  001852  6BB2               	clrf	??_ldexp& (0+255),b
  2856  001854                     u2018:
  2857  001854  51B2               	movf	??_ldexp& (0+255),w,b
  2858  001856  27B0               	addwf	ldexp@newexp& (0+255),f,b
  2859  001858  0E00               	movlw	0
  2860  00185A  23B1               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  2861  00185C  AFB1               	btfss	(ldexp@newexp+1)& (0+255),7,b
  2862  00185E  D00B               	goto	l646
  2863                           
  2864                           ; BSR set to: 0
  2865  001860  0E00               	movlw	0
  2866  001862  6FD3               	movwf	(_errno+1)& (0+255),b
  2867  001864  0E22               	movlw	34
  2868  001866  6FD2               	movwf	_errno& (0+255),b
  2869  001868  0E00               	movlw	0
  2870  00186A  6FAD               	movwf	?_ldexp& (0+255),b
  2871  00186C  0E00               	movlw	0
  2872  00186E  6FAE               	movwf	(?_ldexp+1)& (0+255),b
  2873  001870  0E00               	movlw	0
  2874  001872                     L1:
  2875  001872  6FAF               	movwf	(?_ldexp+2)& (0+255),b
  2876                           
  2877                           ; BSR set to: 0
  2878  001874  0012               	return	
  2879  001876                     l646:
  2880                           
  2881                           ; BSR set to: 0
  2882                           
  2883                           ; BSR set to: 0
  2884  001876  BFB1               	btfsc	(ldexp@newexp+1)& (0+255),7,b
  2885  001878  D015               	goto	l648
  2886  00187A  05B1               	decf	(ldexp@newexp+1)& (0+255),w,b
  2887  00187C  A0D8               	btfss	status,0,c
  2888  00187E  D012               	goto	l648
  2889                           
  2890                           ; BSR set to: 0
  2891  001880  0E00               	movlw	0
  2892  001882  6FD3               	movwf	(_errno+1)& (0+255),b
  2893  001884  0E22               	movlw	34
  2894  001886  6FD2               	movwf	_errno& (0+255),b
  2895                           
  2896                           ; BSR set to: 0
  2897  001888  AFAF               	btfss	(ldexp@value+2)& (0+255),7,b
  2898  00188A  D006               	goto	l649
  2899                           
  2900                           ; BSR set to: 0
  2901  00188C  0EFF               	movlw	255
  2902  00188E  6FAD               	movwf	?_ldexp& (0+255),b
  2903  001890  0E7F               	movlw	127
  2904  001892  6FAE               	movwf	(?_ldexp+1)& (0+255),b
  2905  001894  0EFF               	movlw	255
  2906  001896  D7ED               	goto	L1
  2907  001898                     l649:
  2908                           
  2909                           ; BSR set to: 0
  2910                           
  2911                           ; BSR set to: 0
  2912  001898  0EFF               	movlw	255
  2913  00189A  6FAD               	movwf	?_ldexp& (0+255),b
  2914  00189C  0E7F               	movlw	127
  2915  00189E  6FAE               	movwf	(?_ldexp+1)& (0+255),b
  2916  0018A0  0E7F               	movlw	127
  2917  0018A2  D7E7               	goto	L1
  2918  0018A4                     l648:
  2919                           
  2920                           ; BSR set to: 0
  2921                           
  2922                           ; BSR set to: 0
  2923  0018A4  35B1               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  2924  0018A6  31B1               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  2925  0018A8  6FB3               	movwf	(??_ldexp+1)& (0+255),b
  2926  0018AA  31B0               	rrcf	ldexp@newexp& (0+255),w,b
  2927  0018AC  6FB2               	movwf	??_ldexp& (0+255),b
  2928  0018AE  51AF               	movf	(ldexp@value+2)& (0+255),w,b
  2929  0018B0  19B2               	xorwf	??_ldexp& (0+255),w,b
  2930  0018B2  0B80               	andlw	-128
  2931  0018B4  19B2               	xorwf	??_ldexp& (0+255),w,b
  2932  0018B6  6FAF               	movwf	(ldexp@value+2)& (0+255),b
  2933  0018B8  C0B0  F0B2         	movff	ldexp@newexp,??_ldexp
  2934  0018BC  0E01               	movlw	1
  2935  0018BE  17B2               	andwf	??_ldexp& (0+255),f,b
  2936  0018C0  33B2               	rrcf	??_ldexp& (0+255),f,b
  2937  0018C2  33B2               	rrcf	??_ldexp& (0+255),f,b
  2938  0018C4  51AE               	movf	(ldexp@value+1)& (0+255),w,b
  2939  0018C6  19B2               	xorwf	??_ldexp& (0+255),w,b
  2940  0018C8  0B7F               	andlw	-129
  2941  0018CA  19B2               	xorwf	??_ldexp& (0+255),w,b
  2942  0018CC  6FAE               	movwf	(ldexp@value+1)& (0+255),b
  2943                           
  2944                           ; BSR set to: 0
  2945                           
  2946                           ; BSR set to: 0
  2947                           
  2948                           ; BSR set to: 0
  2949  0018CE  C0AD  F0AD         	movff	ldexp@value,?_ldexp
  2950  0018D2  C0AE  F0AE         	movff	ldexp@value+1,?_ldexp+1
  2951  0018D6  C0AF  F0AF         	movff	ldexp@value+2,?_ldexp+2
  2952  0018DA  0012               	return	
  2953  0018DC                     __end_of_ldexp:
  2954                           	opt stack 0
  2955                           tblptru	equ	0xFF8
  2956                           tblptrh	equ	0xFF7
  2957                           tblptrl	equ	0xFF6
  2958                           tablat	equ	0xFF5
  2959                           prodh	equ	0xFF4
  2960                           prodl	equ	0xFF3
  2961                           intcon	equ	0xFF2
  2962                           postinc0	equ	0xFEE
  2963                           wreg	equ	0xFE8
  2964                           indf1	equ	0xFE7
  2965                           postdec1	equ	0xFE5
  2966                           fsr1h	equ	0xFE2
  2967                           fsr1l	equ	0xFE1
  2968                           indf2	equ	0xFDF
  2969                           fsr2h	equ	0xFDA
  2970                           fsr2l	equ	0xFD9
  2971                           status	equ	0xFD8
  2972                           
  2973 ;; *************** function _floor *****************
  2974 ;; Defined at:
  2975 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
  2976 ;; Parameters:    Size  Location     Type
  2977 ;;  x               3   33[BANK0 ] int 
  2978 ;; Auto vars:     Size  Location     Type
  2979 ;;  i               3   36[BANK0 ] int 
  2980 ;;  expon           2   39[BANK0 ] int 
  2981 ;; Return value:  Size  Location     Type
  2982 ;;                  3   33[BANK0 ] int 
  2983 ;; Registers used:
  2984 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2985 ;; Tracked objects:
  2986 ;;		On entry : 0/0
  2987 ;;		On exit  : 0/0
  2988 ;;		Unchanged: 0/0
  2989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2990 ;;      Params:         0       3       0       0       0       0       0
  2991 ;;      Locals:         0       5       0       0       0       0       0
  2992 ;;      Temps:          0       0       0       0       0       0       0
  2993 ;;      Totals:         0       8       0       0       0       0       0
  2994 ;;Total ram usage:        8 bytes
  2995 ;; Hardware stack levels used:    1
  2996 ;; Hardware stack levels required when called:    4
  2997 ;; This function calls:
  2998 ;;		___altoft
  2999 ;;		___ftadd
  3000 ;;		___ftge
  3001 ;;		___fttol
  3002 ;;		_frexp
  3003 ;; This function is called by:
  3004 ;;		_exp
  3005 ;; This function uses a non-reentrant model
  3006 ;;
  3007                           
  3008                           	psect	text3
  3009  00165A                     __ptext3:
  3010                           	opt stack 0
  3011  00165A                     _floor:
  3012                           	opt stack 25
  3013                           
  3014                           ; BSR set to: 0
  3015                           ;incstack = 0
  3016  00165A  C0A1  F020         	movff	floor@x,frexp@value
  3017  00165E  C0A2  F021         	movff	floor@x+1,frexp@value+1
  3018  001662  C0A3  F022         	movff	floor@x+2,frexp@value+2
  3019  001666  0EA7               	movlw	low floor@expon
  3020  001668  6E23               	movwf	frexp@eptr,c
  3021  00166A  0E00               	movlw	high floor@expon
  3022  00166C  6E24               	movwf	frexp@eptr+1,c
  3023  00166E  ECD7  F00D         	call	_frexp	;wreg free
  3024  001672  0100               	movlb	0	; () banked
  3025  001674  AFA8               	btfss	(floor@expon+1)& (0+255),7,b
  3026  001676  D010               	goto	l617
  3027                           
  3028                           ; BSR set to: 0
  3029  001678  AFA3               	btfss	(floor@x+2)& (0+255),7,b
  3030  00167A  D007               	goto	l618
  3031                           
  3032                           ; BSR set to: 0
  3033  00167C  0E00               	movlw	0
  3034  00167E  6FA1               	movwf	?_floor& (0+255),b
  3035  001680  0E80               	movlw	128
  3036  001682  6FA2               	movwf	(?_floor+1)& (0+255),b
  3037  001684  0EBF               	movlw	191
  3038  001686  6FA3               	movwf	(?_floor+2)& (0+255),b
  3039                           
  3040                           ; BSR set to: 0
  3041  001688  0012               	return	
  3042  00168A                     l618:
  3043                           
  3044                           ; BSR set to: 0
  3045                           
  3046                           ; BSR set to: 0
  3047  00168A  0E00               	movlw	0
  3048  00168C  6FA1               	movwf	?_floor& (0+255),b
  3049  00168E  0E00               	movlw	0
  3050  001690  6FA2               	movwf	(?_floor+1)& (0+255),b
  3051  001692  0E00               	movlw	0
  3052  001694  6FA3               	movwf	(?_floor+2)& (0+255),b
  3053                           
  3054                           ; BSR set to: 0
  3055  001696  0012               	return	
  3056  001698                     l617:
  3057                           
  3058                           ; BSR set to: 0
  3059                           
  3060                           ; BSR set to: 0
  3061  001698  51A8               	movf	(floor@expon+1)& (0+255),w,b
  3062  00169A  E104               	bnz	u3190
  3063  00169C  0E15               	movlw	21
  3064  00169E  5DA7               	subwf	floor@expon& (0+255),w,b
  3065  0016A0  A0D8               	btfss	status,0,c
  3066  0016A2  D007               	goto	l620
  3067  0016A4                     u3190:
  3068                           
  3069                           ; BSR set to: 0
  3070  0016A4  C0A1  F0A1         	movff	floor@x,?_floor
  3071  0016A8  C0A2  F0A2         	movff	floor@x+1,?_floor+1
  3072  0016AC  C0A3  F0A3         	movff	floor@x+2,?_floor+2
  3073  0016B0  0012               	return	
  3074  0016B2                     l620:
  3075                           
  3076                           ; BSR set to: 0
  3077                           
  3078                           ; BSR set to: 0
  3079  0016B2  C0A1  F037         	movff	floor@x,___fttol@f1
  3080  0016B6  C0A2  F038         	movff	floor@x+1,___fttol@f1+1
  3081  0016BA  C0A3  F039         	movff	floor@x+2,___fttol@f1+2
  3082  0016BE  EC40  F00A         	call	___fttol	;wreg free
  3083  0016C2  C037  F080         	movff	?___fttol,___altoft@c
  3084  0016C6  C038  F081         	movff	?___fttol+1,___altoft@c+1
  3085  0016CA  C039  F082         	movff	?___fttol+2,___altoft@c+2
  3086  0016CE  C03A  F083         	movff	?___fttol+3,___altoft@c+3
  3087  0016D2  EC9A  F00D         	call	___altoft	;wreg free
  3088  0016D6  C080  F0A4         	movff	?___altoft,floor@i
  3089  0016DA  C081  F0A5         	movff	?___altoft+1,floor@i+1
  3090  0016DE  C082  F0A6         	movff	?___altoft+2,floor@i+2
  3091  0016E2  C0A1  F020         	movff	floor@x,___ftge@ff1
  3092  0016E6  C0A2  F021         	movff	floor@x+1,___ftge@ff1+1
  3093  0016EA  C0A3  F022         	movff	floor@x+2,___ftge@ff1+2
  3094  0016EE  C0A4  F023         	movff	floor@i,___ftge@ff2
  3095  0016F2  C0A5  F024         	movff	floor@i+1,___ftge@ff2+1
  3096  0016F6  C0A6  F025         	movff	floor@i+2,___ftge@ff2+2
  3097  0016FA  EC10  F00D         	call	___ftge	;wreg free
  3098  0016FE  B0D8               	btfsc	status,0,c
  3099  001700  D016               	goto	l621
  3100  001702  C0A4  F095         	movff	floor@i,___ftadd@f1
  3101  001706  C0A5  F096         	movff	floor@i+1,___ftadd@f1+1
  3102  00170A  C0A6  F097         	movff	floor@i+2,___ftadd@f1+2
  3103  00170E  0E00               	movlw	0
  3104  001710  0100               	movlb	0	; () banked
  3105  001712  6F98               	movwf	___ftadd@f2& (0+255),b
  3106  001714  0E80               	movlw	128
  3107  001716  6F99               	movwf	(___ftadd@f2+1)& (0+255),b
  3108  001718  0EBF               	movlw	191
  3109  00171A  6F9A               	movwf	(___ftadd@f2+2)& (0+255),b
  3110  00171C  ECEE  F008         	call	___ftadd	;wreg free
  3111  001720  C095  F0A1         	movff	?___ftadd,?_floor
  3112  001724  C096  F0A2         	movff	?___ftadd+1,?_floor+1
  3113  001728  C097  F0A3         	movff	?___ftadd+2,?_floor+2
  3114  00172C  0012               	return	
  3115  00172E                     l621:
  3116  00172E  C0A4  F0A1         	movff	floor@i,?_floor
  3117  001732  C0A5  F0A2         	movff	floor@i+1,?_floor+1
  3118  001736  C0A6  F0A3         	movff	floor@i+2,?_floor+2
  3119  00173A  0012               	return		;funcret
  3120  00173C                     __end_of_floor:
  3121                           	opt stack 0
  3122                           tblptru	equ	0xFF8
  3123                           tblptrh	equ	0xFF7
  3124                           tblptrl	equ	0xFF6
  3125                           tablat	equ	0xFF5
  3126                           prodh	equ	0xFF4
  3127                           prodl	equ	0xFF3
  3128                           intcon	equ	0xFF2
  3129                           postinc0	equ	0xFEE
  3130                           wreg	equ	0xFE8
  3131                           indf1	equ	0xFE7
  3132                           postdec1	equ	0xFE5
  3133                           fsr1h	equ	0xFE2
  3134                           fsr1l	equ	0xFE1
  3135                           indf2	equ	0xFDF
  3136                           fsr2h	equ	0xFDA
  3137                           fsr2l	equ	0xFD9
  3138                           status	equ	0xFD8
  3139                           
  3140 ;; *************** function _frexp *****************
  3141 ;; Defined at:
  3142 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  3143 ;; Parameters:    Size  Location     Type
  3144 ;;  value           3   31[COMRAM] int 
  3145 ;;  eptr            2   34[COMRAM] PTR int 
  3146 ;;		 -> floor@expon(2), 
  3147 ;; Auto vars:     Size  Location     Type
  3148 ;;		None
  3149 ;; Return value:  Size  Location     Type
  3150 ;;                  3   31[COMRAM] PTR int 
  3151 ;; Registers used:
  3152 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3153 ;; Tracked objects:
  3154 ;;		On entry : 0/0
  3155 ;;		On exit  : 0/0
  3156 ;;		Unchanged: 0/0
  3157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3158 ;;      Params:         5       0       0       0       0       0       0
  3159 ;;      Locals:         0       0       0       0       0       0       0
  3160 ;;      Temps:          2       0       0       0       0       0       0
  3161 ;;      Totals:         7       0       0       0       0       0       0
  3162 ;;Total ram usage:        7 bytes
  3163 ;; Hardware stack levels used:    1
  3164 ;; Hardware stack levels required when called:    2
  3165 ;; This function calls:
  3166 ;;		Nothing
  3167 ;; This function is called by:
  3168 ;;		_floor
  3169 ;; This function uses a non-reentrant model
  3170 ;;
  3171                           
  3172                           	psect	text4
  3173  001BAE                     __ptext4:
  3174                           	opt stack 0
  3175  001BAE                     _frexp:
  3176                           	opt stack 26
  3177                           
  3178                           ;incstack = 0
  3179  001BAE  5020               	movf	frexp@value,w,c
  3180  001BB0  1021               	iorwf	frexp@value+1,w,c
  3181  001BB2  1022               	iorwf	frexp@value+2,w,c
  3182  001BB4  A4D8               	btfss	status,2,c
  3183  001BB6  D009               	goto	l640
  3184  001BB8  C023  FFD9         	movff	frexp@eptr,fsr2l
  3185  001BBC  C024  FFDA         	movff	frexp@eptr+1,fsr2h
  3186  001BC0  0E00               	movlw	0
  3187  001BC2  6EDE               	movwf	postinc2,c
  3188  001BC4  0E00               	movlw	0
  3189  001BC6  6EDD               	movwf	postdec2,c
  3190                           
  3191                           ;	Return value of _frexp is never used
  3192  001BC8  0012               	return	
  3193  001BCA                     l640:
  3194  001BCA  5022               	movf	frexp@value+2,w,c
  3195  001BCC  0B7F               	andlw	127
  3196  001BCE  6E25               	movwf	??_frexp& (0+255),c
  3197  001BD0  6A26               	clrf	(??_frexp+1)& (0+255),c
  3198  001BD2  90D8               	bcf	status,0,c
  3199  001BD4  3625               	rlcf	??_frexp,f,c
  3200  001BD6  3626               	rlcf	??_frexp+1,f,c
  3201  001BD8  C023  FFD9         	movff	frexp@eptr,fsr2l
  3202  001BDC  C024  FFDA         	movff	frexp@eptr+1,fsr2h
  3203  001BE0  C025  FFDE         	movff	??_frexp,postinc2
  3204  001BE4  C026  FFDD         	movff	??_frexp+1,postdec2
  3205  001BE8  AE21               	btfss	frexp@value+1,7,c
  3206  001BEA  D003               	goto	u1750
  3207  001BEC  6A25               	clrf	??_frexp& (0+255),c
  3208  001BEE  2A25               	incf	??_frexp& (0+255),f,c
  3209  001BF0  D001               	goto	u1758
  3210  001BF2                     u1750:
  3211  001BF2  6A25               	clrf	??_frexp& (0+255),c
  3212  001BF4                     u1758:
  3213  001BF4  5025               	movf	??_frexp,w,c
  3214  001BF6  C023  FFD9         	movff	frexp@eptr,fsr2l
  3215  001BFA  C024  FFDA         	movff	frexp@eptr+1,fsr2h
  3216  001BFE  12DE               	iorwf	postinc2,f,c
  3217  001C00  0E00               	movlw	0
  3218  001C02  12DD               	iorwf	postdec2,f,c
  3219  001C04  C023  FFD9         	movff	frexp@eptr,fsr2l
  3220  001C08  C024  FFDA         	movff	frexp@eptr+1,fsr2h
  3221  001C0C  0E82               	movlw	130
  3222  001C0E  26DE               	addwf	postinc2,f,c
  3223  001C10  0EFF               	movlw	255
  3224  001C12  22DD               	addwfc	postdec2,f,c
  3225  001C14  8022               	bsf	frexp@value+2,0,c
  3226  001C16  8222               	bsf	frexp@value+2,1,c
  3227  001C18  8422               	bsf	frexp@value+2,2,c
  3228  001C1A  8622               	bsf	frexp@value+2,3,c
  3229  001C1C  8822               	bsf	frexp@value+2,4,c
  3230  001C1E  8A22               	bsf	frexp@value+2,5,c
  3231  001C20  9C22               	bcf	frexp@value+2,6,c
  3232  001C22  9E21               	bcf	frexp@value+1,7,c
  3233  001C24  0012               	return	
  3234  001C26                     __end_of_frexp:
  3235                           	opt stack 0
  3236                           tblptru	equ	0xFF8
  3237                           tblptrh	equ	0xFF7
  3238                           tblptrl	equ	0xFF6
  3239                           tablat	equ	0xFF5
  3240                           prodh	equ	0xFF4
  3241                           prodl	equ	0xFF3
  3242                           intcon	equ	0xFF2
  3243                           postinc0	equ	0xFEE
  3244                           wreg	equ	0xFE8
  3245                           indf1	equ	0xFE7
  3246                           postdec1	equ	0xFE5
  3247                           fsr1h	equ	0xFE2
  3248                           fsr1l	equ	0xFE1
  3249                           indf2	equ	0xFDF
  3250                           postinc2	equ	0xFDE
  3251                           postdec2	equ	0xFDD
  3252                           fsr2h	equ	0xFDA
  3253                           fsr2l	equ	0xFD9
  3254                           status	equ	0xFD8
  3255                           
  3256 ;; *************** function ___fttol *****************
  3257 ;; Defined at:
  3258 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  3259 ;; Parameters:    Size  Location     Type
  3260 ;;  f1              3   54[COMRAM] float 
  3261 ;; Auto vars:     Size  Location     Type
  3262 ;;  lval            4   64[COMRAM] unsigned long 
  3263 ;;  exp1            1   68[COMRAM] unsigned char 
  3264 ;;  sign1           1   63[COMRAM] unsigned char 
  3265 ;; Return value:  Size  Location     Type
  3266 ;;                  4   54[COMRAM] long 
  3267 ;; Registers used:
  3268 ;;		wreg, status,2, status,0
  3269 ;; Tracked objects:
  3270 ;;		On entry : 0/0
  3271 ;;		On exit  : 0/0
  3272 ;;		Unchanged: 0/0
  3273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3274 ;;      Params:         4       0       0       0       0       0       0
  3275 ;;      Locals:         6       0       0       0       0       0       0
  3276 ;;      Temps:          5       0       0       0       0       0       0
  3277 ;;      Totals:        15       0       0       0       0       0       0
  3278 ;;Total ram usage:       15 bytes
  3279 ;; Hardware stack levels used:    1
  3280 ;; Hardware stack levels required when called:    2
  3281 ;; This function calls:
  3282 ;;		Nothing
  3283 ;; This function is called by:
  3284 ;;		_main
  3285 ;;		_exp
  3286 ;;		_floor
  3287 ;; This function uses a non-reentrant model
  3288 ;;
  3289                           
  3290                           	psect	text5
  3291  001480                     __ptext5:
  3292                           	opt stack 0
  3293  001480                     ___fttol:
  3294                           	opt stack 26
  3295                           
  3296                           ;incstack = 0
  3297  001480  C039  F03B         	movff	___fttol@f1+2,??___fttol
  3298  001484  6A3C               	clrf	(??___fttol+1)& (0+255),c
  3299  001486  6A3D               	clrf	(??___fttol+2)& (0+255),c
  3300  001488  3438               	rlcf	___fttol@f1+1,w,c
  3301  00148A  363B               	rlcf	??___fttol& (0+255),f,c
  3302  00148C  E301               	bnc	u1791
  3303  00148E  803C               	bsf	(??___fttol+1)& (0+255),0,c
  3304  001490                     u1791:
  3305  001490  503B               	movf	??___fttol,w,c
  3306  001492  6E45               	movwf	___fttol@exp1,c
  3307  001494  5045               	movf	___fttol@exp1,w,c
  3308  001496  A4D8               	btfss	status,2,c
  3309  001498  D009               	goto	l725
  3310  00149A  0E00               	movlw	0
  3311  00149C  6E37               	movwf	?___fttol,c
  3312  00149E  0E00               	movlw	0
  3313  0014A0  6E38               	movwf	?___fttol+1,c
  3314  0014A2  0E00               	movlw	0
  3315  0014A4  6E39               	movwf	?___fttol+2,c
  3316  0014A6  0E00               	movlw	0
  3317  0014A8  6E3A               	movwf	?___fttol+3,c
  3318  0014AA  0012               	return	
  3319  0014AC                     l725:
  3320  0014AC  0E17               	movlw	23
  3321  0014AE  6E3B               	movwf	??___fttol& (0+255),c
  3322  0014B0  C037  F03C         	movff	___fttol@f1,??___fttol+1
  3323  0014B4  C038  F03D         	movff	___fttol@f1+1,??___fttol+2
  3324  0014B8  C039  F03E         	movff	___fttol@f1+2,??___fttol+3
  3325  0014BC  283B               	incf	??___fttol,w,c
  3326  0014BE  6E3F               	movwf	(??___fttol+4)& (0+255),c
  3327  0014C0  D004               	goto	u1810
  3328  0014C2                     u1815:
  3329  0014C2  90D8               	bcf	status,0,c
  3330  0014C4  323E               	rrcf	??___fttol+3,f,c
  3331  0014C6  323D               	rrcf	??___fttol+2,f,c
  3332  0014C8  323C               	rrcf	??___fttol+1,f,c
  3333  0014CA                     u1810:
  3334  0014CA  2E3F               	decfsz	(??___fttol+4)& (0+255),f,c
  3335  0014CC  D7FA               	goto	u1815
  3336  0014CE  503C               	movf	??___fttol+1,w,c
  3337  0014D0  6E40               	movwf	___fttol@sign1,c
  3338  0014D2  8E38               	bsf	___fttol@f1+1,7,c
  3339  0014D4  0EFF               	movlw	255
  3340  0014D6  1637               	andwf	___fttol@f1,f,c
  3341  0014D8  0EFF               	movlw	255
  3342  0014DA  1638               	andwf	___fttol@f1+1,f,c
  3343  0014DC  0E00               	movlw	0
  3344  0014DE  1639               	andwf	___fttol@f1+2,f,c
  3345  0014E0  5037               	movf	___fttol@f1,w,c
  3346  0014E2  6E41               	movwf	___fttol@lval,c
  3347  0014E4  5038               	movf	___fttol@f1+1,w,c
  3348  0014E6  6E42               	movwf	___fttol@lval+1,c
  3349  0014E8  5039               	movf	___fttol@f1+2,w,c
  3350  0014EA  6E43               	movwf	___fttol@lval+2,c
  3351  0014EC  6A44               	clrf	___fttol@lval+3,c
  3352  0014EE  0E8E               	movlw	142
  3353  0014F0  5E45               	subwf	___fttol@exp1,f,c
  3354  0014F2  AE45               	btfss	___fttol@exp1,7,c
  3355  0014F4  D016               	goto	l727
  3356  0014F6  5045               	movf	___fttol@exp1,w,c
  3357  0014F8  0A80               	xorlw	128
  3358  0014FA  0F8F               	addlw	143
  3359  0014FC  B0D8               	btfsc	status,0,c
  3360  0014FE  D009               	goto	l728
  3361  001500  0E00               	movlw	0
  3362  001502  6E37               	movwf	?___fttol,c
  3363  001504  0E00               	movlw	0
  3364  001506  6E38               	movwf	?___fttol+1,c
  3365  001508  0E00               	movlw	0
  3366  00150A  6E39               	movwf	?___fttol+2,c
  3367  00150C  0E00               	movlw	0
  3368  00150E  6E3A               	movwf	?___fttol+3,c
  3369  001510  0012               	return	
  3370  001512                     l728:
  3371  001512  90D8               	bcf	status,0,c
  3372  001514  3244               	rrcf	___fttol@lval+3,f,c
  3373  001516  3243               	rrcf	___fttol@lval+2,f,c
  3374  001518  3242               	rrcf	___fttol@lval+1,f,c
  3375  00151A  3241               	rrcf	___fttol@lval,f,c
  3376  00151C  3E45               	incfsz	___fttol@exp1,f,c
  3377  00151E  D7F9               	goto	l728
  3378  001520  D015               	goto	u1850
  3379  001522                     l727:
  3380  001522  0E17               	movlw	23
  3381  001524  6445               	cpfsgt	___fttol@exp1,c
  3382  001526  D00F               	goto	l733
  3383  001528  0E00               	movlw	0
  3384  00152A  6E37               	movwf	?___fttol,c
  3385  00152C  0E00               	movlw	0
  3386  00152E  6E38               	movwf	?___fttol+1,c
  3387  001530  0E00               	movlw	0
  3388  001532  6E39               	movwf	?___fttol+2,c
  3389  001534  0E00               	movlw	0
  3390  001536  6E3A               	movwf	?___fttol+3,c
  3391  001538  0012               	return	
  3392  00153A  90D8               	bcf	status,0,c
  3393  00153C  3641               	rlcf	___fttol@lval,f,c
  3394  00153E  3642               	rlcf	___fttol@lval+1,f,c
  3395  001540  3643               	rlcf	___fttol@lval+2,f,c
  3396  001542  3644               	rlcf	___fttol@lval+3,f,c
  3397  001544  0645               	decf	___fttol@exp1,f,c
  3398  001546                     l733:
  3399  001546  5045               	movf	___fttol@exp1,w,c
  3400  001548  A4D8               	btfss	status,2,c
  3401  00154A  D7F7               	goto	l734
  3402  00154C                     u1850:
  3403  00154C  5040               	movf	___fttol@sign1,w,c
  3404  00154E  B4D8               	btfsc	status,2,c
  3405  001550  D008               	goto	l736
  3406  001552  1E44               	comf	___fttol@lval+3,f,c
  3407  001554  1E43               	comf	___fttol@lval+2,f,c
  3408  001556  1E42               	comf	___fttol@lval+1,f,c
  3409  001558  6C41               	negf	___fttol@lval,c
  3410  00155A  0E00               	movlw	0
  3411  00155C  2242               	addwfc	___fttol@lval+1,f,c
  3412  00155E  2243               	addwfc	___fttol@lval+2,f,c
  3413  001560  2244               	addwfc	___fttol@lval+3,f,c
  3414  001562                     l736:
  3415  001562  C041  F037         	movff	___fttol@lval,?___fttol
  3416  001566  C042  F038         	movff	___fttol@lval+1,?___fttol+1
  3417  00156A  C043  F039         	movff	___fttol@lval+2,?___fttol+2
  3418  00156E  C044  F03A         	movff	___fttol@lval+3,?___fttol+3
  3419  001572  0012               	return	
  3420  001574                     __end_of___fttol:
  3421                           	opt stack 0
  3422                           tblptru	equ	0xFF8
  3423                           tblptrh	equ	0xFF7
  3424                           tblptrl	equ	0xFF6
  3425                           tablat	equ	0xFF5
  3426                           prodh	equ	0xFF4
  3427                           prodl	equ	0xFF3
  3428                           intcon	equ	0xFF2
  3429                           postinc0	equ	0xFEE
  3430                           wreg	equ	0xFE8
  3431                           indf1	equ	0xFE7
  3432                           postdec1	equ	0xFE5
  3433                           fsr1h	equ	0xFE2
  3434                           fsr1l	equ	0xFE1
  3435                           indf2	equ	0xFDF
  3436                           postinc2	equ	0xFDE
  3437                           postdec2	equ	0xFDD
  3438                           fsr2h	equ	0xFDA
  3439                           fsr2l	equ	0xFD9
  3440                           status	equ	0xFD8
  3441                           
  3442 ;; *************** function ___ftge *****************
  3443 ;; Defined at:
  3444 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  3445 ;; Parameters:    Size  Location     Type
  3446 ;;  ff1             3   31[COMRAM] float 
  3447 ;;  ff2             3   34[COMRAM] float 
  3448 ;; Auto vars:     Size  Location     Type
  3449 ;;		None
  3450 ;; Return value:  Size  Location     Type
  3451 ;;		None               void
  3452 ;; Registers used:
  3453 ;;		wreg, status,2, status,0
  3454 ;; Tracked objects:
  3455 ;;		On entry : 0/0
  3456 ;;		On exit  : 0/0
  3457 ;;		Unchanged: 0/0
  3458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3459 ;;      Params:         6       0       0       0       0       0       0
  3460 ;;      Locals:         0       0       0       0       0       0       0
  3461 ;;      Temps:          3       0       0       0       0       0       0
  3462 ;;      Totals:         9       0       0       0       0       0       0
  3463 ;;Total ram usage:        9 bytes
  3464 ;; Hardware stack levels used:    1
  3465 ;; Hardware stack levels required when called:    2
  3466 ;; This function calls:
  3467 ;;		Nothing
  3468 ;; This function is called by:
  3469 ;;		_main
  3470 ;;		_exp
  3471 ;;		_floor
  3472 ;; This function uses a non-reentrant model
  3473 ;;
  3474                           
  3475                           	psect	text6
  3476  001A20                     __ptext6:
  3477                           	opt stack 0
  3478  001A20                     ___ftge:
  3479                           	opt stack 26
  3480                           
  3481                           ;incstack = 0
  3482  001A20  AE22               	btfss	___ftge@ff1+2,7,c
  3483  001A22  D016               	goto	l697
  3484  001A24  C020  F026         	movff	___ftge@ff1,??___ftge
  3485  001A28  C021  F027         	movff	___ftge@ff1+1,??___ftge+1
  3486  001A2C  C022  F028         	movff	___ftge@ff1+2,??___ftge+2
  3487  001A30  1E26               	comf	??___ftge,f,c
  3488  001A32  1E27               	comf	??___ftge+1,f,c
  3489  001A34  1E28               	comf	??___ftge+2,f,c
  3490  001A36  2A26               	incf	??___ftge,f,c
  3491  001A38  0E00               	movlw	0
  3492  001A3A  2227               	addwfc	??___ftge+1,f,c
  3493  001A3C  2228               	addwfc	??___ftge+2,f,c
  3494  001A3E  0E00               	movlw	0
  3495  001A40  2426               	addwf	??___ftge,w,c
  3496  001A42  6E20               	movwf	___ftge@ff1,c
  3497  001A44  0E00               	movlw	0
  3498  001A46  2027               	addwfc	??___ftge+1,w,c
  3499  001A48  6E21               	movwf	___ftge@ff1+1,c
  3500  001A4A  0E80               	movlw	128
  3501  001A4C  2028               	addwfc	??___ftge+2,w,c
  3502  001A4E  6E22               	movwf	___ftge@ff1+2,c
  3503  001A50                     l697:
  3504  001A50  AE25               	btfss	___ftge@ff2+2,7,c
  3505  001A52  D016               	goto	l698
  3506  001A54  C023  F026         	movff	___ftge@ff2,??___ftge
  3507  001A58  C024  F027         	movff	___ftge@ff2+1,??___ftge+1
  3508  001A5C  C025  F028         	movff	___ftge@ff2+2,??___ftge+2
  3509  001A60  1E26               	comf	??___ftge,f,c
  3510  001A62  1E27               	comf	??___ftge+1,f,c
  3511  001A64  1E28               	comf	??___ftge+2,f,c
  3512  001A66  2A26               	incf	??___ftge,f,c
  3513  001A68  0E00               	movlw	0
  3514  001A6A  2227               	addwfc	??___ftge+1,f,c
  3515  001A6C  2228               	addwfc	??___ftge+2,f,c
  3516  001A6E  0E00               	movlw	0
  3517  001A70  2426               	addwf	??___ftge,w,c
  3518  001A72  6E23               	movwf	___ftge@ff2,c
  3519  001A74  0E00               	movlw	0
  3520  001A76  2027               	addwfc	??___ftge+1,w,c
  3521  001A78  6E24               	movwf	___ftge@ff2+1,c
  3522  001A7A  0E80               	movlw	128
  3523  001A7C  2028               	addwfc	??___ftge+2,w,c
  3524  001A7E  6E25               	movwf	___ftge@ff2+2,c
  3525  001A80                     l698:
  3526  001A80  0E00               	movlw	0
  3527  001A82  1A20               	xorwf	___ftge@ff1,f,c
  3528  001A84  0E00               	movlw	0
  3529  001A86  1A21               	xorwf	___ftge@ff1+1,f,c
  3530  001A88  0E80               	movlw	128
  3531  001A8A  1A22               	xorwf	___ftge@ff1+2,f,c
  3532  001A8C  0E00               	movlw	0
  3533  001A8E  1A23               	xorwf	___ftge@ff2,f,c
  3534  001A90  0E00               	movlw	0
  3535  001A92  1A24               	xorwf	___ftge@ff2+1,f,c
  3536  001A94  0E80               	movlw	128
  3537  001A96  1A25               	xorwf	___ftge@ff2+2,f,c
  3538  001A98  5023               	movf	___ftge@ff2,w,c
  3539  001A9A  5C20               	subwf	___ftge@ff1,w,c
  3540  001A9C  5024               	movf	___ftge@ff2+1,w,c
  3541  001A9E  5821               	subwfb	___ftge@ff1+1,w,c
  3542  001AA0  5025               	movf	___ftge@ff2+2,w,c
  3543  001AA2  5822               	subwfb	___ftge@ff1+2,w,c
  3544  001AA4  B0D8               	btfsc	status,0,c
  3545  001AA6  D002               	goto	l2132
  3546  001AA8  90D8               	bcf	status,0,c
  3547  001AAA  0012               	return	
  3548  001AAC                     l2132:
  3549  001AAC  80D8               	bsf	status,0,c
  3550  001AAE  0012               	return	
  3551  001AB0                     __end_of___ftge:
  3552                           	opt stack 0
  3553                           tblptru	equ	0xFF8
  3554                           tblptrh	equ	0xFF7
  3555                           tblptrl	equ	0xFF6
  3556                           tablat	equ	0xFF5
  3557                           prodh	equ	0xFF4
  3558                           prodl	equ	0xFF3
  3559                           intcon	equ	0xFF2
  3560                           postinc0	equ	0xFEE
  3561                           wreg	equ	0xFE8
  3562                           indf1	equ	0xFE7
  3563                           postdec1	equ	0xFE5
  3564                           fsr1h	equ	0xFE2
  3565                           fsr1l	equ	0xFE1
  3566                           indf2	equ	0xFDF
  3567                           postinc2	equ	0xFDE
  3568                           postdec2	equ	0xFDD
  3569                           fsr2h	equ	0xFDA
  3570                           fsr2l	equ	0xFD9
  3571                           status	equ	0xFD8
  3572                           
  3573 ;; *************** function ___altoft *****************
  3574 ;; Defined at:
  3575 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
  3576 ;; Parameters:    Size  Location     Type
  3577 ;;  c               4    0[BANK0 ] long 
  3578 ;; Auto vars:     Size  Location     Type
  3579 ;;  sign            1   70[COMRAM] unsigned char 
  3580 ;;  exp             1   69[COMRAM] unsigned char 
  3581 ;; Return value:  Size  Location     Type
  3582 ;;                  3    0[BANK0 ] float 
  3583 ;; Registers used:
  3584 ;;		wreg, status,2, status,0, cstack
  3585 ;; Tracked objects:
  3586 ;;		On entry : 0/0
  3587 ;;		On exit  : 0/0
  3588 ;;		Unchanged: 0/0
  3589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3590 ;;      Params:         0       4       0       0       0       0       0
  3591 ;;      Locals:         2       0       0       0       0       0       0
  3592 ;;      Temps:          0       4       0       0       0       0       0
  3593 ;;      Totals:         2       8       0       0       0       0       0
  3594 ;;Total ram usage:       10 bytes
  3595 ;; Hardware stack levels used:    1
  3596 ;; Hardware stack levels required when called:    3
  3597 ;; This function calls:
  3598 ;;		___ftpack
  3599 ;; This function is called by:
  3600 ;;		_floor
  3601 ;; This function uses a non-reentrant model
  3602 ;;
  3603                           
  3604                           	psect	text7
  3605  001B34                     __ptext7:
  3606                           	opt stack 0
  3607  001B34                     ___altoft:
  3608                           	opt stack 25
  3609                           
  3610                           ;incstack = 0
  3611  001B34  0E00               	movlw	0
  3612  001B36  6E47               	movwf	___altoft@sign,c
  3613  001B38  0E8E               	movlw	142
  3614  001B3A  6E46               	movwf	___altoft@exp,c
  3615  001B3C  0100               	movlb	0	; () banked
  3616  001B3E  AF83               	btfss	(___altoft@c+3)& (0+255),7,b
  3617  001B40  D011               	goto	l451
  3618                           
  3619                           ; BSR set to: 0
  3620  001B42  1F83               	comf	(___altoft@c+3)& (0+255),f,b
  3621  001B44  1F82               	comf	(___altoft@c+2)& (0+255),f,b
  3622  001B46  1F81               	comf	(___altoft@c+1)& (0+255),f,b
  3623  001B48  6D80               	negf	___altoft@c& (0+255),b
  3624  001B4A  0E00               	movlw	0
  3625  001B4C  2381               	addwfc	(___altoft@c+1)& (0+255),f,b
  3626  001B4E  2382               	addwfc	(___altoft@c+2)& (0+255),f,b
  3627  001B50  2383               	addwfc	(___altoft@c+3)& (0+255),f,b
  3628                           
  3629                           ; BSR set to: 0
  3630  001B52  0E01               	movlw	1
  3631  001B54  6E47               	movwf	___altoft@sign,c
  3632                           
  3633                           ; BSR set to: 0
  3634  001B56  D006               	goto	l451
  3635  001B58                     
  3636                           ; BSR set to: 0
  3637                           
  3638                           ; BSR set to: 0
  3639  001B58  90D8               	bcf	status,0,c
  3640  001B5A  3383               	rrcf	(___altoft@c+3)& (0+255),f,b
  3641  001B5C  3382               	rrcf	(___altoft@c+2)& (0+255),f,b
  3642  001B5E  3381               	rrcf	(___altoft@c+1)& (0+255),f,b
  3643  001B60  3380               	rrcf	___altoft@c& (0+255),f,b
  3644  001B62  2A46               	incf	___altoft@exp,f,c
  3645  001B64                     l451:
  3646                           
  3647                           ; BSR set to: 0
  3648                           
  3649                           ; BSR set to: 0
  3650  001B64  0E00               	movlw	0
  3651  001B66  1580               	andwf	___altoft@c& (0+255),w,b
  3652  001B68  6F84               	movwf	??___altoft& (0+255),b
  3653  001B6A  0E00               	movlw	0
  3654  001B6C  1581               	andwf	(___altoft@c+1)& (0+255),w,b
  3655  001B6E  6F85               	movwf	(??___altoft+1)& (0+255),b
  3656  001B70  0E00               	movlw	0
  3657  001B72  1582               	andwf	(___altoft@c+2)& (0+255),w,b
  3658  001B74  6F86               	movwf	(??___altoft+2)& (0+255),b
  3659  001B76  0EFF               	movlw	255
  3660  001B78  1583               	andwf	(___altoft@c+3)& (0+255),w,b
  3661  001B7A  6F87               	movwf	(??___altoft+3)& (0+255),b
  3662  001B7C  5184               	movf	??___altoft& (0+255),w,b
  3663  001B7E  1185               	iorwf	(??___altoft+1)& (0+255),w,b
  3664  001B80  1186               	iorwf	(??___altoft+2)& (0+255),w,b
  3665  001B82  1187               	iorwf	(??___altoft+3)& (0+255),w,b
  3666  001B84  A4D8               	btfss	status,2,c
  3667  001B86  D7E8               	goto	l452
  3668                           
  3669                           ; BSR set to: 0
  3670                           
  3671                           ; BSR set to: 0
  3672  001B88  C080  F020         	movff	___altoft@c,___ftpack@arg
  3673  001B8C  C081  F021         	movff	___altoft@c+1,___ftpack@arg+1
  3674  001B90  C082  F022         	movff	___altoft@c+2,___ftpack@arg+2
  3675  001B94  C046  F023         	movff	___altoft@exp,___ftpack@exp
  3676  001B98  C047  F024         	movff	___altoft@sign,___ftpack@sign
  3677  001B9C  EC6E  F00C         	call	___ftpack	;wreg free
  3678  001BA0  C020  F080         	movff	?___ftpack,?___altoft
  3679  001BA4  C021  F081         	movff	?___ftpack+1,?___altoft+1
  3680  001BA8  C022  F082         	movff	?___ftpack+2,?___altoft+2
  3681  001BAC  0012               	return	
  3682  001BAE                     __end_of___altoft:
  3683                           	opt stack 0
  3684                           tblptru	equ	0xFF8
  3685                           tblptrh	equ	0xFF7
  3686                           tblptrl	equ	0xFF6
  3687                           tablat	equ	0xFF5
  3688                           prodh	equ	0xFF4
  3689                           prodl	equ	0xFF3
  3690                           intcon	equ	0xFF2
  3691                           postinc0	equ	0xFEE
  3692                           wreg	equ	0xFE8
  3693                           indf1	equ	0xFE7
  3694                           postdec1	equ	0xFE5
  3695                           fsr1h	equ	0xFE2
  3696                           fsr1l	equ	0xFE1
  3697                           indf2	equ	0xFDF
  3698                           postinc2	equ	0xFDE
  3699                           postdec2	equ	0xFDD
  3700                           fsr2h	equ	0xFDA
  3701                           fsr2l	equ	0xFD9
  3702                           status	equ	0xFD8
  3703                           
  3704 ;; *************** function _eval_poly *****************
  3705 ;; Defined at:
  3706 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
  3707 ;; Parameters:    Size  Location     Type
  3708 ;;  x               3   33[BANK0 ] float 
  3709 ;;  d               2   36[BANK0 ] PTR const 
  3710 ;;		 -> exp@coeff(30), 
  3711 ;;  n               2   38[BANK0 ] int 
  3712 ;; Auto vars:     Size  Location     Type
  3713 ;;  res             3   42[BANK0 ] int 
  3714 ;; Return value:  Size  Location     Type
  3715 ;;                  3   33[BANK0 ] int 
  3716 ;; Registers used:
  3717 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3718 ;; Tracked objects:
  3719 ;;		On entry : 0/0
  3720 ;;		On exit  : 0/0
  3721 ;;		Unchanged: 0/0
  3722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3723 ;;      Params:         0       7       0       0       0       0       0
  3724 ;;      Locals:         0       3       0       0       0       0       0
  3725 ;;      Temps:          0       2       0       0       0       0       0
  3726 ;;      Totals:         0      12       0       0       0       0       0
  3727 ;;Total ram usage:       12 bytes
  3728 ;; Hardware stack levels used:    1
  3729 ;; Hardware stack levels required when called:    4
  3730 ;; This function calls:
  3731 ;;		___ftadd
  3732 ;;		___ftmul
  3733 ;;		___wmul
  3734 ;; This function is called by:
  3735 ;;		_exp
  3736 ;; This function uses a non-reentrant model
  3737 ;;
  3738                           
  3739                           	psect	text8
  3740  00173C                     __ptext8:
  3741                           	opt stack 0
  3742  00173C                     _eval_poly:
  3743                           	opt stack 25
  3744                           
  3745                           ;incstack = 0
  3746  00173C  C0A6  F020         	movff	eval_poly@n,___wmul@multiplier
  3747  001740  C0A7  F021         	movff	eval_poly@n+1,___wmul@multiplier+1
  3748  001744  0E00               	movlw	0
  3749  001746  6E23               	movwf	___wmul@multiplicand+1,c
  3750  001748  0E03               	movlw	3
  3751  00174A  6E22               	movwf	___wmul@multiplicand,c
  3752  00174C  EC15  F00F         	call	___wmul	;wreg free
  3753  001750  C0A4  F0A8         	movff	eval_poly@d,??_eval_poly
  3754  001754  C0A5  F0A9         	movff	eval_poly@d+1,??_eval_poly+1
  3755  001758  5020               	movf	?___wmul,w,c
  3756  00175A  0100               	movlb	0	; () banked
  3757  00175C  27A8               	addwf	??_eval_poly& (0+255),f,b
  3758  00175E  5021               	movf	?___wmul+1,w,c
  3759  001760  23A9               	addwfc	(??_eval_poly+1)& (0+255),f,b
  3760  001762  C0A8  FFF6         	movff	??_eval_poly,tblptrl
  3761  001766  C0A9  FFF7         	movff	??_eval_poly+1,tblptrh
  3762  00176A                     	if	0	;tblptru may be non-zero
  3763  00176A                     	endif
  3764  00176A                     	if	0	;tblptru may be non-zero
  3765  00176A                     	endif
  3766  00176A  0009               	tblrd		*+
  3767  00176C  CFF5 F0AA          	movff	tablat,eval_poly@res
  3768  001770  0009               	tblrd		*+
  3769  001772  CFF5 F0AB          	movff	tablat,eval_poly@res+1
  3770  001776  000A               	tblrd		*-
  3771  001778  CFF5 F0AC          	movff	tablat,eval_poly@res+2
  3772  00177C  D040               	goto	l979
  3773  00177E                     
  3774                           ; BSR set to: 0
  3775                           
  3776                           ; BSR set to: 0
  3777  00177E  C0AA  F089         	movff	eval_poly@res,___ftmul@f2
  3778  001782  C0AB  F08A         	movff	eval_poly@res+1,___ftmul@f2+1
  3779  001786  C0AC  F08B         	movff	eval_poly@res+2,___ftmul@f2+2
  3780  00178A  C0A1  F086         	movff	eval_poly@x,___ftmul@f1
  3781  00178E  C0A2  F087         	movff	eval_poly@x+1,___ftmul@f1+1
  3782  001792  C0A3  F088         	movff	eval_poly@x+2,___ftmul@f1+2
  3783  001796  ECC5  F009         	call	___ftmul	;wreg free
  3784  00179A  C086  F095         	movff	?___ftmul,___ftadd@f1
  3785  00179E  C087  F096         	movff	?___ftmul+1,___ftadd@f1+1
  3786  0017A2  C088  F097         	movff	?___ftmul+2,___ftadd@f1+2
  3787  0017A6  0E00               	movlw	0
  3788  0017A8  6E23               	movwf	___wmul@multiplicand+1,c
  3789  0017AA  0E03               	movlw	3
  3790  0017AC  6E22               	movwf	___wmul@multiplicand,c
  3791  0017AE  0100               	movlb	0	; () banked
  3792  0017B0  07A6               	decf	eval_poly@n& (0+255),f,b
  3793  0017B2  A0D8               	btfss	status,0,c
  3794  0017B4  07A7               	decf	(eval_poly@n+1)& (0+255),f,b
  3795  0017B6  C0A6  F020         	movff	eval_poly@n,___wmul@multiplier
  3796  0017BA  C0A7  F021         	movff	eval_poly@n+1,___wmul@multiplier+1
  3797  0017BE  EC15  F00F         	call	___wmul	;wreg free
  3798  0017C2  C0A4  F0A8         	movff	eval_poly@d,??_eval_poly
  3799  0017C6  C0A5  F0A9         	movff	eval_poly@d+1,??_eval_poly+1
  3800  0017CA  5020               	movf	?___wmul,w,c
  3801  0017CC  0100               	movlb	0	; () banked
  3802  0017CE  27A8               	addwf	??_eval_poly& (0+255),f,b
  3803  0017D0  5021               	movf	?___wmul+1,w,c
  3804  0017D2  23A9               	addwfc	(??_eval_poly+1)& (0+255),f,b
  3805  0017D4  C0A8  FFF6         	movff	??_eval_poly,tblptrl
  3806  0017D8  C0A9  FFF7         	movff	??_eval_poly+1,tblptrh
  3807  0017DC                     	if	0	;tblptru may be non-zero
  3808  0017DC                     	endif
  3809  0017DC                     	if	0	;tblptru may be non-zero
  3810  0017DC                     	endif
  3811  0017DC  0009               	tblrd		*+
  3812  0017DE  CFF5 F098          	movff	tablat,___ftadd@f2
  3813  0017E2  0009               	tblrd		*+
  3814  0017E4  CFF5 F099          	movff	tablat,___ftadd@f2+1
  3815  0017E8  000A               	tblrd		*-
  3816  0017EA  CFF5 F09A          	movff	tablat,___ftadd@f2+2
  3817  0017EE  ECEE  F008         	call	___ftadd	;wreg free
  3818  0017F2  C095  F0AA         	movff	?___ftadd,eval_poly@res
  3819  0017F6  C096  F0AB         	movff	?___ftadd+1,eval_poly@res+1
  3820  0017FA  C097  F0AC         	movff	?___ftadd+2,eval_poly@res+2
  3821  0017FE                     l979:
  3822  0017FE  0100               	movlb	0	; () banked
  3823  001800  51A6               	movf	eval_poly@n& (0+255),w,b
  3824  001802  11A7               	iorwf	(eval_poly@n+1)& (0+255),w,b
  3825  001804  A4D8               	btfss	status,2,c
  3826  001806  D7BB               	goto	l980
  3827                           
  3828                           ; BSR set to: 0
  3829  001808  C0AA  F0A1         	movff	eval_poly@res,?_eval_poly
  3830  00180C  C0AB  F0A2         	movff	eval_poly@res+1,?_eval_poly+1
  3831  001810  C0AC  F0A3         	movff	eval_poly@res+2,?_eval_poly+2
  3832                           
  3833                           ; BSR set to: 0
  3834  001814  0012               	return		;funcret
  3835  001816                     __end_of_eval_poly:
  3836                           	opt stack 0
  3837                           tblptru	equ	0xFF8
  3838                           tblptrh	equ	0xFF7
  3839                           tblptrl	equ	0xFF6
  3840                           tablat	equ	0xFF5
  3841                           prodh	equ	0xFF4
  3842                           prodl	equ	0xFF3
  3843                           intcon	equ	0xFF2
  3844                           postinc0	equ	0xFEE
  3845                           wreg	equ	0xFE8
  3846                           indf1	equ	0xFE7
  3847                           postdec1	equ	0xFE5
  3848                           fsr1h	equ	0xFE2
  3849                           fsr1l	equ	0xFE1
  3850                           indf2	equ	0xFDF
  3851                           postinc2	equ	0xFDE
  3852                           postdec2	equ	0xFDD
  3853                           fsr2h	equ	0xFDA
  3854                           fsr2l	equ	0xFD9
  3855                           status	equ	0xFD8
  3856                           
  3857 ;; *************** function ___wmul *****************
  3858 ;; Defined at:
  3859 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3860 ;; Parameters:    Size  Location     Type
  3861 ;;  multiplier      2   31[COMRAM] unsigned int 
  3862 ;;  multiplicand    2   33[COMRAM] unsigned int 
  3863 ;; Auto vars:     Size  Location     Type
  3864 ;;  product         2   35[COMRAM] unsigned int 
  3865 ;; Return value:  Size  Location     Type
  3866 ;;                  2   31[COMRAM] unsigned int 
  3867 ;; Registers used:
  3868 ;;		wreg, status,2, status,0, prodl, prodh
  3869 ;; Tracked objects:
  3870 ;;		On entry : 0/0
  3871 ;;		On exit  : 0/0
  3872 ;;		Unchanged: 0/0
  3873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3874 ;;      Params:         4       0       0       0       0       0       0
  3875 ;;      Locals:         2       0       0       0       0       0       0
  3876 ;;      Temps:          0       0       0       0       0       0       0
  3877 ;;      Totals:         6       0       0       0       0       0       0
  3878 ;;Total ram usage:        6 bytes
  3879 ;; Hardware stack levels used:    1
  3880 ;; Hardware stack levels required when called:    2
  3881 ;; This function calls:
  3882 ;;		Nothing
  3883 ;; This function is called by:
  3884 ;;		_eval_poly
  3885 ;; This function uses a non-reentrant model
  3886 ;;
  3887                           
  3888                           	psect	text9
  3889  001E2A                     __ptext9:
  3890                           	opt stack 0
  3891  001E2A                     ___wmul:
  3892                           	opt stack 26
  3893                           
  3894                           ; BSR set to: 0
  3895                           ;incstack = 0
  3896  001E2A  5020               	movf	___wmul@multiplier,w,c
  3897  001E2C  0222               	mulwf	___wmul@multiplicand,c
  3898  001E2E  CFF3 F024          	movff	prodl,___wmul@product
  3899  001E32  CFF4 F025          	movff	prodh,___wmul@product+1
  3900  001E36  5020               	movf	___wmul@multiplier,w,c
  3901  001E38  0223               	mulwf	___wmul@multiplicand+1,c
  3902  001E3A  50F3               	movf	prodl,w,c
  3903  001E3C  2625               	addwf	___wmul@product+1,f,c
  3904  001E3E  5021               	movf	___wmul@multiplier+1,w,c
  3905  001E40  0222               	mulwf	___wmul@multiplicand,c
  3906  001E42  50F3               	movf	prodl,w,c
  3907  001E44  2625               	addwf	___wmul@product+1,f,c
  3908  001E46  C024  F020         	movff	___wmul@product,?___wmul
  3909  001E4A  C025  F021         	movff	___wmul@product+1,?___wmul+1
  3910  001E4E  0012               	return	
  3911  001E50                     __end_of___wmul:
  3912                           	opt stack 0
  3913                           tblptru	equ	0xFF8
  3914                           tblptrh	equ	0xFF7
  3915                           tblptrl	equ	0xFF6
  3916                           tablat	equ	0xFF5
  3917                           prodh	equ	0xFF4
  3918                           prodl	equ	0xFF3
  3919                           intcon	equ	0xFF2
  3920                           postinc0	equ	0xFEE
  3921                           wreg	equ	0xFE8
  3922                           indf1	equ	0xFE7
  3923                           postdec1	equ	0xFE5
  3924                           fsr1h	equ	0xFE2
  3925                           fsr1l	equ	0xFE1
  3926                           indf2	equ	0xFDF
  3927                           postinc2	equ	0xFDE
  3928                           postdec2	equ	0xFDD
  3929                           fsr2h	equ	0xFDA
  3930                           fsr2l	equ	0xFD9
  3931                           status	equ	0xFD8
  3932                           
  3933 ;; *************** function ___ftmul *****************
  3934 ;; Defined at:
  3935 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  3936 ;; Parameters:    Size  Location     Type
  3937 ;;  f1              3    6[BANK0 ] float 
  3938 ;;  f2              3    9[BANK0 ] float 
  3939 ;; Auto vars:     Size  Location     Type
  3940 ;;  f3_as_produc    3   16[BANK0 ] unsigned um
  3941 ;;  sign            1   20[BANK0 ] unsigned char 
  3942 ;;  cntr            1   19[BANK0 ] unsigned char 
  3943 ;;  exp             1   15[BANK0 ] unsigned char 
  3944 ;; Return value:  Size  Location     Type
  3945 ;;                  3    6[BANK0 ] float 
  3946 ;; Registers used:
  3947 ;;		wreg, status,2, status,0, cstack
  3948 ;; Tracked objects:
  3949 ;;		On entry : 0/0
  3950 ;;		On exit  : 0/0
  3951 ;;		Unchanged: 0/0
  3952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3953 ;;      Params:         0       6       0       0       0       0       0
  3954 ;;      Locals:         0       6       0       0       0       0       0
  3955 ;;      Temps:          0       3       0       0       0       0       0
  3956 ;;      Totals:         0      15       0       0       0       0       0
  3957 ;;Total ram usage:       15 bytes
  3958 ;; Hardware stack levels used:    1
  3959 ;; Hardware stack levels required when called:    3
  3960 ;; This function calls:
  3961 ;;		___ftpack
  3962 ;; This function is called by:
  3963 ;;		_main
  3964 ;;		_exp
  3965 ;;		_eval_poly
  3966 ;; This function uses a non-reentrant model
  3967 ;;
  3968                           
  3969                           	psect	text10
  3970  00138A                     __ptext10:
  3971                           	opt stack 0
  3972  00138A                     ___ftmul:
  3973                           	opt stack 25
  3974                           
  3975                           ;incstack = 0
  3976  00138A  C088  F08C         	movff	___ftmul@f1+2,??___ftmul
  3977  00138E  0100               	movlb	0	; () banked
  3978  001390  6B8D               	clrf	(??___ftmul+1)& (0+255),b
  3979  001392  6B8E               	clrf	(??___ftmul+2)& (0+255),b
  3980  001394  3587               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  3981  001396  378C               	rlcf	??___ftmul& (0+255),f,b
  3982  001398  E301               	bnc	u3041
  3983  00139A  818D               	bsf	(??___ftmul+1)& (0+255),0,b
  3984  00139C                     u3041:
  3985  00139C  518C               	movf	??___ftmul& (0+255),w,b
  3986  00139E  6F8F               	movwf	___ftmul@exp& (0+255),b
  3987  0013A0  518F               	movf	___ftmul@exp& (0+255),w,b
  3988  0013A2  A4D8               	btfss	status,2,c
  3989  0013A4  D007               	goto	l704
  3990                           
  3991                           ; BSR set to: 0
  3992  0013A6  0E00               	movlw	0
  3993  0013A8  6F86               	movwf	?___ftmul& (0+255),b
  3994  0013AA  0E00               	movlw	0
  3995  0013AC  6F87               	movwf	(?___ftmul+1)& (0+255),b
  3996  0013AE  0E00               	movlw	0
  3997  0013B0  6F88               	movwf	(?___ftmul+2)& (0+255),b
  3998                           
  3999                           ; BSR set to: 0
  4000  0013B2  0012               	return	
  4001  0013B4                     l704:
  4002                           
  4003                           ; BSR set to: 0
  4004                           
  4005                           ; BSR set to: 0
  4006  0013B4  C08B  F08C         	movff	___ftmul@f2+2,??___ftmul
  4007  0013B8  6B8D               	clrf	(??___ftmul+1)& (0+255),b
  4008  0013BA  6B8E               	clrf	(??___ftmul+2)& (0+255),b
  4009  0013BC  358A               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  4010  0013BE  378C               	rlcf	??___ftmul& (0+255),f,b
  4011  0013C0  E301               	bnc	u3061
  4012  0013C2  818D               	bsf	(??___ftmul+1)& (0+255),0,b
  4013  0013C4                     u3061:
  4014  0013C4  518C               	movf	??___ftmul& (0+255),w,b
  4015  0013C6  6F94               	movwf	___ftmul@sign& (0+255),b
  4016  0013C8  5194               	movf	___ftmul@sign& (0+255),w,b
  4017  0013CA  A4D8               	btfss	status,2,c
  4018  0013CC  D007               	goto	l706
  4019                           
  4020                           ; BSR set to: 0
  4021  0013CE  0E00               	movlw	0
  4022  0013D0  6F86               	movwf	?___ftmul& (0+255),b
  4023  0013D2  0E00               	movlw	0
  4024  0013D4  6F87               	movwf	(?___ftmul+1)& (0+255),b
  4025  0013D6  0E00               	movlw	0
  4026  0013D8  6F88               	movwf	(?___ftmul+2)& (0+255),b
  4027                           
  4028                           ; BSR set to: 0
  4029  0013DA  0012               	return	
  4030  0013DC                     l706:
  4031                           
  4032                           ; BSR set to: 0
  4033                           
  4034                           ; BSR set to: 0
  4035  0013DC  5194               	movf	___ftmul@sign& (0+255),w,b
  4036  0013DE  0F7B               	addlw	123
  4037  0013E0  278F               	addwf	___ftmul@exp& (0+255),f,b
  4038                           
  4039                           ; BSR set to: 0
  4040  0013E2  C088  F094         	movff	___ftmul@f1+2,___ftmul@sign
  4041  0013E6  518B               	movf	(___ftmul@f2+2)& (0+255),w,b
  4042  0013E8  1B94               	xorwf	___ftmul@sign& (0+255),f,b
  4043  0013EA  0E80               	movlw	128
  4044  0013EC  1794               	andwf	___ftmul@sign& (0+255),f,b
  4045                           
  4046                           ; BSR set to: 0
  4047  0013EE  8F87               	bsf	(___ftmul@f1+1)& (0+255),7,b
  4048                           
  4049                           ; BSR set to: 0
  4050  0013F0  8F8A               	bsf	(___ftmul@f2+1)& (0+255),7,b
  4051                           
  4052                           ; BSR set to: 0
  4053  0013F2  0EFF               	movlw	255
  4054  0013F4  1789               	andwf	___ftmul@f2& (0+255),f,b
  4055  0013F6  0EFF               	movlw	255
  4056  0013F8  178A               	andwf	(___ftmul@f2+1)& (0+255),f,b
  4057  0013FA  0E00               	movlw	0
  4058  0013FC  178B               	andwf	(___ftmul@f2+2)& (0+255),f,b
  4059                           
  4060                           ; BSR set to: 0
  4061  0013FE  0E00               	movlw	0
  4062  001400  6F90               	movwf	___ftmul@f3_as_product& (0+255),b
  4063  001402  0E00               	movlw	0
  4064  001404  6F91               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  4065  001406  0E00               	movlw	0
  4066  001408  6F92               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  4067                           
  4068                           ; BSR set to: 0
  4069  00140A  0E07               	movlw	7
  4070  00140C  6F93               	movwf	___ftmul@cntr& (0+255),b
  4071  00140E                     
  4072                           ; BSR set to: 0
  4073                           
  4074                           ; BSR set to: 0
  4075  00140E  A186               	btfss	___ftmul@f1& (0+255),0,b
  4076  001410  D006               	goto	l708
  4077                           
  4078                           ; BSR set to: 0
  4079  001412  5189               	movf	___ftmul@f2& (0+255),w,b
  4080  001414  2790               	addwf	___ftmul@f3_as_product& (0+255),f,b
  4081  001416  518A               	movf	(___ftmul@f2+1)& (0+255),w,b
  4082  001418  2391               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  4083  00141A  518B               	movf	(___ftmul@f2+2)& (0+255),w,b
  4084  00141C  2392               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  4085  00141E                     l708:
  4086                           
  4087                           ; BSR set to: 0
  4088                           
  4089                           ; BSR set to: 0
  4090  00141E  90D8               	bcf	status,0,c
  4091  001420  3388               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  4092  001422  3387               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  4093  001424  3386               	rrcf	___ftmul@f1& (0+255),f,b
  4094  001426  90D8               	bcf	status,0,c
  4095  001428  3789               	rlcf	___ftmul@f2& (0+255),f,b
  4096  00142A  378A               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  4097  00142C  378B               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  4098                           
  4099                           ; BSR set to: 0
  4100  00142E  2F93               	decfsz	___ftmul@cntr& (0+255),f,b
  4101  001430  D7EE               	goto	l707
  4102                           
  4103                           ; BSR set to: 0
  4104                           
  4105                           ; BSR set to: 0
  4106  001432  0E09               	movlw	9
  4107  001434  6F93               	movwf	___ftmul@cntr& (0+255),b
  4108  001436                     
  4109                           ; BSR set to: 0
  4110                           
  4111                           ; BSR set to: 0
  4112  001436  A186               	btfss	___ftmul@f1& (0+255),0,b
  4113  001438  D006               	goto	l711
  4114                           
  4115                           ; BSR set to: 0
  4116  00143A  5189               	movf	___ftmul@f2& (0+255),w,b
  4117  00143C  2790               	addwf	___ftmul@f3_as_product& (0+255),f,b
  4118  00143E  518A               	movf	(___ftmul@f2+1)& (0+255),w,b
  4119  001440  2391               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  4120  001442  518B               	movf	(___ftmul@f2+2)& (0+255),w,b
  4121  001444  2392               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  4122  001446                     l711:
  4123                           
  4124                           ; BSR set to: 0
  4125                           
  4126                           ; BSR set to: 0
  4127  001446  90D8               	bcf	status,0,c
  4128  001448  3388               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  4129  00144A  3387               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  4130  00144C  3386               	rrcf	___ftmul@f1& (0+255),f,b
  4131  00144E  90D8               	bcf	status,0,c
  4132  001450  3392               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  4133  001452  3391               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  4134  001454  3390               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  4135                           
  4136                           ; BSR set to: 0
  4137  001456  2F93               	decfsz	___ftmul@cntr& (0+255),f,b
  4138  001458  D7EE               	goto	l710
  4139                           
  4140                           ; BSR set to: 0
  4141                           
  4142                           ; BSR set to: 0
  4143  00145A  C090  F020         	movff	___ftmul@f3_as_product,___ftpack@arg
  4144  00145E  C091  F021         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4145  001462  C092  F022         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4146  001466  C08F  F023         	movff	___ftmul@exp,___ftpack@exp
  4147  00146A  C094  F024         	movff	___ftmul@sign,___ftpack@sign
  4148  00146E  EC6E  F00C         	call	___ftpack	;wreg free
  4149  001472  C020  F086         	movff	?___ftpack,?___ftmul
  4150  001476  C021  F087         	movff	?___ftpack+1,?___ftmul+1
  4151  00147A  C022  F088         	movff	?___ftpack+2,?___ftmul+2
  4152  00147E  0012               	return	
  4153  001480                     __end_of___ftmul:
  4154                           	opt stack 0
  4155                           tblptru	equ	0xFF8
  4156                           tblptrh	equ	0xFF7
  4157                           tblptrl	equ	0xFF6
  4158                           tablat	equ	0xFF5
  4159                           prodh	equ	0xFF4
  4160                           prodl	equ	0xFF3
  4161                           intcon	equ	0xFF2
  4162                           postinc0	equ	0xFEE
  4163                           wreg	equ	0xFE8
  4164                           indf1	equ	0xFE7
  4165                           postdec1	equ	0xFE5
  4166                           fsr1h	equ	0xFE2
  4167                           fsr1l	equ	0xFE1
  4168                           indf2	equ	0xFDF
  4169                           postinc2	equ	0xFDE
  4170                           postdec2	equ	0xFDD
  4171                           fsr2h	equ	0xFDA
  4172                           fsr2l	equ	0xFD9
  4173                           status	equ	0xFD8
  4174                           
  4175 ;; *************** function ___ftsub *****************
  4176 ;; Defined at:
  4177 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  4178 ;; Parameters:    Size  Location     Type
  4179 ;;  f1              3   33[BANK0 ] float 
  4180 ;;  f2              3   36[BANK0 ] float 
  4181 ;; Auto vars:     Size  Location     Type
  4182 ;;		None
  4183 ;; Return value:  Size  Location     Type
  4184 ;;                  3   33[BANK0 ] float 
  4185 ;; Registers used:
  4186 ;;		wreg, status,2, status,0, cstack
  4187 ;; Tracked objects:
  4188 ;;		On entry : 0/0
  4189 ;;		On exit  : 0/0
  4190 ;;		Unchanged: 0/0
  4191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4192 ;;      Params:         0       6       0       0       0       0       0
  4193 ;;      Locals:         0       0       0       0       0       0       0
  4194 ;;      Temps:          0       0       0       0       0       0       0
  4195 ;;      Totals:         0       6       0       0       0       0       0
  4196 ;;Total ram usage:        6 bytes
  4197 ;; Hardware stack levels used:    1
  4198 ;; Hardware stack levels required when called:    4
  4199 ;; This function calls:
  4200 ;;		___ftadd
  4201 ;; This function is called by:
  4202 ;;		_exp
  4203 ;; This function uses a non-reentrant model
  4204 ;;
  4205                           
  4206                           	psect	text11
  4207  001C72                     __ptext11:
  4208                           	opt stack 0
  4209  001C72                     ___ftsub:
  4210                           	opt stack 25
  4211                           
  4212                           ;incstack = 0
  4213  001C72  0100               	movlb	0	; () banked
  4214  001C74  51A4               	movf	___ftsub@f2& (0+255),w,b
  4215  001C76  11A5               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  4216  001C78  11A6               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  4217  001C7A  B4D8               	btfsc	status,2,c
  4218  001C7C  D006               	goto	l721
  4219                           
  4220                           ; BSR set to: 0
  4221  001C7E  0E00               	movlw	0
  4222  001C80  1BA4               	xorwf	___ftsub@f2& (0+255),f,b
  4223  001C82  0E00               	movlw	0
  4224  001C84  1BA5               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  4225  001C86  0E80               	movlw	128
  4226  001C88  1BA6               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  4227  001C8A                     l721:
  4228                           
  4229                           ; BSR set to: 0
  4230                           
  4231                           ; BSR set to: 0
  4232  001C8A  C0A1  F095         	movff	___ftsub@f1,___ftadd@f1
  4233  001C8E  C0A2  F096         	movff	___ftsub@f1+1,___ftadd@f1+1
  4234  001C92  C0A3  F097         	movff	___ftsub@f1+2,___ftadd@f1+2
  4235  001C96  C0A4  F098         	movff	___ftsub@f2,___ftadd@f2
  4236  001C9A  C0A5  F099         	movff	___ftsub@f2+1,___ftadd@f2+1
  4237  001C9E  C0A6  F09A         	movff	___ftsub@f2+2,___ftadd@f2+2
  4238  001CA2  ECEE  F008         	call	___ftadd	;wreg free
  4239  001CA6  C095  F0A1         	movff	?___ftadd,?___ftsub
  4240  001CAA  C096  F0A2         	movff	?___ftadd+1,?___ftsub+1
  4241  001CAE  C097  F0A3         	movff	?___ftadd+2,?___ftsub+2
  4242  001CB2  0012               	return	
  4243  001CB4                     __end_of___ftsub:
  4244                           	opt stack 0
  4245                           tblptru	equ	0xFF8
  4246                           tblptrh	equ	0xFF7
  4247                           tblptrl	equ	0xFF6
  4248                           tablat	equ	0xFF5
  4249                           prodh	equ	0xFF4
  4250                           prodl	equ	0xFF3
  4251                           intcon	equ	0xFF2
  4252                           postinc0	equ	0xFEE
  4253                           wreg	equ	0xFE8
  4254                           indf1	equ	0xFE7
  4255                           postdec1	equ	0xFE5
  4256                           fsr1h	equ	0xFE2
  4257                           fsr1l	equ	0xFE1
  4258                           indf2	equ	0xFDF
  4259                           postinc2	equ	0xFDE
  4260                           postdec2	equ	0xFDD
  4261                           fsr2h	equ	0xFDA
  4262                           fsr2l	equ	0xFD9
  4263                           status	equ	0xFD8
  4264                           
  4265 ;; *************** function ___ftadd *****************
  4266 ;; Defined at:
  4267 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  4268 ;; Parameters:    Size  Location     Type
  4269 ;;  f1              3   21[BANK0 ] float 
  4270 ;;  f2              3   24[BANK0 ] float 
  4271 ;; Auto vars:     Size  Location     Type
  4272 ;;  exp1            1   32[BANK0 ] unsigned char 
  4273 ;;  exp2            1   31[BANK0 ] unsigned char 
  4274 ;;  sign            1   30[BANK0 ] unsigned char 
  4275 ;; Return value:  Size  Location     Type
  4276 ;;                  3   21[BANK0 ] float 
  4277 ;; Registers used:
  4278 ;;		wreg, status,2, status,0, cstack
  4279 ;; Tracked objects:
  4280 ;;		On entry : 0/0
  4281 ;;		On exit  : 0/0
  4282 ;;		Unchanged: 0/0
  4283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4284 ;;      Params:         0       6       0       0       0       0       0
  4285 ;;      Locals:         0       3       0       0       0       0       0
  4286 ;;      Temps:          0       3       0       0       0       0       0
  4287 ;;      Totals:         0      12       0       0       0       0       0
  4288 ;;Total ram usage:       12 bytes
  4289 ;; Hardware stack levels used:    1
  4290 ;; Hardware stack levels required when called:    3
  4291 ;; This function calls:
  4292 ;;		___ftpack
  4293 ;; This function is called by:
  4294 ;;		_main
  4295 ;;		_floor
  4296 ;;		___ftsub
  4297 ;;		_eval_poly
  4298 ;; This function uses a non-reentrant model
  4299 ;;
  4300                           
  4301                           	psect	text12
  4302  0011DC                     __ptext12:
  4303                           	opt stack 0
  4304  0011DC                     ___ftadd:
  4305                           	opt stack 25
  4306                           
  4307                           ;incstack = 0
  4308  0011DC  C097  F09B         	movff	___ftadd@f1+2,??___ftadd
  4309  0011E0  0100               	movlb	0	; () banked
  4310  0011E2  6B9C               	clrf	(??___ftadd+1)& (0+255),b
  4311  0011E4  6B9D               	clrf	(??___ftadd+2)& (0+255),b
  4312  0011E6  3596               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  4313  0011E8  379B               	rlcf	??___ftadd& (0+255),f,b
  4314  0011EA  E301               	bnc	u2831
  4315  0011EC  819C               	bsf	(??___ftadd+1)& (0+255),0,b
  4316  0011EE                     u2831:
  4317  0011EE  519B               	movf	??___ftadd& (0+255),w,b
  4318  0011F0  6FA0               	movwf	___ftadd@exp1& (0+255),b
  4319  0011F2  C09A  F09B         	movff	___ftadd@f2+2,??___ftadd
  4320  0011F6  6B9C               	clrf	(??___ftadd+1)& (0+255),b
  4321  0011F8  6B9D               	clrf	(??___ftadd+2)& (0+255),b
  4322  0011FA  3599               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  4323  0011FC  379B               	rlcf	??___ftadd& (0+255),f,b
  4324  0011FE  E301               	bnc	u2841
  4325  001200  819C               	bsf	(??___ftadd+1)& (0+255),0,b
  4326  001202                     u2841:
  4327  001202  519B               	movf	??___ftadd& (0+255),w,b
  4328  001204  6F9F               	movwf	___ftadd@exp2& (0+255),b
  4329                           
  4330                           ; BSR set to: 0
  4331  001206  51A0               	movf	___ftadd@exp1& (0+255),w,b
  4332  001208  B4D8               	btfsc	status,2,c
  4333  00120A  D00B               	goto	u2870
  4334                           
  4335                           ; BSR set to: 0
  4336  00120C  519F               	movf	___ftadd@exp2& (0+255),w,b
  4337  00120E  5DA0               	subwf	___ftadd@exp1& (0+255),w,b
  4338  001210  B0D8               	btfsc	status,0,c
  4339  001212  D00E               	goto	l656
  4340                           
  4341                           ; BSR set to: 0
  4342  001214  51A0               	movf	___ftadd@exp1& (0+255),w,b
  4343  001216  0800               	sublw	0
  4344  001218  259F               	addwf	___ftadd@exp2& (0+255),w,b
  4345  00121A  6F9B               	movwf	??___ftadd& (0+255),b
  4346  00121C  0E18               	movlw	24
  4347  00121E  659B               	cpfsgt	??___ftadd& (0+255),b
  4348  001220  D007               	goto	l656
  4349  001222                     u2870:
  4350                           
  4351                           ; BSR set to: 0
  4352  001222  C098  F095         	movff	___ftadd@f2,?___ftadd
  4353  001226  C099  F096         	movff	___ftadd@f2+1,?___ftadd+1
  4354  00122A  C09A  F097         	movff	___ftadd@f2+2,?___ftadd+2
  4355  00122E  0012               	return	
  4356  001230                     l656:
  4357                           
  4358                           ; BSR set to: 0
  4359                           
  4360                           ; BSR set to: 0
  4361  001230  519F               	movf	___ftadd@exp2& (0+255),w,b
  4362  001232  B4D8               	btfsc	status,2,c
  4363  001234  D00B               	goto	u2900
  4364                           
  4365                           ; BSR set to: 0
  4366  001236  51A0               	movf	___ftadd@exp1& (0+255),w,b
  4367  001238  5D9F               	subwf	___ftadd@exp2& (0+255),w,b
  4368  00123A  B0D8               	btfsc	status,0,c
  4369  00123C  D00E               	goto	l660
  4370                           
  4371                           ; BSR set to: 0
  4372  00123E  519F               	movf	___ftadd@exp2& (0+255),w,b
  4373  001240  0800               	sublw	0
  4374  001242  25A0               	addwf	___ftadd@exp1& (0+255),w,b
  4375  001244  6F9B               	movwf	??___ftadd& (0+255),b
  4376  001246  0E18               	movlw	24
  4377  001248  659B               	cpfsgt	??___ftadd& (0+255),b
  4378  00124A  D007               	goto	l660
  4379  00124C                     u2900:
  4380                           
  4381                           ; BSR set to: 0
  4382  00124C  C095  F095         	movff	___ftadd@f1,?___ftadd
  4383  001250  C096  F096         	movff	___ftadd@f1+1,?___ftadd+1
  4384  001254  C097  F097         	movff	___ftadd@f1+2,?___ftadd+2
  4385  001258  0012               	return	
  4386  00125A                     l660:
  4387                           
  4388                           ; BSR set to: 0
  4389                           
  4390                           ; BSR set to: 0
  4391  00125A  0E06               	movlw	6
  4392  00125C  6F9E               	movwf	___ftadd@sign& (0+255),b
  4393                           
  4394                           ; BSR set to: 0
  4395  00125E  BF97               	btfsc	(___ftadd@f1+2)& (0+255),7,b
  4396                           
  4397                           ; BSR set to: 0
  4398  001260  8F9E               	bsf	___ftadd@sign& (0+255),7,b
  4399                           
  4400                           ; BSR set to: 0
  4401                           
  4402                           ; BSR set to: 0
  4403  001262  BF9A               	btfsc	(___ftadd@f2+2)& (0+255),7,b
  4404                           
  4405                           ; BSR set to: 0
  4406  001264  8D9E               	bsf	___ftadd@sign& (0+255),6,b
  4407                           
  4408                           ; BSR set to: 0
  4409  001266  8F96               	bsf	(___ftadd@f1+1)& (0+255),7,b
  4410                           
  4411                           ; BSR set to: 0
  4412  001268  0EFF               	movlw	255
  4413  00126A  1795               	andwf	___ftadd@f1& (0+255),f,b
  4414  00126C  0EFF               	movlw	255
  4415  00126E  1796               	andwf	(___ftadd@f1+1)& (0+255),f,b
  4416  001270  0E00               	movlw	0
  4417  001272  1797               	andwf	(___ftadd@f1+2)& (0+255),f,b
  4418  001274  8F99               	bsf	(___ftadd@f2+1)& (0+255),7,b
  4419                           
  4420                           ; BSR set to: 0
  4421  001276  0EFF               	movlw	255
  4422  001278  1798               	andwf	___ftadd@f2& (0+255),f,b
  4423  00127A  0EFF               	movlw	255
  4424  00127C  1799               	andwf	(___ftadd@f2+1)& (0+255),f,b
  4425  00127E  0E00               	movlw	0
  4426  001280  179A               	andwf	(___ftadd@f2+2)& (0+255),f,b
  4427                           
  4428                           ; BSR set to: 0
  4429  001282  519F               	movf	___ftadd@exp2& (0+255),w,b
  4430  001284  5DA0               	subwf	___ftadd@exp1& (0+255),w,b
  4431  001286  B0D8               	btfsc	status,0,c
  4432  001288  D01B               	goto	l665
  4433  00128A                     u2930:
  4434                           
  4435                           ; BSR set to: 0
  4436                           
  4437                           ; BSR set to: 0
  4438  00128A  90D8               	bcf	status,0,c
  4439  00128C  3798               	rlcf	___ftadd@f2& (0+255),f,b
  4440  00128E  3799               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  4441  001290  379A               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  4442  001292  079F               	decf	___ftadd@exp2& (0+255),f,b
  4443                           
  4444                           ; BSR set to: 0
  4445  001294  51A0               	movf	___ftadd@exp1& (0+255),w,b
  4446  001296  199F               	xorwf	___ftadd@exp2& (0+255),w,b
  4447  001298  B4D8               	btfsc	status,2,c
  4448  00129A  D00D               	goto	l670
  4449                           
  4450                           ; BSR set to: 0
  4451  00129C  079E               	decf	___ftadd@sign& (0+255),f,b
  4452  00129E  C09E  F09B         	movff	___ftadd@sign,??___ftadd
  4453  0012A2  0E07               	movlw	7
  4454  0012A4  179B               	andwf	??___ftadd& (0+255),f,b
  4455  0012A6  B4D8               	btfsc	status,2,c
  4456  0012A8  D006               	goto	l670
  4457  0012AA  D7EF               	goto	u2930
  4458  0012AC                     
  4459                           ; BSR set to: 0
  4460                           
  4461                           ; BSR set to: 0
  4462  0012AC  90D8               	bcf	status,0,c
  4463  0012AE  3397               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  4464  0012B0  3396               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  4465  0012B2  3395               	rrcf	___ftadd@f1& (0+255),f,b
  4466  0012B4  2BA0               	incf	___ftadd@exp1& (0+255),f,b
  4467  0012B6                     l670:
  4468                           
  4469                           ; BSR set to: 0
  4470                           
  4471                           ; BSR set to: 0
  4472  0012B6  519F               	movf	___ftadd@exp2& (0+255),w,b
  4473  0012B8  19A0               	xorwf	___ftadd@exp1& (0+255),w,b
  4474  0012BA  B4D8               	btfsc	status,2,c
  4475  0012BC  D01F               	goto	u3000
  4476  0012BE  D7F6               	goto	l671
  4477  0012C0                     l665:
  4478                           
  4479                           ; BSR set to: 0
  4480                           
  4481                           ; BSR set to: 0
  4482  0012C0  51A0               	movf	___ftadd@exp1& (0+255),w,b
  4483  0012C2  5D9F               	subwf	___ftadd@exp2& (0+255),w,b
  4484  0012C4  B0D8               	btfsc	status,0,c
  4485  0012C6  D01A               	goto	u3000
  4486  0012C8                     u2970:
  4487                           
  4488                           ; BSR set to: 0
  4489                           
  4490                           ; BSR set to: 0
  4491  0012C8  90D8               	bcf	status,0,c
  4492  0012CA  3795               	rlcf	___ftadd@f1& (0+255),f,b
  4493  0012CC  3796               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  4494  0012CE  3797               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  4495  0012D0  07A0               	decf	___ftadd@exp1& (0+255),f,b
  4496                           
  4497                           ; BSR set to: 0
  4498  0012D2  51A0               	movf	___ftadd@exp1& (0+255),w,b
  4499  0012D4  199F               	xorwf	___ftadd@exp2& (0+255),w,b
  4500  0012D6  B4D8               	btfsc	status,2,c
  4501  0012D8  D00D               	goto	l679
  4502                           
  4503                           ; BSR set to: 0
  4504  0012DA  079E               	decf	___ftadd@sign& (0+255),f,b
  4505  0012DC  C09E  F09B         	movff	___ftadd@sign,??___ftadd
  4506  0012E0  0E07               	movlw	7
  4507  0012E2  179B               	andwf	??___ftadd& (0+255),f,b
  4508  0012E4  B4D8               	btfsc	status,2,c
  4509  0012E6  D006               	goto	l679
  4510  0012E8  D7EF               	goto	u2970
  4511  0012EA                     
  4512                           ; BSR set to: 0
  4513                           
  4514                           ; BSR set to: 0
  4515  0012EA  90D8               	bcf	status,0,c
  4516  0012EC  339A               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  4517  0012EE  3399               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  4518  0012F0  3398               	rrcf	___ftadd@f2& (0+255),f,b
  4519  0012F2  2B9F               	incf	___ftadd@exp2& (0+255),f,b
  4520  0012F4                     l679:
  4521                           
  4522                           ; BSR set to: 0
  4523                           
  4524                           ; BSR set to: 0
  4525  0012F4  519F               	movf	___ftadd@exp2& (0+255),w,b
  4526  0012F6  19A0               	xorwf	___ftadd@exp1& (0+255),w,b
  4527  0012F8  A4D8               	btfss	status,2,c
  4528  0012FA  D7F7               	goto	l680
  4529  0012FC                     u3000:
  4530                           
  4531                           ; BSR set to: 0
  4532                           
  4533                           ; BSR set to: 0
  4534                           
  4535                           ; BSR set to: 0
  4536  0012FC  AF9E               	btfss	___ftadd@sign& (0+255),7,b
  4537  0012FE  D00C               	goto	l682
  4538                           
  4539                           ; BSR set to: 0
  4540  001300  0EFF               	movlw	255
  4541  001302  1B95               	xorwf	___ftadd@f1& (0+255),f,b
  4542  001304  0EFF               	movlw	255
  4543  001306  1B96               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  4544  001308  0EFF               	movlw	255
  4545  00130A  1B97               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  4546  00130C  0E01               	movlw	1
  4547  00130E  2795               	addwf	___ftadd@f1& (0+255),f,b
  4548  001310  0E00               	movlw	0
  4549  001312  2396               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  4550  001314  0E00               	movlw	0
  4551  001316  2397               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  4552  001318                     l682:
  4553                           
  4554                           ; BSR set to: 0
  4555  001318  AD9E               	btfss	___ftadd@sign& (0+255),6,b
  4556  00131A  D00C               	goto	l683
  4557                           
  4558                           ; BSR set to: 0
  4559  00131C  0EFF               	movlw	255
  4560  00131E  1B98               	xorwf	___ftadd@f2& (0+255),f,b
  4561  001320  0EFF               	movlw	255
  4562  001322  1B99               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  4563  001324  0EFF               	movlw	255
  4564  001326  1B9A               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  4565  001328  0E01               	movlw	1
  4566  00132A  2798               	addwf	___ftadd@f2& (0+255),f,b
  4567  00132C  0E00               	movlw	0
  4568  00132E  2399               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  4569  001330  0E00               	movlw	0
  4570  001332  239A               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  4571  001334                     l683:
  4572                           
  4573                           ; BSR set to: 0
  4574                           
  4575                           ; BSR set to: 0
  4576  001334  0E00               	movlw	0
  4577  001336  6F9E               	movwf	___ftadd@sign& (0+255),b
  4578                           
  4579                           ; BSR set to: 0
  4580  001338  5195               	movf	___ftadd@f1& (0+255),w,b
  4581  00133A  2798               	addwf	___ftadd@f2& (0+255),f,b
  4582  00133C  5196               	movf	(___ftadd@f1+1)& (0+255),w,b
  4583  00133E  2399               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  4584  001340  5197               	movf	(___ftadd@f1+2)& (0+255),w,b
  4585  001342  239A               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  4586                           
  4587                           ; BSR set to: 0
  4588  001344  AF9A               	btfss	(___ftadd@f2+2)& (0+255),7,b
  4589  001346  D00E               	goto	l684
  4590                           
  4591                           ; BSR set to: 0
  4592  001348  0EFF               	movlw	255
  4593  00134A  1B98               	xorwf	___ftadd@f2& (0+255),f,b
  4594  00134C  0EFF               	movlw	255
  4595  00134E  1B99               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  4596  001350  0EFF               	movlw	255
  4597  001352  1B9A               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  4598  001354  0E01               	movlw	1
  4599  001356  2798               	addwf	___ftadd@f2& (0+255),f,b
  4600  001358  0E00               	movlw	0
  4601  00135A  2399               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  4602  00135C  0E00               	movlw	0
  4603  00135E  239A               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  4604                           
  4605                           ; BSR set to: 0
  4606  001360  0E01               	movlw	1
  4607  001362  6F9E               	movwf	___ftadd@sign& (0+255),b
  4608  001364                     l684:
  4609                           
  4610                           ; BSR set to: 0
  4611                           
  4612                           ; BSR set to: 0
  4613  001364  C098  F020         	movff	___ftadd@f2,___ftpack@arg
  4614  001368  C099  F021         	movff	___ftadd@f2+1,___ftpack@arg+1
  4615  00136C  C09A  F022         	movff	___ftadd@f2+2,___ftpack@arg+2
  4616  001370  C0A0  F023         	movff	___ftadd@exp1,___ftpack@exp
  4617  001374  C09E  F024         	movff	___ftadd@sign,___ftpack@sign
  4618  001378  EC6E  F00C         	call	___ftpack	;wreg free
  4619  00137C  C020  F095         	movff	?___ftpack,?___ftadd
  4620  001380  C021  F096         	movff	?___ftpack+1,?___ftadd+1
  4621  001384  C022  F097         	movff	?___ftpack+2,?___ftadd+2
  4622  001388  0012               	return	
  4623  00138A                     __end_of___ftadd:
  4624                           	opt stack 0
  4625                           tblptru	equ	0xFF8
  4626                           tblptrh	equ	0xFF7
  4627                           tblptrl	equ	0xFF6
  4628                           tablat	equ	0xFF5
  4629                           prodh	equ	0xFF4
  4630                           prodl	equ	0xFF3
  4631                           intcon	equ	0xFF2
  4632                           postinc0	equ	0xFEE
  4633                           wreg	equ	0xFE8
  4634                           indf1	equ	0xFE7
  4635                           postdec1	equ	0xFE5
  4636                           fsr1h	equ	0xFE2
  4637                           fsr1l	equ	0xFE1
  4638                           indf2	equ	0xFDF
  4639                           postinc2	equ	0xFDE
  4640                           postdec2	equ	0xFDD
  4641                           fsr2h	equ	0xFDA
  4642                           fsr2l	equ	0xFD9
  4643                           status	equ	0xFD8
  4644                           
  4645 ;; *************** function ___ftneg *****************
  4646 ;; Defined at:
  4647 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  4648 ;; Parameters:    Size  Location     Type
  4649 ;;  f1              3    3[BANK0 ] float 
  4650 ;; Auto vars:     Size  Location     Type
  4651 ;;		None
  4652 ;; Return value:  Size  Location     Type
  4653 ;;                  3    3[BANK0 ] float 
  4654 ;; Registers used:
  4655 ;;		wreg, status,2, status,0
  4656 ;; Tracked objects:
  4657 ;;		On entry : 0/0
  4658 ;;		On exit  : 0/0
  4659 ;;		Unchanged: 0/0
  4660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4661 ;;      Params:         0       3       0       0       0       0       0
  4662 ;;      Locals:         0       0       0       0       0       0       0
  4663 ;;      Temps:          0       0       0       0       0       0       0
  4664 ;;      Totals:         0       3       0       0       0       0       0
  4665 ;;Total ram usage:        3 bytes
  4666 ;; Hardware stack levels used:    1
  4667 ;; Hardware stack levels required when called:    2
  4668 ;; This function calls:
  4669 ;;		Nothing
  4670 ;; This function is called by:
  4671 ;;		_main
  4672 ;;		_exp
  4673 ;; This function uses a non-reentrant model
  4674 ;;
  4675                           
  4676                           	psect	text13
  4677  001E50                     __ptext13:
  4678                           	opt stack 0
  4679  001E50                     ___ftneg:
  4680                           	opt stack 27
  4681                           
  4682                           ;incstack = 0
  4683  001E50  0100               	movlb	0	; () banked
  4684  001E52  5183               	movf	___ftneg@f1& (0+255),w,b
  4685  001E54  1184               	iorwf	(___ftneg@f1+1)& (0+255),w,b
  4686  001E56  1185               	iorwf	(___ftneg@f1+2)& (0+255),w,b
  4687  001E58  B4D8               	btfsc	status,2,c
  4688  001E5A  D006               	goto	l715
  4689                           
  4690                           ; BSR set to: 0
  4691  001E5C  0E00               	movlw	0
  4692  001E5E  1B83               	xorwf	___ftneg@f1& (0+255),f,b
  4693  001E60  0E00               	movlw	0
  4694  001E62  1B84               	xorwf	(___ftneg@f1+1)& (0+255),f,b
  4695  001E64  0E80               	movlw	128
  4696  001E66  1B85               	xorwf	(___ftneg@f1+2)& (0+255),f,b
  4697  001E68                     l715:
  4698                           
  4699                           ; BSR set to: 0
  4700  001E68  C083  F083         	movff	___ftneg@f1,?___ftneg
  4701  001E6C  C084  F084         	movff	___ftneg@f1+1,?___ftneg+1
  4702  001E70  C085  F085         	movff	___ftneg@f1+2,?___ftneg+2
  4703                           
  4704                           ; BSR set to: 0
  4705  001E74  0012               	return		;funcret
  4706  001E76                     __end_of___ftneg:
  4707                           	opt stack 0
  4708                           tblptru	equ	0xFF8
  4709                           tblptrh	equ	0xFF7
  4710                           tblptrl	equ	0xFF6
  4711                           tablat	equ	0xFF5
  4712                           prodh	equ	0xFF4
  4713                           prodl	equ	0xFF3
  4714                           intcon	equ	0xFF2
  4715                           postinc0	equ	0xFEE
  4716                           wreg	equ	0xFE8
  4717                           indf1	equ	0xFE7
  4718                           postdec1	equ	0xFE5
  4719                           fsr1h	equ	0xFE2
  4720                           fsr1l	equ	0xFE1
  4721                           indf2	equ	0xFDF
  4722                           postinc2	equ	0xFDE
  4723                           postdec2	equ	0xFDD
  4724                           fsr2h	equ	0xFDA
  4725                           fsr2l	equ	0xFD9
  4726                           status	equ	0xFD8
  4727                           
  4728 ;; *************** function ___ftdiv *****************
  4729 ;; Defined at:
  4730 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  4731 ;; Parameters:    Size  Location     Type
  4732 ;;  f1              3   39[COMRAM] float 
  4733 ;;  f2              3   42[COMRAM] float 
  4734 ;; Auto vars:     Size  Location     Type
  4735 ;;  f3              3   49[COMRAM] float 
  4736 ;;  sign            1   53[COMRAM] unsigned char 
  4737 ;;  exp             1   52[COMRAM] unsigned char 
  4738 ;;  cntr            1   48[COMRAM] unsigned char 
  4739 ;; Return value:  Size  Location     Type
  4740 ;;                  3   39[COMRAM] float 
  4741 ;; Registers used:
  4742 ;;		wreg, status,2, status,0, cstack
  4743 ;; Tracked objects:
  4744 ;;		On entry : 0/0
  4745 ;;		On exit  : 0/0
  4746 ;;		Unchanged: 0/0
  4747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4748 ;;      Params:         6       0       0       0       0       0       0
  4749 ;;      Locals:         6       0       0       0       0       0       0
  4750 ;;      Temps:          3       0       0       0       0       0       0
  4751 ;;      Totals:        15       0       0       0       0       0       0
  4752 ;;Total ram usage:       15 bytes
  4753 ;; Hardware stack levels used:    1
  4754 ;; Hardware stack levels required when called:    3
  4755 ;; This function calls:
  4756 ;;		___ftpack
  4757 ;; This function is called by:
  4758 ;;		_main
  4759 ;;		_exp
  4760 ;; This function uses a non-reentrant model
  4761 ;;
  4762                           
  4763                           	psect	text14
  4764  001574                     __ptext14:
  4765                           	opt stack 0
  4766  001574                     ___ftdiv:
  4767                           	opt stack 26
  4768                           
  4769                           ; BSR set to: 0
  4770                           ;incstack = 0
  4771  001574  C02A  F02E         	movff	___ftdiv@f1+2,??___ftdiv
  4772  001578  6A2F               	clrf	(??___ftdiv+1)& (0+255),c
  4773  00157A  6A30               	clrf	(??___ftdiv+2)& (0+255),c
  4774  00157C  3429               	rlcf	___ftdiv@f1+1,w,c
  4775  00157E  362E               	rlcf	??___ftdiv& (0+255),f,c
  4776  001580  E301               	bnc	u3101
  4777  001582  802F               	bsf	(??___ftdiv+1)& (0+255),0,c
  4778  001584                     u3101:
  4779  001584  502E               	movf	??___ftdiv,w,c
  4780  001586  6E35               	movwf	___ftdiv@exp,c
  4781  001588  5035               	movf	___ftdiv@exp,w,c
  4782  00158A  A4D8               	btfss	status,2,c
  4783  00158C  D007               	goto	l689
  4784  00158E  0E00               	movlw	0
  4785  001590  6E28               	movwf	?___ftdiv,c
  4786  001592  0E00               	movlw	0
  4787  001594  6E29               	movwf	?___ftdiv+1,c
  4788  001596  0E00               	movlw	0
  4789  001598  6E2A               	movwf	?___ftdiv+2,c
  4790  00159A  0012               	return	
  4791  00159C                     l689:
  4792  00159C  C02D  F02E         	movff	___ftdiv@f2+2,??___ftdiv
  4793  0015A0  6A2F               	clrf	(??___ftdiv+1)& (0+255),c
  4794  0015A2  6A30               	clrf	(??___ftdiv+2)& (0+255),c
  4795  0015A4  342C               	rlcf	___ftdiv@f2+1,w,c
  4796  0015A6  362E               	rlcf	??___ftdiv& (0+255),f,c
  4797  0015A8  E301               	bnc	u3121
  4798  0015AA  802F               	bsf	(??___ftdiv+1)& (0+255),0,c
  4799  0015AC                     u3121:
  4800  0015AC  502E               	movf	??___ftdiv,w,c
  4801  0015AE  6E36               	movwf	___ftdiv@sign,c
  4802  0015B0  5036               	movf	___ftdiv@sign,w,c
  4803  0015B2  A4D8               	btfss	status,2,c
  4804  0015B4  D007               	goto	l691
  4805  0015B6  0E00               	movlw	0
  4806  0015B8  6E28               	movwf	?___ftdiv,c
  4807  0015BA  0E00               	movlw	0
  4808  0015BC  6E29               	movwf	?___ftdiv+1,c
  4809  0015BE  0E00               	movlw	0
  4810  0015C0  6E2A               	movwf	?___ftdiv+2,c
  4811  0015C2  0012               	return	
  4812  0015C4                     l691:
  4813  0015C4  0E00               	movlw	0
  4814  0015C6  6E32               	movwf	___ftdiv@f3,c
  4815  0015C8  0E00               	movlw	0
  4816  0015CA  6E33               	movwf	___ftdiv@f3+1,c
  4817  0015CC  0E00               	movlw	0
  4818  0015CE  6E34               	movwf	___ftdiv@f3+2,c
  4819  0015D0  5036               	movf	___ftdiv@sign,w,c
  4820  0015D2  0F89               	addlw	137
  4821  0015D4  5E35               	subwf	___ftdiv@exp,f,c
  4822  0015D6  C02A  F036         	movff	___ftdiv@f1+2,___ftdiv@sign
  4823  0015DA  502D               	movf	___ftdiv@f2+2,w,c
  4824  0015DC  1A36               	xorwf	___ftdiv@sign,f,c
  4825  0015DE  0E80               	movlw	128
  4826  0015E0  1636               	andwf	___ftdiv@sign,f,c
  4827  0015E2  8E29               	bsf	___ftdiv@f1+1,7,c
  4828  0015E4  0EFF               	movlw	255
  4829  0015E6  1628               	andwf	___ftdiv@f1,f,c
  4830  0015E8  0EFF               	movlw	255
  4831  0015EA  1629               	andwf	___ftdiv@f1+1,f,c
  4832  0015EC  0E00               	movlw	0
  4833  0015EE  162A               	andwf	___ftdiv@f1+2,f,c
  4834  0015F0  8E2C               	bsf	___ftdiv@f2+1,7,c
  4835  0015F2  0EFF               	movlw	255
  4836  0015F4  162B               	andwf	___ftdiv@f2,f,c
  4837  0015F6  0EFF               	movlw	255
  4838  0015F8  162C               	andwf	___ftdiv@f2+1,f,c
  4839  0015FA  0E00               	movlw	0
  4840  0015FC  162D               	andwf	___ftdiv@f2+2,f,c
  4841  0015FE  0E18               	movlw	24
  4842  001600  6E31               	movwf	___ftdiv@cntr,c
  4843  001602  90D8               	bcf	status,0,c
  4844  001604  3632               	rlcf	___ftdiv@f3,f,c
  4845  001606  3633               	rlcf	___ftdiv@f3+1,f,c
  4846  001608  3634               	rlcf	___ftdiv@f3+2,f,c
  4847  00160A  502B               	movf	___ftdiv@f2,w,c
  4848  00160C  5C28               	subwf	___ftdiv@f1,w,c
  4849  00160E  502C               	movf	___ftdiv@f2+1,w,c
  4850  001610  5829               	subwfb	___ftdiv@f1+1,w,c
  4851  001612  502D               	movf	___ftdiv@f2+2,w,c
  4852  001614  582A               	subwfb	___ftdiv@f1+2,w,c
  4853  001616  A0D8               	btfss	status,0,c
  4854  001618  D007               	goto	l693
  4855  00161A  502B               	movf	___ftdiv@f2,w,c
  4856  00161C  5E28               	subwf	___ftdiv@f1,f,c
  4857  00161E  502C               	movf	___ftdiv@f2+1,w,c
  4858  001620  5A29               	subwfb	___ftdiv@f1+1,f,c
  4859  001622  502D               	movf	___ftdiv@f2+2,w,c
  4860  001624  5A2A               	subwfb	___ftdiv@f1+2,f,c
  4861  001626  8032               	bsf	___ftdiv@f3,0,c
  4862  001628                     l693:
  4863  001628  90D8               	bcf	status,0,c
  4864  00162A  3628               	rlcf	___ftdiv@f1,f,c
  4865  00162C  3629               	rlcf	___ftdiv@f1+1,f,c
  4866  00162E  362A               	rlcf	___ftdiv@f1+2,f,c
  4867  001630  2E31               	decfsz	___ftdiv@cntr,f,c
  4868  001632  D7E7               	goto	l692
  4869  001634  C032  F020         	movff	___ftdiv@f3,___ftpack@arg
  4870  001638  C033  F021         	movff	___ftdiv@f3+1,___ftpack@arg+1
  4871  00163C  C034  F022         	movff	___ftdiv@f3+2,___ftpack@arg+2
  4872  001640  C035  F023         	movff	___ftdiv@exp,___ftpack@exp
  4873  001644  C036  F024         	movff	___ftdiv@sign,___ftpack@sign
  4874  001648  EC6E  F00C         	call	___ftpack	;wreg free
  4875  00164C  C020  F028         	movff	?___ftpack,?___ftdiv
  4876  001650  C021  F029         	movff	?___ftpack+1,?___ftdiv+1
  4877  001654  C022  F02A         	movff	?___ftpack+2,?___ftdiv+2
  4878  001658  0012               	return	
  4879  00165A                     __end_of___ftdiv:
  4880                           	opt stack 0
  4881                           tblptru	equ	0xFF8
  4882                           tblptrh	equ	0xFF7
  4883                           tblptrl	equ	0xFF6
  4884                           tablat	equ	0xFF5
  4885                           prodh	equ	0xFF4
  4886                           prodl	equ	0xFF3
  4887                           intcon	equ	0xFF2
  4888                           postinc0	equ	0xFEE
  4889                           wreg	equ	0xFE8
  4890                           indf1	equ	0xFE7
  4891                           postdec1	equ	0xFE5
  4892                           fsr1h	equ	0xFE2
  4893                           fsr1l	equ	0xFE1
  4894                           indf2	equ	0xFDF
  4895                           postinc2	equ	0xFDE
  4896                           postdec2	equ	0xFDD
  4897                           fsr2h	equ	0xFDA
  4898                           fsr2l	equ	0xFD9
  4899                           status	equ	0xFD8
  4900                           
  4901 ;; *************** function ___awtoft *****************
  4902 ;; Defined at:
  4903 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  4904 ;; Parameters:    Size  Location     Type
  4905 ;;  c               2    0[BANK0 ] int 
  4906 ;; Auto vars:     Size  Location     Type
  4907 ;;  sign            1   69[COMRAM] unsigned char 
  4908 ;; Return value:  Size  Location     Type
  4909 ;;                  3    0[BANK0 ] float 
  4910 ;; Registers used:
  4911 ;;		wreg, status,2, status,0, cstack
  4912 ;; Tracked objects:
  4913 ;;		On entry : 0/0
  4914 ;;		On exit  : 0/0
  4915 ;;		Unchanged: 0/0
  4916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4917 ;;      Params:         0       3       0       0       0       0       0
  4918 ;;      Locals:         1       0       0       0       0       0       0
  4919 ;;      Temps:          0       0       0       0       0       0       0
  4920 ;;      Totals:         1       3       0       0       0       0       0
  4921 ;;Total ram usage:        4 bytes
  4922 ;; Hardware stack levels used:    1
  4923 ;; Hardware stack levels required when called:    3
  4924 ;; This function calls:
  4925 ;;		___ftpack
  4926 ;; This function is called by:
  4927 ;;		_main
  4928 ;;		_exp
  4929 ;; This function uses a non-reentrant model
  4930 ;;
  4931                           
  4932                           	psect	text15
  4933  001CB4                     __ptext15:
  4934                           	opt stack 0
  4935  001CB4                     ___awtoft:
  4936                           	opt stack 26
  4937                           
  4938                           ;incstack = 0
  4939  001CB4  0E00               	movlw	0
  4940  001CB6  6E46               	movwf	___awtoft@sign,c
  4941  001CB8  0100               	movlb	0	; () banked
  4942  001CBA  AF81               	btfss	(___awtoft@c+1)& (0+255),7,b
  4943  001CBC  D006               	goto	l562
  4944                           
  4945                           ; BSR set to: 0
  4946  001CBE  6D80               	negf	___awtoft@c& (0+255),b
  4947  001CC0  1F81               	comf	(___awtoft@c+1)& (0+255),f,b
  4948  001CC2  B0D8               	btfsc	status,0,c
  4949  001CC4  2B81               	incf	(___awtoft@c+1)& (0+255),f,b
  4950                           
  4951                           ; BSR set to: 0
  4952  001CC6  0E01               	movlw	1
  4953  001CC8  6E46               	movwf	___awtoft@sign,c
  4954  001CCA                     l562:
  4955                           
  4956                           ; BSR set to: 0
  4957                           
  4958                           ; BSR set to: 0
  4959  001CCA  C080  F020         	movff	___awtoft@c,___ftpack@arg
  4960  001CCE  C081  F021         	movff	___awtoft@c+1,___ftpack@arg+1
  4961  001CD2  6A22               	clrf	___ftpack@arg+2,c
  4962  001CD4  0E8E               	movlw	142
  4963  001CD6  6E23               	movwf	___ftpack@exp,c
  4964  001CD8  C046  F024         	movff	___awtoft@sign,___ftpack@sign
  4965  001CDC  EC6E  F00C         	call	___ftpack	;wreg free
  4966  001CE0  C020  F080         	movff	?___ftpack,?___awtoft
  4967  001CE4  C021  F081         	movff	?___ftpack+1,?___awtoft+1
  4968  001CE8  C022  F082         	movff	?___ftpack+2,?___awtoft+2
  4969  001CEC  0012               	return	
  4970  001CEE                     __end_of___awtoft:
  4971                           	opt stack 0
  4972                           tblptru	equ	0xFF8
  4973                           tblptrh	equ	0xFF7
  4974                           tblptrl	equ	0xFF6
  4975                           tablat	equ	0xFF5
  4976                           prodh	equ	0xFF4
  4977                           prodl	equ	0xFF3
  4978                           intcon	equ	0xFF2
  4979                           postinc0	equ	0xFEE
  4980                           wreg	equ	0xFE8
  4981                           indf1	equ	0xFE7
  4982                           postdec1	equ	0xFE5
  4983                           fsr1h	equ	0xFE2
  4984                           fsr1l	equ	0xFE1
  4985                           indf2	equ	0xFDF
  4986                           postinc2	equ	0xFDE
  4987                           postdec2	equ	0xFDD
  4988                           fsr2h	equ	0xFDA
  4989                           fsr2l	equ	0xFD9
  4990                           status	equ	0xFD8
  4991                           
  4992 ;; *************** function ___lwtoft *****************
  4993 ;; Defined at:
  4994 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
  4995 ;; Parameters:    Size  Location     Type
  4996 ;;  c               2   39[COMRAM] unsigned int 
  4997 ;; Auto vars:     Size  Location     Type
  4998 ;;		None
  4999 ;; Return value:  Size  Location     Type
  5000 ;;                  3   39[COMRAM] float 
  5001 ;; Registers used:
  5002 ;;		wreg, status,2, status,0, cstack
  5003 ;; Tracked objects:
  5004 ;;		On entry : 0/0
  5005 ;;		On exit  : 0/0
  5006 ;;		Unchanged: 0/0
  5007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5008 ;;      Params:         3       0       0       0       0       0       0
  5009 ;;      Locals:         0       0       0       0       0       0       0
  5010 ;;      Temps:          0       0       0       0       0       0       0
  5011 ;;      Totals:         3       0       0       0       0       0       0
  5012 ;;Total ram usage:        3 bytes
  5013 ;; Hardware stack levels used:    1
  5014 ;; Hardware stack levels required when called:    3
  5015 ;; This function calls:
  5016 ;;		___ftpack
  5017 ;; This function is called by:
  5018 ;;		_main
  5019 ;; This function uses a non-reentrant model
  5020 ;;
  5021                           
  5022                           	psect	text16
  5023  001E76                     __ptext16:
  5024                           	opt stack 0
  5025  001E76                     ___lwtoft:
  5026                           	opt stack 27
  5027                           
  5028                           ;incstack = 0
  5029  001E76  C028  F020         	movff	___lwtoft@c,___ftpack@arg
  5030  001E7A  C029  F021         	movff	___lwtoft@c+1,___ftpack@arg+1
  5031  001E7E  6A22               	clrf	___ftpack@arg+2,c
  5032  001E80  0E8E               	movlw	142
  5033  001E82  6E23               	movwf	___ftpack@exp,c
  5034  001E84  0E00               	movlw	0
  5035  001E86  6E24               	movwf	___ftpack@sign,c
  5036  001E88  EC6E  F00C         	call	___ftpack	;wreg free
  5037  001E8C  C020  F028         	movff	?___ftpack,?___lwtoft
  5038  001E90  C021  F029         	movff	?___ftpack+1,?___lwtoft+1
  5039  001E94  C022  F02A         	movff	?___ftpack+2,?___lwtoft+2
  5040  001E98  0012               	return	
  5041  001E9A                     __end_of___lwtoft:
  5042                           	opt stack 0
  5043                           tblptru	equ	0xFF8
  5044                           tblptrh	equ	0xFF7
  5045                           tblptrl	equ	0xFF6
  5046                           tablat	equ	0xFF5
  5047                           prodh	equ	0xFF4
  5048                           prodl	equ	0xFF3
  5049                           intcon	equ	0xFF2
  5050                           postinc0	equ	0xFEE
  5051                           wreg	equ	0xFE8
  5052                           indf1	equ	0xFE7
  5053                           postdec1	equ	0xFE5
  5054                           fsr1h	equ	0xFE2
  5055                           fsr1l	equ	0xFE1
  5056                           indf2	equ	0xFDF
  5057                           postinc2	equ	0xFDE
  5058                           postdec2	equ	0xFDD
  5059                           fsr2h	equ	0xFDA
  5060                           fsr2l	equ	0xFD9
  5061                           status	equ	0xFD8
  5062                           
  5063 ;; *************** function ___ftpack *****************
  5064 ;; Defined at:
  5065 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  5066 ;; Parameters:    Size  Location     Type
  5067 ;;  arg             3   31[COMRAM] unsigned um
  5068 ;;  exp             1   34[COMRAM] unsigned char 
  5069 ;;  sign            1   35[COMRAM] unsigned char 
  5070 ;; Auto vars:     Size  Location     Type
  5071 ;;		None
  5072 ;; Return value:  Size  Location     Type
  5073 ;;                  3   31[COMRAM] float 
  5074 ;; Registers used:
  5075 ;;		wreg, status,2, status,0
  5076 ;; Tracked objects:
  5077 ;;		On entry : 0/0
  5078 ;;		On exit  : 0/0
  5079 ;;		Unchanged: 0/0
  5080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5081 ;;      Params:         5       0       0       0       0       0       0
  5082 ;;      Locals:         0       0       0       0       0       0       0
  5083 ;;      Temps:          3       0       0       0       0       0       0
  5084 ;;      Totals:         8       0       0       0       0       0       0
  5085 ;;Total ram usage:        8 bytes
  5086 ;; Hardware stack levels used:    1
  5087 ;; Hardware stack levels required when called:    2
  5088 ;; This function calls:
  5089 ;;		Nothing
  5090 ;; This function is called by:
  5091 ;;		___altoft
  5092 ;;		___awtoft
  5093 ;;		___ftadd
  5094 ;;		___ftdiv
  5095 ;;		___ftmul
  5096 ;;		___lwtoft
  5097 ;; This function uses a non-reentrant model
  5098 ;;
  5099                           
  5100                           	psect	text17
  5101  0018DC                     __ptext17:
  5102                           	opt stack 0
  5103  0018DC                     ___ftpack:
  5104                           	opt stack 25
  5105                           
  5106                           ;incstack = 0
  5107  0018DC  5023               	movf	___ftpack@exp,w,c
  5108  0018DE  B4D8               	btfsc	status,2,c
  5109  0018E0  D005               	goto	u2740
  5110  0018E2  5020               	movf	___ftpack@arg,w,c
  5111  0018E4  1021               	iorwf	___ftpack@arg+1,w,c
  5112  0018E6  1022               	iorwf	___ftpack@arg+2,w,c
  5113  0018E8  A4D8               	btfss	status,2,c
  5114  0018EA  D00C               	goto	l600
  5115  0018EC                     u2740:
  5116  0018EC  0E00               	movlw	0
  5117  0018EE  6E20               	movwf	?___ftpack,c
  5118  0018F0  0E00               	movlw	0
  5119  0018F2  6E21               	movwf	?___ftpack+1,c
  5120  0018F4  0E00               	movlw	0
  5121  0018F6  6E22               	movwf	?___ftpack+2,c
  5122  0018F8  0012               	return	
  5123  0018FA  2A23               	incf	___ftpack@exp,f,c
  5124  0018FC  90D8               	bcf	status,0,c
  5125  0018FE  3222               	rrcf	___ftpack@arg+2,f,c
  5126  001900  3221               	rrcf	___ftpack@arg+1,f,c
  5127  001902  3220               	rrcf	___ftpack@arg,f,c
  5128  001904                     l600:
  5129  001904  0E00               	movlw	0
  5130  001906  1420               	andwf	___ftpack@arg,w,c
  5131  001908  6E25               	movwf	??___ftpack& (0+255),c
  5132  00190A  0E00               	movlw	0
  5133  00190C  1421               	andwf	___ftpack@arg+1,w,c
  5134  00190E  6E26               	movwf	(??___ftpack+1)& (0+255),c
  5135  001910  0EFE               	movlw	254
  5136  001912  1422               	andwf	___ftpack@arg+2,w,c
  5137  001914  6E27               	movwf	(??___ftpack+2)& (0+255),c
  5138  001916  5025               	movf	??___ftpack,w,c
  5139  001918  1026               	iorwf	??___ftpack+1,w,c
  5140  00191A  1027               	iorwf	??___ftpack+2,w,c
  5141  00191C  B4D8               	btfsc	status,2,c
  5142  00191E  D00C               	goto	l603
  5143  001920  D7EC               	goto	l601
  5144  001922  2A23               	incf	___ftpack@exp,f,c
  5145  001924  0E01               	movlw	1
  5146  001926  2620               	addwf	___ftpack@arg,f,c
  5147  001928  0E00               	movlw	0
  5148  00192A  2221               	addwfc	___ftpack@arg+1,f,c
  5149  00192C  0E00               	movlw	0
  5150  00192E  2222               	addwfc	___ftpack@arg+2,f,c
  5151  001930  90D8               	bcf	status,0,c
  5152  001932  3222               	rrcf	___ftpack@arg+2,f,c
  5153  001934  3221               	rrcf	___ftpack@arg+1,f,c
  5154  001936  3220               	rrcf	___ftpack@arg,f,c
  5155  001938                     l603:
  5156  001938  0E00               	movlw	0
  5157  00193A  1420               	andwf	___ftpack@arg,w,c
  5158  00193C  6E25               	movwf	??___ftpack& (0+255),c
  5159  00193E  0E00               	movlw	0
  5160  001940  1421               	andwf	___ftpack@arg+1,w,c
  5161  001942  6E26               	movwf	(??___ftpack+1)& (0+255),c
  5162  001944  0EFF               	movlw	255
  5163  001946  1422               	andwf	___ftpack@arg+2,w,c
  5164  001948  6E27               	movwf	(??___ftpack+2)& (0+255),c
  5165  00194A  5025               	movf	??___ftpack,w,c
  5166  00194C  1026               	iorwf	??___ftpack+1,w,c
  5167  00194E  1027               	iorwf	??___ftpack+2,w,c
  5168  001950  B4D8               	btfsc	status,2,c
  5169  001952  D006               	goto	l606
  5170  001954  D7E6               	goto	l604
  5171  001956  0623               	decf	___ftpack@exp,f,c
  5172  001958  90D8               	bcf	status,0,c
  5173  00195A  3620               	rlcf	___ftpack@arg,f,c
  5174  00195C  3621               	rlcf	___ftpack@arg+1,f,c
  5175  00195E  3622               	rlcf	___ftpack@arg+2,f,c
  5176  001960                     l606:
  5177  001960  BE21               	btfsc	___ftpack@arg+1,7,c
  5178  001962  D003               	goto	u2780
  5179  001964  0E02               	movlw	2
  5180  001966  6023               	cpfslt	___ftpack@exp,c
  5181  001968  D7F6               	goto	l607
  5182  00196A                     u2780:
  5183  00196A  A023               	btfss	___ftpack@exp,0,c
  5184  00196C  9E21               	bcf	___ftpack@arg+1,7,c
  5185  00196E  90D8               	bcf	status,0,c
  5186  001970  3223               	rrcf	___ftpack@exp,f,c
  5187  001972  5023               	movf	___ftpack@exp,w,c
  5188  001974  1222               	iorwf	___ftpack@arg+2,f,c
  5189  001976  5024               	movf	___ftpack@sign,w,c
  5190  001978  A4D8               	btfss	status,2,c
  5191  00197A  8E22               	bsf	___ftpack@arg+2,7,c
  5192  00197C  C020  F020         	movff	___ftpack@arg,?___ftpack
  5193  001980  C021  F021         	movff	___ftpack@arg+1,?___ftpack+1
  5194  001984  C022  F022         	movff	___ftpack@arg+2,?___ftpack+2
  5195  001988  0012               	return	
  5196  00198A                     __end_of___ftpack:
  5197                           	opt stack 0
  5198                           tblptru	equ	0xFF8
  5199                           tblptrh	equ	0xFF7
  5200                           tblptrl	equ	0xFF6
  5201                           tablat	equ	0xFF5
  5202                           prodh	equ	0xFF4
  5203                           prodl	equ	0xFF3
  5204                           intcon	equ	0xFF2
  5205                           postinc0	equ	0xFEE
  5206                           wreg	equ	0xFE8
  5207                           indf1	equ	0xFE7
  5208                           postdec1	equ	0xFE5
  5209                           fsr1h	equ	0xFE2
  5210                           fsr1l	equ	0xFE1
  5211                           indf2	equ	0xFDF
  5212                           postinc2	equ	0xFDE
  5213                           postdec2	equ	0xFDD
  5214                           fsr2h	equ	0xFDA
  5215                           fsr2l	equ	0xFD9
  5216                           status	equ	0xFD8
  5217                           
  5218 ;; *************** function ___awdiv *****************
  5219 ;; Defined at:
  5220 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  5221 ;; Parameters:    Size  Location     Type
  5222 ;;  dividend        2   31[COMRAM] int 
  5223 ;;  divisor         2   33[COMRAM] int 
  5224 ;; Auto vars:     Size  Location     Type
  5225 ;;  quotient        2   37[COMRAM] int 
  5226 ;;  sign            1   36[COMRAM] unsigned char 
  5227 ;;  counter         1   35[COMRAM] unsigned char 
  5228 ;; Return value:  Size  Location     Type
  5229 ;;                  2   31[COMRAM] int 
  5230 ;; Registers used:
  5231 ;;		wreg, status,2, status,0
  5232 ;; Tracked objects:
  5233 ;;		On entry : 0/0
  5234 ;;		On exit  : 0/0
  5235 ;;		Unchanged: 0/0
  5236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5237 ;;      Params:         4       0       0       0       0       0       0
  5238 ;;      Locals:         4       0       0       0       0       0       0
  5239 ;;      Temps:          0       0       0       0       0       0       0
  5240 ;;      Totals:         8       0       0       0       0       0       0
  5241 ;;Total ram usage:        8 bytes
  5242 ;; Hardware stack levels used:    1
  5243 ;; Hardware stack levels required when called:    2
  5244 ;; This function calls:
  5245 ;;		Nothing
  5246 ;; This function is called by:
  5247 ;;		_main
  5248 ;; This function uses a non-reentrant model
  5249 ;;
  5250                           
  5251                           	psect	text18
  5252  001AB0                     __ptext18:
  5253                           	opt stack 0
  5254  001AB0                     ___awdiv:
  5255                           	opt stack 28
  5256                           
  5257                           ;incstack = 0
  5258  001AB0  0E00               	movlw	0
  5259  001AB2  6E25               	movwf	___awdiv@sign,c
  5260  001AB4  AE23               	btfss	___awdiv@divisor+1,7,c
  5261  001AB6  D006               	goto	l534
  5262  001AB8  6C22               	negf	___awdiv@divisor,c
  5263  001ABA  1E23               	comf	___awdiv@divisor+1,f,c
  5264  001ABC  B0D8               	btfsc	status,0,c
  5265  001ABE  2A23               	incf	___awdiv@divisor+1,f,c
  5266  001AC0  0E01               	movlw	1
  5267  001AC2  6E25               	movwf	___awdiv@sign,c
  5268  001AC4                     l534:
  5269  001AC4  AE21               	btfss	___awdiv@dividend+1,7,c
  5270  001AC6  D006               	goto	l535
  5271  001AC8  6C20               	negf	___awdiv@dividend,c
  5272  001ACA  1E21               	comf	___awdiv@dividend+1,f,c
  5273  001ACC  B0D8               	btfsc	status,0,c
  5274  001ACE  2A21               	incf	___awdiv@dividend+1,f,c
  5275  001AD0  0E01               	movlw	1
  5276  001AD2  1A25               	xorwf	___awdiv@sign,f,c
  5277  001AD4                     l535:
  5278  001AD4  0E00               	movlw	0
  5279  001AD6  6E27               	movwf	___awdiv@quotient+1,c
  5280  001AD8  0E00               	movlw	0
  5281  001ADA  6E26               	movwf	___awdiv@quotient,c
  5282  001ADC  5022               	movf	___awdiv@divisor,w,c
  5283  001ADE  1023               	iorwf	___awdiv@divisor+1,w,c
  5284  001AE0  B4D8               	btfsc	status,2,c
  5285  001AE2  D01C               	goto	l542
  5286  001AE4  0E01               	movlw	1
  5287  001AE6  6E24               	movwf	___awdiv@counter,c
  5288  001AE8  D004               	goto	l537
  5289  001AEA  90D8               	bcf	status,0,c
  5290  001AEC  3622               	rlcf	___awdiv@divisor,f,c
  5291  001AEE  3623               	rlcf	___awdiv@divisor+1,f,c
  5292  001AF0  2A24               	incf	___awdiv@counter,f,c
  5293  001AF2                     l537:
  5294  001AF2  AE23               	btfss	___awdiv@divisor+1,7,c
  5295  001AF4  D7FA               	goto	l538
  5296  001AF6                     u2230:
  5297  001AF6  90D8               	bcf	status,0,c
  5298  001AF8  3626               	rlcf	___awdiv@quotient,f,c
  5299  001AFA  3627               	rlcf	___awdiv@quotient+1,f,c
  5300  001AFC  5022               	movf	___awdiv@divisor,w,c
  5301  001AFE  5C20               	subwf	___awdiv@dividend,w,c
  5302  001B00  5023               	movf	___awdiv@divisor+1,w,c
  5303  001B02  5821               	subwfb	___awdiv@dividend+1,w,c
  5304  001B04  A0D8               	btfss	status,0,c
  5305  001B06  D005               	goto	l541
  5306  001B08  5022               	movf	___awdiv@divisor,w,c
  5307  001B0A  5E20               	subwf	___awdiv@dividend,f,c
  5308  001B0C  5023               	movf	___awdiv@divisor+1,w,c
  5309  001B0E  5A21               	subwfb	___awdiv@dividend+1,f,c
  5310  001B10  8026               	bsf	___awdiv@quotient,0,c
  5311  001B12                     l541:
  5312  001B12  90D8               	bcf	status,0,c
  5313  001B14  3223               	rrcf	___awdiv@divisor+1,f,c
  5314  001B16  3222               	rrcf	___awdiv@divisor,f,c
  5315  001B18  2E24               	decfsz	___awdiv@counter,f,c
  5316  001B1A  D7ED               	goto	u2230
  5317  001B1C                     l542:
  5318  001B1C  5025               	movf	___awdiv@sign,w,c
  5319  001B1E  B4D8               	btfsc	status,2,c
  5320  001B20  D004               	goto	l543
  5321  001B22  6C26               	negf	___awdiv@quotient,c
  5322  001B24  1E27               	comf	___awdiv@quotient+1,f,c
  5323  001B26  B0D8               	btfsc	status,0,c
  5324  001B28  2A27               	incf	___awdiv@quotient+1,f,c
  5325  001B2A                     l543:
  5326  001B2A  C026  F020         	movff	___awdiv@quotient,?___awdiv
  5327  001B2E  C027  F021         	movff	___awdiv@quotient+1,?___awdiv+1
  5328  001B32  0012               	return	
  5329  001B34                     __end_of___awdiv:
  5330                           	opt stack 0
  5331                           tblptru	equ	0xFF8
  5332                           tblptrh	equ	0xFF7
  5333                           tblptrl	equ	0xFF6
  5334                           tablat	equ	0xFF5
  5335                           prodh	equ	0xFF4
  5336                           prodl	equ	0xFF3
  5337                           intcon	equ	0xFF2
  5338                           postinc0	equ	0xFEE
  5339                           wreg	equ	0xFE8
  5340                           indf1	equ	0xFE7
  5341                           postdec1	equ	0xFE5
  5342                           fsr1h	equ	0xFE2
  5343                           fsr1l	equ	0xFE1
  5344                           indf2	equ	0xFDF
  5345                           postinc2	equ	0xFDE
  5346                           postdec2	equ	0xFDD
  5347                           fsr2h	equ	0xFDA
  5348                           fsr2l	equ	0xFD9
  5349                           status	equ	0xFD8
  5350                           
  5351 ;; *************** function _UartInit *****************
  5352 ;; Defined at:
  5353 ;;		line 438 in file "main.c"
  5354 ;; Parameters:    Size  Location     Type
  5355 ;;		None
  5356 ;; Auto vars:     Size  Location     Type
  5357 ;;		None
  5358 ;; Return value:  Size  Location     Type
  5359 ;;                  1    wreg      void 
  5360 ;; Registers used:
  5361 ;;		wreg, status,2
  5362 ;; Tracked objects:
  5363 ;;		On entry : 0/0
  5364 ;;		On exit  : 0/0
  5365 ;;		Unchanged: 0/0
  5366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5367 ;;      Params:         0       0       0       0       0       0       0
  5368 ;;      Locals:         0       0       0       0       0       0       0
  5369 ;;      Temps:          0       0       0       0       0       0       0
  5370 ;;      Totals:         0       0       0       0       0       0       0
  5371 ;;Total ram usage:        0 bytes
  5372 ;; Hardware stack levels used:    1
  5373 ;; Hardware stack levels required when called:    2
  5374 ;; This function calls:
  5375 ;;		Nothing
  5376 ;; This function is called by:
  5377 ;;		_main
  5378 ;; This function uses a non-reentrant model
  5379 ;;
  5380                           
  5381                           	psect	text19
  5382  001D56                     __ptext19:
  5383                           	opt stack 0
  5384  001D56                     _UartInit:
  5385                           	opt stack 28
  5386                           
  5387                           ;main.c: 440: TRISC6 = 0;
  5388                           
  5389                           ;incstack = 0
  5390  001D56  9C94               	bcf	3988,6,c	;volatile
  5391                           
  5392                           ;main.c: 441: TRISC7 = 1;
  5393  001D58  8E94               	bsf	3988,7,c	;volatile
  5394                           
  5395                           ;main.c: 445: TX9 = 0;
  5396  001D5A  9CAC               	bcf	4012,6,c	;volatile
  5397                           
  5398                           ;main.c: 446: SYNC = 0;
  5399  001D5C  98AC               	bcf	4012,4,c	;volatile
  5400                           
  5401                           ;main.c: 447: SENDB = 0;
  5402  001D5E  96AC               	bcf	4012,3,c	;volatile
  5403                           
  5404                           ;main.c: 448: BRGH = 0;
  5405  001D60  94AC               	bcf	4012,2,c	;volatile
  5406                           
  5407                           ;main.c: 450: RX9 = 0;
  5408  001D62  9CAB               	bcf	4011,6,c	;volatile
  5409                           
  5410                           ;main.c: 451: CREN = 1;
  5411  001D64  88AB               	bsf	4011,4,c	;volatile
  5412                           
  5413                           ;main.c: 452: FERR = 0;
  5414  001D66  94AB               	bcf	4011,2,c	;volatile
  5415                           
  5416                           ;main.c: 453: OERR = 0;
  5417  001D68  92AB               	bcf	4011,1,c	;volatile
  5418                           
  5419                           ;main.c: 454: RXDTP = 0;
  5420  001D6A  9AB8               	bcf	4024,5,c	;volatile
  5421                           
  5422                           ;main.c: 455: TXCKP = 0;
  5423  001D6C  98B8               	bcf	4024,4,c	;volatile
  5424                           
  5425                           ;main.c: 456: BRG16 = 1;
  5426  001D6E  86B8               	bsf	4024,3,c	;volatile
  5427                           
  5428                           ;main.c: 457: WUE = 0;
  5429  001D70  92B8               	bcf	4024,1,c	;volatile
  5430                           
  5431                           ;main.c: 458: ABDEN = 0;
  5432  001D72  90B8               	bcf	4024,0,c	;volatile
  5433                           
  5434                           ;main.c: 459: SPBRGH = 0;
  5435  001D74  0E00               	movlw	0
  5436  001D76  6EB0               	movwf	4016,c	;volatile
  5437                           
  5438                           ;main.c: 460: SPBRG = 16;
  5439  001D78  0E10               	movlw	16
  5440  001D7A  6EAF               	movwf	4015,c	;volatile
  5441                           
  5442                           ;main.c: 463: RCIE = 1;
  5443  001D7C  8A9D               	bsf	3997,5,c	;volatile
  5444                           
  5445                           ;main.c: 464: RCIF = 0;
  5446  001D7E  9A9E               	bcf	3998,5,c	;volatile
  5447                           
  5448                           ;main.c: 466: TXEN = 1;
  5449  001D80  8AAC               	bsf	4012,5,c	;volatile
  5450                           
  5451                           ;main.c: 467: SPEN = 1;
  5452  001D82  8EAB               	bsf	4011,7,c	;volatile
  5453  001D84  0012               	return		;funcret
  5454  001D86                     __end_of_UartInit:
  5455                           	opt stack 0
  5456                           tblptru	equ	0xFF8
  5457                           tblptrh	equ	0xFF7
  5458                           tblptrl	equ	0xFF6
  5459                           tablat	equ	0xFF5
  5460                           prodh	equ	0xFF4
  5461                           prodl	equ	0xFF3
  5462                           intcon	equ	0xFF2
  5463                           postinc0	equ	0xFEE
  5464                           wreg	equ	0xFE8
  5465                           indf1	equ	0xFE7
  5466                           postdec1	equ	0xFE5
  5467                           fsr1h	equ	0xFE2
  5468                           fsr1l	equ	0xFE1
  5469                           indf2	equ	0xFDF
  5470                           postinc2	equ	0xFDE
  5471                           postdec2	equ	0xFDD
  5472                           fsr2h	equ	0xFDA
  5473                           fsr2l	equ	0xFD9
  5474                           status	equ	0xFD8
  5475                           
  5476 ;; *************** function _SpiInit *****************
  5477 ;; Defined at:
  5478 ;;		line 415 in file "main.c"
  5479 ;; Parameters:    Size  Location     Type
  5480 ;;		None
  5481 ;; Auto vars:     Size  Location     Type
  5482 ;;		None
  5483 ;; Return value:  Size  Location     Type
  5484 ;;                  1    wreg      void 
  5485 ;; Registers used:
  5486 ;;		wreg, status,2
  5487 ;; Tracked objects:
  5488 ;;		On entry : 0/0
  5489 ;;		On exit  : 0/0
  5490 ;;		Unchanged: 0/0
  5491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5492 ;;      Params:         0       0       0       0       0       0       0
  5493 ;;      Locals:         0       0       0       0       0       0       0
  5494 ;;      Temps:          0       0       0       0       0       0       0
  5495 ;;      Totals:         0       0       0       0       0       0       0
  5496 ;;Total ram usage:        0 bytes
  5497 ;; Hardware stack levels used:    1
  5498 ;; Hardware stack levels required when called:    2
  5499 ;; This function calls:
  5500 ;;		Nothing
  5501 ;; This function is called by:
  5502 ;;		_main
  5503 ;; This function uses a non-reentrant model
  5504 ;;
  5505                           
  5506                           	psect	text20
  5507  001D86                     __ptext20:
  5508                           	opt stack 0
  5509  001D86                     _SpiInit:
  5510                           	opt stack 28
  5511                           
  5512                           ;main.c: 416: TRISA5 = 1;
  5513                           
  5514                           ;incstack = 0
  5515  001D86  8A92               	bsf	3986,5,c	;volatile
  5516                           
  5517                           ;main.c: 417: TRISC3 = 1;
  5518  001D88  8694               	bsf	3988,3,c	;volatile
  5519                           
  5520                           ;main.c: 418: TRISC4 = 1;
  5521  001D8A  8894               	bsf	3988,4,c	;volatile
  5522                           
  5523                           ;main.c: 419: TRISC5 = 0;
  5524  001D8C  9A94               	bcf	3988,5,c	;volatile
  5525                           
  5526                           ;main.c: 420: LATAbits.LATA5 = 1;
  5527  001D8E  8A89               	bsf	3977,5,c	;volatile
  5528                           
  5529                           ;main.c: 422: PIR1bits.SSPIF = 0;
  5530  001D90  969E               	bcf	3998,3,c	;volatile
  5531                           
  5532                           ;main.c: 423: PIE1bits.SSPIE = 1;
  5533  001D92  869D               	bsf	3997,3,c	;volatile
  5534                           
  5535                           ;main.c: 425: SSPSTATbits.SMP = 0;
  5536  001D94  9EC7               	bcf	4039,7,c	;volatile
  5537                           
  5538                           ;main.c: 426: SSPSTATbits.CKE = 1;
  5539  001D96  8CC7               	bsf	4039,6,c	;volatile
  5540                           
  5541                           ;main.c: 427: SSPCON1bits.WCOL = 0;
  5542  001D98  9EC6               	bcf	4038,7,c	;volatile
  5543                           
  5544                           ;main.c: 428: SSPCON1bits.CKP = 0;
  5545  001D9A  98C6               	bcf	4038,4,c	;volatile
  5546                           
  5547                           ;main.c: 429: SSPCON1bits.SSPM = 0b0100;
  5548  001D9C  50C6               	movf	4038,w,c	;volatile
  5549  001D9E  0BF0               	andlw	-16
  5550  001DA0  0904               	iorlw	4
  5551  001DA2  6EC6               	movwf	4038,c	;volatile
  5552                           
  5553                           ;main.c: 430: SSPCON1bits.SSPEN = 1;
  5554  001DA4  8AC6               	bsf	4038,5,c	;volatile
  5555                           
  5556                           ;main.c: 432: SSPBUF = 0;
  5557  001DA6  0E00               	movlw	0
  5558  001DA8  6EC9               	movwf	4041,c	;volatile
  5559                           
  5560                           ;main.c: 434: INTCONbits.PEIE = 1;
  5561  001DAA  8CF2               	bsf	intcon,6,c	;volatile
  5562                           
  5563                           ;main.c: 435: INTCONbits.GIE = 1;
  5564  001DAC  8EF2               	bsf	intcon,7,c	;volatile
  5565  001DAE  0012               	return		;funcret
  5566  001DB0                     __end_of_SpiInit:
  5567                           	opt stack 0
  5568                           tblptru	equ	0xFF8
  5569                           tblptrh	equ	0xFF7
  5570                           tblptrl	equ	0xFF6
  5571                           tablat	equ	0xFF5
  5572                           prodh	equ	0xFF4
  5573                           prodl	equ	0xFF3
  5574                           intcon	equ	0xFF2
  5575                           postinc0	equ	0xFEE
  5576                           wreg	equ	0xFE8
  5577                           indf1	equ	0xFE7
  5578                           postdec1	equ	0xFE5
  5579                           fsr1h	equ	0xFE2
  5580                           fsr1l	equ	0xFE1
  5581                           indf2	equ	0xFDF
  5582                           postinc2	equ	0xFDE
  5583                           postdec2	equ	0xFDD
  5584                           fsr2h	equ	0xFDA
  5585                           fsr2l	equ	0xFD9
  5586                           status	equ	0xFD8
  5587                           
  5588 ;; *************** function _PrintS *****************
  5589 ;; Defined at:
  5590 ;;		line 533 in file "main.c"
  5591 ;; Parameters:    Size  Location     Type
  5592 ;;  s_printS        2   32[COMRAM] PTR const unsigned char 
  5593 ;;		 -> SendMsgSreen(252), 
  5594 ;; Auto vars:     Size  Location     Type
  5595 ;;		None
  5596 ;; Return value:  Size  Location     Type
  5597 ;;                  1    wreg      void 
  5598 ;; Registers used:
  5599 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5600 ;; Tracked objects:
  5601 ;;		On entry : 0/0
  5602 ;;		On exit  : 0/0
  5603 ;;		Unchanged: 0/0
  5604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5605 ;;      Params:         2       0       0       0       0       0       0
  5606 ;;      Locals:         0       0       0       0       0       0       0
  5607 ;;      Temps:          0       0       0       0       0       0       0
  5608 ;;      Totals:         2       0       0       0       0       0       0
  5609 ;;Total ram usage:        2 bytes
  5610 ;; Hardware stack levels used:    1
  5611 ;; Hardware stack levels required when called:    3
  5612 ;; This function calls:
  5613 ;;		_PrintC
  5614 ;; This function is called by:
  5615 ;;		_main
  5616 ;; This function uses a non-reentrant model
  5617 ;;
  5618                           
  5619                           	psect	text21
  5620  001CEE                     __ptext21:
  5621                           	opt stack 0
  5622  001CEE                     _PrintS:
  5623                           	opt stack 27
  5624                           
  5625                           ;main.c: 534: while(*s_printS) {
  5626                           
  5627                           ;incstack = 0
  5628  001CEE  D009               	goto	l254
  5629  001CF0                     
  5630                           ;main.c: 535: PrintC(*s_printS++);
  5631  001CF0  C021  FFD9         	movff	PrintS@s_printS,fsr2l
  5632  001CF4  C022  FFDA         	movff	PrintS@s_printS+1,fsr2h
  5633  001CF8  50DF               	movf	indf2,w,c
  5634  001CFA  EC67  F00F         	call	_PrintC
  5635  001CFE  4A21               	infsnz	PrintS@s_printS,f,c
  5636  001D00  2A22               	incf	PrintS@s_printS+1,f,c
  5637  001D02                     l254:
  5638  001D02  C021  FFD9         	movff	PrintS@s_printS,fsr2l
  5639  001D06  C022  FFDA         	movff	PrintS@s_printS+1,fsr2h
  5640  001D0A  50DF               	movf	indf2,w,c
  5641  001D0C  A4D8               	btfss	status,2,c
  5642  001D0E  D7F0               	goto	l255
  5643                           
  5644                           ;main.c: 536: }
  5645                           ;main.c: 537: PrintC(0xFF);
  5646  001D10  0EFF               	movlw	255
  5647  001D12  EC67  F00F         	call	_PrintC
  5648                           
  5649                           ;main.c: 538: PrintC(0xFF);
  5650  001D16  0EFF               	movlw	255
  5651  001D18  EC67  F00F         	call	_PrintC
  5652                           
  5653                           ;main.c: 539: PrintC(0xFF);
  5654  001D1C  0EFF               	movlw	255
  5655  001D1E  EC67  F00F         	call	_PrintC
  5656  001D22  0012               	return		;funcret
  5657  001D24                     __end_of_PrintS:
  5658                           	opt stack 0
  5659                           tblptru	equ	0xFF8
  5660                           tblptrh	equ	0xFF7
  5661                           tblptrl	equ	0xFF6
  5662                           tablat	equ	0xFF5
  5663                           prodh	equ	0xFF4
  5664                           prodl	equ	0xFF3
  5665                           intcon	equ	0xFF2
  5666                           postinc0	equ	0xFEE
  5667                           wreg	equ	0xFE8
  5668                           indf1	equ	0xFE7
  5669                           postdec1	equ	0xFE5
  5670                           fsr1h	equ	0xFE2
  5671                           fsr1l	equ	0xFE1
  5672                           indf2	equ	0xFDF
  5673                           postinc2	equ	0xFDE
  5674                           postdec2	equ	0xFDD
  5675                           fsr2h	equ	0xFDA
  5676                           fsr2l	equ	0xFD9
  5677                           status	equ	0xFD8
  5678                           
  5679 ;; *************** function _PrintC *****************
  5680 ;; Defined at:
  5681 ;;		line 518 in file "main.c"
  5682 ;; Parameters:    Size  Location     Type
  5683 ;;  c_printC        1    wreg     unsigned char 
  5684 ;; Auto vars:     Size  Location     Type
  5685 ;;  c_printC        1   31[COMRAM] unsigned char 
  5686 ;; Return value:  Size  Location     Type
  5687 ;;                  1    wreg      void 
  5688 ;; Registers used:
  5689 ;;		wreg
  5690 ;; Tracked objects:
  5691 ;;		On entry : 0/0
  5692 ;;		On exit  : 0/0
  5693 ;;		Unchanged: 0/0
  5694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5695 ;;      Params:         0       0       0       0       0       0       0
  5696 ;;      Locals:         1       0       0       0       0       0       0
  5697 ;;      Temps:          0       0       0       0       0       0       0
  5698 ;;      Totals:         1       0       0       0       0       0       0
  5699 ;;Total ram usage:        1 bytes
  5700 ;; Hardware stack levels used:    1
  5701 ;; Hardware stack levels required when called:    2
  5702 ;; This function calls:
  5703 ;;		Nothing
  5704 ;; This function is called by:
  5705 ;;		_PrintS
  5706 ;; This function uses a non-reentrant model
  5707 ;;
  5708                           
  5709                           	psect	text22
  5710  001ECE                     __ptext22:
  5711                           	opt stack 0
  5712  001ECE                     _PrintC:
  5713                           	opt stack 27
  5714                           
  5715                           ;incstack = 0
  5716                           ;PrintC@c_printC stored from wreg
  5717  001ECE  6E20               	movwf	PrintC@c_printC,c
  5718  001ED0                     
  5719                           ;main.c: 519: while(TXSTA1bits.TRMT == 0) {};
  5720  001ED0  A2AC               	btfss	4012,1,c	;volatile
  5721  001ED2  D7FE               	goto	l2392
  5722                           
  5723                           ;main.c: 520: TXREG1 = c_printC;
  5724  001ED4  C020  FFAD         	movff	PrintC@c_printC,4013	;volatile
  5725  001ED8  F000               	nop		;# 
  5726  001EDA  0012               	return		;funcret
  5727  001EDC                     __end_of_PrintC:
  5728                           	opt stack 0
  5729                           tblptru	equ	0xFF8
  5730                           tblptrh	equ	0xFF7
  5731                           tblptrl	equ	0xFF6
  5732                           tablat	equ	0xFF5
  5733                           prodh	equ	0xFF4
  5734                           prodl	equ	0xFF3
  5735                           intcon	equ	0xFF2
  5736                           postinc0	equ	0xFEE
  5737                           wreg	equ	0xFE8
  5738                           indf1	equ	0xFE7
  5739                           postdec1	equ	0xFE5
  5740                           fsr1h	equ	0xFE2
  5741                           fsr1l	equ	0xFE1
  5742                           indf2	equ	0xFDF
  5743                           postinc2	equ	0xFDE
  5744                           postdec2	equ	0xFDD
  5745                           fsr2h	equ	0xFDA
  5746                           fsr2l	equ	0xFD9
  5747                           status	equ	0xFD8
  5748                           
  5749 ;; *************** function _InitTmr0 *****************
  5750 ;; Defined at:
  5751 ;;		line 470 in file "main.c"
  5752 ;; Parameters:    Size  Location     Type
  5753 ;;		None
  5754 ;; Auto vars:     Size  Location     Type
  5755 ;;		None
  5756 ;; Return value:  Size  Location     Type
  5757 ;;                  1    wreg      void 
  5758 ;; Registers used:
  5759 ;;		wreg, status,2
  5760 ;; Tracked objects:
  5761 ;;		On entry : 0/0
  5762 ;;		On exit  : 0/0
  5763 ;;		Unchanged: 0/0
  5764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5765 ;;      Params:         0       0       0       0       0       0       0
  5766 ;;      Locals:         0       0       0       0       0       0       0
  5767 ;;      Temps:          0       0       0       0       0       0       0
  5768 ;;      Totals:         0       0       0       0       0       0       0
  5769 ;;Total ram usage:        0 bytes
  5770 ;; Hardware stack levels used:    1
  5771 ;; Hardware stack levels required when called:    2
  5772 ;; This function calls:
  5773 ;;		Nothing
  5774 ;; This function is called by:
  5775 ;;		_main
  5776 ;; This function uses a non-reentrant model
  5777 ;;
  5778                           
  5779                           	psect	text23
  5780  001E9A                     __ptext23:
  5781                           	opt stack 0
  5782  001E9A                     _InitTmr0:
  5783                           	opt stack 28
  5784                           
  5785                           ;main.c: 471: T08BIT = 0;
  5786                           
  5787                           ;incstack = 0
  5788  001E9A  9CD5               	bcf	4053,6,c	;volatile
  5789                           
  5790                           ;main.c: 472: T0CS = 0;
  5791  001E9C  9AD5               	bcf	4053,5,c	;volatile
  5792                           
  5793                           ;main.c: 473: T0SE = 0;
  5794  001E9E  98D5               	bcf	4053,4,c	;volatile
  5795                           
  5796                           ;main.c: 474: PSA = 0;
  5797  001EA0  96D5               	bcf	4053,3,c	;volatile
  5798                           
  5799                           ;main.c: 475: T0PS2 = 0;
  5800  001EA2  94D5               	bcf	4053,2,c	;volatile
  5801                           
  5802                           ;main.c: 476: T0PS1 = 1;
  5803  001EA4  82D5               	bsf	4053,1,c	;volatile
  5804                           
  5805                           ;main.c: 477: T0PS0 = 1;
  5806  001EA6  80D5               	bsf	4053,0,c	;volatile
  5807                           
  5808                           ;main.c: 478: TMR0L = 0xB0;
  5809  001EA8  0EB0               	movlw	176
  5810  001EAA  6ED6               	movwf	4054,c	;volatile
  5811                           
  5812                           ;main.c: 479: TMR0H = 0x3C;
  5813  001EAC  0E3C               	movlw	60
  5814  001EAE  6ED7               	movwf	4055,c	;volatile
  5815                           
  5816                           ;main.c: 480: TMR0IF = 0;
  5817  001EB0  94F2               	bcf	intcon,2,c	;volatile
  5818                           
  5819                           ;main.c: 483: TMR0ON = 1;
  5820  001EB2  8ED5               	bsf	4053,7,c	;volatile
  5821  001EB4  0012               	return		;funcret
  5822  001EB6                     __end_of_InitTmr0:
  5823                           	opt stack 0
  5824                           tblptru	equ	0xFF8
  5825                           tblptrh	equ	0xFF7
  5826                           tblptrl	equ	0xFF6
  5827                           tablat	equ	0xFF5
  5828                           prodh	equ	0xFF4
  5829                           prodl	equ	0xFF3
  5830                           intcon	equ	0xFF2
  5831                           postinc0	equ	0xFEE
  5832                           wreg	equ	0xFE8
  5833                           indf1	equ	0xFE7
  5834                           postdec1	equ	0xFE5
  5835                           fsr1h	equ	0xFE2
  5836                           fsr1l	equ	0xFE1
  5837                           indf2	equ	0xFDF
  5838                           postinc2	equ	0xFDE
  5839                           postdec2	equ	0xFDD
  5840                           fsr2h	equ	0xFDA
  5841                           fsr2l	equ	0xFD9
  5842                           status	equ	0xFD8
  5843                           
  5844 ;; *************** function _ClockInit *****************
  5845 ;; Defined at:
  5846 ;;		line 395 in file "main.c"
  5847 ;; Parameters:    Size  Location     Type
  5848 ;;		None
  5849 ;; Auto vars:     Size  Location     Type
  5850 ;;		None
  5851 ;; Return value:  Size  Location     Type
  5852 ;;                  1    wreg      void 
  5853 ;; Registers used:
  5854 ;;		None
  5855 ;; Tracked objects:
  5856 ;;		On entry : 0/0
  5857 ;;		On exit  : 0/0
  5858 ;;		Unchanged: 0/0
  5859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5860 ;;      Params:         0       0       0       0       0       0       0
  5861 ;;      Locals:         0       0       0       0       0       0       0
  5862 ;;      Temps:          0       0       0       0       0       0       0
  5863 ;;      Totals:         0       0       0       0       0       0       0
  5864 ;;Total ram usage:        0 bytes
  5865 ;; Hardware stack levels used:    1
  5866 ;; Hardware stack levels required when called:    2
  5867 ;; This function calls:
  5868 ;;		Nothing
  5869 ;; This function is called by:
  5870 ;;		_main
  5871 ;; This function uses a non-reentrant model
  5872 ;;
  5873                           
  5874                           	psect	text24
  5875  001EDC                     __ptext24:
  5876                           	opt stack 0
  5877  001EDC                     _ClockInit:
  5878                           	opt stack 28
  5879                           
  5880                           ;main.c: 396: OSCCONbits.IRCF = 0b111;
  5881                           
  5882                           ;incstack = 0
  5883  001EDC  88D3               	bsf	4051,4,c	;volatile
  5884  001EDE  8AD3               	bsf	4051,5,c	;volatile
  5885  001EE0  8CD3               	bsf	4051,6,c	;volatile
  5886                           
  5887                           ;main.c: 397: OSCTUNEbits.PLLEN = 1;
  5888  001EE2  8C9B               	bsf	3995,6,c	;volatile
  5889  001EE4  B4D3               	btfsc	4051,2,c	;volatile
  5890  001EE6  0012               	return	
  5891  001EE8  D7FD               	goto	l225
  5892  001EEA                     __end_of_ClockInit:
  5893                           	opt stack 0
  5894                           tblptru	equ	0xFF8
  5895                           tblptrh	equ	0xFF7
  5896                           tblptrl	equ	0xFF6
  5897                           tablat	equ	0xFF5
  5898                           prodh	equ	0xFF4
  5899                           prodl	equ	0xFF3
  5900                           intcon	equ	0xFF2
  5901                           postinc0	equ	0xFEE
  5902                           wreg	equ	0xFE8
  5903                           indf1	equ	0xFE7
  5904                           postdec1	equ	0xFE5
  5905                           fsr1h	equ	0xFE2
  5906                           fsr1l	equ	0xFE1
  5907                           indf2	equ	0xFDF
  5908                           postinc2	equ	0xFDE
  5909                           postdec2	equ	0xFDD
  5910                           fsr2h	equ	0xFDA
  5911                           fsr2l	equ	0xFD9
  5912                           status	equ	0xFD8
  5913                           
  5914 ;; *************** function _ClearArray *****************
  5915 ;; Defined at:
  5916 ;;		line 549 in file "main.c"
  5917 ;; Parameters:    Size  Location     Type
  5918 ;;		None
  5919 ;; Auto vars:     Size  Location     Type
  5920 ;;  cpt_vide        1   31[COMRAM] unsigned char 
  5921 ;; Return value:  Size  Location     Type
  5922 ;;                  1    wreg      void 
  5923 ;; Registers used:
  5924 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5925 ;; Tracked objects:
  5926 ;;		On entry : 0/0
  5927 ;;		On exit  : 0/0
  5928 ;;		Unchanged: 0/0
  5929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5930 ;;      Params:         0       0       0       0       0       0       0
  5931 ;;      Locals:         1       0       0       0       0       0       0
  5932 ;;      Temps:          0       0       0       0       0       0       0
  5933 ;;      Totals:         1       0       0       0       0       0       0
  5934 ;;Total ram usage:        1 bytes
  5935 ;; Hardware stack levels used:    1
  5936 ;; Hardware stack levels required when called:    2
  5937 ;; This function calls:
  5938 ;;		Nothing
  5939 ;; This function is called by:
  5940 ;;		_main
  5941 ;; This function uses a non-reentrant model
  5942 ;;
  5943                           
  5944                           	psect	text25
  5945  001DDA                     __ptext25:
  5946                           	opt stack 0
  5947  001DDA                     _ClearArray:
  5948                           	opt stack 28
  5949                           
  5950                           ;main.c: 550: char cpt_vide = 0;
  5951                           
  5952                           ;incstack = 0
  5953  001DDA  0E00               	movlw	0
  5954  001DDC  6E20               	movwf	ClearArray@cpt_vide,c
  5955                           
  5956                           ;main.c: 551: for(cpt_vide=0;cpt_vide<252;cpt_vide++) {
  5957  001DDE  0E00               	movlw	0
  5958  001DE0  6E20               	movwf	ClearArray@cpt_vide,c
  5959  001DE2                     l2636:
  5960  001DE2  0EFB               	movlw	251
  5961  001DE4  6420               	cpfsgt	ClearArray@cpt_vide,c
  5962  001DE6  D001               	goto	l260
  5963  001DE8  0012               	return	
  5964  001DEA                     l260:
  5965                           
  5966                           ;main.c: 552: SendMsgSreen[cpt_vide] = '\0';
  5967  001DEA  5020               	movf	ClearArray@cpt_vide,w,c
  5968  001DEC  0D01               	mullw	1
  5969  001DEE  0E00               	movlw	low _SendMsgSreen
  5970  001DF0  24F3               	addwf	prodl,w,c
  5971  001DF2  6ED9               	movwf	fsr2l,c
  5972  001DF4  0E01               	movlw	high _SendMsgSreen
  5973  001DF6  20F4               	addwfc	prodh,w,c
  5974  001DF8  6EDA               	movwf	fsr2h,c
  5975  001DFA  0E00               	movlw	0
  5976  001DFC  6EDF               	movwf	indf2,c
  5977  001DFE  2A20               	incf	ClearArray@cpt_vide,f,c
  5978  001E00  D7F0               	goto	l2636
  5979  001E02                     __end_of_ClearArray:
  5980                           	opt stack 0
  5981                           tblptru	equ	0xFF8
  5982                           tblptrh	equ	0xFF7
  5983                           tblptrl	equ	0xFF6
  5984                           tablat	equ	0xFF5
  5985                           prodh	equ	0xFF4
  5986                           prodl	equ	0xFF3
  5987                           intcon	equ	0xFF2
  5988                           postinc0	equ	0xFEE
  5989                           wreg	equ	0xFE8
  5990                           indf1	equ	0xFE7
  5991                           postdec1	equ	0xFE5
  5992                           fsr1h	equ	0xFE2
  5993                           fsr1l	equ	0xFE1
  5994                           indf2	equ	0xFDF
  5995                           postinc2	equ	0xFDE
  5996                           postdec2	equ	0xFDD
  5997                           fsr2h	equ	0xFDA
  5998                           fsr2l	equ	0xFD9
  5999                           status	equ	0xFD8
  6000                           
  6001 ;; *************** function _Adc *****************
  6002 ;; Defined at:
  6003 ;;		line 500 in file "main.c"
  6004 ;; Parameters:    Size  Location     Type
  6005 ;;  channel         1    wreg     unsigned char 
  6006 ;; Auto vars:     Size  Location     Type
  6007 ;;  channel         1   35[COMRAM] unsigned char 
  6008 ;; Return value:  Size  Location     Type
  6009 ;;                  2   31[COMRAM] unsigned int 
  6010 ;; Registers used:
  6011 ;;		wreg, status,2, status,0
  6012 ;; Tracked objects:
  6013 ;;		On entry : 0/0
  6014 ;;		On exit  : 0/0
  6015 ;;		Unchanged: 0/0
  6016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6017 ;;      Params:         2       0       0       0       0       0       0
  6018 ;;      Locals:         1       0       0       0       0       0       0
  6019 ;;      Temps:          2       0       0       0       0       0       0
  6020 ;;      Totals:         5       0       0       0       0       0       0
  6021 ;;Total ram usage:        5 bytes
  6022 ;; Hardware stack levels used:    1
  6023 ;; Hardware stack levels required when called:    2
  6024 ;; This function calls:
  6025 ;;		Nothing
  6026 ;; This function is called by:
  6027 ;;		_main
  6028 ;; This function uses a non-reentrant model
  6029 ;;
  6030                           
  6031                           	psect	text26
  6032  001D24                     __ptext26:
  6033                           	opt stack 0
  6034  001D24                     _Adc:
  6035                           	opt stack 28
  6036                           
  6037                           ;incstack = 0
  6038                           ;Adc@channel stored from wreg
  6039  001D24  6E24               	movwf	Adc@channel,c
  6040                           
  6041                           ;main.c: 501: ADCON0bits.ADON = 1;
  6042  001D26  80C2               	bsf	4034,0,c	;volatile
  6043                           
  6044                           ;main.c: 502: ADCON0bits.CHS = channel;
  6045  001D28  C024  F022         	movff	Adc@channel,??_Adc
  6046  001D2C  4622               	rlncf	??_Adc,f,c
  6047  001D2E  4622               	rlncf	??_Adc,f,c
  6048  001D30  50C2               	movf	4034,w,c	;volatile
  6049  001D32  1822               	xorwf	??_Adc,w,c
  6050  001D34  0BC3               	andlw	-61
  6051  001D36  1822               	xorwf	??_Adc,w,c
  6052  001D38  6EC2               	movwf	4034,c	;volatile
  6053                           
  6054                           ;main.c: 503: ADCON0bits.GO = 1;
  6055  001D3A  82C2               	bsf	4034,1,c	;volatile
  6056  001D3C  B2C2               	btfsc	4034,1,c	;volatile
  6057  001D3E  D7FE               	goto	l243
  6058                           
  6059                           ;main.c: 505: ADCON0bits.ADON = 0;
  6060  001D40  90C2               	bcf	4034,0,c	;volatile
  6061                           
  6062                           ;main.c: 506: return (ADRESH << 8) + ADRESL;
  6063  001D42  50C4               	movf	4036,w,c	;volatile
  6064  001D44  6E23               	movwf	(??_Adc+1)& (0+255),c
  6065  001D46  6A22               	clrf	??_Adc& (0+255),c
  6066  001D48  50C3               	movf	4035,w,c	;volatile
  6067  001D4A  2422               	addwf	??_Adc,w,c
  6068  001D4C  6E20               	movwf	?_Adc,c
  6069  001D4E  0E00               	movlw	0
  6070  001D50  2023               	addwfc	??_Adc+1,w,c
  6071  001D52  6E21               	movwf	?_Adc+1,c
  6072  001D54  0012               	return	
  6073  001D56                     __end_of_Adc:
  6074                           	opt stack 0
  6075                           tblptru	equ	0xFF8
  6076                           tblptrh	equ	0xFF7
  6077                           tblptrl	equ	0xFF6
  6078                           tablat	equ	0xFF5
  6079                           prodh	equ	0xFF4
  6080                           prodl	equ	0xFF3
  6081                           intcon	equ	0xFF2
  6082                           postinc0	equ	0xFEE
  6083                           wreg	equ	0xFE8
  6084                           indf1	equ	0xFE7
  6085                           postdec1	equ	0xFE5
  6086                           fsr1h	equ	0xFE2
  6087                           fsr1l	equ	0xFE1
  6088                           indf2	equ	0xFDF
  6089                           postinc2	equ	0xFDE
  6090                           postdec2	equ	0xFDD
  6091                           fsr2h	equ	0xFDA
  6092                           fsr2l	equ	0xFD9
  6093                           status	equ	0xFD8
  6094                           
  6095 ;; *************** function _ADCInit *****************
  6096 ;; Defined at:
  6097 ;;		line 401 in file "main.c"
  6098 ;; Parameters:    Size  Location     Type
  6099 ;;		None
  6100 ;; Auto vars:     Size  Location     Type
  6101 ;;		None
  6102 ;; Return value:  Size  Location     Type
  6103 ;;                  1    wreg      void 
  6104 ;; Registers used:
  6105 ;;		wreg, status,2
  6106 ;; Tracked objects:
  6107 ;;		On entry : 0/0
  6108 ;;		On exit  : 0/0
  6109 ;;		Unchanged: 0/0
  6110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6111 ;;      Params:         0       0       0       0       0       0       0
  6112 ;;      Locals:         0       0       0       0       0       0       0
  6113 ;;      Temps:          0       0       0       0       0       0       0
  6114 ;;      Totals:         0       0       0       0       0       0       0
  6115 ;;Total ram usage:        0 bytes
  6116 ;; Hardware stack levels used:    1
  6117 ;; Hardware stack levels required when called:    2
  6118 ;; This function calls:
  6119 ;;		Nothing
  6120 ;; This function is called by:
  6121 ;;		_main
  6122 ;; This function uses a non-reentrant model
  6123 ;;
  6124                           
  6125                           	psect	text27
  6126  001E02                     __ptext27:
  6127                           	opt stack 0
  6128  001E02                     _ADCInit:
  6129                           	opt stack 28
  6130                           
  6131                           ;main.c: 402: TRISAbits.TRISA0 = 1;
  6132                           
  6133                           ;incstack = 0
  6134  001E02  8092               	bsf	3986,0,c	;volatile
  6135                           
  6136                           ;main.c: 403: TRISAbits.TRISA1 = 1;
  6137  001E04  8292               	bsf	3986,1,c	;volatile
  6138                           
  6139                           ;main.c: 404: TRISAbits.TRISA2 = 1;
  6140  001E06  8492               	bsf	3986,2,c	;volatile
  6141                           
  6142                           ;main.c: 405: TRISAbits.TRISA3 = 1;
  6143  001E08  8692               	bsf	3986,3,c	;volatile
  6144                           
  6145                           ;main.c: 408: ADCON1bits.PCFG = 0b1011;
  6146  001E0A  50C1               	movf	4033,w,c	;volatile
  6147  001E0C  0BF0               	andlw	-16
  6148  001E0E  090B               	iorlw	11
  6149  001E10  6EC1               	movwf	4033,c	;volatile
  6150                           
  6151                           ;main.c: 409: ADCON1bits.VCFG = 0;
  6152  001E12  0ECF               	movlw	-49
  6153  001E14  16C1               	andwf	4033,f,c	;volatile
  6154                           
  6155                           ;main.c: 410: ADCON2bits.ADFM = 1;
  6156  001E16  8EC0               	bsf	4032,7,c	;volatile
  6157                           
  6158                           ;main.c: 411: ADCON2bits.ACQT = 0b010;
  6159  001E18  50C0               	movf	4032,w,c	;volatile
  6160  001E1A  0BC7               	andlw	-57
  6161  001E1C  0910               	iorlw	16
  6162  001E1E  6EC0               	movwf	4032,c	;volatile
  6163                           
  6164                           ;main.c: 412: ADCON2bits.ADCS = 0b001;
  6165  001E20  50C0               	movf	4032,w,c	;volatile
  6166  001E22  0BF8               	andlw	-8
  6167  001E24  0901               	iorlw	1
  6168  001E26  6EC0               	movwf	4032,c	;volatile
  6169  001E28  0012               	return		;funcret
  6170  001E2A                     __end_of_ADCInit:
  6171                           	opt stack 0
  6172                           tblptru	equ	0xFF8
  6173                           tblptrh	equ	0xFF7
  6174                           tblptrl	equ	0xFF6
  6175                           tablat	equ	0xFF5
  6176                           prodh	equ	0xFF4
  6177                           prodl	equ	0xFF3
  6178                           intcon	equ	0xFF2
  6179                           postinc0	equ	0xFEE
  6180                           wreg	equ	0xFE8
  6181                           indf1	equ	0xFE7
  6182                           postdec1	equ	0xFE5
  6183                           fsr1h	equ	0xFE2
  6184                           fsr1l	equ	0xFE1
  6185                           indf2	equ	0xFDF
  6186                           postinc2	equ	0xFDE
  6187                           postdec2	equ	0xFDD
  6188                           fsr2h	equ	0xFDA
  6189                           fsr2l	equ	0xFD9
  6190                           status	equ	0xFD8
  6191                           
  6192 ;; *************** function _ISR *****************
  6193 ;; Defined at:
  6194 ;;		line 576 in file "main.c"
  6195 ;; Parameters:    Size  Location     Type
  6196 ;;		None
  6197 ;; Auto vars:     Size  Location     Type
  6198 ;;  Receive         1   29[COMRAM] unsigned char 
  6199 ;;  data_spi        1   30[COMRAM] unsigned char 
  6200 ;; Return value:  Size  Location     Type
  6201 ;;                  1    wreg      void 
  6202 ;; Registers used:
  6203 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6204 ;; Tracked objects:
  6205 ;;		On entry : 0/0
  6206 ;;		On exit  : 0/0
  6207 ;;		Unchanged: 0/0
  6208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6209 ;;      Params:         0       0       0       0       0       0       0
  6210 ;;      Locals:         2       0       0       0       0       0       0
  6211 ;;      Temps:         25       0       0       0       0       0       0
  6212 ;;      Totals:        27       0       0       0       0       0       0
  6213 ;;Total ram usage:       27 bytes
  6214 ;; Hardware stack levels used:    1
  6215 ;; Hardware stack levels required when called:    1
  6216 ;; This function calls:
  6217 ;;		_Modulo
  6218 ;;		___lbmod
  6219 ;; This function is called by:
  6220 ;;		Interrupt level 2
  6221 ;; This function uses a non-reentrant model
  6222 ;;
  6223                           
  6224                           	psect	intcode
  6225  000008                     __pintcode:
  6226                           	opt stack 0
  6227  000008                     _ISR:
  6228                           	opt stack 25
  6229                           
  6230                           ;incstack = 0
  6231  000008  8260               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6232  00000A  CFFA F00C          	movff	pclath,??_ISR+7
  6233  00000E  CFFB F00D          	movff	pclatu,??_ISR+8
  6234  000012  CFE9 F00E          	movff	fsr0l,??_ISR+9
  6235  000016  CFEA F00F          	movff	fsr0h,??_ISR+10
  6236  00001A  CFE1 F010          	movff	fsr1l,??_ISR+11
  6237  00001E  CFE2 F011          	movff	fsr1h,??_ISR+12
  6238  000022  CFD9 F012          	movff	fsr2l,??_ISR+13
  6239  000026  CFDA F013          	movff	fsr2h,??_ISR+14
  6240  00002A  CFF3 F014          	movff	prodl,??_ISR+15
  6241  00002E  CFF4 F015          	movff	prodh,??_ISR+16
  6242  000032  CFF6 F016          	movff	tblptrl,??_ISR+17
  6243  000036  CFF7 F017          	movff	tblptrh,??_ISR+18
  6244  00003A  CFF8 F018          	movff	tblptru,??_ISR+19
  6245  00003E  CFF5 F019          	movff	tablat,??_ISR+20
  6246  000042  C060  F01A         	movff	btemp,??_ISR+21
  6247  000046  C061  F01B         	movff	btemp+1,??_ISR+22
  6248  00004A  C062  F01C         	movff	btemp+2,??_ISR+23
  6249  00004E  C063  F01D         	movff	btemp+3,??_ISR+24
  6250                           
  6251                           ;main.c: 578: if(PIR1bits.SSPIF){
  6252  000052  A69E               	btfss	3998,3,c	;volatile
  6253  000054  D28D               	goto	i2l339
  6254                           
  6255                           ;main.c: 579: char data_spi = SSPBUF;
  6256  000056  CFC9 F01F          	movff	4041,ISR@data_spi	;volatile
  6257                           
  6258                           ;main.c: 580: PIR1bits.SSPIF = 0;
  6259  00005A  969E               	bcf	3998,3,c	;volatile
  6260                           
  6261                           ;main.c: 583: switch(EtatSpi) {
  6262  00005C  D1F9               	goto	i2l274
  6263  00005E                     i2l275:
  6264                           
  6265                           ;main.c: 585: TailleMsgSpi = data_spi;
  6266  00005E  C01F  F05C         	movff	ISR@data_spi,_TailleMsgSpi
  6267                           
  6268                           ;main.c: 586: if(TailleMsgSpi) {
  6269  000062  505C               	movf	_TailleMsgSpi,w,c
  6270  000064  B4D8               	btfsc	status,2,c
  6271  000066  D002               	goto	i2l276
  6272                           
  6273                           ;main.c: 587: EtatSpi = 1;
  6274  000068  0E01               	movlw	1
  6275  00006A  6E5D               	movwf	_EtatSpi,c
  6276  00006C                     i2l276:
  6277                           
  6278                           ;main.c: 588: }
  6279                           ;main.c: 589: Checksum = 0;
  6280  00006C  0E00               	movlw	0
  6281  00006E  6E53               	movwf	_Checksum+1,c
  6282  000070  0E00               	movlw	0
  6283  000072  6E52               	movwf	_Checksum,c
  6284                           
  6285                           ;main.c: 590: CptSpi = 1;
  6286  000074  0E01               	movlw	1
  6287  000076  6E5F               	movwf	_CptSpi,c
  6288                           
  6289                           ;main.c: 591: break;
  6290  000078  D1F9               	goto	i2l277
  6291  00007A                     i2l278:
  6292                           
  6293                           ;main.c: 593: TypeVarSpi = data_spi;
  6294  00007A  C01F  F0D9         	movff	ISR@data_spi,_TypeVarSpi
  6295                           
  6296                           ;main.c: 594: if(TailleMsgSpi == 2) {
  6297  00007E  0E02               	movlw	2
  6298  000080  185C               	xorwf	_TailleMsgSpi,w,c
  6299  000082  A4D8               	btfss	status,2,c
  6300  000084  D002               	goto	i2l279
  6301                           
  6302                           ;main.c: 595: EtatSpi = 3;
  6303  000086  0E03               	movlw	3
  6304  000088  D001               	goto	L2
  6305  00008A                     i2l279:
  6306                           
  6307                           ;main.c: 597: EtatSpi = 2;
  6308  00008A  0E02               	movlw	2
  6309  00008C                     L2:
  6310  00008C  6E5D               	movwf	_EtatSpi,c
  6311                           
  6312                           ;main.c: 598: }
  6313                           ;main.c: 599: CptSpi++;
  6314  00008E  2A5F               	incf	_CptSpi,f,c
  6315                           
  6316                           ;main.c: 600: break;
  6317  000090  D1ED               	goto	i2l277
  6318  000092                     
  6319                           ;main.c: 602: TextSpi[CptSpi-2] = data_spi;
  6320  000092  0EFE               	movlw	254
  6321  000094  6E05               	movwf	??_ISR& (0+255),c
  6322  000096  0EFF               	movlw	255
  6323  000098  6E06               	movwf	(??_ISR+1)& (0+255),c
  6324  00009A  505F               	movf	_CptSpi,w,c
  6325  00009C  6E07               	movwf	(??_ISR+2)& (0+255),c
  6326  00009E  6A08               	clrf	(??_ISR+3)& (0+255),c
  6327  0000A0  5005               	movf	??_ISR,w,c
  6328  0000A2  2607               	addwf	??_ISR+2,f,c
  6329  0000A4  5006               	movf	??_ISR+1,w,c
  6330  0000A6  2208               	addwfc	??_ISR+3,f,c
  6331  0000A8  0E00               	movlw	low _TextSpi
  6332  0000AA  2407               	addwf	??_ISR+2,w,c
  6333  0000AC  6ED9               	movwf	fsr2l,c
  6334  0000AE  0E03               	movlw	high _TextSpi
  6335  0000B0  2008               	addwfc	??_ISR+3,w,c
  6336  0000B2  6EDA               	movwf	fsr2h,c
  6337  0000B4  C01F  FFDF         	movff	ISR@data_spi,indf2
  6338                           
  6339                           ;main.c: 603: CptSpi++;
  6340  0000B8  2A5F               	incf	_CptSpi,f,c
  6341                           
  6342                           ;main.c: 604: if(CptSpi == TailleMsgSpi) {
  6343  0000BA  505C               	movf	_TailleMsgSpi,w,c
  6344  0000BC  185F               	xorwf	_CptSpi,w,c
  6345  0000BE  A4D8               	btfss	status,2,c
  6346  0000C0  D1D5               	goto	i2l277
  6347                           
  6348                           ;main.c: 605: EtatSpi = 3;
  6349  0000C2  0E03               	movlw	3
  6350  0000C4  D1C1               	goto	L3
  6351  0000C6                     
  6352                           ;main.c: 609: if(Modulo(Checksum) == data_spi) {
  6353  0000C6  C052  F001         	movff	_Checksum,Modulo@M_nombre
  6354  0000CA  C053  F002         	movff	_Checksum+1,Modulo@M_nombre+1
  6355  0000CE  EC5B  F00F         	call	_Modulo	;wreg free
  6356  0000D2  181F               	xorwf	ISR@data_spi,w,c
  6357  0000D4  A4D8               	btfss	status,2,c
  6358  0000D6  D1BA               	goto	i2l325
  6359                           
  6360                           ;main.c: 610: FlagSpi = 1;
  6361  0000D8  0E01               	movlw	1
  6362  0000DA  0100               	movlb	0	; () banked
  6363  0000DC  6FE1               	movwf	_FlagSpi& (0+255),b
  6364                           
  6365                           ;main.c: 611: CptSpi = 0;
  6366  0000DE  0E00               	movlw	0
  6367  0000E0  6E5F               	movwf	_CptSpi,c
  6368                           
  6369                           ;main.c: 612: switch(TypeVarSpi) {
  6370  0000E2  D185               	goto	i2l285
  6371  0000E4                     
  6372                           ; BSR set to: 0
  6373                           ;main.c: 614: for(CptSpi=0;CptSpi<15;CptSpi++) {
  6374                           
  6375                           ; BSR set to: 0
  6376  0000E4  0E00               	movlw	0
  6377  0000E6  6E5F               	movwf	_CptSpi,c
  6378  0000E8                     i2l2988:
  6379                           
  6380                           ; BSR set to: 0
  6381  0000E8  0E0E               	movlw	14
  6382  0000EA  645F               	cpfsgt	_CptSpi,c
  6383  0000EC  D001               	goto	i2l287
  6384  0000EE  D1AE               	goto	i2l325
  6385  0000F0                     i2l287:
  6386                           
  6387                           ;main.c: 615: if(CptSpi < TailleMsgSpi-2) {
  6388                           
  6389                           ; BSR set to: 0
  6390  0000F0  0EFE               	movlw	254
  6391  0000F2  6E05               	movwf	??_ISR& (0+255),c
  6392  0000F4  0EFF               	movlw	255
  6393  0000F6  6E06               	movwf	(??_ISR+1)& (0+255),c
  6394  0000F8  505C               	movf	_TailleMsgSpi,w,c
  6395  0000FA  6E07               	movwf	(??_ISR+2)& (0+255),c
  6396  0000FC  6A08               	clrf	(??_ISR+3)& (0+255),c
  6397  0000FE  5005               	movf	??_ISR,w,c
  6398  000100  2607               	addwf	??_ISR+2,f,c
  6399  000102  5006               	movf	??_ISR+1,w,c
  6400  000104  2208               	addwfc	??_ISR+3,f,c
  6401  000106  505F               	movf	_CptSpi,w,c
  6402  000108  6E09               	movwf	(??_ISR+4)& (0+255),c
  6403  00010A  6A0A               	clrf	(??_ISR+5)& (0+255),c
  6404  00010C  5007               	movf	??_ISR+2,w,c
  6405  00010E  5C09               	subwf	??_ISR+4,w,c
  6406  000110  500A               	movf	??_ISR+5,w,c
  6407  000112  0A80               	xorlw	128
  6408  000114  6E0B               	movwf	(??_ISR+6)& (0+255),c
  6409  000116  5008               	movf	??_ISR+3,w,c
  6410  000118  0A80               	xorlw	128
  6411  00011A  580B               	subwfb	(??_ISR+6)& (0+255),w,c
  6412  00011C  B0D8               	btfsc	status,0,c
  6413  00011E  D013               	goto	i2l289
  6414                           
  6415                           ;main.c: 616: text_prgm[0][CptSpi] = TextSpi[CptSpi];
  6416  000120  505F               	movf	_CptSpi,w,c
  6417  000122  0D01               	mullw	1
  6418  000124  0E00               	movlw	low _TextSpi
  6419  000126  24F3               	addwf	prodl,w,c
  6420  000128  6ED9               	movwf	fsr2l,c
  6421  00012A  0E03               	movlw	high _TextSpi
  6422  00012C  20F4               	addwfc	prodh,w,c
  6423  00012E  6EDA               	movwf	fsr2h,c
  6424  000130  505F               	movf	_CptSpi,w,c
  6425  000132  0D01               	mullw	1
  6426  000134  0E00               	movlw	low _text_prgm
  6427  000136  24F3               	addwf	prodl,w,c
  6428  000138  6EE1               	movwf	fsr1l,c
  6429  00013A  0E02               	movlw	high _text_prgm
  6430  00013C  20F4               	addwfc	prodh,w,c
  6431  00013E  6EE2               	movwf	fsr1h,c
  6432  000140  CFDF FFE7          	movff	indf2,indf1
  6433                           
  6434                           ;main.c: 617: } else {
  6435  000144  D00A               	goto	i2l290
  6436  000146                     i2l289:
  6437                           
  6438                           ;main.c: 618: text_prgm[0][CptSpi] = '\0';
  6439  000146  505F               	movf	_CptSpi,w,c
  6440  000148  0D01               	mullw	1
  6441  00014A  0E00               	movlw	low _text_prgm
  6442  00014C  24F3               	addwf	prodl,w,c
  6443  00014E  6ED9               	movwf	fsr2l,c
  6444  000150  0E02               	movlw	high _text_prgm
  6445  000152  20F4               	addwfc	prodh,w,c
  6446  000154  6EDA               	movwf	fsr2h,c
  6447  000156  0E00               	movlw	0
  6448  000158  6EDF               	movwf	indf2,c
  6449  00015A                     i2l290:
  6450  00015A  2A5F               	incf	_CptSpi,f,c
  6451  00015C  D7C5               	goto	i2l2988
  6452  00015E                     
  6453                           ;main.c: 623: for(CptSpi=0;CptSpi<15;CptSpi++) {
  6454  00015E  0E00               	movlw	0
  6455  000160  6E5F               	movwf	_CptSpi,c
  6456  000162                     i2l3004:
  6457  000162  0E0E               	movlw	14
  6458  000164  645F               	cpfsgt	_CptSpi,c
  6459  000166  D001               	goto	i2l293
  6460  000168  D171               	goto	i2l325
  6461  00016A                     i2l293:
  6462                           
  6463                           ;main.c: 624: if(CptSpi < TailleMsgSpi-2) {
  6464  00016A  0EFE               	movlw	254
  6465  00016C  6E05               	movwf	??_ISR& (0+255),c
  6466  00016E  0EFF               	movlw	255
  6467  000170  6E06               	movwf	(??_ISR+1)& (0+255),c
  6468  000172  505C               	movf	_TailleMsgSpi,w,c
  6469  000174  6E07               	movwf	(??_ISR+2)& (0+255),c
  6470  000176  6A08               	clrf	(??_ISR+3)& (0+255),c
  6471  000178  5005               	movf	??_ISR,w,c
  6472  00017A  2607               	addwf	??_ISR+2,f,c
  6473  00017C  5006               	movf	??_ISR+1,w,c
  6474  00017E  2208               	addwfc	??_ISR+3,f,c
  6475  000180  505F               	movf	_CptSpi,w,c
  6476  000182  6E09               	movwf	(??_ISR+4)& (0+255),c
  6477  000184  6A0A               	clrf	(??_ISR+5)& (0+255),c
  6478  000186  5007               	movf	??_ISR+2,w,c
  6479  000188  5C09               	subwf	??_ISR+4,w,c
  6480  00018A  500A               	movf	??_ISR+5,w,c
  6481  00018C  0A80               	xorlw	128
  6482  00018E  6E0B               	movwf	(??_ISR+6)& (0+255),c
  6483  000190  5008               	movf	??_ISR+3,w,c
  6484  000192  0A80               	xorlw	128
  6485  000194  580B               	subwfb	(??_ISR+6)& (0+255),w,c
  6486  000196  B0D8               	btfsc	status,0,c
  6487  000198  D013               	goto	i2l295
  6488                           
  6489                           ;main.c: 625: text_prgm[1][CptSpi] = TextSpi[CptSpi];
  6490  00019A  505F               	movf	_CptSpi,w,c
  6491  00019C  0D01               	mullw	1
  6492  00019E  0E00               	movlw	low _TextSpi
  6493  0001A0  24F3               	addwf	prodl,w,c
  6494  0001A2  6ED9               	movwf	fsr2l,c
  6495  0001A4  0E03               	movlw	high _TextSpi
  6496  0001A6  20F4               	addwfc	prodh,w,c
  6497  0001A8  6EDA               	movwf	fsr2h,c
  6498  0001AA  505F               	movf	_CptSpi,w,c
  6499  0001AC  0D01               	mullw	1
  6500  0001AE  0E0F               	movlw	low (_text_prgm+15)
  6501  0001B0  24F3               	addwf	prodl,w,c
  6502  0001B2  6EE1               	movwf	fsr1l,c
  6503  0001B4  0E02               	movlw	high (_text_prgm+15)
  6504  0001B6  20F4               	addwfc	prodh,w,c
  6505  0001B8  6EE2               	movwf	fsr1h,c
  6506  0001BA  CFDF FFE7          	movff	indf2,indf1
  6507                           
  6508                           ;main.c: 626: } else {
  6509  0001BE  D00A               	goto	i2l296
  6510  0001C0                     i2l295:
  6511                           
  6512                           ;main.c: 627: text_prgm[1][CptSpi] = '\0';
  6513  0001C0  505F               	movf	_CptSpi,w,c
  6514  0001C2  0D01               	mullw	1
  6515  0001C4  0E0F               	movlw	low (_text_prgm+15)
  6516  0001C6  24F3               	addwf	prodl,w,c
  6517  0001C8  6ED9               	movwf	fsr2l,c
  6518  0001CA  0E02               	movlw	high (_text_prgm+15)
  6519  0001CC  20F4               	addwfc	prodh,w,c
  6520  0001CE  6EDA               	movwf	fsr2h,c
  6521  0001D0  0E00               	movlw	0
  6522  0001D2  6EDF               	movwf	indf2,c
  6523  0001D4                     i2l296:
  6524  0001D4  2A5F               	incf	_CptSpi,f,c
  6525  0001D6  D7C5               	goto	i2l3004
  6526  0001D8                     
  6527                           ;main.c: 632: for(CptSpi=0;CptSpi<15;CptSpi++) {
  6528  0001D8  0E00               	movlw	0
  6529  0001DA  6E5F               	movwf	_CptSpi,c
  6530  0001DC                     i2l3020:
  6531  0001DC  0E0E               	movlw	14
  6532  0001DE  645F               	cpfsgt	_CptSpi,c
  6533  0001E0  D001               	goto	i2l298
  6534  0001E2  D134               	goto	i2l325
  6535  0001E4                     i2l298:
  6536                           
  6537                           ;main.c: 633: if(CptSpi < TailleMsgSpi-2) {
  6538  0001E4  0EFE               	movlw	254
  6539  0001E6  6E05               	movwf	??_ISR& (0+255),c
  6540  0001E8  0EFF               	movlw	255
  6541  0001EA  6E06               	movwf	(??_ISR+1)& (0+255),c
  6542  0001EC  505C               	movf	_TailleMsgSpi,w,c
  6543  0001EE  6E07               	movwf	(??_ISR+2)& (0+255),c
  6544  0001F0  6A08               	clrf	(??_ISR+3)& (0+255),c
  6545  0001F2  5005               	movf	??_ISR,w,c
  6546  0001F4  2607               	addwf	??_ISR+2,f,c
  6547  0001F6  5006               	movf	??_ISR+1,w,c
  6548  0001F8  2208               	addwfc	??_ISR+3,f,c
  6549  0001FA  505F               	movf	_CptSpi,w,c
  6550  0001FC  6E09               	movwf	(??_ISR+4)& (0+255),c
  6551  0001FE  6A0A               	clrf	(??_ISR+5)& (0+255),c
  6552  000200  5007               	movf	??_ISR+2,w,c
  6553  000202  5C09               	subwf	??_ISR+4,w,c
  6554  000204  500A               	movf	??_ISR+5,w,c
  6555  000206  0A80               	xorlw	128
  6556  000208  6E0B               	movwf	(??_ISR+6)& (0+255),c
  6557  00020A  5008               	movf	??_ISR+3,w,c
  6558  00020C  0A80               	xorlw	128
  6559  00020E  580B               	subwfb	(??_ISR+6)& (0+255),w,c
  6560  000210  B0D8               	btfsc	status,0,c
  6561  000212  D013               	goto	i2l300
  6562                           
  6563                           ;main.c: 634: text_prgm[2][CptSpi] = TextSpi[CptSpi];
  6564  000214  505F               	movf	_CptSpi,w,c
  6565  000216  0D01               	mullw	1
  6566  000218  0E00               	movlw	low _TextSpi
  6567  00021A  24F3               	addwf	prodl,w,c
  6568  00021C  6ED9               	movwf	fsr2l,c
  6569  00021E  0E03               	movlw	high _TextSpi
  6570  000220  20F4               	addwfc	prodh,w,c
  6571  000222  6EDA               	movwf	fsr2h,c
  6572  000224  505F               	movf	_CptSpi,w,c
  6573  000226  0D01               	mullw	1
  6574  000228  0E1E               	movlw	low (_text_prgm+30)
  6575  00022A  24F3               	addwf	prodl,w,c
  6576  00022C  6EE1               	movwf	fsr1l,c
  6577  00022E  0E02               	movlw	high (_text_prgm+30)
  6578  000230  20F4               	addwfc	prodh,w,c
  6579  000232  6EE2               	movwf	fsr1h,c
  6580  000234  CFDF FFE7          	movff	indf2,indf1
  6581                           
  6582                           ;main.c: 635: } else {
  6583  000238  D00A               	goto	i2l301
  6584  00023A                     i2l300:
  6585                           
  6586                           ;main.c: 636: text_prgm[2][CptSpi] = '\0';
  6587  00023A  505F               	movf	_CptSpi,w,c
  6588  00023C  0D01               	mullw	1
  6589  00023E  0E1E               	movlw	low (_text_prgm+30)
  6590  000240  24F3               	addwf	prodl,w,c
  6591  000242  6ED9               	movwf	fsr2l,c
  6592  000244  0E02               	movlw	high (_text_prgm+30)
  6593  000246  20F4               	addwfc	prodh,w,c
  6594  000248  6EDA               	movwf	fsr2h,c
  6595  00024A  0E00               	movlw	0
  6596  00024C  6EDF               	movwf	indf2,c
  6597  00024E                     i2l301:
  6598  00024E  2A5F               	incf	_CptSpi,f,c
  6599  000250  D7C5               	goto	i2l3020
  6600  000252                     
  6601                           ;main.c: 641: for(CptSpi=0;CptSpi<15;CptSpi++) {
  6602  000252  0E00               	movlw	0
  6603  000254  6E5F               	movwf	_CptSpi,c
  6604  000256                     i2l3036:
  6605  000256  0E0E               	movlw	14
  6606  000258  645F               	cpfsgt	_CptSpi,c
  6607  00025A  D001               	goto	i2l303
  6608  00025C  D0F7               	goto	i2l325
  6609  00025E                     i2l303:
  6610                           
  6611                           ;main.c: 642: if(CptSpi < TailleMsgSpi-2) {
  6612  00025E  0EFE               	movlw	254
  6613  000260  6E05               	movwf	??_ISR& (0+255),c
  6614  000262  0EFF               	movlw	255
  6615  000264  6E06               	movwf	(??_ISR+1)& (0+255),c
  6616  000266  505C               	movf	_TailleMsgSpi,w,c
  6617  000268  6E07               	movwf	(??_ISR+2)& (0+255),c
  6618  00026A  6A08               	clrf	(??_ISR+3)& (0+255),c
  6619  00026C  5005               	movf	??_ISR,w,c
  6620  00026E  2607               	addwf	??_ISR+2,f,c
  6621  000270  5006               	movf	??_ISR+1,w,c
  6622  000272  2208               	addwfc	??_ISR+3,f,c
  6623  000274  505F               	movf	_CptSpi,w,c
  6624  000276  6E09               	movwf	(??_ISR+4)& (0+255),c
  6625  000278  6A0A               	clrf	(??_ISR+5)& (0+255),c
  6626  00027A  5007               	movf	??_ISR+2,w,c
  6627  00027C  5C09               	subwf	??_ISR+4,w,c
  6628  00027E  500A               	movf	??_ISR+5,w,c
  6629  000280  0A80               	xorlw	128
  6630  000282  6E0B               	movwf	(??_ISR+6)& (0+255),c
  6631  000284  5008               	movf	??_ISR+3,w,c
  6632  000286  0A80               	xorlw	128
  6633  000288  580B               	subwfb	(??_ISR+6)& (0+255),w,c
  6634  00028A  B0D8               	btfsc	status,0,c
  6635  00028C  D013               	goto	i2l305
  6636                           
  6637                           ;main.c: 643: text_prgm[3][CptSpi] = TextSpi[CptSpi];
  6638  00028E  505F               	movf	_CptSpi,w,c
  6639  000290  0D01               	mullw	1
  6640  000292  0E00               	movlw	low _TextSpi
  6641  000294  24F3               	addwf	prodl,w,c
  6642  000296  6ED9               	movwf	fsr2l,c
  6643  000298  0E03               	movlw	high _TextSpi
  6644  00029A  20F4               	addwfc	prodh,w,c
  6645  00029C  6EDA               	movwf	fsr2h,c
  6646  00029E  505F               	movf	_CptSpi,w,c
  6647  0002A0  0D01               	mullw	1
  6648  0002A2  0E2D               	movlw	low (_text_prgm+45)
  6649  0002A4  24F3               	addwf	prodl,w,c
  6650  0002A6  6EE1               	movwf	fsr1l,c
  6651  0002A8  0E02               	movlw	high (_text_prgm+45)
  6652  0002AA  20F4               	addwfc	prodh,w,c
  6653  0002AC  6EE2               	movwf	fsr1h,c
  6654  0002AE  CFDF FFE7          	movff	indf2,indf1
  6655                           
  6656                           ;main.c: 644: } else {
  6657  0002B2  D00A               	goto	i2l306
  6658  0002B4                     i2l305:
  6659                           
  6660                           ;main.c: 645: text_prgm[3][CptSpi] = '\0';
  6661  0002B4  505F               	movf	_CptSpi,w,c
  6662  0002B6  0D01               	mullw	1
  6663  0002B8  0E2D               	movlw	low (_text_prgm+45)
  6664  0002BA  24F3               	addwf	prodl,w,c
  6665  0002BC  6ED9               	movwf	fsr2l,c
  6666  0002BE  0E02               	movlw	high (_text_prgm+45)
  6667  0002C0  20F4               	addwfc	prodh,w,c
  6668  0002C2  6EDA               	movwf	fsr2h,c
  6669  0002C4  0E00               	movlw	0
  6670  0002C6  6EDF               	movwf	indf2,c
  6671  0002C8                     i2l306:
  6672  0002C8  2A5F               	incf	_CptSpi,f,c
  6673  0002CA  D7C5               	goto	i2l3036
  6674  0002CC                     
  6675                           ;main.c: 650: for(CptSpi=0;CptSpi<15;CptSpi++) {
  6676  0002CC  0E00               	movlw	0
  6677  0002CE  6E5F               	movwf	_CptSpi,c
  6678  0002D0                     i2l3052:
  6679  0002D0  0E0E               	movlw	14
  6680  0002D2  645F               	cpfsgt	_CptSpi,c
  6681  0002D4  D001               	goto	i2l308
  6682  0002D6  D0BA               	goto	i2l325
  6683  0002D8                     i2l308:
  6684                           
  6685                           ;main.c: 651: if(CptSpi < TailleMsgSpi-2) {
  6686  0002D8  0EFE               	movlw	254
  6687  0002DA  6E05               	movwf	??_ISR& (0+255),c
  6688  0002DC  0EFF               	movlw	255
  6689  0002DE  6E06               	movwf	(??_ISR+1)& (0+255),c
  6690  0002E0  505C               	movf	_TailleMsgSpi,w,c
  6691  0002E2  6E07               	movwf	(??_ISR+2)& (0+255),c
  6692  0002E4  6A08               	clrf	(??_ISR+3)& (0+255),c
  6693  0002E6  5005               	movf	??_ISR,w,c
  6694  0002E8  2607               	addwf	??_ISR+2,f,c
  6695  0002EA  5006               	movf	??_ISR+1,w,c
  6696  0002EC  2208               	addwfc	??_ISR+3,f,c
  6697  0002EE  505F               	movf	_CptSpi,w,c
  6698  0002F0  6E09               	movwf	(??_ISR+4)& (0+255),c
  6699  0002F2  6A0A               	clrf	(??_ISR+5)& (0+255),c
  6700  0002F4  5007               	movf	??_ISR+2,w,c
  6701  0002F6  5C09               	subwf	??_ISR+4,w,c
  6702  0002F8  500A               	movf	??_ISR+5,w,c
  6703  0002FA  0A80               	xorlw	128
  6704  0002FC  6E0B               	movwf	(??_ISR+6)& (0+255),c
  6705  0002FE  5008               	movf	??_ISR+3,w,c
  6706  000300  0A80               	xorlw	128
  6707  000302  580B               	subwfb	(??_ISR+6)& (0+255),w,c
  6708  000304  B0D8               	btfsc	status,0,c
  6709  000306  D013               	goto	i2l310
  6710                           
  6711                           ;main.c: 652: text_prgm[4][CptSpi] = TextSpi[CptSpi];
  6712  000308  505F               	movf	_CptSpi,w,c
  6713  00030A  0D01               	mullw	1
  6714  00030C  0E00               	movlw	low _TextSpi
  6715  00030E  24F3               	addwf	prodl,w,c
  6716  000310  6ED9               	movwf	fsr2l,c
  6717  000312  0E03               	movlw	high _TextSpi
  6718  000314  20F4               	addwfc	prodh,w,c
  6719  000316  6EDA               	movwf	fsr2h,c
  6720  000318  505F               	movf	_CptSpi,w,c
  6721  00031A  0D01               	mullw	1
  6722  00031C  0E3C               	movlw	low (_text_prgm+60)
  6723  00031E  24F3               	addwf	prodl,w,c
  6724  000320  6EE1               	movwf	fsr1l,c
  6725  000322  0E02               	movlw	high (_text_prgm+60)
  6726  000324  20F4               	addwfc	prodh,w,c
  6727  000326  6EE2               	movwf	fsr1h,c
  6728  000328  CFDF FFE7          	movff	indf2,indf1
  6729                           
  6730                           ;main.c: 653: } else {
  6731  00032C  D00A               	goto	i2l311
  6732  00032E                     i2l310:
  6733                           
  6734                           ;main.c: 654: text_prgm[4][CptSpi] = '\0';
  6735  00032E  505F               	movf	_CptSpi,w,c
  6736  000330  0D01               	mullw	1
  6737  000332  0E3C               	movlw	low (_text_prgm+60)
  6738  000334  24F3               	addwf	prodl,w,c
  6739  000336  6ED9               	movwf	fsr2l,c
  6740  000338  0E02               	movlw	high (_text_prgm+60)
  6741  00033A  20F4               	addwfc	prodh,w,c
  6742  00033C  6EDA               	movwf	fsr2h,c
  6743  00033E  0E00               	movlw	0
  6744  000340  6EDF               	movwf	indf2,c
  6745  000342                     i2l311:
  6746  000342  2A5F               	incf	_CptSpi,f,c
  6747  000344  D7C5               	goto	i2l3052
  6748  000346                     i2l312:
  6749                           
  6750                           ; BSR set to: 0
  6751                           ;main.c: 659: PosX = TextSpi[0];
  6752  000346  C300  F0DF         	movff	_TextSpi,_PosX
  6753  00034A  6BE0               	clrf	(_PosX+1)& (0+255),b
  6754                           
  6755                           ; BSR set to: 0
  6756                           ;main.c: 660: PosX = PosX << 8;
  6757  00034C  51DF               	movf	_PosX& (0+255),w,b
  6758  00034E  6FE0               	movwf	(_PosX+1)& (0+255),b
  6759  000350  6BDF               	clrf	_PosX& (0+255),b
  6760                           
  6761                           ; BSR set to: 0
  6762                           ;main.c: 661: PosX += TextSpi[1];
  6763  000352  0103               	movlb	3	; () banked
  6764  000354  5101               	movf	(_TextSpi+1)& (0+255),w,b
  6765  000356  0100               	movlb	0	; () banked
  6766  000358  27DF               	addwf	_PosX& (0+255),f,b
  6767  00035A  0E00               	movlw	0
  6768  00035C  23E0               	addwfc	(_PosX+1)& (0+255),f,b
  6769                           
  6770                           ; BSR set to: 0
  6771                           ;main.c: 662: if(PosX > 750) {
  6772  00035E  BFE0               	btfsc	(_PosX+1)& (0+255),7,b
  6773  000360  D075               	goto	i2l325
  6774  000362  0EEF               	movlw	239
  6775  000364  5DDF               	subwf	_PosX& (0+255),w,b
  6776  000366  0E02               	movlw	2
  6777  000368  59E0               	subwfb	(_PosX+1)& (0+255),w,b
  6778  00036A  A0D8               	btfss	status,0,c
  6779  00036C  D06F               	goto	i2l325
  6780                           
  6781                           ; BSR set to: 0
  6782                           ;main.c: 663: PosX = 750;
  6783  00036E  0E02               	movlw	2
  6784  000370  6FE0               	movwf	(_PosX+1)& (0+255),b
  6785  000372  0EEE               	movlw	238
  6786  000374  6FDF               	movwf	_PosX& (0+255),b
  6787                           
  6788                           ; BSR set to: 0
  6789                           ;main.c: 664: }
  6790                           ;main.c: 665: break;
  6791  000376  D06A               	goto	i2l325
  6792  000378                     i2l314:
  6793                           
  6794                           ; BSR set to: 0
  6795                           ;main.c: 667: PosY = TextSpi[0];
  6796  000378  C300  F0DD         	movff	_TextSpi,_PosY
  6797  00037C  6BDE               	clrf	(_PosY+1)& (0+255),b
  6798                           
  6799                           ; BSR set to: 0
  6800                           ;main.c: 668: PosY = PosY << 8;
  6801  00037E  51DD               	movf	_PosY& (0+255),w,b
  6802  000380  6FDE               	movwf	(_PosY+1)& (0+255),b
  6803  000382  6BDD               	clrf	_PosY& (0+255),b
  6804                           
  6805                           ; BSR set to: 0
  6806                           ;main.c: 669: PosY += TextSpi[1];
  6807  000384  0103               	movlb	3	; () banked
  6808  000386  5101               	movf	(_TextSpi+1)& (0+255),w,b
  6809  000388  0100               	movlb	0	; () banked
  6810  00038A  27DD               	addwf	_PosY& (0+255),f,b
  6811  00038C  0E00               	movlw	0
  6812  00038E  23DE               	addwfc	(_PosY+1)& (0+255),f,b
  6813                           
  6814                           ; BSR set to: 0
  6815                           ;main.c: 670: if(PosY > 430) {
  6816  000390  BFDE               	btfsc	(_PosY+1)& (0+255),7,b
  6817  000392  D05C               	goto	i2l325
  6818  000394  0EAF               	movlw	175
  6819  000396  5DDD               	subwf	_PosY& (0+255),w,b
  6820  000398  0E01               	movlw	1
  6821  00039A  59DE               	subwfb	(_PosY+1)& (0+255),w,b
  6822  00039C  A0D8               	btfss	status,0,c
  6823  00039E  D056               	goto	i2l325
  6824                           
  6825                           ; BSR set to: 0
  6826                           ;main.c: 671: PosY = 430;
  6827  0003A0  0E01               	movlw	1
  6828  0003A2  6FDE               	movwf	(_PosY+1)& (0+255),b
  6829  0003A4  0EAE               	movlw	174
  6830  0003A6  6FDD               	movwf	_PosY& (0+255),b
  6831                           
  6832                           ; BSR set to: 0
  6833                           ;main.c: 676: break;
  6834                           
  6835                           ;main.c: 674: case 12:
  6836                           
  6837                           ; BSR set to: 0
  6838                           ;main.c: 672: }
  6839                           ;main.c: 673: break;
  6840  0003A8  D051               	goto	i2l325
  6841  0003AA                     
  6842                           ; BSR set to: 0
  6843                           ;main.c: 678: case 9:
  6844                           ;main.c: 679: case 10:
  6845                           ;main.c: 680: case 11:
  6846                           ;main.c: 681: TailleTerm = TailleMsgSpi-2;
  6847                           
  6848                           ; BSR set to: 0
  6849                           
  6850                           ; BSR set to: 0
  6851                           
  6852                           ; BSR set to: 0
  6853                           
  6854                           ; BSR set to: 0
  6855  0003AA  0EFE               	movlw	254
  6856  0003AC  245C               	addwf	_TailleMsgSpi,w,c
  6857  0003AE  6FD6               	movwf	_TailleTerm& (0+255),b
  6858  0003B0  6BD7               	clrf	(_TailleTerm+1)& (0+255),b
  6859  0003B2  0EFF               	movlw	255
  6860  0003B4  23D7               	addwfc	(_TailleTerm+1)& (0+255),f,b
  6861                           
  6862                           ;main.c: 682: break;
  6863  0003B6  D04A               	goto	i2l325
  6864  0003B8                     i2l321:
  6865                           
  6866                           ; BSR set to: 0
  6867                           ;main.c: 684: Score = TextSpi[0];
  6868  0003B8  C300  F0D4         	movff	_TextSpi,_Score
  6869  0003BC  6BD5               	clrf	(_Score+1)& (0+255),b
  6870                           
  6871                           ; BSR set to: 0
  6872                           ;main.c: 685: Score = Score << 8;
  6873  0003BE  51D4               	movf	_Score& (0+255),w,b
  6874  0003C0  6FD5               	movwf	(_Score+1)& (0+255),b
  6875  0003C2  6BD4               	clrf	_Score& (0+255),b
  6876                           
  6877                           ; BSR set to: 0
  6878                           ;main.c: 686: Score += TextSpi[1];
  6879  0003C4  0103               	movlb	3	; () banked
  6880  0003C6  5101               	movf	(_TextSpi+1)& (0+255),w,b
  6881  0003C8  0100               	movlb	0	; () banked
  6882  0003CA  27D4               	addwf	_Score& (0+255),f,b
  6883  0003CC  0E00               	movlw	0
  6884  0003CE  23D5               	addwfc	(_Score+1)& (0+255),f,b
  6885                           
  6886                           ; BSR set to: 0
  6887                           ;main.c: 687: if(Score > 999) {
  6888  0003D0  BFD5               	btfsc	(_Score+1)& (0+255),7,b
  6889  0003D2  D03C               	goto	i2l325
  6890  0003D4  0EE8               	movlw	232
  6891  0003D6  5DD4               	subwf	_Score& (0+255),w,b
  6892  0003D8  0E03               	movlw	3
  6893  0003DA  59D5               	subwfb	(_Score+1)& (0+255),w,b
  6894  0003DC  A0D8               	btfss	status,0,c
  6895  0003DE  D036               	goto	i2l325
  6896                           
  6897                           ; BSR set to: 0
  6898                           ;main.c: 688: Score = 999;
  6899  0003E0  0E03               	movlw	3
  6900  0003E2  6FD5               	movwf	(_Score+1)& (0+255),b
  6901  0003E4  0EE7               	movlw	231
  6902  0003E6  6FD4               	movwf	_Score& (0+255),b
  6903                           
  6904                           ; BSR set to: 0
  6905                           ;main.c: 689: }
  6906                           ;main.c: 690: break;
  6907  0003E8  D031               	goto	i2l325
  6908  0003EA                     i2l323:
  6909                           
  6910                           ; BSR set to: 0
  6911  0003EA  00FF               	reset		;# 
  6912                           
  6913                           ;main.c: 697: }
  6914                           
  6915                           ;main.c: 696: break;
  6916                           
  6917                           ;main.c: 694: default:
  6918                           
  6919                           ;main.c: 693: break;
  6920  0003EC  D02F               	goto	i2l325
  6921  0003EE                     i2l285:
  6922  0003EE  0100               	movlb	0	; () banked
  6923  0003F0  51D9               	movf	_TypeVarSpi& (0+255),w,b
  6924                           
  6925                           ; Switch size 1, requested type "space"
  6926                           ; Number of cases is 14, Range of values is 1 to 14
  6927                           ; switch strategies available:
  6928                           ; Name         Instructions Cycles
  6929                           ; simple_byte           43    22 (average)
  6930                           ;	Chosen strategy is simple_byte
  6931  0003F2  0A01               	xorlw	1	; case 1
  6932  0003F4  B4D8               	btfsc	status,2,c
  6933  0003F6  D676               	goto	i2l286
  6934  0003F8  0A03               	xorlw	3	; case 2
  6935  0003FA  B4D8               	btfsc	status,2,c
  6936  0003FC  D6B0               	goto	i2l292
  6937  0003FE  0A01               	xorlw	1	; case 3
  6938  000400  B4D8               	btfsc	status,2,c
  6939  000402  D6EA               	goto	i2l297
  6940  000404  0A07               	xorlw	7	; case 4
  6941  000406  B4D8               	btfsc	status,2,c
  6942  000408  D724               	goto	i2l302
  6943  00040A  0A01               	xorlw	1	; case 5
  6944  00040C  B4D8               	btfsc	status,2,c
  6945  00040E  D75E               	goto	i2l307
  6946  000410  0A03               	xorlw	3	; case 6
  6947  000412  B4D8               	btfsc	status,2,c
  6948  000414  D798               	goto	i2l312
  6949  000416  0A01               	xorlw	1	; case 7
  6950  000418  B4D8               	btfsc	status,2,c
  6951  00041A  D7AE               	goto	i2l314
  6952  00041C  0A0F               	xorlw	15	; case 8
  6953  00041E  B4D8               	btfsc	status,2,c
  6954  000420  D7C4               	goto	i2l317
  6955  000422  0A01               	xorlw	1	; case 9
  6956  000424  B4D8               	btfsc	status,2,c
  6957  000426  D7C1               	goto	i2l317
  6958  000428  0A03               	xorlw	3	; case 10
  6959  00042A  B4D8               	btfsc	status,2,c
  6960  00042C  D7BE               	goto	i2l317
  6961  00042E  0A01               	xorlw	1	; case 11
  6962  000430  B4D8               	btfsc	status,2,c
  6963  000432  D7BB               	goto	i2l317
  6964  000434  0A07               	xorlw	7	; case 12
  6965  000436  B4D8               	btfsc	status,2,c
  6966  000438  D009               	goto	i2l325
  6967  00043A  0A01               	xorlw	1	; case 13
  6968  00043C  B4D8               	btfsc	status,2,c
  6969  00043E  D7BC               	goto	i2l321
  6970  000440  0A03               	xorlw	3	; case 14
  6971  000442  B4D8               	btfsc	status,2,c
  6972  000444  D7D2               	goto	i2l323
  6973                           
  6974                           ; BSR set to: 0
  6975                           
  6976                           ; BSR set to: 0
  6977  000446  D002               	goto	i2l325
  6978  000448                     L3:
  6979  000448  6E5D               	movwf	_EtatSpi,c
  6980                           
  6981                           ;main.c: 700: break;
  6982  00044A  D010               	goto	i2l277
  6983  00044C                     i2l325:
  6984                           
  6985                           ;main.c: 702: EtatSpi = 0;
  6986  00044C  0E00               	movlw	0
  6987  00044E  D7FC               	goto	L3
  6988  000450                     i2l274:
  6989  000450  505D               	movf	_EtatSpi,w,c
  6990                           
  6991                           ; Switch size 1, requested type "space"
  6992                           ; Number of cases is 4, Range of values is 0 to 3
  6993                           ; switch strategies available:
  6994                           ; Name         Instructions Cycles
  6995                           ; simple_byte           13     7 (average)
  6996                           ;	Chosen strategy is simple_byte
  6997  000452  0A00               	xorlw	0	; case 0
  6998  000454  B4D8               	btfsc	status,2,c
  6999  000456  D603               	goto	i2l275
  7000  000458  0A01               	xorlw	1	; case 1
  7001  00045A  B4D8               	btfsc	status,2,c
  7002  00045C  D60E               	goto	i2l278
  7003  00045E  0A03               	xorlw	3	; case 2
  7004  000460  B4D8               	btfsc	status,2,c
  7005  000462  D617               	goto	i2l281
  7006  000464  0A01               	xorlw	1	; case 3
  7007  000466  B4D8               	btfsc	status,2,c
  7008  000468  D62E               	goto	i2l283
  7009  00046A  D7F0               	goto	i2l325
  7010  00046C                     i2l277:
  7011                           
  7012                           ;main.c: 705: Checksum += data_spi;
  7013  00046C  501F               	movf	ISR@data_spi,w,c
  7014  00046E  2652               	addwf	_Checksum,f,c
  7015  000470  0E00               	movlw	0
  7016  000472  2253               	addwfc	_Checksum+1,f,c
  7017                           
  7018                           ;main.c: 706: if(TabPileSend[CptReadPile]) {
  7019  000474  5055               	movf	_CptReadPile,w,c
  7020  000476  0D01               	mullw	1
  7021  000478  0E48               	movlw	low _TabPileSend
  7022  00047A  24F3               	addwf	prodl,w,c
  7023  00047C  6ED9               	movwf	fsr2l,c
  7024  00047E  0E00               	movlw	high _TabPileSend
  7025  000480  20F4               	addwfc	prodh,w,c
  7026  000482  6EDA               	movwf	fsr2h,c
  7027  000484  50DF               	movf	indf2,w,c
  7028  000486  B4D8               	btfsc	status,2,c
  7029  000488  D071               	goto	i2l326
  7030                           
  7031                           ;main.c: 707: CptSpiSend++;
  7032  00048A  2A57               	incf	_CptSpiSend,f,c
  7033                           
  7034                           ;main.c: 708: switch(CptSpiSend) {
  7035  00048C  D061               	goto	i2l327
  7036  00048E                     
  7037                           ;main.c: 710: SSPBUF = 0x04;
  7038  00048E  0E04               	movlw	4
  7039  000490  D06E               	goto	L5
  7040  000492                     
  7041                           ;main.c: 713: SSPBUF = TabPileSend[CptReadPile];
  7042  000492  5055               	movf	_CptReadPile,w,c
  7043  000494  0D01               	mullw	1
  7044  000496  0E48               	movlw	low _TabPileSend
  7045  000498  24F3               	addwf	prodl,w,c
  7046  00049A  6ED9               	movwf	fsr2l,c
  7047  00049C  0E00               	movlw	high _TabPileSend
  7048  00049E  20F4               	addwfc	prodh,w,c
  7049  0004A0  6EDA               	movwf	fsr2h,c
  7050  0004A2  50DF               	movf	indf2,w,c
  7051  0004A4  D064               	goto	L5
  7052  0004A6                     
  7053                           ;main.c: 718: case 16:
  7054                           ;main.c: 719: SendNbSpi = PrgmSens;
  7055  0004A6  C059  F056         	movff	_PrgmSens,_SendNbSpi
  7056                           
  7057                           ;main.c: 720: PrgmSens = 0;
  7058  0004AA  0E00               	movlw	0
  7059  0004AC  6E59               	movwf	_PrgmSens,c
  7060                           
  7061                           ;main.c: 721: break;
  7062  0004AE  D01D               	goto	i2l335
  7063  0004B0                     i2l336:
  7064                           
  7065                           ;main.c: 723: SendNbSpi = Stop;
  7066  0004B0  C058  F056         	movff	_Stop,_SendNbSpi
  7067                           
  7068                           ;main.c: 724: Stop = 0;
  7069  0004B4  0E00               	movlw	0
  7070  0004B6  6E58               	movwf	_Stop,c
  7071                           
  7072                           ;main.c: 725: break;
  7073  0004B8  D018               	goto	i2l335
  7074  0004BA                     i2l337:
  7075                           
  7076                           ;main.c: 727: SendNbSpi = PosCursorPrgm;
  7077  0004BA  C0DA  F056         	movff	_PosCursorPrgm,_SendNbSpi
  7078                           
  7079                           ;main.c: 729: }
  7080                           
  7081                           ;main.c: 728: break;
  7082  0004BE  D015               	goto	i2l335
  7083  0004C0  5055               	movf	_CptReadPile,w,c
  7084  0004C2  0D01               	mullw	1
  7085  0004C4  0E48               	movlw	low _TabPileSend
  7086  0004C6  24F3               	addwf	prodl,w,c
  7087  0004C8  6ED9               	movwf	fsr2l,c
  7088  0004CA  0E00               	movlw	high _TabPileSend
  7089  0004CC  20F4               	addwfc	prodh,w,c
  7090  0004CE  6EDA               	movwf	fsr2h,c
  7091  0004D0  50DF               	movf	indf2,w,c
  7092                           
  7093                           ; Switch size 1, requested type "space"
  7094                           ; Number of cases is 4, Range of values is 15 to 18
  7095                           ; switch strategies available:
  7096                           ; Name         Instructions Cycles
  7097                           ; simple_byte           13     7 (average)
  7098                           ;	Chosen strategy is simple_byte
  7099  0004D2  0A0F               	xorlw	15	; case 15
  7100  0004D4  B4D8               	btfsc	status,2,c
  7101  0004D6  D7E7               	goto	i2l333
  7102  0004D8  0A1F               	xorlw	31	; case 16
  7103  0004DA  B4D8               	btfsc	status,2,c
  7104  0004DC  D7E4               	goto	i2l333
  7105  0004DE  0A01               	xorlw	1	; case 17
  7106  0004E0  B4D8               	btfsc	status,2,c
  7107  0004E2  D7E6               	goto	i2l336
  7108  0004E4  0A03               	xorlw	3	; case 18
  7109  0004E6  B4D8               	btfsc	status,2,c
  7110  0004E8  D7E8               	goto	i2l337
  7111  0004EA                     i2l335:
  7112                           
  7113                           ;main.c: 730: SSPBUF = SendNbSpi;
  7114  0004EA  C056  FFC9         	movff	_SendNbSpi,4041	;volatile
  7115                           
  7116                           ;main.c: 731: break;
  7117  0004EE  D040               	goto	i2l339
  7118  0004F0                     
  7119                           ;main.c: 733: SSPBUF = Modulo(SendNbSpi+TabPileSend[CptReadPile]+4);
  7120  0004F0  5055               	movf	_CptReadPile,w,c
  7121  0004F2  0D01               	mullw	1
  7122  0004F4  0E48               	movlw	low _TabPileSend
  7123  0004F6  24F3               	addwf	prodl,w,c
  7124  0004F8  6ED9               	movwf	fsr2l,c
  7125  0004FA  0E00               	movlw	high _TabPileSend
  7126  0004FC  20F4               	addwfc	prodh,w,c
  7127  0004FE  6EDA               	movwf	fsr2h,c
  7128  000500  50DF               	movf	indf2,w,c
  7129  000502  6E05               	movwf	??_ISR& (0+255),c
  7130  000504  5005               	movf	??_ISR,w,c
  7131  000506  C056  F006         	movff	_SendNbSpi,??_ISR+1
  7132  00050A  6A07               	clrf	(??_ISR+2)& (0+255),c
  7133  00050C  2606               	addwf	??_ISR+1,f,c
  7134  00050E  0E00               	movlw	0
  7135  000510  2207               	addwfc	??_ISR+2,f,c
  7136  000512  0E04               	movlw	4
  7137  000514  2406               	addwf	??_ISR+1,w,c
  7138  000516  6E01               	movwf	Modulo@M_nombre,c
  7139  000518  0E00               	movlw	0
  7140  00051A  2007               	addwfc	??_ISR+2,w,c
  7141  00051C  6E02               	movwf	Modulo@M_nombre+1,c
  7142  00051E  EC5B  F00F         	call	_Modulo	;wreg free
  7143  000522  6EC9               	movwf	4041,c	;volatile
  7144                           
  7145                           ;main.c: 734: TabPileSend[CptReadPile] = 0;
  7146  000524  5055               	movf	_CptReadPile,w,c
  7147  000526  0D01               	mullw	1
  7148  000528  0E48               	movlw	low _TabPileSend
  7149  00052A  24F3               	addwf	prodl,w,c
  7150  00052C  6ED9               	movwf	fsr2l,c
  7151  00052E  0E00               	movlw	high _TabPileSend
  7152  000530  20F4               	addwfc	prodh,w,c
  7153  000532  6EDA               	movwf	fsr2h,c
  7154  000534  0E00               	movlw	0
  7155  000536  6EDF               	movwf	indf2,c
  7156                           
  7157                           ;main.c: 735: CptReadPile++;
  7158  000538  2A55               	incf	_CptReadPile,f,c
  7159                           
  7160                           ;main.c: 736: CptReadPile %= 10;
  7161  00053A  0E0A               	movlw	10
  7162  00053C  6E01               	movwf	___lbmod@divisor,c
  7163  00053E  5055               	movf	_CptReadPile,w,c
  7164  000540  ECD8  F00E         	call	___lbmod
  7165  000544  6E55               	movwf	_CptReadPile,c
  7166                           
  7167                           ;main.c: 737: CptSpiSend = 0;
  7168  000546  0E00               	movlw	0
  7169  000548  6E57               	movwf	_CptSpiSend,c
  7170                           
  7171                           ;main.c: 738: SendNbSpi = 0;
  7172  00054A  0E00               	movlw	0
  7173  00054C  6E56               	movwf	_SendNbSpi,c
  7174                           
  7175                           ;main.c: 740: }
  7176                           
  7177                           ;main.c: 739: break;
  7178  00054E  D010               	goto	i2l339
  7179  000550                     i2l327:
  7180  000550  5057               	movf	_CptSpiSend,w,c
  7181                           
  7182                           ; Switch size 1, requested type "space"
  7183                           ; Number of cases is 4, Range of values is 1 to 4
  7184                           ; switch strategies available:
  7185                           ; Name         Instructions Cycles
  7186                           ; simple_byte           13     7 (average)
  7187                           ;	Chosen strategy is simple_byte
  7188  000552  0A01               	xorlw	1	; case 1
  7189  000554  B4D8               	btfsc	status,2,c
  7190  000556  D79B               	goto	i2l328
  7191  000558  0A03               	xorlw	3	; case 2
  7192  00055A  B4D8               	btfsc	status,2,c
  7193  00055C  D79A               	goto	i2l330
  7194  00055E  0A01               	xorlw	1	; case 3
  7195  000560  B4D8               	btfsc	status,2,c
  7196  000562  D7AE               	goto	i2l332
  7197  000564  0A07               	xorlw	7	; case 4
  7198  000566  B4D8               	btfsc	status,2,c
  7199  000568  D7C3               	goto	i2l338
  7200                           
  7201                           ;main.c: 741: } else {
  7202  00056A  D002               	goto	i2l339
  7203  00056C                     i2l326:
  7204                           
  7205                           ;main.c: 742: SSPBUF = 0;
  7206  00056C  0E00               	movlw	0
  7207  00056E                     L5:
  7208  00056E  6EC9               	movwf	4041,c	;volatile
  7209  000570                     i2l339:
  7210                           
  7211                           ;main.c: 743: }
  7212                           ;main.c: 744: }
  7213                           ;main.c: 746: if(RCIF) {
  7214  000570  AA9E               	btfss	3998,5,c	;volatile
  7215  000572  D0AF               	goto	i2l349
  7216                           
  7217                           ;main.c: 747: char Receive;
  7218                           ;main.c: 748: RCIF = 0;
  7219  000574  9A9E               	bcf	3998,5,c	;volatile
  7220                           
  7221                           ;main.c: 749: Receive = RCREG;
  7222  000576  CFAE F01E          	movff	4014,ISR@Receive	;volatile
  7223                           
  7224                           ;main.c: 750: if(FlagSleep) {
  7225  00057A  505A               	movf	_FlagSleep,w,c
  7226  00057C  B4D8               	btfsc	status,2,c
  7227  00057E  D075               	goto	i2l344
  7228                           
  7229                           ;main.c: 751: if(Receive == 0x68) {
  7230  000580  0E68               	movlw	104
  7231  000582  181E               	xorwf	ISR@Receive,w,c
  7232  000584  A4D8               	btfss	status,2,c
  7233  000586  D0A5               	goto	i2l349
  7234                           
  7235                           ;main.c: 752: FlagSleep = 0;
  7236  000588  0E00               	movlw	0
  7237  00058A  6E5A               	movwf	_FlagSleep,c
  7238                           
  7239                           ;main.c: 753: FlagSpi = 1;
  7240  00058C  0E01               	movlw	1
  7241  00058E  0100               	movlb	0	; () banked
  7242  000590  D004               	goto	L6
  7243  000592                     
  7244                           ;main.c: 758: case 0x32:
  7245                           ;main.c: 759: case 0x33:
  7246                           ;main.c: 760: case 0x34:
  7247                           ;main.c: 761: EtatScreen = Receive-0x30;
  7248                           
  7249                           ; BSR set to: 0
  7250                           
  7251                           ; BSR set to: 0
  7252                           
  7253                           ; BSR set to: 0
  7254                           
  7255                           ; BSR set to: 0
  7256  000592  501E               	movf	ISR@Receive,w,c
  7257  000594  0FD0               	addlw	208
  7258  000596  D004               	goto	L7
  7259  000598                     i2l3152:
  7260                           
  7261                           ; BSR set to: 0
  7262                           ;main.c: 762: FlagSpi = 1;
  7263  000598  0E01               	movlw	1
  7264  00059A                     L6:
  7265  00059A  6FE1               	movwf	_FlagSpi& (0+255),b
  7266                           
  7267                           ;main.c: 763: break;
  7268  00059C  D09A               	goto	i2l349
  7269  00059E                     
  7270                           ;main.c: 765: case 0x42:
  7271                           ;main.c: 766: case 0x43:
  7272                           ;main.c: 767: case 0x44:
  7273                           ;main.c: 768: EtatScreen = 0;
  7274                           
  7275                           ; BSR set to: 0
  7276                           
  7277                           ; BSR set to: 0
  7278                           
  7279                           ; BSR set to: 0
  7280                           
  7281                           ; BSR set to: 0
  7282  00059E  0E00               	movlw	0
  7283  0005A0                     L7:
  7284  0005A0  0100               	movlb	0	; () banked
  7285  0005A2  6FDC               	movwf	_EtatScreen& (0+255),b
  7286  0005A4  D7F9               	goto	i2l3152
  7287  0005A6                     
  7288                           ;main.c: 772: AutoLight = 1;
  7289                           
  7290                           ; BSR set to: 0
  7291  0005A6  0E01               	movlw	1
  7292  0005A8  D001               	goto	L8
  7293  0005AA                     
  7294                           ;main.c: 775: AutoLight = 0;
  7295                           
  7296                           ; BSR set to: 0
  7297  0005AA  0E00               	movlw	0
  7298  0005AC                     L8:
  7299  0005AC  0100               	movlb	0	; () banked
  7300  0005AE  6FDB               	movwf	_AutoLight& (0+255),b
  7301                           
  7302                           ;main.c: 776: break;
  7303  0005B0  D090               	goto	i2l349
  7304  0005B2                     
  7305                           ;main.c: 778: if(PosCursorPrgm > 0) {
  7306                           
  7307                           ; BSR set to: 0
  7308  0005B2  0100               	movlb	0	; () banked
  7309  0005B4  51DA               	movf	_PosCursorPrgm& (0+255),w,b
  7310  0005B6  B4D8               	btfsc	status,2,c
  7311  0005B8  D08C               	goto	i2l349
  7312                           
  7313                           ; BSR set to: 0
  7314                           ;main.c: 779: PosCursorPrgm--;
  7315  0005BA  07DA               	decf	_PosCursorPrgm& (0+255),f,b
  7316  0005BC  D7ED               	goto	i2l3152
  7317  0005BE                     
  7318                           ;main.c: 784: if(PosCursorPrgm < 5-1) {
  7319                           
  7320                           ; BSR set to: 0
  7321  0005BE  0E04               	movlw	4
  7322  0005C0  0100               	movlb	0	; () banked
  7323  0005C2  61DA               	cpfslt	_PosCursorPrgm& (0+255),b
  7324  0005C4  D086               	goto	i2l349
  7325                           
  7326                           ; BSR set to: 0
  7327                           ;main.c: 785: PosCursorPrgm++;
  7328  0005C6  2BDA               	incf	_PosCursorPrgm& (0+255),f,b
  7329  0005C8  D7E7               	goto	i2l3152
  7330  0005CA                     
  7331                           ;main.c: 791: PrgmChoisi = 1;
  7332                           
  7333                           ; BSR set to: 0
  7334  0005CA  0E01               	movlw	1
  7335  0005CC  6E5B               	movwf	_PrgmChoisi,c
  7336                           
  7337                           ;main.c: 792: TabPileSend[CptPile] = 18;
  7338  0005CE  5054               	movf	_CptPile,w,c
  7339  0005D0  0D01               	mullw	1
  7340  0005D2  0E48               	movlw	low _TabPileSend
  7341  0005D4  24F3               	addwf	prodl,w,c
  7342  0005D6  6ED9               	movwf	fsr2l,c
  7343  0005D8  0E00               	movlw	high _TabPileSend
  7344  0005DA  20F4               	addwfc	prodh,w,c
  7345  0005DC  6EDA               	movwf	fsr2h,c
  7346  0005DE  0E12               	movlw	18
  7347  0005E0  6EDF               	movwf	indf2,c
  7348                           
  7349                           ;main.c: 793: CptPile++;
  7350  0005E2  2A54               	incf	_CptPile,f,c
  7351                           
  7352                           ;main.c: 794: CptPile %= 10;
  7353  0005E4  0E0A               	movlw	10
  7354  0005E6  6E01               	movwf	___lbmod@divisor,c
  7355  0005E8  5054               	movf	_CptPile,w,c
  7356  0005EA  ECD8  F00E         	call	___lbmod
  7357  0005EE  D03B               	goto	L11
  7358  0005F0                     
  7359                           ;main.c: 797: FlagSleep = 1;
  7360  0005F0  0E01               	movlw	1
  7361  0005F2  6E5A               	movwf	_FlagSleep,c
  7362                           
  7363                           ;main.c: 798: break;
  7364  0005F4  D06E               	goto	i2l349
  7365  0005F6                     
  7366                           ;main.c: 800: PrgmSens = 1;
  7367  0005F6  0E01               	movlw	1
  7368  0005F8  6E59               	movwf	_PrgmSens,c
  7369                           
  7370                           ;main.c: 801: TabPileSend[CptPile] = 15;
  7371  0005FA  5054               	movf	_CptPile,w,c
  7372  0005FC  0D01               	mullw	1
  7373  0005FE  0E48               	movlw	low _TabPileSend
  7374  000600  24F3               	addwf	prodl,w,c
  7375  000602  6ED9               	movwf	fsr2l,c
  7376  000604  0E00               	movlw	high _TabPileSend
  7377  000606  20F4               	addwfc	prodh,w,c
  7378  000608  6EDA               	movwf	fsr2h,c
  7379  00060A  0E0F               	movlw	15
  7380  00060C  6EDF               	movwf	indf2,c
  7381                           
  7382                           ;main.c: 802: CptPile++;
  7383  00060E  2A54               	incf	_CptPile,f,c
  7384                           
  7385                           ;main.c: 803: CptPile %= 10;
  7386  000610  0E0A               	movlw	10
  7387  000612  6E01               	movwf	___lbmod@divisor,c
  7388  000614  5054               	movf	_CptPile,w,c
  7389  000616  ECD8  F00E         	call	___lbmod
  7390  00061A  D025               	goto	L11
  7391  00061C                     
  7392                           ;main.c: 806: PrgmSens = 2;
  7393  00061C  0E02               	movlw	2
  7394  00061E  6E59               	movwf	_PrgmSens,c
  7395                           
  7396                           ;main.c: 807: TabPileSend[CptPile] = 16;
  7397  000620  5054               	movf	_CptPile,w,c
  7398  000622  0D01               	mullw	1
  7399  000624  0E48               	movlw	low _TabPileSend
  7400  000626  24F3               	addwf	prodl,w,c
  7401  000628  6ED9               	movwf	fsr2l,c
  7402  00062A  0E00               	movlw	high _TabPileSend
  7403  00062C  20F4               	addwfc	prodh,w,c
  7404  00062E  6EDA               	movwf	fsr2h,c
  7405  000630  0E10               	movlw	16
  7406  000632  6EDF               	movwf	indf2,c
  7407                           
  7408                           ;main.c: 808: CptPile++;
  7409  000634  2A54               	incf	_CptPile,f,c
  7410                           
  7411                           ;main.c: 809: CptPile %= 10;
  7412  000636  0E0A               	movlw	10
  7413  000638  6E01               	movwf	___lbmod@divisor,c
  7414  00063A  5054               	movf	_CptPile,w,c
  7415  00063C  ECD8  F00E         	call	___lbmod
  7416  000640  D012               	goto	L11
  7417  000642                     
  7418                           ;main.c: 812: Stop = 1;
  7419  000642  0E01               	movlw	1
  7420  000644  6E58               	movwf	_Stop,c
  7421                           
  7422                           ;main.c: 813: TabPileSend[CptPile] = 17;
  7423  000646  5054               	movf	_CptPile,w,c
  7424  000648  0D01               	mullw	1
  7425  00064A  0E48               	movlw	low _TabPileSend
  7426  00064C  24F3               	addwf	prodl,w,c
  7427  00064E  6ED9               	movwf	fsr2l,c
  7428  000650  0E00               	movlw	high _TabPileSend
  7429  000652  20F4               	addwfc	prodh,w,c
  7430  000654  6EDA               	movwf	fsr2h,c
  7431  000656  0E11               	movlw	17
  7432  000658  6EDF               	movwf	indf2,c
  7433                           
  7434                           ;main.c: 814: CptPile++;
  7435  00065A  2A54               	incf	_CptPile,f,c
  7436                           
  7437                           ;main.c: 815: CptPile %= 10;
  7438  00065C  0E0A               	movlw	10
  7439  00065E  6E01               	movwf	___lbmod@divisor,c
  7440  000660  5054               	movf	_CptPile,w,c
  7441  000662  ECD8  F00E         	call	___lbmod
  7442  000666                     L11:
  7443  000666  6E54               	movwf	_CptPile,c
  7444                           
  7445                           ;main.c: 820: }
  7446                           
  7447                           ;main.c: 819: break;
  7448                           
  7449                           ;main.c: 817: default:
  7450                           
  7451                           ;main.c: 816: break;
  7452  000668  D034               	goto	i2l349
  7453  00066A                     i2l344:
  7454  00066A  501E               	movf	ISR@Receive,w,c
  7455                           
  7456                           ; Switch size 1, requested type "space"
  7457                           ; Number of cases is 17, Range of values is 49 to 83
  7458                           ; switch strategies available:
  7459                           ; Name         Instructions Cycles
  7460                           ; simple_byte           52    27 (average)
  7461                           ;	Chosen strategy is simple_byte
  7462  00066C  0A31               	xorlw	49	; case 49
  7463  00066E  B4D8               	btfsc	status,2,c
  7464  000670  D790               	goto	i2l345
  7465  000672  0A03               	xorlw	3	; case 50
  7466  000674  B4D8               	btfsc	status,2,c
  7467  000676  D78D               	goto	i2l345
  7468  000678  0A01               	xorlw	1	; case 51
  7469  00067A  B4D8               	btfsc	status,2,c
  7470  00067C  D78A               	goto	i2l345
  7471  00067E  0A07               	xorlw	7	; case 52
  7472  000680  B4D8               	btfsc	status,2,c
  7473  000682  D787               	goto	i2l345
  7474  000684  0A01               	xorlw	1	; case 53
  7475  000686  B4D8               	btfsc	status,2,c
  7476  000688  D78E               	goto	i2l354
  7477  00068A  0A03               	xorlw	3	; case 54
  7478  00068C  B4D8               	btfsc	status,2,c
  7479  00068E  D78D               	goto	i2l355
  7480  000690  0A01               	xorlw	1	; case 55
  7481  000692  B4D8               	btfsc	status,2,c
  7482  000694  D78E               	goto	i2l356
  7483  000696  0A0F               	xorlw	15	; case 56
  7484  000698  B4D8               	btfsc	status,2,c
  7485  00069A  D791               	goto	i2l358
  7486  00069C  0A01               	xorlw	1	; case 57
  7487  00069E  B4D8               	btfsc	status,2,c
  7488  0006A0  D794               	goto	i2l360
  7489  0006A2  0A79               	xorlw	121	; case 64
  7490  0006A4  B4D8               	btfsc	status,2,c
  7491  0006A6  D7A4               	goto	i2l361
  7492  0006A8  0A01               	xorlw	1	; case 65
  7493  0006AA  B4D8               	btfsc	status,2,c
  7494  0006AC  D778               	goto	i2l350
  7495  0006AE  0A03               	xorlw	3	; case 66
  7496  0006B0  B4D8               	btfsc	status,2,c
  7497  0006B2  D775               	goto	i2l350
  7498  0006B4  0A01               	xorlw	1	; case 67
  7499  0006B6  B4D8               	btfsc	status,2,c
  7500  0006B8  D772               	goto	i2l350
  7501  0006BA  0A07               	xorlw	7	; case 68
  7502  0006BC  B4D8               	btfsc	status,2,c
  7503  0006BE  D76F               	goto	i2l350
  7504  0006C0  0A15               	xorlw	21	; case 81
  7505  0006C2  B4D8               	btfsc	status,2,c
  7506  0006C4  D798               	goto	i2l362
  7507  0006C6  0A03               	xorlw	3	; case 82
  7508  0006C8  B4D8               	btfsc	status,2,c
  7509  0006CA  D7A8               	goto	i2l363
  7510  0006CC  0A01               	xorlw	1	; case 83
  7511  0006CE  B4D8               	btfsc	status,2,c
  7512  0006D0  D7B8               	goto	i2l364
  7513  0006D2                     i2l349:
  7514  0006D2  C01D  F063         	movff	??_ISR+24,btemp+3
  7515  0006D6  C01C  F062         	movff	??_ISR+23,btemp+2
  7516  0006DA  C01B  F061         	movff	??_ISR+22,btemp+1
  7517  0006DE  C01A  F060         	movff	??_ISR+21,btemp
  7518  0006E2  C019  FFF5         	movff	??_ISR+20,tablat
  7519  0006E6  C018  FFF8         	movff	??_ISR+19,tblptru
  7520  0006EA  C017  FFF7         	movff	??_ISR+18,tblptrh
  7521  0006EE  C016  FFF6         	movff	??_ISR+17,tblptrl
  7522  0006F2  C015  FFF4         	movff	??_ISR+16,prodh
  7523  0006F6  C014  FFF3         	movff	??_ISR+15,prodl
  7524  0006FA  C013  FFDA         	movff	??_ISR+14,fsr2h
  7525  0006FE  C012  FFD9         	movff	??_ISR+13,fsr2l
  7526  000702  C011  FFE2         	movff	??_ISR+12,fsr1h
  7527  000706  C010  FFE1         	movff	??_ISR+11,fsr1l
  7528  00070A  C00F  FFEA         	movff	??_ISR+10,fsr0h
  7529  00070E  C00E  FFE9         	movff	??_ISR+9,fsr0l
  7530  000712  C00D  FFFB         	movff	??_ISR+8,pclatu
  7531  000716  C00C  FFFA         	movff	??_ISR+7,pclath
  7532  00071A  9260               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7533  00071C  0011               	retfie		f
  7534  00071E                     __end_of_ISR:
  7535                           	opt stack 0
  7536                           pclatu	equ	0xFFB
  7537                           pclath	equ	0xFFA
  7538                           tblptru	equ	0xFF8
  7539                           tblptrh	equ	0xFF7
  7540                           tblptrl	equ	0xFF6
  7541                           tablat	equ	0xFF5
  7542                           prodh	equ	0xFF4
  7543                           prodl	equ	0xFF3
  7544                           intcon	equ	0xFF2
  7545                           postinc0	equ	0xFEE
  7546                           fsr0h	equ	0xFEA
  7547                           fsr0l	equ	0xFE9
  7548                           wreg	equ	0xFE8
  7549                           indf1	equ	0xFE7
  7550                           postdec1	equ	0xFE5
  7551                           fsr1h	equ	0xFE2
  7552                           fsr1l	equ	0xFE1
  7553                           indf2	equ	0xFDF
  7554                           postinc2	equ	0xFDE
  7555                           postdec2	equ	0xFDD
  7556                           fsr2h	equ	0xFDA
  7557                           fsr2l	equ	0xFD9
  7558                           status	equ	0xFD8
  7559                           
  7560 ;; *************** function ___lbmod *****************
  7561 ;; Defined at:
  7562 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lbmod.c"
  7563 ;; Parameters:    Size  Location     Type
  7564 ;;  dividend        1    wreg     unsigned char 
  7565 ;;  divisor         1    0[COMRAM] unsigned char 
  7566 ;; Auto vars:     Size  Location     Type
  7567 ;;  dividend        1    1[COMRAM] unsigned char 
  7568 ;;  rem             1    3[COMRAM] unsigned char 
  7569 ;;  counter         1    2[COMRAM] unsigned char 
  7570 ;; Return value:  Size  Location     Type
  7571 ;;                  1    wreg      unsigned char 
  7572 ;; Registers used:
  7573 ;;		wreg, status,2, status,0
  7574 ;; Tracked objects:
  7575 ;;		On entry : 0/0
  7576 ;;		On exit  : 0/0
  7577 ;;		Unchanged: 0/0
  7578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7579 ;;      Params:         1       0       0       0       0       0       0
  7580 ;;      Locals:         3       0       0       0       0       0       0
  7581 ;;      Temps:          0       0       0       0       0       0       0
  7582 ;;      Totals:         4       0       0       0       0       0       0
  7583 ;;Total ram usage:        4 bytes
  7584 ;; Hardware stack levels used:    1
  7585 ;; This function calls:
  7586 ;;		Nothing
  7587 ;; This function is called by:
  7588 ;;		_ISR
  7589 ;; This function uses a non-reentrant model
  7590 ;;
  7591                           
  7592                           	psect	text29
  7593  001DB0                     __ptext29:
  7594                           	opt stack 0
  7595  001DB0                     ___lbmod:
  7596                           	opt stack 25
  7597                           
  7598                           ;incstack = 0
  7599                           ;___lbmod@dividend stored from wreg
  7600  001DB0  6E02               	movwf	___lbmod@dividend,c
  7601  001DB2  0E08               	movlw	8
  7602  001DB4  6E03               	movwf	___lbmod@counter,c
  7603  001DB6  0E00               	movlw	0
  7604  001DB8  6E04               	movwf	___lbmod@rem,c
  7605  001DBA  90D8               	bcf	status,0,c
  7606  001DBC  3402               	rlcf	___lbmod@dividend,w,c
  7607  001DBE  3404               	rlcf	___lbmod@rem,w,c
  7608  001DC0  6E04               	movwf	___lbmod@rem,c
  7609  001DC2  90D8               	bcf	status,0,c
  7610  001DC4  3602               	rlcf	___lbmod@dividend,f,c
  7611  001DC6  5001               	movf	___lbmod@divisor,w,c
  7612  001DC8  5C04               	subwf	___lbmod@rem,w,c
  7613  001DCA  A0D8               	btfss	status,0,c
  7614  001DCC  D002               	goto	i2l750
  7615  001DCE  5001               	movf	___lbmod@divisor,w,c
  7616  001DD0  5E04               	subwf	___lbmod@rem,f,c
  7617  001DD2                     i2l750:
  7618  001DD2  2E03               	decfsz	___lbmod@counter,f,c
  7619  001DD4  D7F2               	goto	i2l749
  7620  001DD6  5004               	movf	___lbmod@rem,w,c
  7621  001DD8  0012               	return	
  7622  001DDA                     __end_of___lbmod:
  7623                           	opt stack 0
  7624                           pclatu	equ	0xFFB
  7625                           pclath	equ	0xFFA
  7626                           tblptru	equ	0xFF8
  7627                           tblptrh	equ	0xFF7
  7628                           tblptrl	equ	0xFF6
  7629                           tablat	equ	0xFF5
  7630                           prodh	equ	0xFF4
  7631                           prodl	equ	0xFF3
  7632                           intcon	equ	0xFF2
  7633                           postinc0	equ	0xFEE
  7634                           fsr0h	equ	0xFEA
  7635                           fsr0l	equ	0xFE9
  7636                           wreg	equ	0xFE8
  7637                           indf1	equ	0xFE7
  7638                           postdec1	equ	0xFE5
  7639                           fsr1h	equ	0xFE2
  7640                           fsr1l	equ	0xFE1
  7641                           indf2	equ	0xFDF
  7642                           postinc2	equ	0xFDE
  7643                           postdec2	equ	0xFDD
  7644                           fsr2h	equ	0xFDA
  7645                           fsr2l	equ	0xFD9
  7646                           status	equ	0xFD8
  7647                           
  7648 ;; *************** function _Modulo *****************
  7649 ;; Defined at:
  7650 ;;		line 567 in file "main.c"
  7651 ;; Parameters:    Size  Location     Type
  7652 ;;  M_nombre        2    0[COMRAM] short 
  7653 ;; Auto vars:     Size  Location     Type
  7654 ;;		None
  7655 ;; Return value:  Size  Location     Type
  7656 ;;                  1    wreg      unsigned char 
  7657 ;; Registers used:
  7658 ;;		wreg, status,2, status,0
  7659 ;; Tracked objects:
  7660 ;;		On entry : 0/0
  7661 ;;		On exit  : 0/0
  7662 ;;		Unchanged: 0/0
  7663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7664 ;;      Params:         2       0       0       0       0       0       0
  7665 ;;      Locals:         0       0       0       0       0       0       0
  7666 ;;      Temps:          0       0       0       0       0       0       0
  7667 ;;      Totals:         2       0       0       0       0       0       0
  7668 ;;Total ram usage:        2 bytes
  7669 ;; Hardware stack levels used:    1
  7670 ;; This function calls:
  7671 ;;		Nothing
  7672 ;; This function is called by:
  7673 ;;		_ISR
  7674 ;; This function uses a non-reentrant model
  7675 ;;
  7676                           
  7677                           	psect	text30
  7678  001EB6                     __ptext30:
  7679                           	opt stack 0
  7680  001EB6                     _Modulo:
  7681                           	opt stack 25
  7682                           
  7683                           ;main.c: 568: while(M_nombre > 255) {
  7684                           
  7685                           ;incstack = 0
  7686  001EB6  D004               	goto	i2l265
  7687  001EB8                     
  7688                           ;main.c: 569: M_nombre -= 256;
  7689  001EB8  0E00               	movlw	0
  7690  001EBA  2601               	addwf	Modulo@M_nombre,f,c
  7691  001EBC  0EFF               	movlw	255
  7692  001EBE  2202               	addwfc	Modulo@M_nombre+1,f,c
  7693  001EC0                     i2l265:
  7694  001EC0  BE02               	btfsc	Modulo@M_nombre+1,7,c
  7695  001EC2  D003               	goto	i2u219_40
  7696  001EC4  0402               	decf	Modulo@M_nombre+1,w,c
  7697  001EC6  B0D8               	btfsc	status,0,c
  7698  001EC8  D7F7               	goto	i2l266
  7699  001ECA                     i2u219_40:
  7700                           
  7701                           ;main.c: 570: }
  7702                           ;main.c: 571: return M_nombre;
  7703  001ECA  5001               	movf	Modulo@M_nombre,w,c
  7704  001ECC  0012               	return	
  7705  001ECE                     __end_of_Modulo:
  7706                           	opt stack 0
  7707                           pclatu	equ	0xFFB
  7708                           pclath	equ	0xFFA
  7709                           tblptru	equ	0xFF8
  7710                           tblptrh	equ	0xFF7
  7711                           tblptrl	equ	0xFF6
  7712                           tablat	equ	0xFF5
  7713                           prodh	equ	0xFF4
  7714                           prodl	equ	0xFF3
  7715                           intcon	equ	0xFF2
  7716                           postinc0	equ	0xFEE
  7717                           fsr0h	equ	0xFEA
  7718                           fsr0l	equ	0xFE9
  7719                           wreg	equ	0xFE8
  7720                           indf1	equ	0xFE7
  7721                           postdec1	equ	0xFE5
  7722                           fsr1h	equ	0xFE2
  7723                           fsr1l	equ	0xFE1
  7724                           indf2	equ	0xFDF
  7725                           postinc2	equ	0xFDE
  7726                           postdec2	equ	0xFDD
  7727                           fsr2h	equ	0xFDA
  7728                           fsr2l	equ	0xFD9
  7729                           status	equ	0xFD8
  7730                           pclatu	equ	0xFFB
  7731                           pclath	equ	0xFFA
  7732                           tblptru	equ	0xFF8
  7733                           tblptrh	equ	0xFF7
  7734                           tblptrl	equ	0xFF6
  7735                           tablat	equ	0xFF5
  7736                           prodh	equ	0xFF4
  7737                           prodl	equ	0xFF3
  7738                           intcon	equ	0xFF2
  7739                           postinc0	equ	0xFEE
  7740                           fsr0h	equ	0xFEA
  7741                           fsr0l	equ	0xFE9
  7742                           wreg	equ	0xFE8
  7743                           indf1	equ	0xFE7
  7744                           postdec1	equ	0xFE5
  7745                           fsr1h	equ	0xFE2
  7746                           fsr1l	equ	0xFE1
  7747                           indf2	equ	0xFDF
  7748                           postinc2	equ	0xFDE
  7749                           postdec2	equ	0xFDD
  7750                           fsr2h	equ	0xFDA
  7751                           fsr2l	equ	0xFD9
  7752                           status	equ	0xFD8
  7753                           
  7754                           	psect	rparam
  7755  0000                     pclatu	equ	0xFFB
  7756                           pclath	equ	0xFFA
  7757                           tblptru	equ	0xFF8
  7758                           tblptrh	equ	0xFF7
  7759                           tblptrl	equ	0xFF6
  7760                           tablat	equ	0xFF5
  7761                           prodh	equ	0xFF4
  7762                           prodl	equ	0xFF3
  7763                           intcon	equ	0xFF2
  7764                           postinc0	equ	0xFEE
  7765                           fsr0h	equ	0xFEA
  7766                           fsr0l	equ	0xFE9
  7767                           wreg	equ	0xFE8
  7768                           indf1	equ	0xFE7
  7769                           postdec1	equ	0xFE5
  7770                           fsr1h	equ	0xFE2
  7771                           fsr1l	equ	0xFE1
  7772                           indf2	equ	0xFDF
  7773                           postinc2	equ	0xFDE
  7774                           postdec2	equ	0xFDD
  7775                           fsr2h	equ	0xFDA
  7776                           fsr2l	equ	0xFD9
  7777                           status	equ	0xFD8
  7778                           
  7779                           	psect	temp
  7780  000060                     btemp:
  7781                           	opt stack 0
  7782  000060                     	ds	1
  7783  0000                     int$flags	set	btemp
  7784  0000                     wtemp6	set	btemp+1
  7785                           pclatu	equ	0xFFB
  7786                           pclath	equ	0xFFA
  7787                           tblptru	equ	0xFF8
  7788                           tblptrh	equ	0xFF7
  7789                           tblptrl	equ	0xFF6
  7790                           tablat	equ	0xFF5
  7791                           prodh	equ	0xFF4
  7792                           prodl	equ	0xFF3
  7793                           intcon	equ	0xFF2
  7794                           postinc0	equ	0xFEE
  7795                           fsr0h	equ	0xFEA
  7796                           fsr0l	equ	0xFE9
  7797                           wreg	equ	0xFE8
  7798                           indf1	equ	0xFE7
  7799                           postdec1	equ	0xFE5
  7800                           fsr1h	equ	0xFE2
  7801                           fsr1l	equ	0xFE1
  7802                           indf2	equ	0xFDF
  7803                           postinc2	equ	0xFDE
  7804                           postdec2	equ	0xFDD
  7805                           fsr2h	equ	0xFDA
  7806                           fsr2l	equ	0xFD9
  7807                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    30
    Data        82
    BSS         481
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     71      95
    BANK0           128     82      98
    BANK1           256      0     252
    BANK2           256      0      75
    BANK3           256      0     196
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> floor@expon(BANK0[2]), 

    PrintS@s_printS	PTR const unsigned char  size(2) Largest target is 252
		 -> SendMsgSreen(BANK1[252]), 


Critical Paths under _main in COMRAM

    _floor->___altoft
    ___fttol->___ftdiv
    ___altoft->___fttol
    ___ftsub->___awtoft
    ___ftadd->___awtoft
    ___ftneg->___awtoft
    ___ftdiv->___ftpack
    ___awtoft->___fttol
    ___lwtoft->___ftpack
    _PrintS->_PrintC

Critical Paths under _ISR in COMRAM

    _ISR->___lbmod

Critical Paths under _main in BANK0

    _main->_exp
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___ftadd
    _eval_poly->___ftadd
    ___ftmul->___ftneg
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftneg->___awtoft

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                21    21      0   69536
                                             61 BANK0     21    21      0
                            _ADCInit
                                _Adc
                         _ClearArray
                          _ClockInit
                           _InitTmr0
                             _PrintS
                            _SpiInit
                           _UartInit
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lwtoft
                                _exp
 ---------------------------------------------------------------------------------
 (1) _exp                                                  9     6      3   42706
                                             52 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
 ---------------------------------------------------------------------------------
 (2) _ldexp                                                7     2      5     400
                                             45 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (2) _floor                                                8     5      3   11083
                                             33 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                7     2      5     360
                                             31 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     936
                                             54 COMRAM    15    11      4
                            ___ftdiv (ARG)
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     744
                                             31 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (3) ___altoft                                            10     6      4    3307
                                             69 COMRAM     2     2      0
                                              0 BANK0      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (2) _eval_poly                                           12     5      7   10446
                                             33 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     463
                                             31 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4181
                                              6 BANK0     15     9      6
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5694
                                             33 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    5278
                                             21 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                            ___fttol (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     425
                                              3 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    4653
                                             39 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    3506
                                             69 COMRAM     1     1      0
                                              0 BANK0      3     0      3
                            ___ftdiv (ARG)
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    3134
                                             39 COMRAM     3     0      3
                                _Adc (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    3013
                                             31 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4    2124
                                             31 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _UartInit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SpiInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PrintS                                               2     0      2     675
                                             32 COMRAM     2     0      2
                             _PrintC
 ---------------------------------------------------------------------------------
 (2) _PrintC                                               1     1      0      22
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitTmr0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ClockInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ClearArray                                           1     1      0      69
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Adc                                                  5     3      2      22
                                             31 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ADCInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 27    27      0     914
                                              4 COMRAM    27    27      0
                             _Modulo
                            ___lbmod
 ---------------------------------------------------------------------------------
 (6) ___lbmod                                              4     3      1     539
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (6) _Modulo                                               2     0      2     197
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCInit
   _Adc
   _ClearArray
   _ClockInit
   _InitTmr0
   _PrintS
     _PrintC
   _SpiInit
   _UartInit
   ___awdiv
   ___awtoft
     ___ftdiv (ARG)
       ___ftpack
     ___ftpack (ARG)
     ___fttol (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
   ___ftadd
     ___awtoft (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___fttol (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___ftdiv (ARG)
       ___ftpack
     ___ftmul (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
       ___awtoft (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___fttol (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___ftpack (ARG)
     ___fttol (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___wmul (ARG)
   ___ftdiv
     ___ftpack
   ___ftge
   ___ftmul
     ___ftdiv (ARG)
       ___ftpack
     ___ftneg (ARG)
       ___awtoft (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___fttol (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___ftpack (ARG)
   ___ftneg
     ___awtoft (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___fttol (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___ftdiv (ARG)
       ___ftpack
     ___fttol (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
   ___fttol
     ___ftdiv (ARG)
       ___ftpack
     ___ftpack (ARG)
   ___lwtoft
     _Adc (ARG)
     ___ftpack (ARG)
   _exp
     ___awtoft
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___fttol (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___ftdiv
       ___ftpack
     ___ftge
     ___ftmul
       ___ftdiv (ARG)
         ___ftpack
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftneg
       ___awtoft (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___fttol (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___ftsub
       ___awtoft (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___wmul (ARG)
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
     _eval_poly
       ___ftadd
         ___awtoft (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___wmul (ARG)
       ___ftmul
         ___ftdiv (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___wmul
     _floor
       ___altoft
         ___ftpack
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___wmul (ARG)
       ___ftge
       ___fttol
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
       _frexp
     _ldexp
       _eval_poly (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___fttol (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___wmul (ARG)
         ___ftmul
           ___ftdiv (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___wmul

 _ISR (ROOT)
   _Modulo
   ___lbmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      C4      11       76.6%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      4B       9       29.3%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      FC       7       98.4%
BITBANK0            80      0       0       4        0.0%
BANK0               80     52      62       5       76.6%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     47      5F       1       75.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2CC      15        0.0%
DATA                 0      0     2CC       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu May 30 20:47:21 2019

           ___altoft@exp 0046              main@CptTmr0 00C7              _SSPSTATbits 000FC7  
          ___altoft@sign 0047             ___awdiv@sign 0025      ___wmul@multiplicand 0022  
            __CFG_BORV$3 000000             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000             ___ftadd@exp1 00A0  
           ___ftadd@exp2 009F             ___ftadd@sign 009E                      l200 0AB6  
                    l201 0B28                      l202 0AE4                      l212 0EA8  
                    l213 0E78                      l207 0CA2                      l216 0F4C  
                    l208 0E22                      l225 1EE4                      l217 0F9C  
                    l218 0FBC                      l243 1D3C                      l260 1DEA  
                    l254 1D02                      l255 1CF0                      l191 0784  
                    l600 1904                      l601 18FA                      l193 07BA  
                    l603 1938                      l451 1B64                      l195 0896  
                    l604 1922                      l452 1B58                      l620 16B2  
                    l196 08C4                      l541 1B12                      l621 172E  
                    l197 0AA8                      l542 1B1C                      l534 1AC4  
                    l606 1960                      l710 1436                      l543 1B2A  
                    l535 1AD4                      l607 1956                      l711 1446  
                    l199 0FC6                      l704 13B4                      l640 1BCA  
                    l537 1AF2                      l721 1C8A                      l617 1698  
                    l538 1AEA                      l562 1CCA                      l706 13DC  
                    l618 168A                      l715 1E68                      l707 140E  
                    l660 125A                      l708 141E                      l644 1830  
                    l580 10A4                      l733 1546                      l725 14AC  
                    l581 11CE                      l670 12B6                      l734 153A  
                    l646 1876                      l582 11A4                      l671 12AC  
                    l727 1522                      l680 12EA                      l656 1230  
                    l736 1562                      l728 1512                      l648 18A4  
                    l576 1004                      l665 12C0                      l649 1898  
                    l682 1318                      l578 103C                      l691 15C4  
                    l683 1334                      l579 1074                      l692 1602  
                    l684 1364                      l693 1628                      l679 12F4  
                    l689 159C                      l697 1A50                      l698 1A80  
                    l980 177E                      l979 17FE             __CFG_CPB$OFF 000000  
           __CFG_CPD$OFF 000000                      _ISR 0008                      _PSA 007EAB  
                    _Adc 1D24                      _RX9 007D5E                      _TX9 007D66  
                    _WUE 007DC1                      _cpt 00D8                      _exp 0FEA  
        __end_of_ADCInit 1E2A                      prod 000FF3                      wreg 000FE8  
            main@adc_res 00CF               _TXSTA1bits 000FAC           Modulo@M_nombre 0001  
           __CFG_LVP$OFF 000000                     ?_ISR 0001                     ?_Adc 0020  
           ___ftdiv@cntr 0031             ___ftdiv@sign 0036             __CFG_WDT$OFF 000000  
                   l2132 1AAC                     l2392 1ED0                     l3520 11A4  
                   l2636 1DE2                     ?_exp 00B4                     _BRGH 007D62  
                   _CREN 007D5C                     _T0CS 007EAD                     _FERR 007D5A  
                   u2010 1850                     u3000 12FC                     u2018 1854  
                   _T0SE 007EAC                     u3101 1584                     u2230 1AF6  
                   u3121 15AC                     u3041 139C                     u3061 13C4  
                   u1810 14CA                     u3410 0B58                     u3330 07A6  
                   u3260 107E                     u1750 1BF2                     u3190 16A4  
                   u3270 1080                     u1815 14C2                     u1850 154C  
                   u3450 0E44                     u2740 18EC                     u2900 124C  
                   u3348 07AA                     u1758 1BF4                     u2831 11EE  
                   u1791 1490                     u2841 1202                     u2930 128A  
                   u2780 196A                     u2870 1222                     u3487 0776  
                   u2970 12C8                     _RCIE 007CED                     _RCIF 007CF5  
                   _OERR 007D59                     _SPEN 007D5F                     _TXEN 007D65  
                   _SYNC 007D64                     _PosX 00DF                     _PosY 00DD  
                   _Stop 0058                     _main 0742             ___ftpack@arg 0020  
           ___ftpack@exp 0023                     fsr0h 000FEA                     fsr1h 000FE2  
                   fsr2h 000FDA                     fsr0l 000FE9                     indf1 000FE7  
                   indf2 000FDF                     fsr1l 000FE1                     fsr2l 000FD9  
                   btemp 0060               _ClearArray 1DDA                     exp@x 00B4  
                   prodh 000FF4                     prodl 000FF3                     start 071E  
          __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000             ___ftmul@cntr 0093  
           ___param_bank 000000             ___ftmul@sign 0094                    ??_ISR 0005  
                  ??_Adc 0022             ___fttol@exp1 0045                    ??_exp 0048  
           ___fttol@lval 0041          __end_of_SpiInit 1DB0                    _ABDEN 007DC0  
                  ?_main 0001          __end_of___awdiv 1B34          __end_of___ftadd 138A  
                  _BRG16 007DC3          __end_of___lbmod 1DDA          __end_of___ftdiv 165A  
        __end_of___ftneg 1E76          __end_of___ftmul 1480          ___awdiv@divisor 0022  
        __end_of___ftsub 1CB4          __end_of___fttol 1574                    _T0PS0 007EA8  
                  _T0PS1 007EA9                    _T0PS2 007EAA                    i2l300 023A  
                  i2l301 024E                    i2l310 032E                    i2l302 0252  
                  i2l311 0342                    i2l303 025E                    i2l312 0346  
                  i2l321 03B8                    i2l305 02B4                    i2l330 0492  
                  i2l314 0378                    i2l306 02C8                    i2l323 03EA  
                  i2l307 02CC                    i2l332 04C0                    i2l308 02D8  
                  i2l333 04A6                    i2l325 044C                    i2l317 03AA  
                  i2l350 059E                    i2l326 056C                    i2l327 0550  
                  i2l335 04EA                    i2l344 066A                    i2l360 05CA  
                  i2l336 04B0                    i2l328 048E                    i2l265 1EC0  
                  i2l361 05F0                    i2l345 0592                    i2l337 04BA  
                  i2l281 0092                    i2l266 1EB8                    i2l362 05F6  
                  i2l354 05A6                    i2l338 04F0                    i2l274 0450  
                  i2l290 015A                    i2l363 061C                    i2l355 05AA  
                  i2l339 0570                    i2l283 00C6                    i2l275 005E  
                  i2l364 0642                    i2l356 05B2                    i2l292 015E  
                  i2l276 006C                    i2l349 06D2                    i2l277 046C  
                  i2l285 03EE                    i2l293 016A                    i2l358 05BE  
                  i2l286 00E4                    i2l278 007A                    i2l295 01C0  
                  i2l287 00F0                    i2l279 008A                    i2l296 01D4  
                  i2l297 01D8                    i2l289 0146                    i2l298 01E4  
                  i2l750 1DD2                    i2l749 1DBA          ___awdiv@counter 0024  
                  _RCREG 000FAE                    _SENDB 007D63                    _TMR0H 000FD7  
                  _TMR0L 000FD6                    _SPBRG 000FAF                    _RXDTP 007DC5  
                  _TXCKP 007DC4               _CptSpiSend 0057            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000                    _Score 00D4  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000            ___awtoft@sign 0046  
                  _floor 165A                    _ldexp 1816                    _frexp 1BAE  
                  _errno 00D2            ___ftpack@sign 0024               _EtatScreen 00DC  
                  pclath 000FFA                    tablat 000FF5                    status 000FD8  
                  wtemp6 0061           __CFG_PBADEN$ON 000000              exp@exponent 00BA  
            ldexp@newexp 00B0          __initialization 198A             __end_of_main 0FEA  
       __end_of_InitTmr0 1EB6                ??_ADCInit 0020                   ??_main 00BD  
          ___fttol@sign1 0040            __activetblptr 000002       __size_of_ClockInit 000E  
       __end_of_UartInit 1D86           PrintC@c_printC 0020              _CptReadPile 0055  
                 ?_floor 00A1                   ?_ldexp 00AD                   ?_frexp 0020  
       __end_of___altoft 1BAE                   _ADRESH 000FC4                   _ADRESL 000FC3  
                 _T08BIT 007EAE               _TailleTerm 00D6         ___awdiv@dividend 0020  
       __end_of___awtoft 1CEE         __end_of___ftpack 198A                   i2l3020 01DC  
                 i2l3004 0162                   i2l3052 02D0                   i2l3036 0256  
                 i2l3152 0598                   i2l2988 00E8         __end_of___lwtoft 1E9A  
                 _TMR0IF 007F92                   _TMR0ON 007EAF                   _SPBRGH 000FB0  
                 _TRISA5 007C95                   _TRISC3 007CA3                   _TRISC4 007CA4  
                 _TRISC5 007CA5                   _TRISC6 007CA6                   _TRISC7 007CA7  
                 _SSPBUF 000FC9              ?_ClearArray 0001                   _TXREG1 000FAD  
             _PrgmChoisi 005B                   _CptSpi 005F           __CFG_XINST$OFF 000000  
                 _Modulo 1EB6                ??_SpiInit 0020                   _PrintC 1ECE  
                 _PrintS 1CEE                   ___ftge 1A20                   ___wmul 1E2A  
              ??___awdiv 0024                ??___ftadd 009B           __CFG_STVREN$ON 000000  
              ??___lbmod 0002                ??___ftdiv 002E                ??___ftneg 0047  
              ??___ftmul 008C                ??___ftsub 0047                ??___fttol 003B  
                 clear_0 19E8                   clear_1 19F4                   clear_2 1A00  
                 clear_3 1A0C         ___awdiv@quotient 0026                   floor@i 00A4  
                 floor@x 00A1    ___ftmul@f3_as_product 0090             __pdataCOMRAM 005E  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8         __end_ofexp@coeff 0741          ___lbmod@divisor 0001  
             __accesstop 0080  __end_of__initialization 1A12               ___altoft@c 0080  
        ___lbmod@counter 0003               ___ftadd@f1 0095               ___ftadd@f2 0098  
             ___ftge@ff1 0020               ___ftge@ff2 0023             eval_poly@res 00AA  
          ___rparam_used 000001        __end_of_ClockInit 1EEA               ___ftdiv@f1 0028  
             ___ftdiv@f2 002B               ___ftdiv@f3 0032               ___ftneg@f1 0083  
    main@taille_text_spi 00CD               ___awtoft@c 0080              _TabPileSend 0048  
             ___ftmul@f1 0086               ___ftmul@f2 0089               ___ftsub@f1 00A1  
             ___ftsub@f2 00A4               ___fttol@f1 0037           __pcstackCOMRAM 0001  
            ISR@data_spi 001F             __pidataBANK0 1EEA             __pidataBANK2 1C26  
             _TypeVarSpi 00D9            __end_of_floor 173C            __end_of_ldexp 18DC  
          __end_of_frexp 1C26               ___lwtoft@c 0028      __size_of_ClearArray 0028  
                ??_floor 0048                  ??_ldexp 00B2                  ??_frexp 0025  
             __pbssBANK0 00D2               __pbssBANK1 0100               __pbssBANK3 0300  
     __size_of_eval_poly 00DA                ?_InitTmr0 0001                  ?_Modulo 0001  
              ?_UartInit 0001                  ?_PrintC 0001                  ?_PrintS 0021  
                ?___ftge 0020           PrintS@s_printS 0021                  ?___wmul 0020  
              ?___altoft 0080                  _ADCInit 1E02                ?___awtoft 0080  
              ?___ftpack 0020                ?___lwtoft 0028               ??_InitTmr0 0020  
                _FlagSpi 00E1                  _CptPile 0054                  _CptSend 005E  
                _EtatSpi 005D                  __Hparam 0000                  __Lparam 0000  
             ??_UartInit 0020                  _SpiInit 1D86          __size_of_Modulo 0018  
                _TextSpi 0300          __size_of_PrintC 000E          __size_of_PrintS 0036  
        __size_of___ftge 0090                  ___awdiv 1AB0                  ___ftadd 11DC  
                ___lbmod 1DB0                  ___ftdiv 1574                  ___ftneg 1E50  
        __size_of___wmul 0026                  ___ftmul 138A                  ___ftsub 1C72  
                ___fttol 1480             __psmallconst 0722               ??___altoft 0084  
                __pcinit 198A               ??___awtoft 0046               ??___ftpack 0025  
      __end_of_eval_poly 1816                  __ramtop 0600                  __ptext0 0742  
                __ptext1 0FEA                  __ptext2 1816                  __ptext3 165A  
                __ptext4 1BAE                  __ptext5 1480                  __ptext6 1A20  
                __ptext7 1B34                  __ptext8 173C                  __ptext9 1E2A  
             ??___lwtoft 002B             __size_of_ISR 0716             __size_of_Adc 0032  
           __size_of_exp 01F2     end_of_initialization 1A12                  exp@sign 00BC  
          __Lmediumconst 0000             ??_ClearArray 0020                  postdec1 000FE5  
                postdec2 000FDD                  postinc0 000FEE                  postinc2 000FDE  
       ___lbmod@dividend 0002       __end_of_ClearArray 1E02                _TRISAbits 000F92  
              _TRISCbits 000F94              ___lbmod@rem 0004              ___ftdiv@exp 0035  
   main@taille_text_prgm 00CE            _PosCursorPrgm 00DA              ___ftmul@exp 008F  
              _FlagSleep 005A                _ClockInit 1EDC           __end_of_Modulo 1ECE  
         __end_of_PrintC 1EDC           __end_of_PrintS 1D24           __end_of___ftge 1AB0  
         __end_of___wmul 1E50            __pidataCOMRAM 1EEF                _AutoLight 00DB  
             floor@expon 00A7      start_initialization 198A               eval_poly@d 00A4  
             eval_poly@n 00A6               eval_poly@x 00A1              __end_of_ISR 071E  
            __end_of_Adc 1D56               ldexp@value 00AD              __end_of_exp 11DC  
             frexp@value 0020                _SendNbSpi 0056         __CFG_OSC$INTIO67 000000  
      __size_of_InitTmr0 001C                 ??_Modulo 0003                 ??_PrintC 0020  
               ??_PrintS 0023                 ??___ftge 0026               ?_ClockInit 0001  
               ??___wmul 0024        __size_of_UartInit 0030              __pdataBANK0 00DD  
            __pdataBANK2 0200         __CFG_LPT1OSC$OFF 000000                 ?_ADCInit 0001  
             ISR@Receive 001E        __size_of___altoft 007A        __size_of___awtoft 003A  
      __size_of___ftpack 00AE              __pbssCOMRAM 0048        __size_of___lwtoft 0024  
          __pcstackBANK0 0080                _main$1532 00C1                _main$1533 00C4  
              _main$1534 00C8                _main$1535 00CB                 ?_SpiInit 0001  
      __CFG_CCP2MX$PORTC 000000                __pintcode 0008                 ?___awdiv 0020  
               ?___ftadd 0095                 ?___lbmod 0001                 ?___ftdiv 0028  
               ?___ftneg 0083                 ?___ftmul 0086                 ?___ftsub 00A1  
               ?___fttol 0037              __smallconst 0722                _eval_poly 173C  
           _SendMsgSreen 0100             _TailleMsgSpi 005C           __size_of_floor 00E2  
         __size_of_ldexp 00C6           __size_of_frexp 0078               Adc@channel 0024  
         ___wmul@product 0024                 _LATAbits 000F89                 _LATCbits 000F8B  
               _PIE1bits 000F9D                 i2u219_40 1ECA                 _PIR1bits 000F9E  
       __CFG_WDTPS$32768 000000              ??_ClockInit 0020                _text_prgm 0200  
       __size_of_ADCInit 0028               _ADCON0bits 000FC2               _ADCON1bits 000FC1  
             _ADCON2bits 000FC0        ___wmul@multiplier 0020               ?_eval_poly 00A1  
               _Checksum 0052                copy_data0 199E                copy_data1 19BE  
               _InitTmr0 1E9A                frexp@eptr 0023                 __Hrparam 0000  
               _UartInit 1D56                 _PrgmSens 0059                 __Lrparam 0000  
     __CFG_BOREN$SBORDIS 000000         __size_of_SpiInit 002A         __size_of___awdiv 0084  
       __size_of___ftadd 01AE         __size_of___lbmod 002A         __size_of___ftdiv 00E6  
       __size_of___ftneg 0026                 ___altoft 1B34         __size_of___ftmul 00F6  
       __size_of___ftsub 0042         __size_of___fttol 00F4                 ___awtoft 1CB4  
               ___ftpack 18DC                 ___lwtoft 1E76                 _exp$1536 00B7  
               __ptext10 138A                 __ptext11 1C72                 __ptext20 1D86  
               __ptext12 11DC                 __ptext21 1CEE                 __ptext13 1E50  
               __ptext30 1EB6                 __ptext22 1ECE                 __ptext14 1574  
               __ptext23 1E9A                 __ptext15 1CB4                 __ptext24 1EDC  
               __ptext16 1E76                 __ptext25 1DDA                 __ptext17 18DC  
               __ptext26 1D24                 __ptext18 1AB0                 __ptext27 1E02  
               __ptext19 1D56                 __ptext29 1DB0            __size_of_main 08A8  
               int$flags 0060                 exp@coeff 0723              _OSCTUNEbits 000F9B  
             _INTCONbits 000FF2              ??_eval_poly 00A8                 intlevel2 0000  
             _OSCCONbits 000FD3       ClearArray@cpt_vide 0020              _SSPCON1bits 000FC6  
