

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon May 27 09:14:57 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18LF2520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    50                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    51                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    52  0000                     
    53                           ; Version 1.45
    54                           ; Generated 16/11/2017 GMT
    55                           ; 
    56                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    57                           ; All rights reserved.
    58                           ; 
    59                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    60                           ; 
    61                           ; Redistribution and use in source and binary forms, with or without modification, are
    62                           ; permitted provided that the following conditions are met:
    63                           ; 
    64                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    65                           ;        conditions and the following disclaimer.
    66                           ; 
    67                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    68                           ;        of conditions and the following disclaimer in the documentation and/or other
    69                           ;        materials provided with the distribution.
    70                           ; 
    71                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    72                           ;        software without specific prior written permission.
    73                           ; 
    74                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    75                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    76                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    77                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    78                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    79                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    80                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    81                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    82                           ; 
    83                           ; 
    84                           ; Code-generator required, PIC18LF2520 Definitions
    85                           ; 
    86                           ; SFR Addresses
    87  0000                     
    88                           	psect	idataCOMRAM
    89  001D97                     __pidataCOMRAM:
    90                           	opt stack 0
    91                           
    92                           ;initializer for _CptSend
    93  001D97  01                 	db	1
    94                           
    95                           ;initializer for _CptSpi
    96  001D98  01                 	db	1
    97                           
    98                           	psect	idataBANK0
    99  001D92                     __pidataBANK0:
   100                           	opt stack 0
   101                           
   102                           ;initializer for _PosY
   103  001D92  00F0               	dw	240
   104                           
   105                           ;initializer for _PosX
   106  001D94  0190               	dw	400
   107                           
   108                           ;initializer for _FlagSpi
   109  001D96  01                 	db	1
   110                           
   111                           	psect	idataBANK2
   112  001AFC                     __pidataBANK2:
   113                           	opt stack 0
   114                           
   115                           ;initializer for _text_prgm
   116  001AFC  70                 	db	112
   117  001AFD  72                 	db	114
   118  001AFE  67                 	db	103
   119  001AFF  6D                 	db	109
   120  001B00  44                 	db	68
   121  001B01  72                 	db	114
   122  001B02  6F                 	db	111
   123  001B03  69                 	db	105
   124  001B04  74                 	db	116
   125  001B05  65                 	db	101
   126  001B06  00                 	db	0
   127  001B07  00                 	db	0
   128  001B08  00                 	db	0
   129  001B09  00                 	db	0
   130  001B0A  00                 	db	0
   131  001B0B  70                 	db	112
   132  001B0C  72                 	db	114
   133  001B0D  67                 	db	103
   134  001B0E  6D                 	db	109
   135  001B0F  47                 	db	71
   136  001B10  61                 	db	97
   137  001B11  75                 	db	117
   138  001B12  63                 	db	99
   139  001B13  68                 	db	104
   140  001B14  65                 	db	101
   141  001B15  00                 	db	0
   142  001B16  00                 	db	0
   143  001B17  00                 	db	0
   144  001B18  00                 	db	0
   145  001B19  00                 	db	0
   146  001B1A  70                 	db	112
   147  001B1B  72                 	db	114
   148  001B1C  67                 	db	103
   149  001B1D  6D                 	db	109
   150  001B1E  42                 	db	66
   151  001B1F  6C                 	db	108
   152  001B20  65                 	db	101
   153  001B21  75                 	db	117
   154  001B22  00                 	db	0
   155  001B23  00                 	db	0
   156  001B24  00                 	db	0
   157  001B25  00                 	db	0
   158  001B26  00                 	db	0
   159  001B27  00                 	db	0
   160  001B28  00                 	db	0
   161  001B29  70                 	db	112
   162  001B2A  72                 	db	114
   163  001B2B  67                 	db	103
   164  001B2C  6D                 	db	109
   165  001B2D  42                 	db	66
   166  001B2E  6C                 	db	108
   167  001B2F  61                 	db	97
   168  001B30  6E                 	db	110
   169  001B31  63                 	db	99
   170  001B32  00                 	db	0
   171  001B33  00                 	db	0
   172  001B34  00                 	db	0
   173  001B35  00                 	db	0
   174  001B36  00                 	db	0
   175  001B37  00                 	db	0
   176  001B38  70                 	db	112
   177  001B39  72                 	db	114
   178  001B3A  67                 	db	103
   179  001B3B  6D                 	db	109
   180  001B3C  52                 	db	82
   181  001B3D  6F                 	db	111
   182  001B3E  75                 	db	117
   183  001B3F  67                 	db	103
   184  001B40  65                 	db	101
   185  001B41  00                 	db	0
   186  001B42  00                 	db	0
   187  001B43  00                 	db	0
   188  001B44  00                 	db	0
   189  001B45  00                 	db	0
   190  001B46  00                 	db	0
   191                           
   192                           	psect	smallconst
   193  000600                     __psmallconst:
   194                           	opt stack 0
   195  000600  00                 	db	0
   196  000601                     exp@coeff:
   197                           	opt stack 0
   198  000601  00                 	db	0
   199  000602  80                 	db	128
   200  000603  3F                 	db	63
   201  000604  72                 	db	114
   202  000605  31                 	db	49
   203  000606  3F                 	db	63
   204  000607  FE                 	db	254
   205  000608  75                 	db	117
   206  000609  3E                 	db	62
   207  00060A  58                 	db	88
   208  00060B  63                 	db	99
   209  00060C  3D                 	db	61
   210  00060D  95                 	db	149
   211  00060E  1D                 	db	29
   212  00060F  3C                 	db	60
   213  000610  C5                 	db	197
   214  000611  AE                 	db	174
   215  000612  3A                 	db	58
   216  000613  79                 	db	121
   217  000614  21                 	db	33
   218  000615  39                 	db	57
   219  000616  94                 	db	148
   220  000617  80                 	db	128
   221  000618  37                 	db	55
   222  000619  93                 	db	147
   223  00061A  A7                 	db	167
   224  00061B  35                 	db	53
   225  00061C  56                 	db	86
   226  00061D  15                 	db	21
   227  00061E  34                 	db	52
   228  00061F                     __end_ofexp@coeff:
   229                           	opt stack 0
   230  0000                     _RCREG	set	4014
   231  0000                     _TXREG1	set	4013
   232  0000                     _TXSTA1bits	set	4012
   233  0000                     _ADRESL	set	4035
   234  0000                     _ADRESH	set	4036
   235  0000                     _ADCON0bits	set	4034
   236  0000                     _SPBRG	set	4015
   237  0000                     _SPBRGH	set	4016
   238  0000                     _INTCONbits	set	4082
   239  0000                     _SSPBUF	set	4041
   240  0000                     _SSPCON1bits	set	4038
   241  0000                     _SSPSTATbits	set	4039
   242  0000                     _PIE1bits	set	3997
   243  0000                     _PIR1bits	set	3998
   244  0000                     _LATAbits	set	3977
   245  0000                     _ADCON2bits	set	4032
   246  0000                     _ADCON1bits	set	4033
   247  0000                     _TRISAbits	set	3986
   248  0000                     _OSCTUNEbits	set	3995
   249  0000                     _OSCCONbits	set	4051
   250  0000                     _LATCbits	set	3979
   251  0000                     _TMR0H	set	4055
   252  0000                     _TMR0L	set	4054
   253  0000                     _TRISCbits	set	3988
   254  0000                     _TMR0ON	set	32431
   255  0000                     _T0PS0	set	32424
   256  0000                     _T0PS1	set	32425
   257  0000                     _T0PS2	set	32426
   258  0000                     _PSA	set	32427
   259  0000                     _T0SE	set	32428
   260  0000                     _T0CS	set	32429
   261  0000                     _T08BIT	set	32430
   262  0000                     _SPEN	set	32095
   263  0000                     _TXEN	set	32101
   264  0000                     _RCIF	set	31989
   265  0000                     _RCIE	set	31981
   266  0000                     _ABDEN	set	32192
   267  0000                     _WUE	set	32193
   268  0000                     _BRG16	set	32195
   269  0000                     _TXCKP	set	32196
   270  0000                     _RXDTP	set	32197
   271  0000                     _OERR	set	32089
   272  0000                     _FERR	set	32090
   273  0000                     _CREN	set	32092
   274  0000                     _RX9	set	32094
   275  0000                     _BRGH	set	32098
   276  0000                     _SENDB	set	32099
   277  0000                     _SYNC	set	32100
   278  0000                     _TX9	set	32102
   279  0000                     _TRISC7	set	31911
   280  0000                     _TRISC6	set	31910
   281  0000                     _TRISC5	set	31909
   282  0000                     _TRISC4	set	31908
   283  0000                     _TRISC3	set	31907
   284  0000                     _TRISA5	set	31893
   285  0000                     _TMR0IF	set	32658
   286                           
   287                           ; #config settings
   288  00061F  00                 	db	0	; dummy byte at the end
   289  0000                     
   290                           	psect	cinit
   291  001862                     __pcinit:
   292                           	opt stack 0
   293  001862                     start_initialization:
   294                           	opt stack 0
   295  001862                     __initialization:
   296                           	opt stack 0
   297                           
   298                           ; Initialize objects allocated to BANK2 (75 bytes)
   299                           ; load TBLPTR registers with __pidataBANK2
   300  001862  0EFC               	movlw	low __pidataBANK2
   301  001864  6EF6               	movwf	tblptrl,c
   302  001866  0E1A               	movlw	high __pidataBANK2
   303  001868  6EF7               	movwf	tblptrh,c
   304  00186A  0E00               	movlw	low (__pidataBANK2 shr (0+16))
   305  00186C  6EF8               	movwf	tblptru,c
   306  00186E  EE02  F000         	lfsr	0,__pdataBANK2
   307  001872  EE10 F04B          	lfsr	1,75
   308  001876                     copy_data0:
   309  001876  0009               	tblrd		*+
   310  001878  CFF5 FFEE          	movff	tablat,postinc0
   311  00187C  50E5               	movf	postdec1,w,c
   312  00187E  50E1               	movf	fsr1l,w,c
   313  001880  E1FA               	bnz	copy_data0
   314                           
   315                           ; Initialize objects allocated to BANK0 (5 bytes)
   316                           ; load TBLPTR registers with __pidataBANK0
   317  001882  0E92               	movlw	low __pidataBANK0
   318  001884  6EF6               	movwf	tblptrl,c
   319  001886  0E1D               	movlw	high __pidataBANK0
   320  001888  6EF7               	movwf	tblptrh,c
   321  00188A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   322  00188C  6EF8               	movwf	tblptru,c
   323  00188E  EE00  F0C8         	lfsr	0,__pdataBANK0
   324  001892  EE10 F005          	lfsr	1,5
   325  001896                     copy_data1:
   326  001896  0009               	tblrd		*+
   327  001898  CFF5 FFEE          	movff	tablat,postinc0
   328  00189C  50E5               	movf	postdec1,w,c
   329  00189E  50E1               	movf	fsr1l,w,c
   330  0018A0  E1FA               	bnz	copy_data1
   331                           
   332                           ; Initialize objects allocated to COMRAM (2 bytes)
   333                           ; load TBLPTR registers with __pidataCOMRAM
   334  0018A2  0E97               	movlw	low __pidataCOMRAM
   335  0018A4  6EF6               	movwf	tblptrl,c
   336  0018A6  0E1D               	movlw	high __pidataCOMRAM
   337  0018A8  6EF7               	movwf	tblptrh,c
   338  0018AA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   339  0018AC  6EF8               	movwf	tblptru,c
   340  0018AE  0009               	tblrd		*+	;fetch initializer
   341  0018B0  CFF5 F060          	movff	tablat,__pdataCOMRAM
   342  0018B4  0009               	tblrd		*+	;fetch initializer
   343  0018B6  CFF5 F061          	movff	tablat,__pdataCOMRAM+1
   344                           
   345                           ; Clear objects allocated to BANK3 (196 bytes)
   346  0018BA  EE03  F000         	lfsr	0,__pbssBANK3
   347  0018BE  0EC4               	movlw	196
   348  0018C0                     clear_0:
   349  0018C0  6AEE               	clrf	postinc0,c
   350  0018C2  06E8               	decf	wreg,f,c
   351  0018C4  E1FD               	bnz	clear_0
   352                           
   353                           ; Clear objects allocated to BANK1 (252 bytes)
   354  0018C6  EE01  F000         	lfsr	0,__pbssBANK1
   355  0018CA  0EFC               	movlw	252
   356  0018CC                     clear_1:
   357  0018CC  6AEE               	clrf	postinc0,c
   358  0018CE  06E8               	decf	wreg,f,c
   359  0018D0  E1FD               	bnz	clear_1
   360                           
   361                           ; Clear objects allocated to BANK0 (11 bytes)
   362  0018D2  EE00  F0BD         	lfsr	0,__pbssBANK0
   363  0018D6  0E0B               	movlw	11
   364  0018D8                     clear_2:
   365  0018D8  6AEE               	clrf	postinc0,c
   366  0018DA  06E8               	decf	wreg,f,c
   367  0018DC  E1FD               	bnz	clear_2
   368                           
   369                           ; Clear objects allocated to COMRAM (6 bytes)
   370  0018DE  6A5F               	clrf	(__pbssCOMRAM+5)& (0+255),c
   371  0018E0  6A5E               	clrf	(__pbssCOMRAM+4)& (0+255),c
   372  0018E2  6A5D               	clrf	(__pbssCOMRAM+3)& (0+255),c
   373  0018E4  6A5C               	clrf	(__pbssCOMRAM+2)& (0+255),c
   374  0018E6  6A5B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   375  0018E8  6A5A               	clrf	__pbssCOMRAM& (0+255),c
   376  0018EA                     end_of_initialization:
   377                           	opt stack 0
   378  0018EA                     __end_of__initialization:
   379                           	opt stack 0
   380  0018EA  9062               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   381  0018EC  9262               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   382  0018EE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   383  0018F0  6EF8               	movwf	tblptru,c
   384  0018F2  0100               	movlb	0
   385  0018F4  EF10  F003         	goto	_main	;jump to C main() function
   386                           tblptru	equ	0xFF8
   387                           tblptrh	equ	0xFF7
   388                           tblptrl	equ	0xFF6
   389                           tablat	equ	0xFF5
   390                           postinc0	equ	0xFEE
   391                           wreg	equ	0xFE8
   392                           postdec1	equ	0xFE5
   393                           fsr1l	equ	0xFE1
   394                           
   395                           	psect	bssCOMRAM
   396  00005A                     __pbssCOMRAM:
   397                           	opt stack 0
   398  00005A                     _Checksum:
   399                           	opt stack 0
   400  00005A                     	ds	2
   401  00005C                     _FlagSleep:
   402                           	opt stack 0
   403  00005C                     	ds	1
   404  00005D                     _PrgmChoisi:
   405                           	opt stack 0
   406  00005D                     	ds	1
   407  00005E                     _TailleMsgSpi:
   408                           	opt stack 0
   409  00005E                     	ds	1
   410  00005F                     _EtatSpi:
   411                           	opt stack 0
   412  00005F                     	ds	1
   413                           tblptru	equ	0xFF8
   414                           tblptrh	equ	0xFF7
   415                           tblptrl	equ	0xFF6
   416                           tablat	equ	0xFF5
   417                           postinc0	equ	0xFEE
   418                           wreg	equ	0xFE8
   419                           postdec1	equ	0xFE5
   420                           fsr1l	equ	0xFE1
   421                           
   422                           	psect	dataCOMRAM
   423  000060                     __pdataCOMRAM:
   424                           	opt stack 0
   425  000060                     _CptSend:
   426                           	opt stack 0
   427  000060                     	ds	1
   428  000061                     _CptSpi:
   429                           	opt stack 0
   430  000061                     	ds	1
   431                           tblptru	equ	0xFF8
   432                           tblptrh	equ	0xFF7
   433                           tblptrl	equ	0xFF6
   434                           tablat	equ	0xFF5
   435                           postinc0	equ	0xFEE
   436                           wreg	equ	0xFE8
   437                           postdec1	equ	0xFE5
   438                           fsr1l	equ	0xFE1
   439                           
   440                           	psect	bssBANK0
   441  0000BD                     __pbssBANK0:
   442                           	opt stack 0
   443  0000BD                     _errno:
   444                           	opt stack 0
   445  0000BD                     	ds	2
   446  0000BF                     _Score:
   447                           	opt stack 0
   448  0000BF                     	ds	2
   449  0000C1                     _TailleTerm:
   450                           	opt stack 0
   451  0000C1                     	ds	2
   452  0000C3                     _cpt:
   453                           	opt stack 0
   454  0000C3                     	ds	1
   455  0000C4                     _TypeVarSpi:
   456                           	opt stack 0
   457  0000C4                     	ds	1
   458  0000C5                     _PosCursorPrgm:
   459                           	opt stack 0
   460  0000C5                     	ds	1
   461  0000C6                     _AutoLight:
   462                           	opt stack 0
   463  0000C6                     	ds	1
   464  0000C7                     _EtatScreen:
   465                           	opt stack 0
   466  0000C7                     	ds	1
   467                           tblptru	equ	0xFF8
   468                           tblptrh	equ	0xFF7
   469                           tblptrl	equ	0xFF6
   470                           tablat	equ	0xFF5
   471                           postinc0	equ	0xFEE
   472                           wreg	equ	0xFE8
   473                           postdec1	equ	0xFE5
   474                           fsr1l	equ	0xFE1
   475                           
   476                           	psect	dataBANK0
   477  0000C8                     __pdataBANK0:
   478                           	opt stack 0
   479  0000C8                     _PosY:
   480                           	opt stack 0
   481  0000C8                     	ds	2
   482  0000CA                     _PosX:
   483                           	opt stack 0
   484  0000CA                     	ds	2
   485  0000CC                     _FlagSpi:
   486                           	opt stack 0
   487  0000CC                     	ds	1
   488                           tblptru	equ	0xFF8
   489                           tblptrh	equ	0xFF7
   490                           tblptrl	equ	0xFF6
   491                           tablat	equ	0xFF5
   492                           postinc0	equ	0xFEE
   493                           wreg	equ	0xFE8
   494                           postdec1	equ	0xFE5
   495                           fsr1l	equ	0xFE1
   496                           
   497                           	psect	bssBANK1
   498  000100                     __pbssBANK1:
   499                           	opt stack 0
   500  000100                     _SendMsgSreen:
   501                           	opt stack 0
   502  000100                     	ds	252
   503                           tblptru	equ	0xFF8
   504                           tblptrh	equ	0xFF7
   505                           tblptrl	equ	0xFF6
   506                           tablat	equ	0xFF5
   507                           postinc0	equ	0xFEE
   508                           wreg	equ	0xFE8
   509                           postdec1	equ	0xFE5
   510                           fsr1l	equ	0xFE1
   511                           
   512                           	psect	dataBANK2
   513  000200                     __pdataBANK2:
   514                           	opt stack 0
   515  000200                     _text_prgm:
   516                           	opt stack 0
   517  000200                     	ds	75
   518                           tblptru	equ	0xFF8
   519                           tblptrh	equ	0xFF7
   520                           tblptrl	equ	0xFF6
   521                           tablat	equ	0xFF5
   522                           postinc0	equ	0xFEE
   523                           wreg	equ	0xFE8
   524                           postdec1	equ	0xFE5
   525                           fsr1l	equ	0xFE1
   526                           
   527                           	psect	bssBANK3
   528  000300                     __pbssBANK3:
   529                           	opt stack 0
   530  000300                     _TextSpi:
   531                           	opt stack 0
   532  000300                     	ds	196
   533                           tblptru	equ	0xFF8
   534                           tblptrh	equ	0xFF7
   535                           tblptrl	equ	0xFF6
   536                           tablat	equ	0xFF5
   537                           postinc0	equ	0xFEE
   538                           wreg	equ	0xFE8
   539                           postdec1	equ	0xFE5
   540                           fsr1l	equ	0xFE1
   541                           
   542                           	psect	cstackBANK0
   543  000080                     __pcstackBANK0:
   544                           	opt stack 0
   545  000080                     ?___ftadd:
   546                           	opt stack 0
   547  000080                     ___ftadd@f1:
   548                           	opt stack 0
   549                           
   550                           ; 3 bytes @ 0x0
   551  000080                     	ds	3
   552  000083                     ___ftadd@f2:
   553                           	opt stack 0
   554                           
   555                           ; 3 bytes @ 0x3
   556  000083                     	ds	3
   557  000086                     ??___ftadd:
   558                           
   559                           ; 1 bytes @ 0x6
   560  000086                     	ds	3
   561  000089                     ___ftadd@sign:
   562                           	opt stack 0
   563                           
   564                           ; 1 bytes @ 0x9
   565  000089                     	ds	1
   566  00008A                     ___ftadd@exp2:
   567                           	opt stack 0
   568                           
   569                           ; 1 bytes @ 0xA
   570  00008A                     	ds	1
   571  00008B                     ___ftadd@exp1:
   572                           	opt stack 0
   573                           
   574                           ; 1 bytes @ 0xB
   575  00008B                     	ds	1
   576  00008C                     ?___ftsub:
   577                           	opt stack 0
   578  00008C                     ?_floor:
   579                           	opt stack 0
   580  00008C                     ?_eval_poly:
   581                           	opt stack 0
   582  00008C                     floor@x:
   583                           	opt stack 0
   584  00008C                     ___ftsub@f1:
   585                           	opt stack 0
   586  00008C                     eval_poly@x:
   587                           	opt stack 0
   588                           
   589                           ; 3 bytes @ 0xC
   590  00008C                     	ds	3
   591  00008F                     eval_poly@d:
   592                           	opt stack 0
   593  00008F                     floor@i:
   594                           	opt stack 0
   595  00008F                     ___ftsub@f2:
   596                           	opt stack 0
   597                           
   598                           ; 3 bytes @ 0xF
   599  00008F                     	ds	2
   600  000091                     eval_poly@n:
   601                           	opt stack 0
   602                           
   603                           ; 2 bytes @ 0x11
   604  000091                     	ds	1
   605  000092                     floor@expon:
   606                           	opt stack 0
   607                           
   608                           ; 2 bytes @ 0x12
   609  000092                     	ds	1
   610  000093                     ??_eval_poly:
   611                           
   612                           ; 1 bytes @ 0x13
   613  000093                     	ds	2
   614  000095                     eval_poly@res:
   615                           	opt stack 0
   616                           
   617                           ; 3 bytes @ 0x15
   618  000095                     	ds	3
   619  000098                     ?_ldexp:
   620                           	opt stack 0
   621  000098                     ldexp@value:
   622                           	opt stack 0
   623                           
   624                           ; 3 bytes @ 0x18
   625  000098                     	ds	3
   626  00009B                     ldexp@newexp:
   627                           	opt stack 0
   628                           
   629                           ; 2 bytes @ 0x1B
   630  00009B                     	ds	2
   631  00009D                     ??_ldexp:
   632                           
   633                           ; 1 bytes @ 0x1D
   634  00009D                     	ds	2
   635  00009F                     ?_exp:
   636                           	opt stack 0
   637  00009F                     exp@x:
   638                           	opt stack 0
   639                           
   640                           ; 3 bytes @ 0x1F
   641  00009F                     	ds	3
   642  0000A2                     _exp$1529:
   643                           	opt stack 0
   644                           
   645                           ; 3 bytes @ 0x22
   646  0000A2                     	ds	3
   647  0000A5                     exp@exponent:
   648                           	opt stack 0
   649                           
   650                           ; 2 bytes @ 0x25
   651  0000A5                     	ds	2
   652  0000A7                     exp@sign:
   653                           	opt stack 0
   654                           
   655                           ; 1 bytes @ 0x27
   656  0000A7                     	ds	1
   657  0000A8                     ??_main:
   658                           
   659                           ; 1 bytes @ 0x28
   660  0000A8                     	ds	4
   661  0000AC                     _main$1525:
   662                           	opt stack 0
   663                           
   664                           ; 3 bytes @ 0x2C
   665  0000AC                     	ds	3
   666  0000AF                     _main$1526:
   667                           	opt stack 0
   668                           
   669                           ; 3 bytes @ 0x2F
   670  0000AF                     	ds	3
   671  0000B2                     main@CptTmr0:
   672                           	opt stack 0
   673                           
   674                           ; 1 bytes @ 0x32
   675  0000B2                     	ds	1
   676  0000B3                     _main$1527:
   677                           	opt stack 0
   678                           
   679                           ; 3 bytes @ 0x33
   680  0000B3                     	ds	3
   681  0000B6                     _main$1528:
   682                           	opt stack 0
   683                           
   684                           ; 2 bytes @ 0x36
   685  0000B6                     	ds	2
   686  0000B8                     main@taille_text_spi:
   687                           	opt stack 0
   688                           
   689                           ; 1 bytes @ 0x38
   690  0000B8                     	ds	1
   691  0000B9                     main@taille_text_prgm:
   692                           	opt stack 0
   693                           
   694                           ; 1 bytes @ 0x39
   695  0000B9                     	ds	1
   696  0000BA                     main@adc_res:
   697                           	opt stack 0
   698                           
   699                           ; 3 bytes @ 0x3A
   700  0000BA                     	ds	3
   701                           tblptru	equ	0xFF8
   702                           tblptrh	equ	0xFF7
   703                           tblptrl	equ	0xFF6
   704                           tablat	equ	0xFF5
   705                           postinc0	equ	0xFEE
   706                           wreg	equ	0xFE8
   707                           postdec1	equ	0xFE5
   708                           fsr1l	equ	0xFE1
   709                           
   710                           	psect	cstackCOMRAM
   711  000001                     __pcstackCOMRAM:
   712                           	opt stack 0
   713  000001                     Modulo@M_nombre:
   714                           	opt stack 0
   715                           
   716                           ; 2 bytes @ 0x0
   717  000001                     	ds	2
   718  000003                     ??_ISR:
   719                           
   720                           ; 1 bytes @ 0x2
   721  000003                     	ds	25
   722  00001C                     ISR@Receive:
   723                           	opt stack 0
   724                           
   725                           ; 1 bytes @ 0x1B
   726  00001C                     	ds	1
   727  00001D                     ISR@data_spi:
   728                           	opt stack 0
   729                           
   730                           ; 1 bytes @ 0x1C
   731  00001D                     	ds	1
   732  00001E                     ?_Adc:
   733                           	opt stack 0
   734  00001E                     ?___wmul:
   735                           	opt stack 0
   736  00001E                     ?___awdiv:
   737                           	opt stack 0
   738  00001E                     ?___ftpack:
   739                           	opt stack 0
   740  00001E                     PrintC@c_printC:
   741                           	opt stack 0
   742  00001E                     ClearArray@cpt_vide:
   743                           	opt stack 0
   744  00001E                     ___wmul@multiplier:
   745                           	opt stack 0
   746  00001E                     ___awdiv@dividend:
   747                           	opt stack 0
   748  00001E                     ___ftpack@arg:
   749                           	opt stack 0
   750  00001E                     frexp@value:
   751                           	opt stack 0
   752  00001E                     ___ftge@ff1:
   753                           	opt stack 0
   754                           
   755                           ; 3 bytes @ 0x1D
   756  00001E                     	ds	1
   757  00001F                     PrintS@s_printS:
   758                           	opt stack 0
   759                           
   760                           ; 2 bytes @ 0x1E
   761  00001F                     	ds	1
   762  000020                     ??_Adc:
   763  000020                     ___wmul@multiplicand:
   764                           	opt stack 0
   765  000020                     ___awdiv@divisor:
   766                           	opt stack 0
   767                           
   768                           ; 2 bytes @ 0x1F
   769  000020                     	ds	1
   770  000021                     ___ftpack@exp:
   771                           	opt stack 0
   772  000021                     frexp@eptr:
   773                           	opt stack 0
   774  000021                     ___ftge@ff2:
   775                           	opt stack 0
   776                           
   777                           ; 3 bytes @ 0x20
   778  000021                     	ds	1
   779  000022                     Adc@channel:
   780                           	opt stack 0
   781  000022                     ___awdiv@counter:
   782                           	opt stack 0
   783  000022                     ___ftpack@sign:
   784                           	opt stack 0
   785  000022                     ___wmul@product:
   786                           	opt stack 0
   787                           
   788                           ; 2 bytes @ 0x21
   789  000022                     	ds	1
   790  000023                     ??___ftpack:
   791  000023                     ??_frexp:
   792  000023                     ___awdiv@sign:
   793                           	opt stack 0
   794                           
   795                           ; 1 bytes @ 0x22
   796  000023                     	ds	1
   797  000024                     ??___ftge:
   798  000024                     ___awdiv@quotient:
   799                           	opt stack 0
   800                           
   801                           ; 2 bytes @ 0x23
   802  000024                     	ds	2
   803  000026                     ?___ftdiv:
   804                           	opt stack 0
   805  000026                     ?___lwtoft:
   806                           	opt stack 0
   807  000026                     ___lwtoft@c:
   808                           	opt stack 0
   809  000026                     ___ftdiv@f1:
   810                           	opt stack 0
   811                           
   812                           ; 3 bytes @ 0x25
   813  000026                     	ds	3
   814  000029                     ___ftdiv@f2:
   815                           	opt stack 0
   816                           
   817                           ; 3 bytes @ 0x28
   818  000029                     	ds	3
   819  00002C                     ??___ftdiv:
   820                           
   821                           ; 1 bytes @ 0x2B
   822  00002C                     	ds	3
   823  00002F                     ___ftdiv@cntr:
   824                           	opt stack 0
   825                           
   826                           ; 1 bytes @ 0x2E
   827  00002F                     	ds	1
   828  000030                     ___ftdiv@f3:
   829                           	opt stack 0
   830                           
   831                           ; 3 bytes @ 0x2F
   832  000030                     	ds	3
   833  000033                     ___ftdiv@exp:
   834                           	opt stack 0
   835                           
   836                           ; 1 bytes @ 0x32
   837  000033                     	ds	1
   838  000034                     ___ftdiv@sign:
   839                           	opt stack 0
   840                           
   841                           ; 1 bytes @ 0x33
   842  000034                     	ds	1
   843  000035                     ?___fttol:
   844                           	opt stack 0
   845  000035                     ___fttol@f1:
   846                           	opt stack 0
   847                           
   848                           ; 3 bytes @ 0x34
   849  000035                     	ds	4
   850  000039                     ??___fttol:
   851                           
   852                           ; 1 bytes @ 0x38
   853  000039                     	ds	5
   854  00003E                     ___fttol@sign1:
   855                           	opt stack 0
   856                           
   857                           ; 1 bytes @ 0x3D
   858  00003E                     	ds	1
   859  00003F                     ___fttol@lval:
   860                           	opt stack 0
   861                           
   862                           ; 4 bytes @ 0x3E
   863  00003F                     	ds	4
   864  000043                     ___fttol@exp1:
   865                           	opt stack 0
   866                           
   867                           ; 1 bytes @ 0x42
   868  000043                     	ds	1
   869  000044                     ?___altoft:
   870                           	opt stack 0
   871  000044                     ?___awtoft:
   872                           	opt stack 0
   873  000044                     ___awtoft@c:
   874                           	opt stack 0
   875  000044                     ___altoft@c:
   876                           	opt stack 0
   877                           
   878                           ; 4 bytes @ 0x43
   879  000044                     	ds	3
   880  000047                     ___awtoft@sign:
   881                           	opt stack 0
   882                           
   883                           ; 1 bytes @ 0x46
   884  000047                     	ds	1
   885  000048                     ??___altoft:
   886  000048                     ?___ftneg:
   887                           	opt stack 0
   888  000048                     ___ftneg@f1:
   889                           	opt stack 0
   890                           
   891                           ; 3 bytes @ 0x47
   892  000048                     	ds	3
   893  00004B                     ?___ftmul:
   894                           	opt stack 0
   895  00004B                     ___ftmul@f1:
   896                           	opt stack 0
   897                           
   898                           ; 3 bytes @ 0x4A
   899  00004B                     	ds	1
   900  00004C                     ___altoft@exp:
   901                           	opt stack 0
   902                           
   903                           ; 1 bytes @ 0x4B
   904  00004C                     	ds	1
   905  00004D                     ___altoft@sign:
   906                           	opt stack 0
   907                           
   908                           ; 1 bytes @ 0x4C
   909  00004D                     	ds	1
   910  00004E                     ___ftmul@f2:
   911                           	opt stack 0
   912                           
   913                           ; 3 bytes @ 0x4D
   914  00004E                     	ds	3
   915  000051                     ??___ftmul:
   916                           
   917                           ; 1 bytes @ 0x50
   918  000051                     	ds	3
   919  000054                     ___ftmul@exp:
   920                           	opt stack 0
   921                           
   922                           ; 1 bytes @ 0x53
   923  000054                     	ds	1
   924  000055                     ___ftmul@f3_as_product:
   925                           	opt stack 0
   926                           
   927                           ; 3 bytes @ 0x54
   928  000055                     	ds	3
   929  000058                     ___ftmul@cntr:
   930                           	opt stack 0
   931                           
   932                           ; 1 bytes @ 0x57
   933  000058                     	ds	1
   934  000059                     ___ftmul@sign:
   935                           	opt stack 0
   936                           
   937                           ; 1 bytes @ 0x58
   938  000059                     	ds	1
   939  00005A                     tblptru	equ	0xFF8
   940                           tblptrh	equ	0xFF7
   941                           tblptrl	equ	0xFF6
   942                           tablat	equ	0xFF5
   943                           postinc0	equ	0xFEE
   944                           wreg	equ	0xFE8
   945                           postdec1	equ	0xFE5
   946                           fsr1l	equ	0xFE1
   947                           
   948                           ; 1 bytes @ 0x59
   949 ;;
   950 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   951 ;;
   952 ;; *************** function _main *****************
   953 ;; Defined at:
   954 ;;		line 161 in file "main.c"
   955 ;; Parameters:    Size  Location     Type
   956 ;;		None
   957 ;; Auto vars:     Size  Location     Type
   958 ;;  adc_res         3   58[BANK0 ] float 
   959 ;;  taille_text_    1   57[BANK0 ] unsigned char 
   960 ;;  taille_text_    1   56[BANK0 ] unsigned char 
   961 ;;  CptTmr0         1   50[BANK0 ] unsigned char 
   962 ;; Return value:  Size  Location     Type
   963 ;;                  1    wreg      void 
   964 ;; Registers used:
   965 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   966 ;; Tracked objects:
   967 ;;		On entry : 0/0
   968 ;;		On exit  : 0/0
   969 ;;		Unchanged: 0/0
   970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   971 ;;      Params:         0       0       0       0       0       0       0
   972 ;;      Locals:         0      17       0       0       0       0       0
   973 ;;      Temps:          0       4       0       0       0       0       0
   974 ;;      Totals:         0      21       0       0       0       0       0
   975 ;;Total ram usage:       21 bytes
   976 ;; Hardware stack levels required when called:    6
   977 ;; This function calls:
   978 ;;		_ADCInit
   979 ;;		_Adc
   980 ;;		_ClearArray
   981 ;;		_ClockInit
   982 ;;		_InitTmr0
   983 ;;		_PrintS
   984 ;;		_SpiInit
   985 ;;		_UartInit
   986 ;;		___awdiv
   987 ;;		___awtoft
   988 ;;		___ftadd
   989 ;;		___ftdiv
   990 ;;		___ftge
   991 ;;		___ftmul
   992 ;;		___ftneg
   993 ;;		___fttol
   994 ;;		___lwtoft
   995 ;;		_exp
   996 ;; This function is called by:
   997 ;;		Startup code after reset
   998 ;; This function uses a non-reentrant model
   999 ;;
  1000                           
  1001                           	psect	text0
  1002  000620                     __ptext0:
  1003                           	opt stack 0
  1004  000620                     _main:
  1005                           	opt stack 25
  1006                           
  1007                           ;main.c: 162: ClockInit();
  1008                           
  1009                           ;incstack = 0
  1010  000620  ECC2  F00E         	call	_ClockInit	;wreg free
  1011                           
  1012                           ;main.c: 163: ADCInit();
  1013  000624  EC56  F00E         	call	_ADCInit	;wreg free
  1014                           
  1015                           ;main.c: 164: SpiInit();
  1016  000628  EC2D  F00E         	call	_SpiInit	;wreg free
  1017                           
  1018                           ;main.c: 165: UartInit();
  1019  00062C  EC15  F00E         	call	_UartInit	;wreg free
  1020                           
  1021                           ;main.c: 166: TRISCbits.TRISC1=0;
  1022  000630  9294               	bcf	3988,1,c	;volatile
  1023                           
  1024                           ;main.c: 167: InitTmr0();
  1025  000632  ECA1  F00E         	call	_InitTmr0	;wreg free
  1026                           
  1027                           ;main.c: 169: char CptTmr0 = 0;
  1028  000636  0E00               	movlw	0
  1029  000638  0100               	movlb	0	; () banked
  1030  00063A  6FB2               	movwf	main@CptTmr0& (0+255),b
  1031                           
  1032                           ; BSR set to: 0
  1033                           ;main.c: 170: float adc_res = 0;
  1034  00063C  0E00               	movlw	0
  1035  00063E  6FBA               	movwf	main@adc_res& (0+255),b
  1036  000640  0E00               	movlw	0
  1037  000642  6FBB               	movwf	(main@adc_res+1)& (0+255),b
  1038  000644  0E00               	movlw	0
  1039  000646  6FBC               	movwf	(main@adc_res+2)& (0+255),b
  1040                           
  1041                           ; BSR set to: 0
  1042                           ;main.c: 171: unsigned char taille_text_prgm;
  1043                           ;main.c: 172: unsigned char taille_text_spi;
  1044                           ;main.c: 173: _delay((unsigned long)((2000)*(32000000/4000.0)));
  1045  000648  0E52               	movlw	82
  1046  00064A  0100               	movlb	0	; () banked
  1047  00064C  6FA9               	movwf	(??_main+1)& (0+255),b
  1048  00064E  0E2B               	movlw	43
  1049  000650  6FA8               	movwf	??_main& (0+255),b
  1050  000652  0E00               	movlw	0
  1051  000654                     u3217:
  1052  000654  2EE8               	decfsz	wreg,f,c
  1053  000656  D7FE               	bra	u3217
  1054  000658  2FA8               	decfsz	??_main& (0+255),f,b
  1055  00065A  D7FC               	bra	u3217
  1056  00065C  2FA9               	decfsz	(??_main+1)& (0+255),f,b
  1057  00065E  D7FA               	bra	u3217
  1058  000660  F000               	nop	
  1059  000662                     
  1060                           ;main.c: 176: if(TMR0IF) {
  1061  000662  A4F2               	btfss	intcon,2,c	;volatile
  1062  000664  D7FE               	goto	l177
  1063                           
  1064                           ;main.c: 177: TMR0L = 0xB0;
  1065  000666  0EB0               	movlw	176
  1066  000668  6ED6               	movwf	4054,c	;volatile
  1067                           
  1068                           ;main.c: 178: TMR0H = 0x3C;
  1069  00066A  0E3C               	movlw	60
  1070  00066C  6ED7               	movwf	4055,c	;volatile
  1071                           
  1072                           ;main.c: 179: TMR0IF = 0;
  1073  00066E  94F2               	bcf	intcon,2,c	;volatile
  1074                           
  1075                           ;main.c: 180: CptTmr0++;
  1076  000670  0100               	movlb	0	; () banked
  1077  000672  2BB2               	incf	main@CptTmr0& (0+255),f,b
  1078                           
  1079                           ; BSR set to: 0
  1080                           ;main.c: 181: if(CptTmr0 > 10) {
  1081  000674  0E0A               	movlw	10
  1082  000676  65B2               	cpfsgt	main@CptTmr0& (0+255),b
  1083  000678  D00F               	goto	l179
  1084                           
  1085                           ; BSR set to: 0
  1086                           ;main.c: 182: LATCbits.LATC1=!(LATCbits.LATC1);
  1087  00067A  B28B               	btfsc	3979,1,c	;volatile
  1088  00067C  D003               	goto	u3060
  1089  00067E  6BA8               	clrf	??_main& (0+255),b
  1090  000680  2BA8               	incf	??_main& (0+255),f,b
  1091  000682  D002               	goto	u3078
  1092  000684                     u3060:
  1093  000684  0100               	movlb	0	; () banked
  1094  000686  6BA8               	clrf	??_main& (0+255),b
  1095  000688                     u3078:
  1096  000688  47A8               	rlncf	??_main& (0+255),f,b
  1097  00068A  508B               	movf	3979,w,c	;volatile
  1098  00068C  19A8               	xorwf	??_main& (0+255),w,b
  1099  00068E  0BFD               	andlw	-3
  1100  000690  19A8               	xorwf	??_main& (0+255),w,b
  1101  000692  6E8B               	movwf	3979,c	;volatile
  1102                           
  1103                           ; BSR set to: 0
  1104                           ;main.c: 183: CptTmr0 = 0;
  1105  000694  0E00               	movlw	0
  1106  000696  6FB2               	movwf	main@CptTmr0& (0+255),b
  1107  000698                     l179:
  1108                           
  1109                           ; BSR set to: 0
  1110                           ;main.c: 184: }
  1111                           ;main.c: 185: if(AutoLight) {
  1112                           
  1113                           ; BSR set to: 0
  1114  000698  51C6               	movf	_AutoLight& (0+255),w,b
  1115  00069A  B4D8               	btfsc	status,2,c
  1116  00069C  D173               	goto	l183
  1117                           
  1118                           ; BSR set to: 0
  1119                           ;main.c: 186: adc_res = Adc(1);
  1120  00069E  0E01               	movlw	1
  1121  0006A0  ECFC  F00D         	call	_Adc
  1122  0006A4  C01E  F026         	movff	?_Adc,___lwtoft@c
  1123  0006A8  C01F  F027         	movff	?_Adc+1,___lwtoft@c+1
  1124  0006AC  EC8F  F00E         	call	___lwtoft	;wreg free
  1125  0006B0  C026  F0BA         	movff	?___lwtoft,main@adc_res
  1126  0006B4  C027  F0BB         	movff	?___lwtoft+1,main@adc_res+1
  1127  0006B8  C028  F0BC         	movff	?___lwtoft+2,main@adc_res+2
  1128                           
  1129                           ;main.c: 197: adc_res = 90*exp(-(adc_res/901));
  1130  0006BC  0E40               	movlw	64
  1131  0006BE  6E29               	movwf	___ftdiv@f2,c
  1132  0006C0  0E61               	movlw	97
  1133  0006C2  6E2A               	movwf	___ftdiv@f2+1,c
  1134  0006C4  0E44               	movlw	68
  1135  0006C6  6E2B               	movwf	___ftdiv@f2+2,c
  1136  0006C8  C0BA  F026         	movff	main@adc_res,___ftdiv@f1
  1137  0006CC  C0BB  F027         	movff	main@adc_res+1,___ftdiv@f1+1
  1138  0006D0  C0BC  F028         	movff	main@adc_res+2,___ftdiv@f1+2
  1139  0006D4  EC26  F00A         	call	___ftdiv	;wreg free
  1140  0006D8  C026  F048         	movff	?___ftdiv,___ftneg@f1
  1141  0006DC  C027  F049         	movff	?___ftdiv+1,___ftneg@f1+1
  1142  0006E0  C028  F04A         	movff	?___ftdiv+2,___ftneg@f1+2
  1143  0006E4  EC7D  F00E         	call	___ftneg	;wreg free
  1144  0006E8  C048  F0AC         	movff	?___ftneg,_main$1525
  1145  0006EC  C049  F0AD         	movff	?___ftneg+1,_main$1525+1
  1146  0006F0  C04A  F0AE         	movff	?___ftneg+2,_main$1525+2
  1147                           
  1148                           ;main.c: 197: adc_res = 90*exp(-(adc_res/901));
  1149  0006F4  C0AC  F09F         	movff	_main$1525,exp@x
  1150  0006F8  C0AD  F0A0         	movff	_main$1525+1,exp@x+1
  1151  0006FC  C0AE  F0A1         	movff	_main$1525+2,exp@x+2
  1152  000700  EC63  F007         	call	_exp	;wreg free
  1153  000704  C09F  F0AF         	movff	?_exp,_main$1526
  1154  000708  C0A0  F0B0         	movff	?_exp+1,_main$1526+1
  1155  00070C  C0A1  F0B1         	movff	?_exp+2,_main$1526+2
  1156                           
  1157                           ;main.c: 197: adc_res = 90*exp(-(adc_res/901));
  1158  000710  C0AF  F04B         	movff	_main$1526,___ftmul@f1
  1159  000714  C0B0  F04C         	movff	_main$1526+1,___ftmul@f1+1
  1160  000718  C0B1  F04D         	movff	_main$1526+2,___ftmul@f1+2
  1161  00071C  0E00               	movlw	0
  1162  00071E  6E4E               	movwf	___ftmul@f2,c
  1163  000720  0EB4               	movlw	180
  1164  000722  6E4F               	movwf	___ftmul@f2+1,c
  1165  000724  0E42               	movlw	66
  1166  000726  6E50               	movwf	___ftmul@f2+2,c
  1167  000728  ECAC  F009         	call	___ftmul	;wreg free
  1168  00072C  C04B  F0BA         	movff	?___ftmul,main@adc_res
  1169  000730  C04C  F0BB         	movff	?___ftmul+1,main@adc_res+1
  1170  000734  C04D  F0BC         	movff	?___ftmul+2,main@adc_res+2
  1171                           
  1172                           ;main.c: 198: adc_res = (int)(adc_res);
  1173  000738  C0BA  F035         	movff	main@adc_res,___fttol@f1
  1174  00073C  C0BB  F036         	movff	main@adc_res+1,___fttol@f1+1
  1175  000740  C0BC  F037         	movff	main@adc_res+2,___fttol@f1+2
  1176  000744  EC32  F009         	call	___fttol	;wreg free
  1177  000748  C035  F044         	movff	?___fttol,___awtoft@c
  1178  00074C  C036  F045         	movff	?___fttol+1,___awtoft@c+1
  1179  000750  ECC5  F00D         	call	___awtoft	;wreg free
  1180  000754  C044  F0BA         	movff	?___awtoft,main@adc_res
  1181  000758  C045  F0BB         	movff	?___awtoft+1,main@adc_res+1
  1182  00075C  C046  F0BC         	movff	?___awtoft+2,main@adc_res+2
  1183                           
  1184                           ;main.c: 199: if(adc_res < 0) {
  1185  000760  0100               	movlb	0	; () banked
  1186  000762  AFBC               	btfss	(main@adc_res+2)& (0+255),7,b
  1187  000764  D006               	goto	l181
  1188                           
  1189                           ; BSR set to: 0
  1190                           ;main.c: 200: adc_res = 0;
  1191  000766  0E00               	movlw	0
  1192  000768  6FBA               	movwf	main@adc_res& (0+255),b
  1193  00076A  0E00               	movlw	0
  1194  00076C  6FBB               	movwf	(main@adc_res+1)& (0+255),b
  1195  00076E  0E00               	movlw	0
  1196  000770  6FBC               	movwf	(main@adc_res+2)& (0+255),b
  1197  000772                     l181:
  1198                           
  1199                           ; BSR set to: 0
  1200                           ;main.c: 201: }
  1201                           ;main.c: 202: if(adc_res > 99) {
  1202                           
  1203                           ; BSR set to: 0
  1204  000772  0E00               	movlw	0
  1205  000774  6E1E               	movwf	___ftge@ff1,c
  1206  000776  0EC6               	movlw	198
  1207  000778  6E1F               	movwf	___ftge@ff1+1,c
  1208  00077A  0E42               	movlw	66
  1209  00077C  6E20               	movwf	___ftge@ff1+2,c
  1210  00077E  C0BA  F021         	movff	main@adc_res,___ftge@ff2
  1211  000782  C0BB  F022         	movff	main@adc_res+1,___ftge@ff2+1
  1212  000786  C0BC  F023         	movff	main@adc_res+2,___ftge@ff2+2
  1213  00078A  EC7C  F00C         	call	___ftge	;wreg free
  1214  00078E  B0D8               	btfsc	status,0,c
  1215  000790  D007               	goto	l182
  1216                           
  1217                           ;main.c: 203: adc_res = 99;
  1218  000792  0E00               	movlw	0
  1219  000794  0100               	movlb	0	; () banked
  1220  000796  6FBA               	movwf	main@adc_res& (0+255),b
  1221  000798  0EC6               	movlw	198
  1222  00079A  6FBB               	movwf	(main@adc_res+1)& (0+255),b
  1223  00079C  0E42               	movlw	66
  1224  00079E  6FBC               	movwf	(main@adc_res+2)& (0+255),b
  1225  0007A0                     l182:
  1226                           
  1227                           ;main.c: 204: }
  1228                           ;main.c: 207: SendMsgSreen[0] = 0x64;
  1229  0007A0  0E64               	movlw	100
  1230  0007A2  0101               	movlb	1	; () banked
  1231  0007A4  6F00               	movwf	_SendMsgSreen& (0+255),b
  1232                           
  1233                           ;main.c: 208: SendMsgSreen[1] = 0x69;
  1234  0007A6  0E69               	movlw	105
  1235  0007A8  6F01               	movwf	(_SendMsgSreen+1)& (0+255),b
  1236                           
  1237                           ;main.c: 209: SendMsgSreen[2] = 0x6D;
  1238  0007AA  0E6D               	movlw	109
  1239  0007AC  6F02               	movwf	(_SendMsgSreen+2)& (0+255),b
  1240                           
  1241                           ;main.c: 210: SendMsgSreen[3] = 0x3D;
  1242  0007AE  0E3D               	movlw	61
  1243  0007B0  6F03               	movwf	(_SendMsgSreen+3)& (0+255),b
  1244                           
  1245                           ; BSR set to: 1
  1246                           ;main.c: 211: SendMsgSreen[4] = 0x30 + (char)(adc_res/10);
  1247  0007B2  0E00               	movlw	0
  1248  0007B4  6E29               	movwf	___ftdiv@f2,c
  1249  0007B6  0E20               	movlw	32
  1250  0007B8  6E2A               	movwf	___ftdiv@f2+1,c
  1251  0007BA  0E41               	movlw	65
  1252  0007BC  6E2B               	movwf	___ftdiv@f2+2,c
  1253  0007BE  C0BA  F026         	movff	main@adc_res,___ftdiv@f1
  1254  0007C2  C0BB  F027         	movff	main@adc_res+1,___ftdiv@f1+1
  1255  0007C6  C0BC  F028         	movff	main@adc_res+2,___ftdiv@f1+2
  1256  0007CA  EC26  F00A         	call	___ftdiv	;wreg free
  1257  0007CE  C026  F035         	movff	?___ftdiv,___fttol@f1
  1258  0007D2  C027  F036         	movff	?___ftdiv+1,___fttol@f1+1
  1259  0007D6  C028  F037         	movff	?___ftdiv+2,___fttol@f1+2
  1260  0007DA  EC32  F009         	call	___fttol	;wreg free
  1261  0007DE  5035               	movf	?___fttol,w,c
  1262  0007E0  0F30               	addlw	48
  1263  0007E2  0101               	movlb	1	; () banked
  1264  0007E4  6F04               	movwf	(_SendMsgSreen+4)& (0+255),b
  1265                           
  1266                           ; BSR set to: 1
  1267                           ;main.c: 212: SendMsgSreen[5] = 0x30 + (char)(adc_res-(10*(char)(adc_res/10)));
  1268  0007E6  C0BA  F083         	movff	main@adc_res,___ftadd@f2
  1269  0007EA  C0BB  F084         	movff	main@adc_res+1,___ftadd@f2+1
  1270  0007EE  C0BC  F085         	movff	main@adc_res+2,___ftadd@f2+2
  1271  0007F2  0E00               	movlw	0
  1272  0007F4  6E29               	movwf	___ftdiv@f2,c
  1273  0007F6  0E20               	movlw	32
  1274  0007F8  6E2A               	movwf	___ftdiv@f2+1,c
  1275  0007FA  0E41               	movlw	65
  1276  0007FC  6E2B               	movwf	___ftdiv@f2+2,c
  1277  0007FE  C0BA  F026         	movff	main@adc_res,___ftdiv@f1
  1278  000802  C0BB  F027         	movff	main@adc_res+1,___ftdiv@f1+1
  1279  000806  C0BC  F028         	movff	main@adc_res+2,___ftdiv@f1+2
  1280  00080A  EC26  F00A         	call	___ftdiv	;wreg free
  1281  00080E  C026  F035         	movff	?___ftdiv,___fttol@f1
  1282  000812  C027  F036         	movff	?___ftdiv+1,___fttol@f1+1
  1283  000816  C028  F037         	movff	?___ftdiv+2,___fttol@f1+2
  1284  00081A  EC32  F009         	call	___fttol	;wreg free
  1285  00081E  5035               	movf	?___fttol,w,c
  1286  000820  0D0A               	mullw	10
  1287  000822  CFF3 F044          	movff	prodl,___awtoft@c
  1288  000826  CFF4 F045          	movff	prodh,___awtoft@c+1
  1289  00082A  ECC5  F00D         	call	___awtoft	;wreg free
  1290  00082E  C044  F048         	movff	?___awtoft,___ftneg@f1
  1291  000832  C045  F049         	movff	?___awtoft+1,___ftneg@f1+1
  1292  000836  C046  F04A         	movff	?___awtoft+2,___ftneg@f1+2
  1293  00083A  EC7D  F00E         	call	___ftneg	;wreg free
  1294  00083E  C048  F080         	movff	?___ftneg,___ftadd@f1
  1295  000842  C049  F081         	movff	?___ftneg+1,___ftadd@f1+1
  1296  000846  C04A  F082         	movff	?___ftneg+2,___ftadd@f1+2
  1297  00084A  EC5B  F008         	call	___ftadd	;wreg free
  1298  00084E  C080  F0B3         	movff	?___ftadd,_main$1527
  1299  000852  C081  F0B4         	movff	?___ftadd+1,_main$1527+1
  1300  000856  C082  F0B5         	movff	?___ftadd+2,_main$1527+2
  1301                           
  1302                           ;main.c: 212: SendMsgSreen[5] = 0x30 + (char)(adc_res-(10*(char)(adc_res/10)));
  1303  00085A  C0B3  F035         	movff	_main$1527,___fttol@f1
  1304  00085E  C0B4  F036         	movff	_main$1527+1,___fttol@f1+1
  1305  000862  C0B5  F037         	movff	_main$1527+2,___fttol@f1+2
  1306  000866  EC32  F009         	call	___fttol	;wreg free
  1307  00086A  5035               	movf	?___fttol,w,c
  1308  00086C  0F30               	addlw	48
  1309  00086E  0101               	movlb	1	; () banked
  1310  000870  6F05               	movwf	(_SendMsgSreen+5)& (0+255),b
  1311                           
  1312                           ; BSR set to: 1
  1313                           ;main.c: 213: SendMsgSreen[6] = 0xFF;
  1314  000872  6906               	setf	(_SendMsgSreen+6)& (0+255),b
  1315                           
  1316                           ; BSR set to: 1
  1317                           ;main.c: 214: SendMsgSreen[7] = 0xFF;
  1318  000874  6907               	setf	(_SendMsgSreen+7)& (0+255),b
  1319                           
  1320                           ; BSR set to: 1
  1321                           ;main.c: 215: SendMsgSreen[8] = 0xFF;
  1322  000876  6908               	setf	(_SendMsgSreen+8)& (0+255),b
  1323                           
  1324                           ; BSR set to: 1
  1325                           ;main.c: 216: PrintS(SendMsgSreen);
  1326  000878  0E00               	movlw	low _SendMsgSreen
  1327  00087A  6E1F               	movwf	PrintS@s_printS,c
  1328  00087C  0E01               	movlw	high _SendMsgSreen
  1329  00087E  6E20               	movwf	PrintS@s_printS+1,c
  1330  000880  ECE1  F00D         	call	_PrintS	;wreg free
  1331                           
  1332                           ;main.c: 217: ClearArray();
  1333  000884  EC42  F00E         	call	_ClearArray	;wreg free
  1334                           
  1335                           ;main.c: 218: if(EtatScreen == 0) {
  1336  000888  0100               	movlb	0	; () banked
  1337  00088A  51C7               	movf	_EtatScreen& (0+255),w,b
  1338  00088C  A4D8               	btfss	status,2,c
  1339  00088E  D07A               	goto	l183
  1340                           
  1341                           ; BSR set to: 0
  1342                           ;main.c: 221: SendMsgSreen[0] = 0x68;
  1343  000890  0E68               	movlw	104
  1344  000892  0101               	movlb	1	; () banked
  1345  000894  6F00               	movwf	_SendMsgSreen& (0+255),b
  1346                           
  1347                           ;main.c: 222: SendMsgSreen[1] = 0x30;
  1348  000896  0E30               	movlw	48
  1349  000898  6F01               	movwf	(_SendMsgSreen+1)& (0+255),b
  1350                           
  1351                           ;main.c: 223: SendMsgSreen[2] = 0x2E;
  1352  00089A  0E2E               	movlw	46
  1353  00089C  6F02               	movwf	(_SendMsgSreen+2)& (0+255),b
  1354                           
  1355                           ;main.c: 224: SendMsgSreen[3] = 0x76;
  1356  00089E  0E76               	movlw	118
  1357  0008A0  6F03               	movwf	(_SendMsgSreen+3)& (0+255),b
  1358                           
  1359                           ;main.c: 225: SendMsgSreen[4] = 0x61;
  1360  0008A2  0E61               	movlw	97
  1361  0008A4  6F04               	movwf	(_SendMsgSreen+4)& (0+255),b
  1362                           
  1363                           ;main.c: 226: SendMsgSreen[5] = 0x6C;
  1364  0008A6  0E6C               	movlw	108
  1365  0008A8  6F05               	movwf	(_SendMsgSreen+5)& (0+255),b
  1366                           
  1367                           ;main.c: 227: SendMsgSreen[6] = 0x3D;
  1368  0008AA  0E3D               	movlw	61
  1369  0008AC  6F06               	movwf	(_SendMsgSreen+6)& (0+255),b
  1370                           
  1371                           ; BSR set to: 1
  1372                           ;main.c: 228: SendMsgSreen[7] = 0x30 + (char)(adc_res/10);
  1373  0008AE  0E00               	movlw	0
  1374  0008B0  6E29               	movwf	___ftdiv@f2,c
  1375  0008B2  0E20               	movlw	32
  1376  0008B4  6E2A               	movwf	___ftdiv@f2+1,c
  1377  0008B6  0E41               	movlw	65
  1378  0008B8  6E2B               	movwf	___ftdiv@f2+2,c
  1379  0008BA  C0BA  F026         	movff	main@adc_res,___ftdiv@f1
  1380  0008BE  C0BB  F027         	movff	main@adc_res+1,___ftdiv@f1+1
  1381  0008C2  C0BC  F028         	movff	main@adc_res+2,___ftdiv@f1+2
  1382  0008C6  EC26  F00A         	call	___ftdiv	;wreg free
  1383  0008CA  C026  F035         	movff	?___ftdiv,___fttol@f1
  1384  0008CE  C027  F036         	movff	?___ftdiv+1,___fttol@f1+1
  1385  0008D2  C028  F037         	movff	?___ftdiv+2,___fttol@f1+2
  1386  0008D6  EC32  F009         	call	___fttol	;wreg free
  1387  0008DA  5035               	movf	?___fttol,w,c
  1388  0008DC  0F30               	addlw	48
  1389  0008DE  0101               	movlb	1	; () banked
  1390  0008E0  6F07               	movwf	(_SendMsgSreen+7)& (0+255),b
  1391                           
  1392                           ; BSR set to: 1
  1393                           ;main.c: 229: SendMsgSreen[8] = 0x30 + (char)(adc_res-(10*(char)(adc_res/10)));
  1394  0008E2  C0BA  F083         	movff	main@adc_res,___ftadd@f2
  1395  0008E6  C0BB  F084         	movff	main@adc_res+1,___ftadd@f2+1
  1396  0008EA  C0BC  F085         	movff	main@adc_res+2,___ftadd@f2+2
  1397  0008EE  0E00               	movlw	0
  1398  0008F0  6E29               	movwf	___ftdiv@f2,c
  1399  0008F2  0E20               	movlw	32
  1400  0008F4  6E2A               	movwf	___ftdiv@f2+1,c
  1401  0008F6  0E41               	movlw	65
  1402  0008F8  6E2B               	movwf	___ftdiv@f2+2,c
  1403  0008FA  C0BA  F026         	movff	main@adc_res,___ftdiv@f1
  1404  0008FE  C0BB  F027         	movff	main@adc_res+1,___ftdiv@f1+1
  1405  000902  C0BC  F028         	movff	main@adc_res+2,___ftdiv@f1+2
  1406  000906  EC26  F00A         	call	___ftdiv	;wreg free
  1407  00090A  C026  F035         	movff	?___ftdiv,___fttol@f1
  1408  00090E  C027  F036         	movff	?___ftdiv+1,___fttol@f1+1
  1409  000912  C028  F037         	movff	?___ftdiv+2,___fttol@f1+2
  1410  000916  EC32  F009         	call	___fttol	;wreg free
  1411  00091A  5035               	movf	?___fttol,w,c
  1412  00091C  0D0A               	mullw	10
  1413  00091E  CFF3 F044          	movff	prodl,___awtoft@c
  1414  000922  CFF4 F045          	movff	prodh,___awtoft@c+1
  1415  000926  ECC5  F00D         	call	___awtoft	;wreg free
  1416  00092A  C044  F048         	movff	?___awtoft,___ftneg@f1
  1417  00092E  C045  F049         	movff	?___awtoft+1,___ftneg@f1+1
  1418  000932  C046  F04A         	movff	?___awtoft+2,___ftneg@f1+2
  1419  000936  EC7D  F00E         	call	___ftneg	;wreg free
  1420  00093A  C048  F080         	movff	?___ftneg,___ftadd@f1
  1421  00093E  C049  F081         	movff	?___ftneg+1,___ftadd@f1+1
  1422  000942  C04A  F082         	movff	?___ftneg+2,___ftadd@f1+2
  1423  000946  EC5B  F008         	call	___ftadd	;wreg free
  1424  00094A  C080  F0B3         	movff	?___ftadd,_main$1527
  1425  00094E  C081  F0B4         	movff	?___ftadd+1,_main$1527+1
  1426  000952  C082  F0B5         	movff	?___ftadd+2,_main$1527+2
  1427                           
  1428                           ;main.c: 229: SendMsgSreen[8] = 0x30 + (char)(adc_res-(10*(char)(adc_res/10)));
  1429  000956  C0B3  F035         	movff	_main$1527,___fttol@f1
  1430  00095A  C0B4  F036         	movff	_main$1527+1,___fttol@f1+1
  1431  00095E  C0B5  F037         	movff	_main$1527+2,___fttol@f1+2
  1432  000962  EC32  F009         	call	___fttol	;wreg free
  1433  000966  5035               	movf	?___fttol,w,c
  1434  000968  0F30               	addlw	48
  1435  00096A  0101               	movlb	1	; () banked
  1436  00096C  6F08               	movwf	(_SendMsgSreen+8)& (0+255),b
  1437                           
  1438                           ; BSR set to: 1
  1439                           ;main.c: 230: SendMsgSreen[9] = 0xFF;
  1440  00096E  6909               	setf	(_SendMsgSreen+9)& (0+255),b
  1441                           
  1442                           ; BSR set to: 1
  1443                           ;main.c: 231: SendMsgSreen[10] = 0xFF;
  1444  000970  690A               	setf	(_SendMsgSreen+10)& (0+255),b
  1445                           
  1446                           ; BSR set to: 1
  1447                           ;main.c: 232: SendMsgSreen[11] = 0xFF;
  1448  000972  690B               	setf	(_SendMsgSreen+11)& (0+255),b
  1449                           
  1450                           ; BSR set to: 1
  1451                           ;main.c: 233: PrintS(SendMsgSreen);
  1452  000974  0E00               	movlw	low _SendMsgSreen
  1453  000976  6E1F               	movwf	PrintS@s_printS,c
  1454  000978  0E01               	movlw	high _SendMsgSreen
  1455  00097A  6E20               	movwf	PrintS@s_printS+1,c
  1456  00097C  ECE1  F00D         	call	_PrintS	;wreg free
  1457                           
  1458                           ;main.c: 234: ClearArray();
  1459  000980  EC42  F00E         	call	_ClearArray	;wreg free
  1460  000984                     l183:
  1461                           
  1462                           ;main.c: 235: }
  1463                           ;main.c: 236: }
  1464                           ;main.c: 237: if(FlagSpi) {
  1465  000984  0100               	movlb	0	; () banked
  1466  000986  51CC               	movf	_FlagSpi& (0+255),w,b
  1467  000988  B4D8               	btfsc	status,2,c
  1468  00098A  D66B               	goto	l177
  1469                           
  1470                           ; BSR set to: 0
  1471                           ;main.c: 238: FlagSpi = 0;
  1472  00098C  0E00               	movlw	0
  1473  00098E  6FCC               	movwf	_FlagSpi& (0+255),b
  1474                           
  1475                           ;main.c: 239: switch(EtatScreen) {
  1476  000990  D288               	goto	l185
  1477  000992                     
  1478                           ; BSR set to: 0
  1479                           ;main.c: 243: SendMsgSreen[0] = 0x74;
  1480                           
  1481                           ; BSR set to: 0
  1482  000992  0E74               	movlw	116
  1483  000994  0101               	movlb	1	; () banked
  1484  000996  6F00               	movwf	_SendMsgSreen& (0+255),b
  1485                           
  1486                           ;main.c: 244: SendMsgSreen[1] = 0x30;
  1487  000998  0E30               	movlw	48
  1488  00099A  6F01               	movwf	(_SendMsgSreen+1)& (0+255),b
  1489                           
  1490                           ;main.c: 245: SendMsgSreen[2] = 0x2E;
  1491  00099C  0E2E               	movlw	46
  1492  00099E  6F02               	movwf	(_SendMsgSreen+2)& (0+255),b
  1493                           
  1494                           ;main.c: 246: SendMsgSreen[3] = 0x74;
  1495  0009A0  0E74               	movlw	116
  1496  0009A2  6F03               	movwf	(_SendMsgSreen+3)& (0+255),b
  1497                           
  1498                           ;main.c: 247: SendMsgSreen[4] = 0x78;
  1499  0009A4  0E78               	movlw	120
  1500  0009A6  6F04               	movwf	(_SendMsgSreen+4)& (0+255),b
  1501                           
  1502                           ;main.c: 248: SendMsgSreen[5] = 0x74;
  1503  0009A8  0E74               	movlw	116
  1504  0009AA  6F05               	movwf	(_SendMsgSreen+5)& (0+255),b
  1505                           
  1506                           ;main.c: 249: SendMsgSreen[6] = 0x3D;
  1507  0009AC  0E3D               	movlw	61
  1508  0009AE  6F06               	movwf	(_SendMsgSreen+6)& (0+255),b
  1509                           
  1510                           ;main.c: 250: SendMsgSreen[7] = 0x22;
  1511  0009B0  0E22               	movlw	34
  1512  0009B2  6F07               	movwf	(_SendMsgSreen+7)& (0+255),b
  1513                           
  1514                           ;main.c: 251: SendMsgSreen[8] = 0x3E;
  1515  0009B4  0E3E               	movlw	62
  1516  0009B6  6F08               	movwf	(_SendMsgSreen+8)& (0+255),b
  1517                           
  1518                           ;main.c: 252: taille_text_prgm = 0;
  1519  0009B8  0E00               	movlw	0
  1520  0009BA  0100               	movlb	0	; () banked
  1521  0009BC  6FB9               	movwf	main@taille_text_prgm& (0+255),b
  1522                           
  1523                           ;main.c: 253: while(taille_text_prgm < 15 && text_prgm[PosCursorPrgm][taille_text_prgm] 
      +                          != 0) {
  1524  0009BE  D022               	goto	l187
  1525  0009C0                     
  1526                           ; BSR set to: 0
  1527                           ;main.c: 254: SendMsgSreen[taille_text_prgm+9] = text_prgm[PosCursorPrgm][taille_text_pr
      +                          gm];
  1528                           
  1529                           ; BSR set to: 0
  1530  0009C0  51C5               	movf	_PosCursorPrgm& (0+255),w,b
  1531  0009C2  0D0F               	mullw	15
  1532  0009C4  0E00               	movlw	low _text_prgm
  1533  0009C6  6FA8               	movwf	??_main& (0+255),b
  1534  0009C8  0E02               	movlw	high _text_prgm
  1535  0009CA  6FA9               	movwf	(??_main+1)& (0+255),b
  1536  0009CC  50F3               	movf	prodl,w,c
  1537  0009CE  27A8               	addwf	??_main& (0+255),f,b
  1538  0009D0  50F4               	movf	prodh,w,c
  1539  0009D2  23A9               	addwfc	(??_main+1)& (0+255),f,b
  1540  0009D4  51B9               	movf	main@taille_text_prgm& (0+255),w,b
  1541  0009D6  0D01               	mullw	1
  1542  0009D8  50F3               	movf	prodl,w,c
  1543  0009DA  25A8               	addwf	??_main& (0+255),w,b
  1544  0009DC  6ED9               	movwf	fsr2l,c
  1545  0009DE  50F4               	movf	prodh,w,c
  1546  0009E0  21A9               	addwfc	(??_main+1)& (0+255),w,b
  1547  0009E2  6EDA               	movwf	fsr2h,c
  1548  0009E4  51B9               	movf	main@taille_text_prgm& (0+255),w,b
  1549  0009E6  6FAA               	movwf	(??_main+2)& (0+255),b
  1550  0009E8  6BAB               	clrf	(??_main+3)& (0+255),b
  1551  0009EA  0E09               	movlw	9
  1552  0009EC  27AA               	addwf	(??_main+2)& (0+255),f,b
  1553  0009EE  0E00               	movlw	0
  1554  0009F0  23AB               	addwfc	(??_main+3)& (0+255),f,b
  1555  0009F2  0E00               	movlw	low _SendMsgSreen
  1556  0009F4  25AA               	addwf	(??_main+2)& (0+255),w,b
  1557  0009F6  6EE1               	movwf	fsr1l,c
  1558  0009F8  0E01               	movlw	high _SendMsgSreen
  1559  0009FA  21AB               	addwfc	(??_main+3)& (0+255),w,b
  1560  0009FC  6EE2               	movwf	fsr1h,c
  1561  0009FE  CFDF FFE7          	movff	indf2,indf1
  1562                           
  1563                           ; BSR set to: 0
  1564                           ;main.c: 255: taille_text_prgm++;
  1565  000A02  2BB9               	incf	main@taille_text_prgm& (0+255),f,b
  1566  000A04                     l187:
  1567                           
  1568                           ; BSR set to: 0
  1569                           
  1570                           ; BSR set to: 0
  1571  000A04  0E0F               	movlw	15
  1572  000A06  61B9               	cpfslt	main@taille_text_prgm& (0+255),b
  1573  000A08  D015               	goto	u3140
  1574                           
  1575                           ; BSR set to: 0
  1576  000A0A  51C5               	movf	_PosCursorPrgm& (0+255),w,b
  1577  000A0C  0D0F               	mullw	15
  1578  000A0E  0E00               	movlw	low _text_prgm
  1579  000A10  6FA8               	movwf	??_main& (0+255),b
  1580  000A12  0E02               	movlw	high _text_prgm
  1581  000A14  6FA9               	movwf	(??_main+1)& (0+255),b
  1582  000A16  50F3               	movf	prodl,w,c
  1583  000A18  27A8               	addwf	??_main& (0+255),f,b
  1584  000A1A  50F4               	movf	prodh,w,c
  1585  000A1C  23A9               	addwfc	(??_main+1)& (0+255),f,b
  1586  000A1E  51B9               	movf	main@taille_text_prgm& (0+255),w,b
  1587  000A20  0D01               	mullw	1
  1588  000A22  50F3               	movf	prodl,w,c
  1589  000A24  25A8               	addwf	??_main& (0+255),w,b
  1590  000A26  6ED9               	movwf	fsr2l,c
  1591  000A28  50F4               	movf	prodh,w,c
  1592  000A2A  21A9               	addwfc	(??_main+1)& (0+255),w,b
  1593  000A2C  6EDA               	movwf	fsr2h,c
  1594  000A2E  50DF               	movf	indf2,w,c
  1595  000A30  A4D8               	btfss	status,2,c
  1596  000A32  D7C6               	goto	l188
  1597  000A34                     u3140:
  1598                           
  1599                           ; BSR set to: 0
  1600                           ;main.c: 256: }
  1601                           ;main.c: 257: SendMsgSreen[taille_text_prgm+9] = 0x22;
  1602                           
  1603                           ; BSR set to: 0
  1604                           
  1605                           ; BSR set to: 0
  1606  000A34  51B9               	movf	main@taille_text_prgm& (0+255),w,b
  1607  000A36  6FA8               	movwf	??_main& (0+255),b
  1608  000A38  6BA9               	clrf	(??_main+1)& (0+255),b
  1609  000A3A  0E09               	movlw	9
  1610  000A3C  27A8               	addwf	??_main& (0+255),f,b
  1611  000A3E  0E00               	movlw	0
  1612  000A40  23A9               	addwfc	(??_main+1)& (0+255),f,b
  1613  000A42  0E00               	movlw	low _SendMsgSreen
  1614  000A44  25A8               	addwf	??_main& (0+255),w,b
  1615  000A46  6ED9               	movwf	fsr2l,c
  1616  000A48  0E01               	movlw	high _SendMsgSreen
  1617  000A4A  21A9               	addwfc	(??_main+1)& (0+255),w,b
  1618  000A4C  6EDA               	movwf	fsr2h,c
  1619  000A4E  0E22               	movlw	34
  1620  000A50  6EDF               	movwf	indf2,c
  1621                           
  1622                           ;main.c: 258: SendMsgSreen[taille_text_prgm+10] = 0xFF;
  1623  000A52  51B9               	movf	main@taille_text_prgm& (0+255),w,b
  1624  000A54  6FA8               	movwf	??_main& (0+255),b
  1625  000A56  6BA9               	clrf	(??_main+1)& (0+255),b
  1626  000A58  0E0A               	movlw	10
  1627  000A5A  27A8               	addwf	??_main& (0+255),f,b
  1628  000A5C  0E00               	movlw	0
  1629  000A5E  23A9               	addwfc	(??_main+1)& (0+255),f,b
  1630  000A60  0E00               	movlw	low _SendMsgSreen
  1631  000A62  25A8               	addwf	??_main& (0+255),w,b
  1632  000A64  6ED9               	movwf	fsr2l,c
  1633  000A66  0E01               	movlw	high _SendMsgSreen
  1634  000A68  21A9               	addwfc	(??_main+1)& (0+255),w,b
  1635  000A6A  6EDA               	movwf	fsr2h,c
  1636  000A6C  0EFF               	movlw	255
  1637  000A6E  6EDF               	movwf	indf2,c
  1638                           
  1639                           ;main.c: 259: SendMsgSreen[taille_text_prgm+11] = 0xFF;
  1640  000A70  51B9               	movf	main@taille_text_prgm& (0+255),w,b
  1641  000A72  6FA8               	movwf	??_main& (0+255),b
  1642  000A74  6BA9               	clrf	(??_main+1)& (0+255),b
  1643  000A76  0E0B               	movlw	11
  1644  000A78  27A8               	addwf	??_main& (0+255),f,b
  1645  000A7A  0E00               	movlw	0
  1646  000A7C  23A9               	addwfc	(??_main+1)& (0+255),f,b
  1647  000A7E  0E00               	movlw	low _SendMsgSreen
  1648  000A80  25A8               	addwf	??_main& (0+255),w,b
  1649  000A82  6ED9               	movwf	fsr2l,c
  1650  000A84  0E01               	movlw	high _SendMsgSreen
  1651  000A86  21A9               	addwfc	(??_main+1)& (0+255),w,b
  1652  000A88  6EDA               	movwf	fsr2h,c
  1653  000A8A  0EFF               	movlw	255
  1654  000A8C  6EDF               	movwf	indf2,c
  1655                           
  1656                           ;main.c: 260: SendMsgSreen[taille_text_prgm+12] = 0xFF;
  1657  000A8E  51B9               	movf	main@taille_text_prgm& (0+255),w,b
  1658  000A90  6FA8               	movwf	??_main& (0+255),b
  1659  000A92  6BA9               	clrf	(??_main+1)& (0+255),b
  1660  000A94  0E0C               	movlw	12
  1661  000A96  27A8               	addwf	??_main& (0+255),f,b
  1662  000A98  0E00               	movlw	0
  1663  000A9A  23A9               	addwfc	(??_main+1)& (0+255),f,b
  1664  000A9C  0E00               	movlw	low _SendMsgSreen
  1665  000A9E  25A8               	addwf	??_main& (0+255),w,b
  1666  000AA0  6ED9               	movwf	fsr2l,c
  1667  000AA2  0E01               	movlw	high _SendMsgSreen
  1668  000AA4  21A9               	addwfc	(??_main+1)& (0+255),w,b
  1669  000AA6  6EDA               	movwf	fsr2h,c
  1670  000AA8  0EFF               	movlw	255
  1671  000AAA  6EDF               	movwf	indf2,c
  1672                           
  1673                           ; BSR set to: 0
  1674                           ;main.c: 261: PrintS(SendMsgSreen);
  1675  000AAC  0E00               	movlw	low _SendMsgSreen
  1676  000AAE  6E1F               	movwf	PrintS@s_printS,c
  1677  000AB0  0E01               	movlw	high _SendMsgSreen
  1678  000AB2  6E20               	movwf	PrintS@s_printS+1,c
  1679  000AB4  ECE1  F00D         	call	_PrintS	;wreg free
  1680                           
  1681                           ;main.c: 262: ClearArray();
  1682  000AB8  EC42  F00E         	call	_ClearArray	;wreg free
  1683                           
  1684                           ;main.c: 263: SendMsgSreen[0] = 0x6E;
  1685  000ABC  0E6E               	movlw	110
  1686  000ABE  0101               	movlb	1	; () banked
  1687  000AC0  6F00               	movwf	_SendMsgSreen& (0+255),b
  1688                           
  1689                           ; BSR set to: 1
  1690                           ;main.c: 264: SendMsgSreen[1] = 0x30;
  1691  000AC2  0E30               	movlw	48
  1692  000AC4  6F01               	movwf	(_SendMsgSreen+1)& (0+255),b
  1693                           
  1694                           ; BSR set to: 1
  1695                           ;main.c: 265: SendMsgSreen[2] = 0x2E;
  1696  000AC6  0E2E               	movlw	46
  1697  000AC8  6F02               	movwf	(_SendMsgSreen+2)& (0+255),b
  1698                           
  1699                           ; BSR set to: 1
  1700                           ;main.c: 266: SendMsgSreen[3] = 0x76;
  1701  000ACA  0E76               	movlw	118
  1702  000ACC  6F03               	movwf	(_SendMsgSreen+3)& (0+255),b
  1703                           
  1704                           ; BSR set to: 1
  1705                           ;main.c: 267: SendMsgSreen[4] = 0x61;
  1706  000ACE  0E61               	movlw	97
  1707  000AD0  6F04               	movwf	(_SendMsgSreen+4)& (0+255),b
  1708                           
  1709                           ; BSR set to: 1
  1710                           ;main.c: 268: SendMsgSreen[5] = 0x6C;
  1711  000AD2  0E6C               	movlw	108
  1712  000AD4  6F05               	movwf	(_SendMsgSreen+5)& (0+255),b
  1713                           
  1714                           ; BSR set to: 1
  1715                           ;main.c: 269: SendMsgSreen[6] = 0x3D;
  1716  000AD6  0E3D               	movlw	61
  1717  000AD8  6F06               	movwf	(_SendMsgSreen+6)& (0+255),b
  1718                           
  1719                           ; BSR set to: 1
  1720                           ;main.c: 270: SendMsgSreen[7] = 0x30 + (char)(Score/100);
  1721  000ADA  C0BF  F01E         	movff	_Score,___awdiv@dividend
  1722  000ADE  C0C0  F01F         	movff	_Score+1,___awdiv@dividend+1
  1723  000AE2  0E00               	movlw	0
  1724  000AE4  6E21               	movwf	___awdiv@divisor+1,c
  1725  000AE6  0E64               	movlw	100
  1726  000AE8  6E20               	movwf	___awdiv@divisor,c
  1727  000AEA  ECC4  F00C         	call	___awdiv	;wreg free
  1728  000AEE  501E               	movf	?___awdiv,w,c
  1729  000AF0  0F30               	addlw	48
  1730  000AF2  0101               	movlb	1	; () banked
  1731  000AF4  6F07               	movwf	(_SendMsgSreen+7)& (0+255),b
  1732                           
  1733                           ; BSR set to: 1
  1734                           ;main.c: 271: SendMsgSreen[8] = 0x30 + (char)((Score-((char)(Score/100)*100))/10);
  1735  000AF6  0E00               	movlw	0
  1736  000AF8  6E21               	movwf	___awdiv@divisor+1,c
  1737  000AFA  0E64               	movlw	100
  1738  000AFC  6E20               	movwf	___awdiv@divisor,c
  1739  000AFE  C0BF  F01E         	movff	_Score,___awdiv@dividend
  1740  000B02  C0C0  F01F         	movff	_Score+1,___awdiv@dividend+1
  1741  000B06  ECC4  F00C         	call	___awdiv	;wreg free
  1742  000B0A  501E               	movf	?___awdiv,w,c
  1743  000B0C  0D64               	mullw	100
  1744  000B0E  1EF3               	comf	prodl,f,c
  1745  000B10  1EF4               	comf	prodh,f,c
  1746  000B12  4AF3               	infsnz	prodl,f,c
  1747  000B14  2AF4               	incf	prodh,f,c
  1748  000B16  0100               	movlb	0	; () banked
  1749  000B18  51BF               	movf	_Score& (0+255),w,b
  1750  000B1A  24F3               	addwf	prodl,w,c
  1751  000B1C  6FB6               	movwf	_main$1528& (0+255),b
  1752  000B1E  51C0               	movf	(_Score+1)& (0+255),w,b
  1753  000B20  20F4               	addwfc	prodh,w,c
  1754  000B22  6FB7               	movwf	(_main$1528+1)& (0+255),b
  1755                           
  1756                           ; BSR set to: 0
  1757                           ;main.c: 271: SendMsgSreen[8] = 0x30 + (char)((Score-((char)(Score/100)*100))/10);
  1758  000B24  C0B6  F01E         	movff	_main$1528,___awdiv@dividend
  1759  000B28  C0B7  F01F         	movff	_main$1528+1,___awdiv@dividend+1
  1760  000B2C  0E00               	movlw	0
  1761  000B2E  6E21               	movwf	___awdiv@divisor+1,c
  1762  000B30  0E0A               	movlw	10
  1763  000B32  6E20               	movwf	___awdiv@divisor,c
  1764  000B34  ECC4  F00C         	call	___awdiv	;wreg free
  1765  000B38  501E               	movf	?___awdiv,w,c
  1766  000B3A  0F30               	addlw	48
  1767  000B3C  0101               	movlb	1	; () banked
  1768  000B3E  6F08               	movwf	(_SendMsgSreen+8)& (0+255),b
  1769                           
  1770                           ; BSR set to: 1
  1771                           ;main.c: 272: SendMsgSreen[9] = 0x30 + (char)((Score-((char)(Score/10)*10)));
  1772  000B40  C0BF  F01E         	movff	_Score,___awdiv@dividend
  1773  000B44  C0C0  F01F         	movff	_Score+1,___awdiv@dividend+1
  1774  000B48  0E00               	movlw	0
  1775  000B4A  6E21               	movwf	___awdiv@divisor+1,c
  1776  000B4C  0E0A               	movlw	10
  1777  000B4E  6E20               	movwf	___awdiv@divisor,c
  1778  000B50  ECC4  F00C         	call	___awdiv	;wreg free
  1779  000B54  501E               	movf	?___awdiv,w,c
  1780  000B56  0D0A               	mullw	10
  1781  000B58  50F3               	movf	prodl,w,c
  1782  000B5A  0800               	sublw	0
  1783  000B5C  0100               	movlb	0	; () banked
  1784  000B5E  25BF               	addwf	_Score& (0+255),w,b
  1785  000B60  0F30               	addlw	48
  1786  000B62  0101               	movlb	1	; () banked
  1787  000B64  6F09               	movwf	(_SendMsgSreen+9)& (0+255),b
  1788                           
  1789                           ; BSR set to: 1
  1790                           ;main.c: 273: SendMsgSreen[10] = 0xFF;
  1791  000B66  690A               	setf	(_SendMsgSreen+10)& (0+255),b
  1792                           
  1793                           ; BSR set to: 1
  1794                           ;main.c: 274: SendMsgSreen[11] = 0xFF;
  1795  000B68  690B               	setf	(_SendMsgSreen+11)& (0+255),b
  1796                           
  1797                           ; BSR set to: 1
  1798                           ;main.c: 275: SendMsgSreen[12] = 0xFF;
  1799  000B6A  690C               	setf	(_SendMsgSreen+12)& (0+255),b
  1800                           
  1801                           ; BSR set to: 1
  1802                           ;main.c: 276: PrintS(SendMsgSreen);
  1803  000B6C  0E00               	movlw	low _SendMsgSreen
  1804  000B6E  6E1F               	movwf	PrintS@s_printS,c
  1805  000B70  0E01               	movlw	high _SendMsgSreen
  1806  000B72  6E20               	movwf	PrintS@s_printS+1,c
  1807  000B74  ECE1  F00D         	call	_PrintS	;wreg free
  1808                           
  1809                           ;main.c: 277: ClearArray();
  1810  000B78  EC42  F00E         	call	_ClearArray	;wreg free
  1811                           
  1812                           ;main.c: 278: break;
  1813  000B7C  D572               	goto	l177
  1814  000B7E                     
  1815                           ;main.c: 282: FlagSpi = 1;
  1816  000B7E  0E01               	movlw	1
  1817  000B80  0100               	movlb	0	; () banked
  1818  000B82  6FCC               	movwf	_FlagSpi& (0+255),b
  1819                           
  1820                           ;main.c: 283: SendMsgSreen[0] = 0x72;
  1821  000B84  0E72               	movlw	114
  1822  000B86  0101               	movlb	1	; () banked
  1823  000B88  6F00               	movwf	_SendMsgSreen& (0+255),b
  1824                           
  1825                           ;main.c: 284: SendMsgSreen[1] = 0x65;
  1826  000B8A  0E65               	movlw	101
  1827  000B8C  6F01               	movwf	(_SendMsgSreen+1)& (0+255),b
  1828                           
  1829                           ;main.c: 285: SendMsgSreen[2] = 0x66;
  1830  000B8E  0E66               	movlw	102
  1831  000B90  6F02               	movwf	(_SendMsgSreen+2)& (0+255),b
  1832                           
  1833                           ;main.c: 286: SendMsgSreen[3] = 0x20;
  1834  000B92  0E20               	movlw	32
  1835  000B94  6F03               	movwf	(_SendMsgSreen+3)& (0+255),b
  1836                           
  1837                           ;main.c: 287: SendMsgSreen[4] = 0x30;
  1838  000B96  0E30               	movlw	48
  1839  000B98  6F04               	movwf	(_SendMsgSreen+4)& (0+255),b
  1840                           
  1841                           ; BSR set to: 1
  1842                           ;main.c: 288: SendMsgSreen[5] = 0xFF;
  1843  000B9A  6905               	setf	(_SendMsgSreen+5)& (0+255),b
  1844                           
  1845                           ; BSR set to: 1
  1846                           ;main.c: 289: SendMsgSreen[6] = 0xFF;
  1847  000B9C  6906               	setf	(_SendMsgSreen+6)& (0+255),b
  1848                           
  1849                           ; BSR set to: 1
  1850                           ;main.c: 290: SendMsgSreen[7] = 0xFF;
  1851  000B9E  6907               	setf	(_SendMsgSreen+7)& (0+255),b
  1852                           
  1853                           ; BSR set to: 1
  1854                           ;main.c: 291: PrintS(SendMsgSreen);
  1855  000BA0  0E00               	movlw	low _SendMsgSreen
  1856  000BA2  6E1F               	movwf	PrintS@s_printS,c
  1857  000BA4  0E01               	movlw	high _SendMsgSreen
  1858  000BA6  6E20               	movwf	PrintS@s_printS+1,c
  1859  000BA8  ECE1  F00D         	call	_PrintS	;wreg free
  1860                           
  1861                           ;main.c: 292: ClearArray();
  1862  000BAC  EC42  F00E         	call	_ClearArray	;wreg free
  1863                           
  1864                           ;main.c: 295: SendMsgSreen[0] = 0x70;
  1865  000BB0  0E70               	movlw	112
  1866  000BB2  0101               	movlb	1	; () banked
  1867  000BB4  6F00               	movwf	_SendMsgSreen& (0+255),b
  1868                           
  1869                           ; BSR set to: 1
  1870                           ;main.c: 296: SendMsgSreen[1] = 0x69;
  1871  000BB6  0E69               	movlw	105
  1872  000BB8  6F01               	movwf	(_SendMsgSreen+1)& (0+255),b
  1873                           
  1874                           ; BSR set to: 1
  1875                           ;main.c: 297: SendMsgSreen[2] = 0x63;
  1876  000BBA  0E63               	movlw	99
  1877  000BBC  6F02               	movwf	(_SendMsgSreen+2)& (0+255),b
  1878                           
  1879                           ; BSR set to: 1
  1880                           ;main.c: 298: SendMsgSreen[3] = 0x20;
  1881  000BBE  0E20               	movlw	32
  1882  000BC0  6F03               	movwf	(_SendMsgSreen+3)& (0+255),b
  1883                           
  1884                           ; BSR set to: 1
  1885                           ;main.c: 299: SendMsgSreen[4] = 0x30 + (char)(PosX/100);
  1886  000BC2  C0CA  F01E         	movff	_PosX,___awdiv@dividend
  1887  000BC6  C0CB  F01F         	movff	_PosX+1,___awdiv@dividend+1
  1888  000BCA  0E00               	movlw	0
  1889  000BCC  6E21               	movwf	___awdiv@divisor+1,c
  1890  000BCE  0E64               	movlw	100
  1891  000BD0  6E20               	movwf	___awdiv@divisor,c
  1892  000BD2  ECC4  F00C         	call	___awdiv	;wreg free
  1893  000BD6  501E               	movf	?___awdiv,w,c
  1894  000BD8  0F30               	addlw	48
  1895  000BDA  0101               	movlb	1	; () banked
  1896  000BDC  6F04               	movwf	(_SendMsgSreen+4)& (0+255),b
  1897                           
  1898                           ; BSR set to: 1
  1899                           ;main.c: 300: SendMsgSreen[5] = 0x30 + (char)((PosX-(100*(char)(PosX/100)))/10);
  1900  000BDE  0E00               	movlw	0
  1901  000BE0  6E21               	movwf	___awdiv@divisor+1,c
  1902  000BE2  0E64               	movlw	100
  1903  000BE4  6E20               	movwf	___awdiv@divisor,c
  1904  000BE6  C0CA  F01E         	movff	_PosX,___awdiv@dividend
  1905  000BEA  C0CB  F01F         	movff	_PosX+1,___awdiv@dividend+1
  1906  000BEE  ECC4  F00C         	call	___awdiv	;wreg free
  1907  000BF2  501E               	movf	?___awdiv,w,c
  1908  000BF4  0D64               	mullw	100
  1909  000BF6  1EF3               	comf	prodl,f,c
  1910  000BF8  1EF4               	comf	prodh,f,c
  1911  000BFA  4AF3               	infsnz	prodl,f,c
  1912  000BFC  2AF4               	incf	prodh,f,c
  1913  000BFE  0100               	movlb	0	; () banked
  1914  000C00  51CA               	movf	_PosX& (0+255),w,b
  1915  000C02  24F3               	addwf	prodl,w,c
  1916  000C04  6FB6               	movwf	_main$1528& (0+255),b
  1917  000C06  51CB               	movf	(_PosX+1)& (0+255),w,b
  1918  000C08  20F4               	addwfc	prodh,w,c
  1919  000C0A  6FB7               	movwf	(_main$1528+1)& (0+255),b
  1920                           
  1921                           ; BSR set to: 0
  1922                           ;main.c: 300: SendMsgSreen[5] = 0x30 + (char)((PosX-(100*(char)(PosX/100)))/10);
  1923  000C0C  C0B6  F01E         	movff	_main$1528,___awdiv@dividend
  1924  000C10  C0B7  F01F         	movff	_main$1528+1,___awdiv@dividend+1
  1925  000C14  0E00               	movlw	0
  1926  000C16  6E21               	movwf	___awdiv@divisor+1,c
  1927  000C18  0E0A               	movlw	10
  1928  000C1A  6E20               	movwf	___awdiv@divisor,c
  1929  000C1C  ECC4  F00C         	call	___awdiv	;wreg free
  1930  000C20  501E               	movf	?___awdiv,w,c
  1931  000C22  0F30               	addlw	48
  1932  000C24  0101               	movlb	1	; () banked
  1933  000C26  6F05               	movwf	(_SendMsgSreen+5)& (0+255),b
  1934                           
  1935                           ; BSR set to: 1
  1936                           ;main.c: 301: SendMsgSreen[6] = 0x30 + (char)(PosX-(10*(char)(PosX/10)));
  1937  000C28  C0CA  F01E         	movff	_PosX,___awdiv@dividend
  1938  000C2C  C0CB  F01F         	movff	_PosX+1,___awdiv@dividend+1
  1939  000C30  0E00               	movlw	0
  1940  000C32  6E21               	movwf	___awdiv@divisor+1,c
  1941  000C34  0E0A               	movlw	10
  1942  000C36  6E20               	movwf	___awdiv@divisor,c
  1943  000C38  ECC4  F00C         	call	___awdiv	;wreg free
  1944  000C3C  501E               	movf	?___awdiv,w,c
  1945  000C3E  0D0A               	mullw	10
  1946  000C40  50F3               	movf	prodl,w,c
  1947  000C42  0800               	sublw	0
  1948  000C44  0100               	movlb	0	; () banked
  1949  000C46  25CA               	addwf	_PosX& (0+255),w,b
  1950  000C48  0F30               	addlw	48
  1951  000C4A  0101               	movlb	1	; () banked
  1952  000C4C  6F06               	movwf	(_SendMsgSreen+6)& (0+255),b
  1953                           
  1954                           ; BSR set to: 1
  1955                           ;main.c: 302: SendMsgSreen[7] = 0x2C;
  1956  000C4E  0E2C               	movlw	44
  1957  000C50  6F07               	movwf	(_SendMsgSreen+7)& (0+255),b
  1958                           
  1959                           ; BSR set to: 1
  1960                           ;main.c: 303: SendMsgSreen[8] = 0x30 + (char)(PosY/100);
  1961  000C52  C0C8  F01E         	movff	_PosY,___awdiv@dividend
  1962  000C56  C0C9  F01F         	movff	_PosY+1,___awdiv@dividend+1
  1963  000C5A  0E00               	movlw	0
  1964  000C5C  6E21               	movwf	___awdiv@divisor+1,c
  1965  000C5E  0E64               	movlw	100
  1966  000C60  6E20               	movwf	___awdiv@divisor,c
  1967  000C62  ECC4  F00C         	call	___awdiv	;wreg free
  1968  000C66  501E               	movf	?___awdiv,w,c
  1969  000C68  0F30               	addlw	48
  1970  000C6A  0101               	movlb	1	; () banked
  1971  000C6C  6F08               	movwf	(_SendMsgSreen+8)& (0+255),b
  1972                           
  1973                           ;main.c: 304: SendMsgSreen[9] = 0x30 + (char)((PosY-(100*(char)(PosY/100)))/10);
  1974  000C6E  0E00               	movlw	0
  1975  000C70  6E21               	movwf	___awdiv@divisor+1,c
  1976  000C72  0E64               	movlw	100
  1977  000C74  6E20               	movwf	___awdiv@divisor,c
  1978  000C76  C0C8  F01E         	movff	_PosY,___awdiv@dividend
  1979  000C7A  C0C9  F01F         	movff	_PosY+1,___awdiv@dividend+1
  1980  000C7E  ECC4  F00C         	call	___awdiv	;wreg free
  1981  000C82  501E               	movf	?___awdiv,w,c
  1982  000C84  0D64               	mullw	100
  1983  000C86  1EF3               	comf	prodl,f,c
  1984  000C88  1EF4               	comf	prodh,f,c
  1985  000C8A  4AF3               	infsnz	prodl,f,c
  1986  000C8C  2AF4               	incf	prodh,f,c
  1987  000C8E  0100               	movlb	0	; () banked
  1988  000C90  51C8               	movf	_PosY& (0+255),w,b
  1989  000C92  24F3               	addwf	prodl,w,c
  1990  000C94  6FB6               	movwf	_main$1528& (0+255),b
  1991  000C96  51C9               	movf	(_PosY+1)& (0+255),w,b
  1992  000C98  20F4               	addwfc	prodh,w,c
  1993  000C9A  6FB7               	movwf	(_main$1528+1)& (0+255),b
  1994                           
  1995                           ; BSR set to: 0
  1996                           ;main.c: 304: SendMsgSreen[9] = 0x30 + (char)((PosY-(100*(char)(PosY/100)))/10);
  1997  000C9C  C0B6  F01E         	movff	_main$1528,___awdiv@dividend
  1998  000CA0  C0B7  F01F         	movff	_main$1528+1,___awdiv@dividend+1
  1999  000CA4  0E00               	movlw	0
  2000  000CA6  6E21               	movwf	___awdiv@divisor+1,c
  2001  000CA8  0E0A               	movlw	10
  2002  000CAA  6E20               	movwf	___awdiv@divisor,c
  2003  000CAC  ECC4  F00C         	call	___awdiv	;wreg free
  2004  000CB0  501E               	movf	?___awdiv,w,c
  2005  000CB2  0F30               	addlw	48
  2006  000CB4  0101               	movlb	1	; () banked
  2007  000CB6  6F09               	movwf	(_SendMsgSreen+9)& (0+255),b
  2008                           
  2009                           ; BSR set to: 1
  2010                           ;main.c: 305: SendMsgSreen[10] = 0x30 + (char)(PosY-(10*(char)(PosY/10)));
  2011  000CB8  C0C8  F01E         	movff	_PosY,___awdiv@dividend
  2012  000CBC  C0C9  F01F         	movff	_PosY+1,___awdiv@dividend+1
  2013  000CC0  0E00               	movlw	0
  2014  000CC2  6E21               	movwf	___awdiv@divisor+1,c
  2015  000CC4  0E0A               	movlw	10
  2016  000CC6  6E20               	movwf	___awdiv@divisor,c
  2017  000CC8  ECC4  F00C         	call	___awdiv	;wreg free
  2018  000CCC  501E               	movf	?___awdiv,w,c
  2019  000CCE  0D0A               	mullw	10
  2020  000CD0  50F3               	movf	prodl,w,c
  2021  000CD2  0800               	sublw	0
  2022  000CD4  0100               	movlb	0	; () banked
  2023  000CD6  25C8               	addwf	_PosY& (0+255),w,b
  2024  000CD8  0F30               	addlw	48
  2025  000CDA  0101               	movlb	1	; () banked
  2026  000CDC  6F0A               	movwf	(_SendMsgSreen+10)& (0+255),b
  2027                           
  2028                           ; BSR set to: 1
  2029                           ;main.c: 306: SendMsgSreen[11] = 0x2C;
  2030  000CDE  0E2C               	movlw	44
  2031  000CE0  6F0B               	movwf	(_SendMsgSreen+11)& (0+255),b
  2032                           
  2033                           ; BSR set to: 1
  2034                           ;main.c: 307: SendMsgSreen[12] = 0x32;
  2035  000CE2  0E32               	movlw	50
  2036  000CE4  6F0C               	movwf	(_SendMsgSreen+12)& (0+255),b
  2037                           
  2038                           ; BSR set to: 1
  2039                           ;main.c: 308: SendMsgSreen[13] = 0xFF;
  2040  000CE6  690D               	setf	(_SendMsgSreen+13)& (0+255),b
  2041                           
  2042                           ; BSR set to: 1
  2043                           ;main.c: 309: SendMsgSreen[14] = 0xFF;
  2044  000CE8  690E               	setf	(_SendMsgSreen+14)& (0+255),b
  2045                           
  2046                           ; BSR set to: 1
  2047                           ;main.c: 310: SendMsgSreen[15] = 0xFF;
  2048  000CEA  690F               	setf	(_SendMsgSreen+15)& (0+255),b
  2049                           
  2050                           ; BSR set to: 1
  2051                           ;main.c: 311: PrintS(SendMsgSreen);
  2052  000CEC  0E00               	movlw	low _SendMsgSreen
  2053  000CEE  6E1F               	movwf	PrintS@s_printS,c
  2054  000CF0  0E01               	movlw	high _SendMsgSreen
  2055  000CF2  6E20               	movwf	PrintS@s_printS+1,c
  2056  000CF4  ECE1  F00D         	call	_PrintS	;wreg free
  2057                           
  2058                           ;main.c: 312: ClearArray();
  2059  000CF8  EC42  F00E         	call	_ClearArray	;wreg free
  2060                           
  2061                           ;main.c: 313: break;
  2062  000CFC  D4B2               	goto	l177
  2063  000CFE                     
  2064                           ;main.c: 317: if(TypeVarSpi == 8 || TypeVarSpi == 9 || TypeVarSpi == 10 || TypeVarSpi ==
      +                           11) {
  2065  000CFE  0E08               	movlw	8
  2066  000D00  0100               	movlb	0	; () banked
  2067  000D02  19C4               	xorwf	_TypeVarSpi& (0+255),w,b
  2068  000D04  B4D8               	btfsc	status,2,c
  2069  000D06  D00C               	goto	u3180
  2070                           
  2071                           ; BSR set to: 0
  2072  000D08  0E09               	movlw	9
  2073  000D0A  19C4               	xorwf	_TypeVarSpi& (0+255),w,b
  2074  000D0C  B4D8               	btfsc	status,2,c
  2075  000D0E  D008               	goto	u3180
  2076                           
  2077                           ; BSR set to: 0
  2078  000D10  0E0A               	movlw	10
  2079  000D12  19C4               	xorwf	_TypeVarSpi& (0+255),w,b
  2080  000D14  B4D8               	btfsc	status,2,c
  2081  000D16  D004               	goto	u3180
  2082                           
  2083                           ; BSR set to: 0
  2084  000D18  0E0B               	movlw	11
  2085  000D1A  19C4               	xorwf	_TypeVarSpi& (0+255),w,b
  2086  000D1C  A4D8               	btfss	status,2,c
  2087  000D1E  D4A1               	goto	l177
  2088  000D20                     u3180:
  2089                           
  2090                           ; BSR set to: 0
  2091                           ;main.c: 318: TypeVarSpi -= 8;
  2092                           
  2093                           ; BSR set to: 0
  2094  000D20  0E08               	movlw	8
  2095  000D22  5FC4               	subwf	_TypeVarSpi& (0+255),f,b
  2096                           
  2097                           ; BSR set to: 0
  2098                           ;main.c: 319: SendMsgSreen[0] = 0x74;
  2099  000D24  0E74               	movlw	116
  2100  000D26  0101               	movlb	1	; () banked
  2101  000D28  6F00               	movwf	_SendMsgSreen& (0+255),b
  2102                           
  2103                           ; BSR set to: 1
  2104                           ;main.c: 320: SendMsgSreen[1] = 0x30 + TypeVarSpi;
  2105  000D2A  0100               	movlb	0	; () banked
  2106  000D2C  51C4               	movf	_TypeVarSpi& (0+255),w,b
  2107  000D2E  0F30               	addlw	48
  2108  000D30  0101               	movlb	1	; () banked
  2109  000D32  6F01               	movwf	(_SendMsgSreen+1)& (0+255),b
  2110                           
  2111                           ;main.c: 321: SendMsgSreen[2] = 0x2E;
  2112  000D34  0E2E               	movlw	46
  2113  000D36  6F02               	movwf	(_SendMsgSreen+2)& (0+255),b
  2114                           
  2115                           ;main.c: 322: SendMsgSreen[3] = 0x74;
  2116  000D38  0E74               	movlw	116
  2117  000D3A  6F03               	movwf	(_SendMsgSreen+3)& (0+255),b
  2118                           
  2119                           ;main.c: 323: SendMsgSreen[4] = 0x78;
  2120  000D3C  0E78               	movlw	120
  2121  000D3E  6F04               	movwf	(_SendMsgSreen+4)& (0+255),b
  2122                           
  2123                           ;main.c: 324: SendMsgSreen[5] = 0x74;
  2124  000D40  0E74               	movlw	116
  2125  000D42  6F05               	movwf	(_SendMsgSreen+5)& (0+255),b
  2126                           
  2127                           ;main.c: 325: SendMsgSreen[6] = 0x3D;
  2128  000D44  0E3D               	movlw	61
  2129  000D46  6F06               	movwf	(_SendMsgSreen+6)& (0+255),b
  2130                           
  2131                           ;main.c: 326: SendMsgSreen[7] = 0x22;
  2132  000D48  0E22               	movlw	34
  2133  000D4A  6F07               	movwf	(_SendMsgSreen+7)& (0+255),b
  2134                           
  2135                           ;main.c: 327: taille_text_spi = 0;
  2136  000D4C  0E00               	movlw	0
  2137  000D4E  0100               	movlb	0	; () banked
  2138  000D50  6FB8               	movwf	main@taille_text_spi& (0+255),b
  2139                           
  2140                           ;main.c: 332: while(taille_text_spi < TailleTerm) {
  2141  000D52  D018               	goto	l198
  2142  000D54                     
  2143                           ; BSR set to: 0
  2144                           ;main.c: 333: SendMsgSreen[taille_text_spi+8] = TextSpi[taille_text_spi];
  2145                           
  2146                           ; BSR set to: 0
  2147  000D54  51B8               	movf	main@taille_text_spi& (0+255),w,b
  2148  000D56  0D01               	mullw	1
  2149  000D58  0E00               	movlw	low _TextSpi
  2150  000D5A  24F3               	addwf	prodl,w,c
  2151  000D5C  6ED9               	movwf	fsr2l,c
  2152  000D5E  0E03               	movlw	high _TextSpi
  2153  000D60  20F4               	addwfc	prodh,w,c
  2154  000D62  6EDA               	movwf	fsr2h,c
  2155  000D64  51B8               	movf	main@taille_text_spi& (0+255),w,b
  2156  000D66  6FA8               	movwf	??_main& (0+255),b
  2157  000D68  6BA9               	clrf	(??_main+1)& (0+255),b
  2158  000D6A  0E08               	movlw	8
  2159  000D6C  27A8               	addwf	??_main& (0+255),f,b
  2160  000D6E  0E00               	movlw	0
  2161  000D70  23A9               	addwfc	(??_main+1)& (0+255),f,b
  2162  000D72  0E00               	movlw	low _SendMsgSreen
  2163  000D74  25A8               	addwf	??_main& (0+255),w,b
  2164  000D76  6EE1               	movwf	fsr1l,c
  2165  000D78  0E01               	movlw	high _SendMsgSreen
  2166  000D7A  21A9               	addwfc	(??_main+1)& (0+255),w,b
  2167  000D7C  6EE2               	movwf	fsr1h,c
  2168  000D7E  CFDF FFE7          	movff	indf2,indf1
  2169                           
  2170                           ; BSR set to: 0
  2171                           ;main.c: 334: taille_text_spi++;
  2172  000D82  2BB8               	incf	main@taille_text_spi& (0+255),f,b
  2173  000D84                     l198:
  2174                           
  2175                           ; BSR set to: 0
  2176                           
  2177                           ; BSR set to: 0
  2178  000D84  51B8               	movf	main@taille_text_spi& (0+255),w,b
  2179  000D86  6FA8               	movwf	??_main& (0+255),b
  2180  000D88  6BA9               	clrf	(??_main+1)& (0+255),b
  2181  000D8A  51C1               	movf	_TailleTerm& (0+255),w,b
  2182  000D8C  5DA8               	subwf	??_main& (0+255),w,b
  2183  000D8E  51A9               	movf	(??_main+1)& (0+255),w,b
  2184  000D90  0A80               	xorlw	128
  2185  000D92  6FAA               	movwf	(??_main+2)& (0+255),b
  2186  000D94  51C2               	movf	(_TailleTerm+1)& (0+255),w,b
  2187  000D96  0A80               	xorlw	128
  2188  000D98  59AA               	subwfb	(??_main+2)& (0+255),w,b
  2189  000D9A  A0D8               	btfss	status,0,c
  2190  000D9C  D7DB               	goto	l199
  2191                           
  2192                           ; BSR set to: 0
  2193                           ;main.c: 335: }
  2194                           ;main.c: 336: SendMsgSreen[taille_text_spi+8] = 0x22;
  2195                           
  2196                           ; BSR set to: 0
  2197  000D9E  51B8               	movf	main@taille_text_spi& (0+255),w,b
  2198  000DA0  6FA8               	movwf	??_main& (0+255),b
  2199  000DA2  6BA9               	clrf	(??_main+1)& (0+255),b
  2200  000DA4  0E08               	movlw	8
  2201  000DA6  27A8               	addwf	??_main& (0+255),f,b
  2202  000DA8  0E00               	movlw	0
  2203  000DAA  23A9               	addwfc	(??_main+1)& (0+255),f,b
  2204  000DAC  0E00               	movlw	low _SendMsgSreen
  2205  000DAE  25A8               	addwf	??_main& (0+255),w,b
  2206  000DB0  6ED9               	movwf	fsr2l,c
  2207  000DB2  0E01               	movlw	high _SendMsgSreen
  2208  000DB4  21A9               	addwfc	(??_main+1)& (0+255),w,b
  2209  000DB6  6EDA               	movwf	fsr2h,c
  2210  000DB8  0E22               	movlw	34
  2211  000DBA  6EDF               	movwf	indf2,c
  2212                           
  2213                           ;main.c: 337: SendMsgSreen[taille_text_spi+9] = 0xFF;
  2214  000DBC  51B8               	movf	main@taille_text_spi& (0+255),w,b
  2215  000DBE  6FA8               	movwf	??_main& (0+255),b
  2216  000DC0  6BA9               	clrf	(??_main+1)& (0+255),b
  2217  000DC2  0E09               	movlw	9
  2218  000DC4  27A8               	addwf	??_main& (0+255),f,b
  2219  000DC6  0E00               	movlw	0
  2220  000DC8  23A9               	addwfc	(??_main+1)& (0+255),f,b
  2221  000DCA  0E00               	movlw	low _SendMsgSreen
  2222  000DCC  25A8               	addwf	??_main& (0+255),w,b
  2223  000DCE  6ED9               	movwf	fsr2l,c
  2224  000DD0  0E01               	movlw	high _SendMsgSreen
  2225  000DD2  21A9               	addwfc	(??_main+1)& (0+255),w,b
  2226  000DD4  6EDA               	movwf	fsr2h,c
  2227  000DD6  0EFF               	movlw	255
  2228  000DD8  6EDF               	movwf	indf2,c
  2229                           
  2230                           ;main.c: 338: SendMsgSreen[taille_text_spi+10] = 0xFF;
  2231  000DDA  51B8               	movf	main@taille_text_spi& (0+255),w,b
  2232  000DDC  6FA8               	movwf	??_main& (0+255),b
  2233  000DDE  6BA9               	clrf	(??_main+1)& (0+255),b
  2234  000DE0  0E0A               	movlw	10
  2235  000DE2  27A8               	addwf	??_main& (0+255),f,b
  2236  000DE4  0E00               	movlw	0
  2237  000DE6  23A9               	addwfc	(??_main+1)& (0+255),f,b
  2238  000DE8  0E00               	movlw	low _SendMsgSreen
  2239  000DEA  25A8               	addwf	??_main& (0+255),w,b
  2240  000DEC  6ED9               	movwf	fsr2l,c
  2241  000DEE  0E01               	movlw	high _SendMsgSreen
  2242  000DF0  21A9               	addwfc	(??_main+1)& (0+255),w,b
  2243  000DF2  6EDA               	movwf	fsr2h,c
  2244  000DF4  0EFF               	movlw	255
  2245  000DF6  6EDF               	movwf	indf2,c
  2246                           
  2247                           ;main.c: 339: SendMsgSreen[taille_text_spi+11] = 0xFF;
  2248  000DF8  51B8               	movf	main@taille_text_spi& (0+255),w,b
  2249  000DFA  6FA8               	movwf	??_main& (0+255),b
  2250  000DFC  6BA9               	clrf	(??_main+1)& (0+255),b
  2251  000DFE  0E0B               	movlw	11
  2252  000E00  27A8               	addwf	??_main& (0+255),f,b
  2253  000E02  0E00               	movlw	0
  2254  000E04  23A9               	addwfc	(??_main+1)& (0+255),f,b
  2255  000E06  0E00               	movlw	low _SendMsgSreen
  2256  000E08  25A8               	addwf	??_main& (0+255),w,b
  2257  000E0A  6ED9               	movwf	fsr2l,c
  2258  000E0C  0E01               	movlw	high _SendMsgSreen
  2259  000E0E  21A9               	addwfc	(??_main+1)& (0+255),w,b
  2260  000E10  6EDA               	movwf	fsr2h,c
  2261  000E12  0EFF               	movlw	255
  2262  000E14  6EDF               	movwf	indf2,c
  2263                           
  2264                           ; BSR set to: 0
  2265                           ;main.c: 340: PrintS(SendMsgSreen);
  2266  000E16  0E00               	movlw	low _SendMsgSreen
  2267  000E18  6E1F               	movwf	PrintS@s_printS,c
  2268  000E1A  0E01               	movlw	high _SendMsgSreen
  2269  000E1C  6E20               	movwf	PrintS@s_printS+1,c
  2270  000E1E  ECE1  F00D         	call	_PrintS	;wreg free
  2271                           
  2272                           ;main.c: 341: ClearArray();
  2273  000E22  EC42  F00E         	call	_ClearArray	;wreg free
  2274                           
  2275                           ;main.c: 346: break;
  2276                           
  2277                           ;main.c: 344: case 3:
  2278                           
  2279                           ;main.c: 342: }
  2280                           ;main.c: 343: break;
  2281  000E26  D41D               	goto	l177
  2282  000E28                     
  2283                           ;main.c: 350: FlagSpi = 1;
  2284  000E28  0E01               	movlw	1
  2285  000E2A  0100               	movlb	0	; () banked
  2286  000E2C  6FCC               	movwf	_FlagSpi& (0+255),b
  2287                           
  2288                           ;main.c: 351: SendMsgSreen[0] = 0x74;
  2289  000E2E  0E74               	movlw	116
  2290  000E30  0101               	movlb	1	; () banked
  2291  000E32  6F00               	movwf	_SendMsgSreen& (0+255),b
  2292                           
  2293                           ;main.c: 352: SendMsgSreen[1] = 0x30;
  2294  000E34  0E30               	movlw	48
  2295  000E36  6F01               	movwf	(_SendMsgSreen+1)& (0+255),b
  2296                           
  2297                           ;main.c: 353: SendMsgSreen[2] = 0x2E;
  2298  000E38  0E2E               	movlw	46
  2299  000E3A  6F02               	movwf	(_SendMsgSreen+2)& (0+255),b
  2300                           
  2301                           ;main.c: 354: SendMsgSreen[3] = 0x74;
  2302  000E3C  0E74               	movlw	116
  2303  000E3E  6F03               	movwf	(_SendMsgSreen+3)& (0+255),b
  2304                           
  2305                           ;main.c: 355: SendMsgSreen[4] = 0x78;
  2306  000E40  0E78               	movlw	120
  2307  000E42  6F04               	movwf	(_SendMsgSreen+4)& (0+255),b
  2308                           
  2309                           ;main.c: 356: SendMsgSreen[5] = 0x74;
  2310  000E44  0E74               	movlw	116
  2311  000E46  6F05               	movwf	(_SendMsgSreen+5)& (0+255),b
  2312                           
  2313                           ;main.c: 357: SendMsgSreen[6] = 0x3D;
  2314  000E48  0E3D               	movlw	61
  2315  000E4A  6F06               	movwf	(_SendMsgSreen+6)& (0+255),b
  2316                           
  2317                           ;main.c: 358: SendMsgSreen[7] = 0x22;
  2318  000E4C  0E22               	movlw	34
  2319  000E4E  6F07               	movwf	(_SendMsgSreen+7)& (0+255),b
  2320                           
  2321                           ;main.c: 359: SendMsgSreen[8] = 0x74;
  2322  000E50  0E74               	movlw	116
  2323  000E52  6F08               	movwf	(_SendMsgSreen+8)& (0+255),b
  2324                           
  2325                           ;main.c: 360: SendMsgSreen[9] = 0x65;
  2326  000E54  0E65               	movlw	101
  2327  000E56  6F09               	movwf	(_SendMsgSreen+9)& (0+255),b
  2328                           
  2329                           ;main.c: 361: SendMsgSreen[10] = 0x73;
  2330  000E58  0E73               	movlw	115
  2331  000E5A  6F0A               	movwf	(_SendMsgSreen+10)& (0+255),b
  2332                           
  2333                           ;main.c: 362: SendMsgSreen[11] = 0x74;
  2334  000E5C  0E74               	movlw	116
  2335  000E5E  6F0B               	movwf	(_SendMsgSreen+11)& (0+255),b
  2336                           
  2337                           ; BSR set to: 1
  2338                           ;main.c: 363: SendMsgSreen[12] = 0x30 + cpt;
  2339  000E60  0100               	movlb	0	; () banked
  2340  000E62  51C3               	movf	_cpt& (0+255),w,b
  2341  000E64  0F30               	addlw	48
  2342  000E66  0101               	movlb	1	; () banked
  2343  000E68  6F0C               	movwf	(_SendMsgSreen+12)& (0+255),b
  2344                           
  2345                           ; BSR set to: 1
  2346                           ;main.c: 364: cpt++;
  2347  000E6A  0100               	movlb	0	; () banked
  2348  000E6C  2BC3               	incf	_cpt& (0+255),f,b
  2349                           
  2350                           ; BSR set to: 0
  2351                           ;main.c: 365: if(cpt > 9) {cpt = 0;}
  2352  000E6E  0E09               	movlw	9
  2353  000E70  65C3               	cpfsgt	_cpt& (0+255),b
  2354  000E72  D002               	goto	l203
  2355                           
  2356                           ; BSR set to: 0
  2357  000E74  0E00               	movlw	0
  2358  000E76  6FC3               	movwf	_cpt& (0+255),b
  2359  000E78                     l203:
  2360                           
  2361                           ; BSR set to: 0
  2362                           ;main.c: 366: SendMsgSreen[13] = 0x22;
  2363  000E78  0E22               	movlw	34
  2364  000E7A  0101               	movlb	1	; () banked
  2365  000E7C  6F0D               	movwf	(_SendMsgSreen+13)& (0+255),b
  2366                           
  2367                           ; BSR set to: 1
  2368                           ;main.c: 367: SendMsgSreen[14] = 0xFF;
  2369  000E7E  690E               	setf	(_SendMsgSreen+14)& (0+255),b
  2370                           
  2371                           ; BSR set to: 1
  2372                           ;main.c: 368: SendMsgSreen[15] = 0xFF;
  2373  000E80  690F               	setf	(_SendMsgSreen+15)& (0+255),b
  2374                           
  2375                           ; BSR set to: 1
  2376                           ;main.c: 369: SendMsgSreen[16] = 0xFF;
  2377  000E82  6910               	setf	(_SendMsgSreen+16)& (0+255),b
  2378                           
  2379                           ; BSR set to: 1
  2380                           ;main.c: 370: PrintS(SendMsgSreen);
  2381  000E84  0E00               	movlw	low _SendMsgSreen
  2382  000E86  6E1F               	movwf	PrintS@s_printS,c
  2383  000E88  0E01               	movlw	high _SendMsgSreen
  2384  000E8A  6E20               	movwf	PrintS@s_printS+1,c
  2385  000E8C  ECE1  F00D         	call	_PrintS	;wreg free
  2386                           
  2387                           ;main.c: 371: ClearArray();
  2388  000E90  EC42  F00E         	call	_ClearArray	;wreg free
  2389                           
  2390                           ;main.c: 372: break;
  2391  000E94  EF31  F003         	goto	l177
  2392  000E98                     
  2393                           ;main.c: 374: EtatScreen = 0;
  2394  000E98  0E00               	movlw	0
  2395  000E9A  0100               	movlb	0	; () banked
  2396  000E9C  6FC7               	movwf	_EtatScreen& (0+255),b
  2397                           
  2398                           ; BSR set to: 0
  2399                           ;main.c: 376: }
  2400                           
  2401                           ;main.c: 375: break;
  2402  000E9E  EF31  F003         	goto	l177
  2403  000EA2                     l185:
  2404                           
  2405                           ; BSR set to: 0
  2406                           
  2407                           ; BSR set to: 0
  2408  000EA2  51C7               	movf	_EtatScreen& (0+255),w,b
  2409                           
  2410                           ; Switch size 1, requested type "space"
  2411                           ; Number of cases is 5, Range of values is 0 to 4
  2412                           ; switch strategies available:
  2413                           ; Name         Instructions Cycles
  2414                           ; simple_byte           16     9 (average)
  2415                           ;	Chosen strategy is simple_byte
  2416  000EA4  0A00               	xorlw	0	; case 0
  2417  000EA6  B4D8               	btfsc	status,2,c
  2418  000EA8  D574               	goto	l186
  2419  000EAA  0A01               	xorlw	1	; case 1
  2420  000EAC  B4D8               	btfsc	status,2,c
  2421  000EAE  D667               	goto	l193
  2422  000EB0  0A03               	xorlw	3	; case 2
  2423  000EB2  B4D8               	btfsc	status,2,c
  2424  000EB4  D724               	goto	l194
  2425  000EB6  0A01               	xorlw	1	; case 3
  2426  000EB8  B4D8               	btfsc	status,2,c
  2427  000EBA  EF31  F003         	goto	l177
  2428  000EBE  0A07               	xorlw	7	; case 4
  2429  000EC0  B4D8               	btfsc	status,2,c
  2430  000EC2  D7B2               	goto	l202
  2431  000EC4  D7E9               	goto	l204
  2432  000EC6                     __end_of_main:
  2433                           	opt stack 0
  2434                           tblptru	equ	0xFF8
  2435                           tblptrh	equ	0xFF7
  2436                           tblptrl	equ	0xFF6
  2437                           tablat	equ	0xFF5
  2438                           prodh	equ	0xFF4
  2439                           prodl	equ	0xFF3
  2440                           intcon	equ	0xFF2
  2441                           postinc0	equ	0xFEE
  2442                           wreg	equ	0xFE8
  2443                           indf1	equ	0xFE7
  2444                           postdec1	equ	0xFE5
  2445                           fsr1h	equ	0xFE2
  2446                           fsr1l	equ	0xFE1
  2447                           indf2	equ	0xFDF
  2448                           fsr2h	equ	0xFDA
  2449                           fsr2l	equ	0xFD9
  2450                           status	equ	0xFD8
  2451                           
  2452 ;; *************** function _exp *****************
  2453 ;; Defined at:
  2454 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
  2455 ;; Parameters:    Size  Location     Type
  2456 ;;  x               3   31[BANK0 ] void 
  2457 ;; Auto vars:     Size  Location     Type
  2458 ;;  exponent        2   37[BANK0 ] int 
  2459 ;;  sign            1   39[BANK0 ] unsigned char 
  2460 ;; Return value:  Size  Location     Type
  2461 ;;                  3   31[BANK0 ] unsigned char 
  2462 ;; Registers used:
  2463 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2464 ;; Tracked objects:
  2465 ;;		On entry : 0/0
  2466 ;;		On exit  : 0/0
  2467 ;;		Unchanged: 0/0
  2468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2469 ;;      Params:         0       3       0       0       0       0       0
  2470 ;;      Locals:         0       6       0       0       0       0       0
  2471 ;;      Temps:          0       0       0       0       0       0       0
  2472 ;;      Totals:         0       9       0       0       0       0       0
  2473 ;;Total ram usage:        9 bytes
  2474 ;; Hardware stack levels used:    1
  2475 ;; Hardware stack levels required when called:    5
  2476 ;; This function calls:
  2477 ;;		___awtoft
  2478 ;;		___ftdiv
  2479 ;;		___ftge
  2480 ;;		___ftmul
  2481 ;;		___ftneg
  2482 ;;		___ftsub
  2483 ;;		___fttol
  2484 ;;		_eval_poly
  2485 ;;		_floor
  2486 ;;		_ldexp
  2487 ;; This function is called by:
  2488 ;;		_main
  2489 ;; This function uses a non-reentrant model
  2490 ;;
  2491                           
  2492                           	psect	text1
  2493  000EC6                     __ptext1:
  2494                           	opt stack 0
  2495  000EC6                     _exp:
  2496                           	opt stack 25
  2497                           
  2498                           ; BSR set to: 0
  2499                           ;incstack = 0
  2500  000EC6  0100               	movlb	0	; () banked
  2501  000EC8  519F               	movf	exp@x& (0+255),w,b
  2502  000ECA  11A0               	iorwf	(exp@x+1)& (0+255),w,b
  2503  000ECC  11A1               	iorwf	(exp@x+2)& (0+255),w,b
  2504  000ECE  A4D8               	btfss	status,2,c
  2505  000ED0  D007               	goto	l552
  2506                           
  2507                           ; BSR set to: 0
  2508  000ED2  0E00               	movlw	0
  2509  000ED4  6F9F               	movwf	?_exp& (0+255),b
  2510  000ED6  0E80               	movlw	128
  2511  000ED8  6FA0               	movwf	(?_exp+1)& (0+255),b
  2512  000EDA  0E3F               	movlw	63
  2513  000EDC  6FA1               	movwf	(?_exp+2)& (0+255),b
  2514                           
  2515                           ; BSR set to: 0
  2516  000EDE  0012               	return	
  2517  000EE0                     l552:
  2518                           
  2519                           ; BSR set to: 0
  2520                           
  2521                           ; BSR set to: 0
  2522  000EE0  0E72               	movlw	114
  2523  000EE2  6E1E               	movwf	___ftge@ff1,c
  2524  000EE4  0E31               	movlw	49
  2525  000EE6  6E1F               	movwf	___ftge@ff1+1,c
  2526  000EE8  0E44               	movlw	68
  2527  000EEA  6E20               	movwf	___ftge@ff1+2,c
  2528  000EEC  C09F  F021         	movff	exp@x,___ftge@ff2
  2529  000EF0  C0A0  F022         	movff	exp@x+1,___ftge@ff2+1
  2530  000EF4  C0A1  F023         	movff	exp@x+2,___ftge@ff2+2
  2531  000EF8  EC7C  F00C         	call	___ftge	;wreg free
  2532  000EFC  B0D8               	btfsc	status,0,c
  2533  000EFE  D00C               	goto	l554
  2534  000F00  0E00               	movlw	0
  2535  000F02  0100               	movlb	0	; () banked
  2536  000F04  6FBE               	movwf	(_errno+1)& (0+255),b
  2537  000F06  0E22               	movlw	34
  2538  000F08  6FBD               	movwf	_errno& (0+255),b
  2539  000F0A  0EFF               	movlw	255
  2540  000F0C  6F9F               	movwf	?_exp& (0+255),b
  2541  000F0E  0E7F               	movlw	127
  2542  000F10  6FA0               	movwf	(?_exp+1)& (0+255),b
  2543  000F12  0E7F               	movlw	127
  2544  000F14  6FA1               	movwf	(?_exp+2)& (0+255),b
  2545                           
  2546                           ; BSR set to: 0
  2547  000F16  0012               	return	
  2548  000F18                     l554:
  2549                           
  2550                           ; BSR set to: 0
  2551  000F18  C09F  F01E         	movff	exp@x,___ftge@ff1
  2552  000F1C  C0A0  F01F         	movff	exp@x+1,___ftge@ff1+1
  2553  000F20  C0A1  F020         	movff	exp@x+2,___ftge@ff1+2
  2554  000F24  0E49               	movlw	73
  2555  000F26  6E21               	movwf	___ftge@ff2,c
  2556  000F28  0E3A               	movlw	58
  2557  000F2A  6E22               	movwf	___ftge@ff2+1,c
  2558  000F2C  0EC4               	movlw	196
  2559  000F2E  6E23               	movwf	___ftge@ff2+2,c
  2560  000F30  EC7C  F00C         	call	___ftge	;wreg free
  2561  000F34  B0D8               	btfsc	status,0,c
  2562  000F36  D00C               	goto	l555
  2563  000F38  0E00               	movlw	0
  2564  000F3A  0100               	movlb	0	; () banked
  2565  000F3C  6FBE               	movwf	(_errno+1)& (0+255),b
  2566  000F3E  0E22               	movlw	34
  2567  000F40  6FBD               	movwf	_errno& (0+255),b
  2568  000F42  0E00               	movlw	0
  2569  000F44  6F9F               	movwf	?_exp& (0+255),b
  2570  000F46  0E00               	movlw	0
  2571  000F48  6FA0               	movwf	(?_exp+1)& (0+255),b
  2572  000F4A  0E00               	movlw	0
  2573  000F4C  6FA1               	movwf	(?_exp+2)& (0+255),b
  2574                           
  2575                           ; BSR set to: 0
  2576  000F4E  0012               	return	
  2577  000F50                     l555:
  2578                           
  2579                           ; BSR set to: 0
  2580  000F50  0100               	movlb	0	; () banked
  2581  000F52  AFA1               	btfss	(exp@x+2)& (0+255),7,b
  2582  000F54  D002               	goto	u2990
  2583  000F56  0E01               	movlw	1
  2584  000F58  D001               	goto	u3000
  2585  000F5A                     u2990:
  2586  000F5A  0E00               	movlw	0
  2587  000F5C                     u3000:
  2588  000F5C  6FA7               	movwf	exp@sign& (0+255),b
  2589                           
  2590                           ; BSR set to: 0
  2591  000F5E  51A7               	movf	exp@sign& (0+255),w,b
  2592  000F60  B4D8               	btfsc	status,2,c
  2593  000F62  D00E               	goto	l556
  2594                           
  2595                           ; BSR set to: 0
  2596  000F64  C09F  F048         	movff	exp@x,___ftneg@f1
  2597  000F68  C0A0  F049         	movff	exp@x+1,___ftneg@f1+1
  2598  000F6C  C0A1  F04A         	movff	exp@x+2,___ftneg@f1+2
  2599  000F70  EC7D  F00E         	call	___ftneg	;wreg free
  2600  000F74  C048  F09F         	movff	?___ftneg,exp@x
  2601  000F78  C049  F0A0         	movff	?___ftneg+1,exp@x+1
  2602  000F7C  C04A  F0A1         	movff	?___ftneg+2,exp@x+2
  2603  000F80                     l556:
  2604  000F80  C09F  F04B         	movff	exp@x,___ftmul@f1
  2605  000F84  C0A0  F04C         	movff	exp@x+1,___ftmul@f1+1
  2606  000F88  C0A1  F04D         	movff	exp@x+2,___ftmul@f1+2
  2607  000F8C  0EAA               	movlw	170
  2608  000F8E  6E4E               	movwf	___ftmul@f2,c
  2609  000F90  0EB8               	movlw	184
  2610  000F92  6E4F               	movwf	___ftmul@f2+1,c
  2611  000F94  0E3F               	movlw	63
  2612  000F96  6E50               	movwf	___ftmul@f2+2,c
  2613  000F98  ECAC  F009         	call	___ftmul	;wreg free
  2614  000F9C  C04B  F09F         	movff	?___ftmul,exp@x
  2615  000FA0  C04C  F0A0         	movff	?___ftmul+1,exp@x+1
  2616  000FA4  C04D  F0A1         	movff	?___ftmul+2,exp@x+2
  2617  000FA8  C09F  F08C         	movff	exp@x,floor@x
  2618  000FAC  C0A0  F08D         	movff	exp@x+1,floor@x+1
  2619  000FB0  C0A1  F08E         	movff	exp@x+2,floor@x+2
  2620  000FB4  EC99  F00A         	call	_floor	;wreg free
  2621  000FB8  C08C  F0A2         	movff	?_floor,_exp$1529
  2622  000FBC  C08D  F0A3         	movff	?_floor+1,_exp$1529+1
  2623  000FC0  C08E  F0A4         	movff	?_floor+2,_exp$1529+2
  2624  000FC4  C0A2  F035         	movff	_exp$1529,___fttol@f1
  2625  000FC8  C0A3  F036         	movff	_exp$1529+1,___fttol@f1+1
  2626  000FCC  C0A4  F037         	movff	_exp$1529+2,___fttol@f1+2
  2627  000FD0  EC32  F009         	call	___fttol	;wreg free
  2628  000FD4  C035  F0A5         	movff	?___fttol,exp@exponent
  2629  000FD8  C036  F0A6         	movff	?___fttol+1,exp@exponent+1
  2630  000FDC  C09F  F08C         	movff	exp@x,___ftsub@f1
  2631  000FE0  C0A0  F08D         	movff	exp@x+1,___ftsub@f1+1
  2632  000FE4  C0A1  F08E         	movff	exp@x+2,___ftsub@f1+2
  2633  000FE8  C0A5  F044         	movff	exp@exponent,___awtoft@c
  2634  000FEC  C0A6  F045         	movff	exp@exponent+1,___awtoft@c+1
  2635  000FF0  ECC5  F00D         	call	___awtoft	;wreg free
  2636  000FF4  C044  F08F         	movff	?___awtoft,___ftsub@f2
  2637  000FF8  C045  F090         	movff	?___awtoft+1,___ftsub@f2+1
  2638  000FFC  C046  F091         	movff	?___awtoft+2,___ftsub@f2+2
  2639  001000  ECA4  F00D         	call	___ftsub	;wreg free
  2640  001004  C08C  F09F         	movff	?___ftsub,exp@x
  2641  001008  C08D  F0A0         	movff	?___ftsub+1,exp@x+1
  2642  00100C  C08E  F0A1         	movff	?___ftsub+2,exp@x+2
  2643  001010  C09F  F08C         	movff	exp@x,eval_poly@x
  2644  001014  C0A0  F08D         	movff	exp@x+1,eval_poly@x+1
  2645  001018  C0A1  F08E         	movff	exp@x+2,eval_poly@x+2
  2646  00101C  0E01               	movlw	low exp@coeff
  2647  00101E  0100               	movlb	0	; () banked
  2648  001020  6F8F               	movwf	eval_poly@d& (0+255),b
  2649  001022  0E06               	movlw	high exp@coeff
  2650  001024  6F90               	movwf	(eval_poly@d+1)& (0+255),b
  2651  001026  0E00               	movlw	0
  2652  001028  6F92               	movwf	(eval_poly@n+1)& (0+255),b
  2653  00102A  0E09               	movlw	9
  2654  00102C  6F91               	movwf	eval_poly@n& (0+255),b
  2655  00102E  EC0A  F00B         	call	_eval_poly	;wreg free
  2656  001032  C08C  F098         	movff	?_eval_poly,ldexp@value
  2657  001036  C08D  F099         	movff	?_eval_poly+1,ldexp@value+1
  2658  00103A  C08E  F09A         	movff	?_eval_poly+2,ldexp@value+2
  2659  00103E  C0A5  F09B         	movff	exp@exponent,ldexp@newexp
  2660  001042  C0A6  F09C         	movff	exp@exponent+1,ldexp@newexp+1
  2661  001046  EC77  F00B         	call	_ldexp	;wreg free
  2662  00104A  C098  F09F         	movff	?_ldexp,exp@x
  2663  00104E  C099  F0A0         	movff	?_ldexp+1,exp@x+1
  2664  001052  C09A  F0A1         	movff	?_ldexp+2,exp@x+2
  2665  001056  0100               	movlb	0	; () banked
  2666  001058  51A7               	movf	exp@sign& (0+255),w,b
  2667  00105A  B4D8               	btfsc	status,2,c
  2668  00105C  D025               	goto	l557
  2669                           
  2670                           ; BSR set to: 0
  2671  00105E  299F               	incf	exp@x& (0+255),w,b
  2672  001060  E10E               	bnz	l3214
  2673  001062  0E7F               	movlw	127
  2674  001064  19A0               	xorwf	(exp@x+1)& (0+255),w,b
  2675  001066  E10B               	bnz	l3214
  2676  001068  0E7F               	movlw	127
  2677  00106A  19A1               	xorwf	(exp@x+2)& (0+255),w,b
  2678  00106C  A4D8               	btfss	status,2,c
  2679  00106E  D007               	goto	l558
  2680                           
  2681                           ; BSR set to: 0
  2682  001070  0E00               	movlw	0
  2683  001072  6F9F               	movwf	?_exp& (0+255),b
  2684  001074  0E00               	movlw	0
  2685  001076  6FA0               	movwf	(?_exp+1)& (0+255),b
  2686  001078  0E00               	movlw	0
  2687  00107A  6FA1               	movwf	(?_exp+2)& (0+255),b
  2688                           
  2689                           ; BSR set to: 0
  2690  00107C  0012               	return	
  2691  00107E                     l558:
  2692  00107E                     l3214:
  2693                           
  2694                           ; BSR set to: 0
  2695  00107E  0E00               	movlw	0
  2696  001080  6E26               	movwf	___ftdiv@f1,c
  2697  001082  0E80               	movlw	128
  2698  001084  6E27               	movwf	___ftdiv@f1+1,c
  2699  001086  0E3F               	movlw	63
  2700  001088  6E28               	movwf	___ftdiv@f1+2,c
  2701  00108A  C09F  F029         	movff	exp@x,___ftdiv@f2
  2702  00108E  C0A0  F02A         	movff	exp@x+1,___ftdiv@f2+1
  2703  001092  C0A1  F02B         	movff	exp@x+2,___ftdiv@f2+2
  2704  001096  EC26  F00A         	call	___ftdiv	;wreg free
  2705  00109A  C026  F09F         	movff	?___ftdiv,?_exp
  2706  00109E  C027  F0A0         	movff	?___ftdiv+1,?_exp+1
  2707  0010A2  C028  F0A1         	movff	?___ftdiv+2,?_exp+2
  2708  0010A6  0012               	return	
  2709  0010A8                     l557:
  2710                           
  2711                           ; BSR set to: 0
  2712  0010A8  C09F  F09F         	movff	exp@x,?_exp
  2713  0010AC  C0A0  F0A0         	movff	exp@x+1,?_exp+1
  2714  0010B0  C0A1  F0A1         	movff	exp@x+2,?_exp+2
  2715  0010B4  0012               	return		;funcret
  2716  0010B6                     __end_of_exp:
  2717                           	opt stack 0
  2718                           tblptru	equ	0xFF8
  2719                           tblptrh	equ	0xFF7
  2720                           tblptrl	equ	0xFF6
  2721                           tablat	equ	0xFF5
  2722                           prodh	equ	0xFF4
  2723                           prodl	equ	0xFF3
  2724                           intcon	equ	0xFF2
  2725                           postinc0	equ	0xFEE
  2726                           wreg	equ	0xFE8
  2727                           indf1	equ	0xFE7
  2728                           postdec1	equ	0xFE5
  2729                           fsr1h	equ	0xFE2
  2730                           fsr1l	equ	0xFE1
  2731                           indf2	equ	0xFDF
  2732                           fsr2h	equ	0xFDA
  2733                           fsr2l	equ	0xFD9
  2734                           status	equ	0xFD8
  2735                           
  2736 ;; *************** function _ldexp *****************
  2737 ;; Defined at:
  2738 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  2739 ;; Parameters:    Size  Location     Type
  2740 ;;  value           3   24[BANK0 ] unsigned char 
  2741 ;;  newexp          2   27[BANK0 ] int 
  2742 ;; Auto vars:     Size  Location     Type
  2743 ;;		None
  2744 ;; Return value:  Size  Location     Type
  2745 ;;                  3   24[BANK0 ] int 
  2746 ;; Registers used:
  2747 ;;		wreg, status,2, status,0
  2748 ;; Tracked objects:
  2749 ;;		On entry : 0/0
  2750 ;;		On exit  : 0/0
  2751 ;;		Unchanged: 0/0
  2752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2753 ;;      Params:         0       5       0       0       0       0       0
  2754 ;;      Locals:         0       0       0       0       0       0       0
  2755 ;;      Temps:          0       2       0       0       0       0       0
  2756 ;;      Totals:         0       7       0       0       0       0       0
  2757 ;;Total ram usage:        7 bytes
  2758 ;; Hardware stack levels used:    1
  2759 ;; Hardware stack levels required when called:    2
  2760 ;; This function calls:
  2761 ;;		Nothing
  2762 ;; This function is called by:
  2763 ;;		_exp
  2764 ;; This function uses a non-reentrant model
  2765 ;;
  2766                           
  2767                           	psect	text2
  2768  0016EE                     __ptext2:
  2769                           	opt stack 0
  2770  0016EE                     _ldexp:
  2771                           	opt stack 27
  2772                           
  2773                           ;incstack = 0
  2774  0016EE  0100               	movlb	0	; () banked
  2775  0016F0  5198               	movf	ldexp@value& (0+255),w,b
  2776  0016F2  1199               	iorwf	(ldexp@value+1)& (0+255),w,b
  2777  0016F4  119A               	iorwf	(ldexp@value+2)& (0+255),w,b
  2778  0016F6  A4D8               	btfss	status,2,c
  2779  0016F8  D007               	goto	l620
  2780                           
  2781                           ; BSR set to: 0
  2782  0016FA  0E00               	movlw	0
  2783  0016FC  6F98               	movwf	?_ldexp& (0+255),b
  2784  0016FE  0E00               	movlw	0
  2785  001700  6F99               	movwf	(?_ldexp+1)& (0+255),b
  2786  001702  0E00               	movlw	0
  2787  001704  6F9A               	movwf	(?_ldexp+2)& (0+255),b
  2788                           
  2789                           ; BSR set to: 0
  2790  001706  0012               	return	
  2791  001708                     l620:
  2792                           
  2793                           ; BSR set to: 0
  2794                           
  2795                           ; BSR set to: 0
  2796  001708  519A               	movf	(ldexp@value+2)& (0+255),w,b
  2797  00170A  0B7F               	andlw	127
  2798  00170C  6F9D               	movwf	??_ldexp& (0+255),b
  2799  00170E  6B9E               	clrf	(??_ldexp+1)& (0+255),b
  2800  001710  90D8               	bcf	status,0,c
  2801  001712  379D               	rlcf	??_ldexp& (0+255),f,b
  2802  001714  379E               	rlcf	(??_ldexp+1)& (0+255),f,b
  2803  001716  519D               	movf	??_ldexp& (0+255),w,b
  2804  001718  279B               	addwf	ldexp@newexp& (0+255),f,b
  2805  00171A  519E               	movf	(??_ldexp+1)& (0+255),w,b
  2806  00171C  239C               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  2807  00171E  AF99               	btfss	(ldexp@value+1)& (0+255),7,b
  2808  001720  D003               	goto	u1990
  2809  001722  6B9D               	clrf	??_ldexp& (0+255),b
  2810  001724  2B9D               	incf	??_ldexp& (0+255),f,b
  2811  001726  D002               	goto	u1998
  2812  001728                     u1990:
  2813  001728  0100               	movlb	0	; () banked
  2814  00172A  6B9D               	clrf	??_ldexp& (0+255),b
  2815  00172C                     u1998:
  2816  00172C  519D               	movf	??_ldexp& (0+255),w,b
  2817  00172E  279B               	addwf	ldexp@newexp& (0+255),f,b
  2818  001730  0E00               	movlw	0
  2819  001732  239C               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  2820  001734  AF9C               	btfss	(ldexp@newexp+1)& (0+255),7,b
  2821  001736  D00B               	goto	l622
  2822                           
  2823                           ; BSR set to: 0
  2824  001738  0E00               	movlw	0
  2825  00173A  6FBE               	movwf	(_errno+1)& (0+255),b
  2826  00173C  0E22               	movlw	34
  2827  00173E  6FBD               	movwf	_errno& (0+255),b
  2828  001740  0E00               	movlw	0
  2829  001742  6F98               	movwf	?_ldexp& (0+255),b
  2830  001744  0E00               	movlw	0
  2831  001746  6F99               	movwf	(?_ldexp+1)& (0+255),b
  2832  001748  0E00               	movlw	0
  2833  00174A                     L1:
  2834  00174A  6F9A               	movwf	(?_ldexp+2)& (0+255),b
  2835                           
  2836                           ; BSR set to: 0
  2837  00174C  0012               	return	
  2838  00174E                     l622:
  2839                           
  2840                           ; BSR set to: 0
  2841                           
  2842                           ; BSR set to: 0
  2843  00174E  BF9C               	btfsc	(ldexp@newexp+1)& (0+255),7,b
  2844  001750  D015               	goto	l624
  2845  001752  059C               	decf	(ldexp@newexp+1)& (0+255),w,b
  2846  001754  A0D8               	btfss	status,0,c
  2847  001756  D012               	goto	l624
  2848                           
  2849                           ; BSR set to: 0
  2850  001758  0E00               	movlw	0
  2851  00175A  6FBE               	movwf	(_errno+1)& (0+255),b
  2852  00175C  0E22               	movlw	34
  2853  00175E  6FBD               	movwf	_errno& (0+255),b
  2854                           
  2855                           ; BSR set to: 0
  2856  001760  AF9A               	btfss	(ldexp@value+2)& (0+255),7,b
  2857  001762  D006               	goto	l625
  2858                           
  2859                           ; BSR set to: 0
  2860  001764  0EFF               	movlw	255
  2861  001766  6F98               	movwf	?_ldexp& (0+255),b
  2862  001768  0E7F               	movlw	127
  2863  00176A  6F99               	movwf	(?_ldexp+1)& (0+255),b
  2864  00176C  0EFF               	movlw	255
  2865  00176E  D7ED               	goto	L1
  2866  001770                     l625:
  2867                           
  2868                           ; BSR set to: 0
  2869                           
  2870                           ; BSR set to: 0
  2871  001770  0EFF               	movlw	255
  2872  001772  6F98               	movwf	?_ldexp& (0+255),b
  2873  001774  0E7F               	movlw	127
  2874  001776  6F99               	movwf	(?_ldexp+1)& (0+255),b
  2875  001778  0E7F               	movlw	127
  2876  00177A  D7E7               	goto	L1
  2877  00177C                     l624:
  2878                           
  2879                           ; BSR set to: 0
  2880                           
  2881                           ; BSR set to: 0
  2882  00177C  359C               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  2883  00177E  319C               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  2884  001780  6F9E               	movwf	(??_ldexp+1)& (0+255),b
  2885  001782  319B               	rrcf	ldexp@newexp& (0+255),w,b
  2886  001784  6F9D               	movwf	??_ldexp& (0+255),b
  2887  001786  519A               	movf	(ldexp@value+2)& (0+255),w,b
  2888  001788  199D               	xorwf	??_ldexp& (0+255),w,b
  2889  00178A  0B80               	andlw	-128
  2890  00178C  199D               	xorwf	??_ldexp& (0+255),w,b
  2891  00178E  6F9A               	movwf	(ldexp@value+2)& (0+255),b
  2892  001790  C09B  F09D         	movff	ldexp@newexp,??_ldexp
  2893  001794  0E01               	movlw	1
  2894  001796  179D               	andwf	??_ldexp& (0+255),f,b
  2895  001798  339D               	rrcf	??_ldexp& (0+255),f,b
  2896  00179A  339D               	rrcf	??_ldexp& (0+255),f,b
  2897  00179C  5199               	movf	(ldexp@value+1)& (0+255),w,b
  2898  00179E  199D               	xorwf	??_ldexp& (0+255),w,b
  2899  0017A0  0B7F               	andlw	-129
  2900  0017A2  199D               	xorwf	??_ldexp& (0+255),w,b
  2901  0017A4  6F99               	movwf	(ldexp@value+1)& (0+255),b
  2902                           
  2903                           ; BSR set to: 0
  2904                           
  2905                           ; BSR set to: 0
  2906                           
  2907                           ; BSR set to: 0
  2908  0017A6  C098  F098         	movff	ldexp@value,?_ldexp
  2909  0017AA  C099  F099         	movff	ldexp@value+1,?_ldexp+1
  2910  0017AE  C09A  F09A         	movff	ldexp@value+2,?_ldexp+2
  2911  0017B2  0012               	return	
  2912  0017B4                     __end_of_ldexp:
  2913                           	opt stack 0
  2914                           tblptru	equ	0xFF8
  2915                           tblptrh	equ	0xFF7
  2916                           tblptrl	equ	0xFF6
  2917                           tablat	equ	0xFF5
  2918                           prodh	equ	0xFF4
  2919                           prodl	equ	0xFF3
  2920                           intcon	equ	0xFF2
  2921                           postinc0	equ	0xFEE
  2922                           wreg	equ	0xFE8
  2923                           indf1	equ	0xFE7
  2924                           postdec1	equ	0xFE5
  2925                           fsr1h	equ	0xFE2
  2926                           fsr1l	equ	0xFE1
  2927                           indf2	equ	0xFDF
  2928                           fsr2h	equ	0xFDA
  2929                           fsr2l	equ	0xFD9
  2930                           status	equ	0xFD8
  2931                           
  2932 ;; *************** function _floor *****************
  2933 ;; Defined at:
  2934 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
  2935 ;; Parameters:    Size  Location     Type
  2936 ;;  x               3   12[BANK0 ] int 
  2937 ;; Auto vars:     Size  Location     Type
  2938 ;;  i               3   15[BANK0 ] int 
  2939 ;;  expon           2   18[BANK0 ] int 
  2940 ;; Return value:  Size  Location     Type
  2941 ;;                  3   12[BANK0 ] int 
  2942 ;; Registers used:
  2943 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2944 ;; Tracked objects:
  2945 ;;		On entry : 0/0
  2946 ;;		On exit  : 0/0
  2947 ;;		Unchanged: 0/0
  2948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2949 ;;      Params:         0       3       0       0       0       0       0
  2950 ;;      Locals:         0       5       0       0       0       0       0
  2951 ;;      Temps:          0       0       0       0       0       0       0
  2952 ;;      Totals:         0       8       0       0       0       0       0
  2953 ;;Total ram usage:        8 bytes
  2954 ;; Hardware stack levels used:    1
  2955 ;; Hardware stack levels required when called:    4
  2956 ;; This function calls:
  2957 ;;		___altoft
  2958 ;;		___ftadd
  2959 ;;		___ftge
  2960 ;;		___fttol
  2961 ;;		_frexp
  2962 ;; This function is called by:
  2963 ;;		_exp
  2964 ;; This function uses a non-reentrant model
  2965 ;;
  2966                           
  2967                           	psect	text3
  2968  001532                     __ptext3:
  2969                           	opt stack 0
  2970  001532                     _floor:
  2971                           	opt stack 25
  2972                           
  2973                           ; BSR set to: 0
  2974                           ;incstack = 0
  2975  001532  C08C  F01E         	movff	floor@x,frexp@value
  2976  001536  C08D  F01F         	movff	floor@x+1,frexp@value+1
  2977  00153A  C08E  F020         	movff	floor@x+2,frexp@value+2
  2978  00153E  0E92               	movlw	low floor@expon
  2979  001540  6E21               	movwf	frexp@eptr,c
  2980  001542  0E00               	movlw	high floor@expon
  2981  001544  6E22               	movwf	frexp@eptr+1,c
  2982  001546  EC06  F00D         	call	_frexp	;wreg free
  2983  00154A  0100               	movlb	0	; () banked
  2984  00154C  AF93               	btfss	(floor@expon+1)& (0+255),7,b
  2985  00154E  D010               	goto	l593
  2986                           
  2987                           ; BSR set to: 0
  2988  001550  AF8E               	btfss	(floor@x+2)& (0+255),7,b
  2989  001552  D007               	goto	l594
  2990                           
  2991                           ; BSR set to: 0
  2992  001554  0E00               	movlw	0
  2993  001556  6F8C               	movwf	?_floor& (0+255),b
  2994  001558  0E80               	movlw	128
  2995  00155A  6F8D               	movwf	(?_floor+1)& (0+255),b
  2996  00155C  0EBF               	movlw	191
  2997  00155E  6F8E               	movwf	(?_floor+2)& (0+255),b
  2998                           
  2999                           ; BSR set to: 0
  3000  001560  0012               	return	
  3001  001562                     l594:
  3002                           
  3003                           ; BSR set to: 0
  3004                           
  3005                           ; BSR set to: 0
  3006  001562  0E00               	movlw	0
  3007  001564  6F8C               	movwf	?_floor& (0+255),b
  3008  001566  0E00               	movlw	0
  3009  001568  6F8D               	movwf	(?_floor+1)& (0+255),b
  3010  00156A  0E00               	movlw	0
  3011  00156C  6F8E               	movwf	(?_floor+2)& (0+255),b
  3012                           
  3013                           ; BSR set to: 0
  3014  00156E  0012               	return	
  3015  001570                     l593:
  3016                           
  3017                           ; BSR set to: 0
  3018                           
  3019                           ; BSR set to: 0
  3020  001570  5193               	movf	(floor@expon+1)& (0+255),w,b
  3021  001572  E104               	bnz	u2930
  3022  001574  0E15               	movlw	21
  3023  001576  5D92               	subwf	floor@expon& (0+255),w,b
  3024  001578  A0D8               	btfss	status,0,c
  3025  00157A  D007               	goto	l596
  3026  00157C                     u2930:
  3027                           
  3028                           ; BSR set to: 0
  3029  00157C  C08C  F08C         	movff	floor@x,?_floor
  3030  001580  C08D  F08D         	movff	floor@x+1,?_floor+1
  3031  001584  C08E  F08E         	movff	floor@x+2,?_floor+2
  3032  001588  0012               	return	
  3033  00158A                     l596:
  3034                           
  3035                           ; BSR set to: 0
  3036                           
  3037                           ; BSR set to: 0
  3038  00158A  C08C  F035         	movff	floor@x,___fttol@f1
  3039  00158E  C08D  F036         	movff	floor@x+1,___fttol@f1+1
  3040  001592  C08E  F037         	movff	floor@x+2,___fttol@f1+2
  3041  001596  EC32  F009         	call	___fttol	;wreg free
  3042  00159A  C035  F044         	movff	?___fttol,___altoft@c
  3043  00159E  C036  F045         	movff	?___fttol+1,___altoft@c+1
  3044  0015A2  C037  F046         	movff	?___fttol+2,___altoft@c+2
  3045  0015A6  C038  F047         	movff	?___fttol+3,___altoft@c+3
  3046  0015AA  EC42  F00D         	call	___altoft	;wreg free
  3047  0015AE  C044  F08F         	movff	?___altoft,floor@i
  3048  0015B2  C045  F090         	movff	?___altoft+1,floor@i+1
  3049  0015B6  C046  F091         	movff	?___altoft+2,floor@i+2
  3050  0015BA  C08C  F01E         	movff	floor@x,___ftge@ff1
  3051  0015BE  C08D  F01F         	movff	floor@x+1,___ftge@ff1+1
  3052  0015C2  C08E  F020         	movff	floor@x+2,___ftge@ff1+2
  3053  0015C6  C08F  F021         	movff	floor@i,___ftge@ff2
  3054  0015CA  C090  F022         	movff	floor@i+1,___ftge@ff2+1
  3055  0015CE  C091  F023         	movff	floor@i+2,___ftge@ff2+2
  3056  0015D2  EC7C  F00C         	call	___ftge	;wreg free
  3057  0015D6  B0D8               	btfsc	status,0,c
  3058  0015D8  D016               	goto	l597
  3059  0015DA  C08F  F080         	movff	floor@i,___ftadd@f1
  3060  0015DE  C090  F081         	movff	floor@i+1,___ftadd@f1+1
  3061  0015E2  C091  F082         	movff	floor@i+2,___ftadd@f1+2
  3062  0015E6  0E00               	movlw	0
  3063  0015E8  0100               	movlb	0	; () banked
  3064  0015EA  6F83               	movwf	___ftadd@f2& (0+255),b
  3065  0015EC  0E80               	movlw	128
  3066  0015EE  6F84               	movwf	(___ftadd@f2+1)& (0+255),b
  3067  0015F0  0EBF               	movlw	191
  3068  0015F2  6F85               	movwf	(___ftadd@f2+2)& (0+255),b
  3069  0015F4  EC5B  F008         	call	___ftadd	;wreg free
  3070  0015F8  C080  F08C         	movff	?___ftadd,?_floor
  3071  0015FC  C081  F08D         	movff	?___ftadd+1,?_floor+1
  3072  001600  C082  F08E         	movff	?___ftadd+2,?_floor+2
  3073  001604  0012               	return	
  3074  001606                     l597:
  3075  001606  C08F  F08C         	movff	floor@i,?_floor
  3076  00160A  C090  F08D         	movff	floor@i+1,?_floor+1
  3077  00160E  C091  F08E         	movff	floor@i+2,?_floor+2
  3078  001612  0012               	return		;funcret
  3079  001614                     __end_of_floor:
  3080                           	opt stack 0
  3081                           tblptru	equ	0xFF8
  3082                           tblptrh	equ	0xFF7
  3083                           tblptrl	equ	0xFF6
  3084                           tablat	equ	0xFF5
  3085                           prodh	equ	0xFF4
  3086                           prodl	equ	0xFF3
  3087                           intcon	equ	0xFF2
  3088                           postinc0	equ	0xFEE
  3089                           wreg	equ	0xFE8
  3090                           indf1	equ	0xFE7
  3091                           postdec1	equ	0xFE5
  3092                           fsr1h	equ	0xFE2
  3093                           fsr1l	equ	0xFE1
  3094                           indf2	equ	0xFDF
  3095                           fsr2h	equ	0xFDA
  3096                           fsr2l	equ	0xFD9
  3097                           status	equ	0xFD8
  3098                           
  3099 ;; *************** function _frexp *****************
  3100 ;; Defined at:
  3101 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  3102 ;; Parameters:    Size  Location     Type
  3103 ;;  value           3   29[COMRAM] int 
  3104 ;;  eptr            2   32[COMRAM] PTR int 
  3105 ;;		 -> floor@expon(2), 
  3106 ;; Auto vars:     Size  Location     Type
  3107 ;;		None
  3108 ;; Return value:  Size  Location     Type
  3109 ;;                  3   29[COMRAM] PTR int 
  3110 ;; Registers used:
  3111 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3112 ;; Tracked objects:
  3113 ;;		On entry : 0/0
  3114 ;;		On exit  : 0/0
  3115 ;;		Unchanged: 0/0
  3116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3117 ;;      Params:         5       0       0       0       0       0       0
  3118 ;;      Locals:         0       0       0       0       0       0       0
  3119 ;;      Temps:          2       0       0       0       0       0       0
  3120 ;;      Totals:         7       0       0       0       0       0       0
  3121 ;;Total ram usage:        7 bytes
  3122 ;; Hardware stack levels used:    1
  3123 ;; Hardware stack levels required when called:    2
  3124 ;; This function calls:
  3125 ;;		Nothing
  3126 ;; This function is called by:
  3127 ;;		_floor
  3128 ;; This function uses a non-reentrant model
  3129 ;;
  3130                           
  3131                           	psect	text4
  3132  001A0C                     __ptext4:
  3133                           	opt stack 0
  3134  001A0C                     _frexp:
  3135                           	opt stack 26
  3136                           
  3137                           ;incstack = 0
  3138  001A0C  501E               	movf	frexp@value,w,c
  3139  001A0E  101F               	iorwf	frexp@value+1,w,c
  3140  001A10  1020               	iorwf	frexp@value+2,w,c
  3141  001A12  A4D8               	btfss	status,2,c
  3142  001A14  D009               	goto	l616
  3143  001A16  C021  FFD9         	movff	frexp@eptr,fsr2l
  3144  001A1A  C022  FFDA         	movff	frexp@eptr+1,fsr2h
  3145  001A1E  0E00               	movlw	0
  3146  001A20  6EDE               	movwf	postinc2,c
  3147  001A22  0E00               	movlw	0
  3148  001A24  6EDD               	movwf	postdec2,c
  3149                           
  3150                           ;	Return value of _frexp is never used
  3151  001A26  0012               	return	
  3152  001A28                     l616:
  3153  001A28  5020               	movf	frexp@value+2,w,c
  3154  001A2A  0B7F               	andlw	127
  3155  001A2C  6E23               	movwf	??_frexp& (0+255),c
  3156  001A2E  6A24               	clrf	(??_frexp+1)& (0+255),c
  3157  001A30  90D8               	bcf	status,0,c
  3158  001A32  3623               	rlcf	??_frexp,f,c
  3159  001A34  3624               	rlcf	??_frexp+1,f,c
  3160  001A36  C021  FFD9         	movff	frexp@eptr,fsr2l
  3161  001A3A  C022  FFDA         	movff	frexp@eptr+1,fsr2h
  3162  001A3E  C023  FFDE         	movff	??_frexp,postinc2
  3163  001A42  C024  FFDD         	movff	??_frexp+1,postdec2
  3164  001A46  AE1F               	btfss	frexp@value+1,7,c
  3165  001A48  D003               	goto	u1730
  3166  001A4A  6A23               	clrf	??_frexp& (0+255),c
  3167  001A4C  2A23               	incf	??_frexp& (0+255),f,c
  3168  001A4E  D001               	goto	u1738
  3169  001A50                     u1730:
  3170  001A50  6A23               	clrf	??_frexp& (0+255),c
  3171  001A52                     u1738:
  3172  001A52  5023               	movf	??_frexp,w,c
  3173  001A54  C021  FFD9         	movff	frexp@eptr,fsr2l
  3174  001A58  C022  FFDA         	movff	frexp@eptr+1,fsr2h
  3175  001A5C  12DE               	iorwf	postinc2,f,c
  3176  001A5E  0E00               	movlw	0
  3177  001A60  12DD               	iorwf	postdec2,f,c
  3178  001A62  C021  FFD9         	movff	frexp@eptr,fsr2l
  3179  001A66  C022  FFDA         	movff	frexp@eptr+1,fsr2h
  3180  001A6A  0E82               	movlw	130
  3181  001A6C  26DE               	addwf	postinc2,f,c
  3182  001A6E  0EFF               	movlw	255
  3183  001A70  22DD               	addwfc	postdec2,f,c
  3184  001A72  8020               	bsf	frexp@value+2,0,c
  3185  001A74  8220               	bsf	frexp@value+2,1,c
  3186  001A76  8420               	bsf	frexp@value+2,2,c
  3187  001A78  8620               	bsf	frexp@value+2,3,c
  3188  001A7A  8820               	bsf	frexp@value+2,4,c
  3189  001A7C  8A20               	bsf	frexp@value+2,5,c
  3190  001A7E  9C20               	bcf	frexp@value+2,6,c
  3191  001A80  9E1F               	bcf	frexp@value+1,7,c
  3192  001A82  0012               	return	
  3193  001A84                     __end_of_frexp:
  3194                           	opt stack 0
  3195                           tblptru	equ	0xFF8
  3196                           tblptrh	equ	0xFF7
  3197                           tblptrl	equ	0xFF6
  3198                           tablat	equ	0xFF5
  3199                           prodh	equ	0xFF4
  3200                           prodl	equ	0xFF3
  3201                           intcon	equ	0xFF2
  3202                           postinc0	equ	0xFEE
  3203                           wreg	equ	0xFE8
  3204                           indf1	equ	0xFE7
  3205                           postdec1	equ	0xFE5
  3206                           fsr1h	equ	0xFE2
  3207                           fsr1l	equ	0xFE1
  3208                           indf2	equ	0xFDF
  3209                           postinc2	equ	0xFDE
  3210                           postdec2	equ	0xFDD
  3211                           fsr2h	equ	0xFDA
  3212                           fsr2l	equ	0xFD9
  3213                           status	equ	0xFD8
  3214                           
  3215 ;; *************** function ___fttol *****************
  3216 ;; Defined at:
  3217 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  3218 ;; Parameters:    Size  Location     Type
  3219 ;;  f1              3   52[COMRAM] float 
  3220 ;; Auto vars:     Size  Location     Type
  3221 ;;  lval            4   62[COMRAM] unsigned long 
  3222 ;;  exp1            1   66[COMRAM] unsigned char 
  3223 ;;  sign1           1   61[COMRAM] unsigned char 
  3224 ;; Return value:  Size  Location     Type
  3225 ;;                  4   52[COMRAM] long 
  3226 ;; Registers used:
  3227 ;;		wreg, status,2, status,0
  3228 ;; Tracked objects:
  3229 ;;		On entry : 0/0
  3230 ;;		On exit  : 0/0
  3231 ;;		Unchanged: 0/0
  3232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3233 ;;      Params:         4       0       0       0       0       0       0
  3234 ;;      Locals:         6       0       0       0       0       0       0
  3235 ;;      Temps:          5       0       0       0       0       0       0
  3236 ;;      Totals:        15       0       0       0       0       0       0
  3237 ;;Total ram usage:       15 bytes
  3238 ;; Hardware stack levels used:    1
  3239 ;; Hardware stack levels required when called:    2
  3240 ;; This function calls:
  3241 ;;		Nothing
  3242 ;; This function is called by:
  3243 ;;		_main
  3244 ;;		_exp
  3245 ;;		_floor
  3246 ;; This function uses a non-reentrant model
  3247 ;;
  3248                           
  3249                           	psect	text5
  3250  001264                     __ptext5:
  3251                           	opt stack 0
  3252  001264                     ___fttol:
  3253                           	opt stack 26
  3254                           
  3255                           ;incstack = 0
  3256  001264  C037  F039         	movff	___fttol@f1+2,??___fttol
  3257  001268  6A3A               	clrf	(??___fttol+1)& (0+255),c
  3258  00126A  6A3B               	clrf	(??___fttol+2)& (0+255),c
  3259  00126C  3436               	rlcf	___fttol@f1+1,w,c
  3260  00126E  3639               	rlcf	??___fttol& (0+255),f,c
  3261  001270  E301               	bnc	u1771
  3262  001272  803A               	bsf	(??___fttol+1)& (0+255),0,c
  3263  001274                     u1771:
  3264  001274  5039               	movf	??___fttol,w,c
  3265  001276  6E43               	movwf	___fttol@exp1,c
  3266  001278  5043               	movf	___fttol@exp1,w,c
  3267  00127A  A4D8               	btfss	status,2,c
  3268  00127C  D009               	goto	l701
  3269  00127E  0E00               	movlw	0
  3270  001280  6E35               	movwf	?___fttol,c
  3271  001282  0E00               	movlw	0
  3272  001284  6E36               	movwf	?___fttol+1,c
  3273  001286  0E00               	movlw	0
  3274  001288  6E37               	movwf	?___fttol+2,c
  3275  00128A  0E00               	movlw	0
  3276  00128C  6E38               	movwf	?___fttol+3,c
  3277  00128E  0012               	return	
  3278  001290                     l701:
  3279  001290  0E17               	movlw	23
  3280  001292  6E39               	movwf	??___fttol& (0+255),c
  3281  001294  C035  F03A         	movff	___fttol@f1,??___fttol+1
  3282  001298  C036  F03B         	movff	___fttol@f1+1,??___fttol+2
  3283  00129C  C037  F03C         	movff	___fttol@f1+2,??___fttol+3
  3284  0012A0  2839               	incf	??___fttol,w,c
  3285  0012A2  6E3D               	movwf	(??___fttol+4)& (0+255),c
  3286  0012A4  D004               	goto	u1790
  3287  0012A6                     u1795:
  3288  0012A6  90D8               	bcf	status,0,c
  3289  0012A8  323C               	rrcf	??___fttol+3,f,c
  3290  0012AA  323B               	rrcf	??___fttol+2,f,c
  3291  0012AC  323A               	rrcf	??___fttol+1,f,c
  3292  0012AE                     u1790:
  3293  0012AE  2E3D               	decfsz	(??___fttol+4)& (0+255),f,c
  3294  0012B0  D7FA               	goto	u1795
  3295  0012B2  503A               	movf	??___fttol+1,w,c
  3296  0012B4  6E3E               	movwf	___fttol@sign1,c
  3297  0012B6  8E36               	bsf	___fttol@f1+1,7,c
  3298  0012B8  0EFF               	movlw	255
  3299  0012BA  1635               	andwf	___fttol@f1,f,c
  3300  0012BC  0EFF               	movlw	255
  3301  0012BE  1636               	andwf	___fttol@f1+1,f,c
  3302  0012C0  0E00               	movlw	0
  3303  0012C2  1637               	andwf	___fttol@f1+2,f,c
  3304  0012C4  5035               	movf	___fttol@f1,w,c
  3305  0012C6  6E3F               	movwf	___fttol@lval,c
  3306  0012C8  5036               	movf	___fttol@f1+1,w,c
  3307  0012CA  6E40               	movwf	___fttol@lval+1,c
  3308  0012CC  5037               	movf	___fttol@f1+2,w,c
  3309  0012CE  6E41               	movwf	___fttol@lval+2,c
  3310  0012D0  6A42               	clrf	___fttol@lval+3,c
  3311  0012D2  0E8E               	movlw	142
  3312  0012D4  5E43               	subwf	___fttol@exp1,f,c
  3313  0012D6  AE43               	btfss	___fttol@exp1,7,c
  3314  0012D8  D016               	goto	l703
  3315  0012DA  5043               	movf	___fttol@exp1,w,c
  3316  0012DC  0A80               	xorlw	128
  3317  0012DE  0F8F               	addlw	143
  3318  0012E0  B0D8               	btfsc	status,0,c
  3319  0012E2  D009               	goto	l704
  3320  0012E4  0E00               	movlw	0
  3321  0012E6  6E35               	movwf	?___fttol,c
  3322  0012E8  0E00               	movlw	0
  3323  0012EA  6E36               	movwf	?___fttol+1,c
  3324  0012EC  0E00               	movlw	0
  3325  0012EE  6E37               	movwf	?___fttol+2,c
  3326  0012F0  0E00               	movlw	0
  3327  0012F2  6E38               	movwf	?___fttol+3,c
  3328  0012F4  0012               	return	
  3329  0012F6                     l704:
  3330  0012F6  90D8               	bcf	status,0,c
  3331  0012F8  3242               	rrcf	___fttol@lval+3,f,c
  3332  0012FA  3241               	rrcf	___fttol@lval+2,f,c
  3333  0012FC  3240               	rrcf	___fttol@lval+1,f,c
  3334  0012FE  323F               	rrcf	___fttol@lval,f,c
  3335  001300  3E43               	incfsz	___fttol@exp1,f,c
  3336  001302  D7F9               	goto	l704
  3337  001304  D015               	goto	u1830
  3338  001306                     l703:
  3339  001306  0E17               	movlw	23
  3340  001308  6443               	cpfsgt	___fttol@exp1,c
  3341  00130A  D00F               	goto	l709
  3342  00130C  0E00               	movlw	0
  3343  00130E  6E35               	movwf	?___fttol,c
  3344  001310  0E00               	movlw	0
  3345  001312  6E36               	movwf	?___fttol+1,c
  3346  001314  0E00               	movlw	0
  3347  001316  6E37               	movwf	?___fttol+2,c
  3348  001318  0E00               	movlw	0
  3349  00131A  6E38               	movwf	?___fttol+3,c
  3350  00131C  0012               	return	
  3351  00131E  90D8               	bcf	status,0,c
  3352  001320  363F               	rlcf	___fttol@lval,f,c
  3353  001322  3640               	rlcf	___fttol@lval+1,f,c
  3354  001324  3641               	rlcf	___fttol@lval+2,f,c
  3355  001326  3642               	rlcf	___fttol@lval+3,f,c
  3356  001328  0643               	decf	___fttol@exp1,f,c
  3357  00132A                     l709:
  3358  00132A  5043               	movf	___fttol@exp1,w,c
  3359  00132C  A4D8               	btfss	status,2,c
  3360  00132E  D7F7               	goto	l710
  3361  001330                     u1830:
  3362  001330  503E               	movf	___fttol@sign1,w,c
  3363  001332  B4D8               	btfsc	status,2,c
  3364  001334  D008               	goto	l712
  3365  001336  1E42               	comf	___fttol@lval+3,f,c
  3366  001338  1E41               	comf	___fttol@lval+2,f,c
  3367  00133A  1E40               	comf	___fttol@lval+1,f,c
  3368  00133C  6C3F               	negf	___fttol@lval,c
  3369  00133E  0E00               	movlw	0
  3370  001340  2240               	addwfc	___fttol@lval+1,f,c
  3371  001342  2241               	addwfc	___fttol@lval+2,f,c
  3372  001344  2242               	addwfc	___fttol@lval+3,f,c
  3373  001346                     l712:
  3374  001346  C03F  F035         	movff	___fttol@lval,?___fttol
  3375  00134A  C040  F036         	movff	___fttol@lval+1,?___fttol+1
  3376  00134E  C041  F037         	movff	___fttol@lval+2,?___fttol+2
  3377  001352  C042  F038         	movff	___fttol@lval+3,?___fttol+3
  3378  001356  0012               	return	
  3379  001358                     __end_of___fttol:
  3380                           	opt stack 0
  3381                           tblptru	equ	0xFF8
  3382                           tblptrh	equ	0xFF7
  3383                           tblptrl	equ	0xFF6
  3384                           tablat	equ	0xFF5
  3385                           prodh	equ	0xFF4
  3386                           prodl	equ	0xFF3
  3387                           intcon	equ	0xFF2
  3388                           postinc0	equ	0xFEE
  3389                           wreg	equ	0xFE8
  3390                           indf1	equ	0xFE7
  3391                           postdec1	equ	0xFE5
  3392                           fsr1h	equ	0xFE2
  3393                           fsr1l	equ	0xFE1
  3394                           indf2	equ	0xFDF
  3395                           postinc2	equ	0xFDE
  3396                           postdec2	equ	0xFDD
  3397                           fsr2h	equ	0xFDA
  3398                           fsr2l	equ	0xFD9
  3399                           status	equ	0xFD8
  3400                           
  3401 ;; *************** function ___ftge *****************
  3402 ;; Defined at:
  3403 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  3404 ;; Parameters:    Size  Location     Type
  3405 ;;  ff1             3   29[COMRAM] float 
  3406 ;;  ff2             3   32[COMRAM] float 
  3407 ;; Auto vars:     Size  Location     Type
  3408 ;;		None
  3409 ;; Return value:  Size  Location     Type
  3410 ;;		None               void
  3411 ;; Registers used:
  3412 ;;		wreg, status,2, status,0
  3413 ;; Tracked objects:
  3414 ;;		On entry : 0/0
  3415 ;;		On exit  : 0/0
  3416 ;;		Unchanged: 0/0
  3417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3418 ;;      Params:         6       0       0       0       0       0       0
  3419 ;;      Locals:         0       0       0       0       0       0       0
  3420 ;;      Temps:          3       0       0       0       0       0       0
  3421 ;;      Totals:         9       0       0       0       0       0       0
  3422 ;;Total ram usage:        9 bytes
  3423 ;; Hardware stack levels used:    1
  3424 ;; Hardware stack levels required when called:    2
  3425 ;; This function calls:
  3426 ;;		Nothing
  3427 ;; This function is called by:
  3428 ;;		_main
  3429 ;;		_exp
  3430 ;;		_floor
  3431 ;; This function uses a non-reentrant model
  3432 ;;
  3433                           
  3434                           	psect	text6
  3435  0018F8                     __ptext6:
  3436                           	opt stack 0
  3437  0018F8                     ___ftge:
  3438                           	opt stack 26
  3439                           
  3440                           ;incstack = 0
  3441  0018F8  AE20               	btfss	___ftge@ff1+2,7,c
  3442  0018FA  D016               	goto	l673
  3443  0018FC  C01E  F024         	movff	___ftge@ff1,??___ftge
  3444  001900  C01F  F025         	movff	___ftge@ff1+1,??___ftge+1
  3445  001904  C020  F026         	movff	___ftge@ff1+2,??___ftge+2
  3446  001908  1E24               	comf	??___ftge,f,c
  3447  00190A  1E25               	comf	??___ftge+1,f,c
  3448  00190C  1E26               	comf	??___ftge+2,f,c
  3449  00190E  2A24               	incf	??___ftge,f,c
  3450  001910  0E00               	movlw	0
  3451  001912  2225               	addwfc	??___ftge+1,f,c
  3452  001914  2226               	addwfc	??___ftge+2,f,c
  3453  001916  0E00               	movlw	0
  3454  001918  2424               	addwf	??___ftge,w,c
  3455  00191A  6E1E               	movwf	___ftge@ff1,c
  3456  00191C  0E00               	movlw	0
  3457  00191E  2025               	addwfc	??___ftge+1,w,c
  3458  001920  6E1F               	movwf	___ftge@ff1+1,c
  3459  001922  0E80               	movlw	128
  3460  001924  2026               	addwfc	??___ftge+2,w,c
  3461  001926  6E20               	movwf	___ftge@ff1+2,c
  3462  001928                     l673:
  3463  001928  AE23               	btfss	___ftge@ff2+2,7,c
  3464  00192A  D016               	goto	l674
  3465  00192C  C021  F024         	movff	___ftge@ff2,??___ftge
  3466  001930  C022  F025         	movff	___ftge@ff2+1,??___ftge+1
  3467  001934  C023  F026         	movff	___ftge@ff2+2,??___ftge+2
  3468  001938  1E24               	comf	??___ftge,f,c
  3469  00193A  1E25               	comf	??___ftge+1,f,c
  3470  00193C  1E26               	comf	??___ftge+2,f,c
  3471  00193E  2A24               	incf	??___ftge,f,c
  3472  001940  0E00               	movlw	0
  3473  001942  2225               	addwfc	??___ftge+1,f,c
  3474  001944  2226               	addwfc	??___ftge+2,f,c
  3475  001946  0E00               	movlw	0
  3476  001948  2424               	addwf	??___ftge,w,c
  3477  00194A  6E21               	movwf	___ftge@ff2,c
  3478  00194C  0E00               	movlw	0
  3479  00194E  2025               	addwfc	??___ftge+1,w,c
  3480  001950  6E22               	movwf	___ftge@ff2+1,c
  3481  001952  0E80               	movlw	128
  3482  001954  2026               	addwfc	??___ftge+2,w,c
  3483  001956  6E23               	movwf	___ftge@ff2+2,c
  3484  001958                     l674:
  3485  001958  0E00               	movlw	0
  3486  00195A  1A1E               	xorwf	___ftge@ff1,f,c
  3487  00195C  0E00               	movlw	0
  3488  00195E  1A1F               	xorwf	___ftge@ff1+1,f,c
  3489  001960  0E80               	movlw	128
  3490  001962  1A20               	xorwf	___ftge@ff1+2,f,c
  3491  001964  0E00               	movlw	0
  3492  001966  1A21               	xorwf	___ftge@ff2,f,c
  3493  001968  0E00               	movlw	0
  3494  00196A  1A22               	xorwf	___ftge@ff2+1,f,c
  3495  00196C  0E80               	movlw	128
  3496  00196E  1A23               	xorwf	___ftge@ff2+2,f,c
  3497  001970  5021               	movf	___ftge@ff2,w,c
  3498  001972  5C1E               	subwf	___ftge@ff1,w,c
  3499  001974  5022               	movf	___ftge@ff2+1,w,c
  3500  001976  581F               	subwfb	___ftge@ff1+1,w,c
  3501  001978  5023               	movf	___ftge@ff2+2,w,c
  3502  00197A  5820               	subwfb	___ftge@ff1+2,w,c
  3503  00197C  B0D8               	btfsc	status,0,c
  3504  00197E  D002               	goto	l2048
  3505  001980  90D8               	bcf	status,0,c
  3506  001982  0012               	return	
  3507  001984                     l2048:
  3508  001984  80D8               	bsf	status,0,c
  3509  001986  0012               	return	
  3510  001988                     __end_of___ftge:
  3511                           	opt stack 0
  3512                           tblptru	equ	0xFF8
  3513                           tblptrh	equ	0xFF7
  3514                           tblptrl	equ	0xFF6
  3515                           tablat	equ	0xFF5
  3516                           prodh	equ	0xFF4
  3517                           prodl	equ	0xFF3
  3518                           intcon	equ	0xFF2
  3519                           postinc0	equ	0xFEE
  3520                           wreg	equ	0xFE8
  3521                           indf1	equ	0xFE7
  3522                           postdec1	equ	0xFE5
  3523                           fsr1h	equ	0xFE2
  3524                           fsr1l	equ	0xFE1
  3525                           indf2	equ	0xFDF
  3526                           postinc2	equ	0xFDE
  3527                           postdec2	equ	0xFDD
  3528                           fsr2h	equ	0xFDA
  3529                           fsr2l	equ	0xFD9
  3530                           status	equ	0xFD8
  3531                           
  3532 ;; *************** function ___altoft *****************
  3533 ;; Defined at:
  3534 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
  3535 ;; Parameters:    Size  Location     Type
  3536 ;;  c               4   67[COMRAM] long 
  3537 ;; Auto vars:     Size  Location     Type
  3538 ;;  sign            1   76[COMRAM] unsigned char 
  3539 ;;  exp             1   75[COMRAM] unsigned char 
  3540 ;; Return value:  Size  Location     Type
  3541 ;;                  3   67[COMRAM] float 
  3542 ;; Registers used:
  3543 ;;		wreg, status,2, status,0, cstack
  3544 ;; Tracked objects:
  3545 ;;		On entry : 0/0
  3546 ;;		On exit  : 0/0
  3547 ;;		Unchanged: 0/0
  3548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3549 ;;      Params:         4       0       0       0       0       0       0
  3550 ;;      Locals:         2       0       0       0       0       0       0
  3551 ;;      Temps:          4       0       0       0       0       0       0
  3552 ;;      Totals:        10       0       0       0       0       0       0
  3553 ;;Total ram usage:       10 bytes
  3554 ;; Hardware stack levels used:    1
  3555 ;; Hardware stack levels required when called:    3
  3556 ;; This function calls:
  3557 ;;		___ftpack
  3558 ;; This function is called by:
  3559 ;;		_floor
  3560 ;; This function uses a non-reentrant model
  3561 ;;
  3562                           
  3563                           	psect	text7
  3564  001A84                     __ptext7:
  3565                           	opt stack 0
  3566  001A84                     ___altoft:
  3567                           	opt stack 25
  3568                           
  3569                           ;incstack = 0
  3570  001A84  0E00               	movlw	0
  3571  001A86  6E4D               	movwf	___altoft@sign,c
  3572  001A88  0E8E               	movlw	142
  3573  001A8A  6E4C               	movwf	___altoft@exp,c
  3574  001A8C  AE47               	btfss	___altoft@c+3,7,c
  3575  001A8E  D011               	goto	l427
  3576  001A90  1E47               	comf	___altoft@c+3,f,c
  3577  001A92  1E46               	comf	___altoft@c+2,f,c
  3578  001A94  1E45               	comf	___altoft@c+1,f,c
  3579  001A96  6C44               	negf	___altoft@c,c
  3580  001A98  0E00               	movlw	0
  3581  001A9A  2245               	addwfc	___altoft@c+1,f,c
  3582  001A9C  2246               	addwfc	___altoft@c+2,f,c
  3583  001A9E  2247               	addwfc	___altoft@c+3,f,c
  3584  001AA0  0E01               	movlw	1
  3585  001AA2  6E4D               	movwf	___altoft@sign,c
  3586  001AA4  D006               	goto	l427
  3587  001AA6  90D8               	bcf	status,0,c
  3588  001AA8  3247               	rrcf	___altoft@c+3,f,c
  3589  001AAA  3246               	rrcf	___altoft@c+2,f,c
  3590  001AAC  3245               	rrcf	___altoft@c+1,f,c
  3591  001AAE  3244               	rrcf	___altoft@c,f,c
  3592  001AB0  2A4C               	incf	___altoft@exp,f,c
  3593  001AB2                     l427:
  3594  001AB2  0E00               	movlw	0
  3595  001AB4  1444               	andwf	___altoft@c,w,c
  3596  001AB6  6E48               	movwf	??___altoft& (0+255),c
  3597  001AB8  0E00               	movlw	0
  3598  001ABA  1445               	andwf	___altoft@c+1,w,c
  3599  001ABC  6E49               	movwf	(??___altoft+1)& (0+255),c
  3600  001ABE  0E00               	movlw	0
  3601  001AC0  1446               	andwf	___altoft@c+2,w,c
  3602  001AC2  6E4A               	movwf	(??___altoft+2)& (0+255),c
  3603  001AC4  0EFF               	movlw	255
  3604  001AC6  1447               	andwf	___altoft@c+3,w,c
  3605  001AC8  6E4B               	movwf	(??___altoft+3)& (0+255),c
  3606  001ACA  5048               	movf	??___altoft,w,c
  3607  001ACC  1049               	iorwf	??___altoft+1,w,c
  3608  001ACE  104A               	iorwf	??___altoft+2,w,c
  3609  001AD0  104B               	iorwf	??___altoft+3,w,c
  3610  001AD2  A4D8               	btfss	status,2,c
  3611  001AD4  D7E8               	goto	l428
  3612  001AD6  C044  F01E         	movff	___altoft@c,___ftpack@arg
  3613  001ADA  C045  F01F         	movff	___altoft@c+1,___ftpack@arg+1
  3614  001ADE  C046  F020         	movff	___altoft@c+2,___ftpack@arg+2
  3615  001AE2  C04C  F021         	movff	___altoft@exp,___ftpack@exp
  3616  001AE6  C04D  F022         	movff	___altoft@sign,___ftpack@sign
  3617  001AEA  ECDA  F00B         	call	___ftpack	;wreg free
  3618  001AEE  C01E  F044         	movff	?___ftpack,?___altoft
  3619  001AF2  C01F  F045         	movff	?___ftpack+1,?___altoft+1
  3620  001AF6  C020  F046         	movff	?___ftpack+2,?___altoft+2
  3621  001AFA  0012               	return	
  3622  001AFC                     __end_of___altoft:
  3623                           	opt stack 0
  3624                           tblptru	equ	0xFF8
  3625                           tblptrh	equ	0xFF7
  3626                           tblptrl	equ	0xFF6
  3627                           tablat	equ	0xFF5
  3628                           prodh	equ	0xFF4
  3629                           prodl	equ	0xFF3
  3630                           intcon	equ	0xFF2
  3631                           postinc0	equ	0xFEE
  3632                           wreg	equ	0xFE8
  3633                           indf1	equ	0xFE7
  3634                           postdec1	equ	0xFE5
  3635                           fsr1h	equ	0xFE2
  3636                           fsr1l	equ	0xFE1
  3637                           indf2	equ	0xFDF
  3638                           postinc2	equ	0xFDE
  3639                           postdec2	equ	0xFDD
  3640                           fsr2h	equ	0xFDA
  3641                           fsr2l	equ	0xFD9
  3642                           status	equ	0xFD8
  3643                           
  3644 ;; *************** function _eval_poly *****************
  3645 ;; Defined at:
  3646 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
  3647 ;; Parameters:    Size  Location     Type
  3648 ;;  x               3   12[BANK0 ] float 
  3649 ;;  d               2   15[BANK0 ] PTR const 
  3650 ;;		 -> exp@coeff(30), 
  3651 ;;  n               2   17[BANK0 ] int 
  3652 ;; Auto vars:     Size  Location     Type
  3653 ;;  res             3   21[BANK0 ] int 
  3654 ;; Return value:  Size  Location     Type
  3655 ;;                  3   12[BANK0 ] int 
  3656 ;; Registers used:
  3657 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3658 ;; Tracked objects:
  3659 ;;		On entry : 0/0
  3660 ;;		On exit  : 0/0
  3661 ;;		Unchanged: 0/0
  3662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3663 ;;      Params:         0       7       0       0       0       0       0
  3664 ;;      Locals:         0       3       0       0       0       0       0
  3665 ;;      Temps:          0       2       0       0       0       0       0
  3666 ;;      Totals:         0      12       0       0       0       0       0
  3667 ;;Total ram usage:       12 bytes
  3668 ;; Hardware stack levels used:    1
  3669 ;; Hardware stack levels required when called:    4
  3670 ;; This function calls:
  3671 ;;		___ftadd
  3672 ;;		___ftmul
  3673 ;;		___wmul
  3674 ;; This function is called by:
  3675 ;;		_exp
  3676 ;; This function uses a non-reentrant model
  3677 ;;
  3678                           
  3679                           	psect	text8
  3680  001614                     __ptext8:
  3681                           	opt stack 0
  3682  001614                     _eval_poly:
  3683                           	opt stack 25
  3684                           
  3685                           ;incstack = 0
  3686  001614  C091  F01E         	movff	eval_poly@n,___wmul@multiplier
  3687  001618  C092  F01F         	movff	eval_poly@n+1,___wmul@multiplier+1
  3688  00161C  0E00               	movlw	0
  3689  00161E  6E21               	movwf	___wmul@multiplicand+1,c
  3690  001620  0E03               	movlw	3
  3691  001622  6E20               	movwf	___wmul@multiplicand,c
  3692  001624  EC6A  F00E         	call	___wmul	;wreg free
  3693  001628  C08F  F093         	movff	eval_poly@d,??_eval_poly
  3694  00162C  C090  F094         	movff	eval_poly@d+1,??_eval_poly+1
  3695  001630  501E               	movf	?___wmul,w,c
  3696  001632  0100               	movlb	0	; () banked
  3697  001634  2793               	addwf	??_eval_poly& (0+255),f,b
  3698  001636  501F               	movf	?___wmul+1,w,c
  3699  001638  2394               	addwfc	(??_eval_poly+1)& (0+255),f,b
  3700  00163A  C093  FFF6         	movff	??_eval_poly,tblptrl
  3701  00163E  C094  FFF7         	movff	??_eval_poly+1,tblptrh
  3702  001642                     	if	0	;tblptru may be non-zero
  3703  001642                     	endif
  3704  001642                     	if	0	;tblptru may be non-zero
  3705  001642                     	endif
  3706  001642  0009               	tblrd		*+
  3707  001644  CFF5 F095          	movff	tablat,eval_poly@res
  3708  001648  0009               	tblrd		*+
  3709  00164A  CFF5 F096          	movff	tablat,eval_poly@res+1
  3710  00164E  000A               	tblrd		*-
  3711  001650  CFF5 F097          	movff	tablat,eval_poly@res+2
  3712  001654  D040               	goto	l955
  3713  001656                     
  3714                           ; BSR set to: 0
  3715                           
  3716                           ; BSR set to: 0
  3717  001656  C095  F04E         	movff	eval_poly@res,___ftmul@f2
  3718  00165A  C096  F04F         	movff	eval_poly@res+1,___ftmul@f2+1
  3719  00165E  C097  F050         	movff	eval_poly@res+2,___ftmul@f2+2
  3720  001662  C08C  F04B         	movff	eval_poly@x,___ftmul@f1
  3721  001666  C08D  F04C         	movff	eval_poly@x+1,___ftmul@f1+1
  3722  00166A  C08E  F04D         	movff	eval_poly@x+2,___ftmul@f1+2
  3723  00166E  ECAC  F009         	call	___ftmul	;wreg free
  3724  001672  C04B  F080         	movff	?___ftmul,___ftadd@f1
  3725  001676  C04C  F081         	movff	?___ftmul+1,___ftadd@f1+1
  3726  00167A  C04D  F082         	movff	?___ftmul+2,___ftadd@f1+2
  3727  00167E  0E00               	movlw	0
  3728  001680  6E21               	movwf	___wmul@multiplicand+1,c
  3729  001682  0E03               	movlw	3
  3730  001684  6E20               	movwf	___wmul@multiplicand,c
  3731  001686  0100               	movlb	0	; () banked
  3732  001688  0791               	decf	eval_poly@n& (0+255),f,b
  3733  00168A  A0D8               	btfss	status,0,c
  3734  00168C  0792               	decf	(eval_poly@n+1)& (0+255),f,b
  3735  00168E  C091  F01E         	movff	eval_poly@n,___wmul@multiplier
  3736  001692  C092  F01F         	movff	eval_poly@n+1,___wmul@multiplier+1
  3737  001696  EC6A  F00E         	call	___wmul	;wreg free
  3738  00169A  C08F  F093         	movff	eval_poly@d,??_eval_poly
  3739  00169E  C090  F094         	movff	eval_poly@d+1,??_eval_poly+1
  3740  0016A2  501E               	movf	?___wmul,w,c
  3741  0016A4  0100               	movlb	0	; () banked
  3742  0016A6  2793               	addwf	??_eval_poly& (0+255),f,b
  3743  0016A8  501F               	movf	?___wmul+1,w,c
  3744  0016AA  2394               	addwfc	(??_eval_poly+1)& (0+255),f,b
  3745  0016AC  C093  FFF6         	movff	??_eval_poly,tblptrl
  3746  0016B0  C094  FFF7         	movff	??_eval_poly+1,tblptrh
  3747  0016B4                     	if	0	;tblptru may be non-zero
  3748  0016B4                     	endif
  3749  0016B4                     	if	0	;tblptru may be non-zero
  3750  0016B4                     	endif
  3751  0016B4  0009               	tblrd		*+
  3752  0016B6  CFF5 F083          	movff	tablat,___ftadd@f2
  3753  0016BA  0009               	tblrd		*+
  3754  0016BC  CFF5 F084          	movff	tablat,___ftadd@f2+1
  3755  0016C0  000A               	tblrd		*-
  3756  0016C2  CFF5 F085          	movff	tablat,___ftadd@f2+2
  3757  0016C6  EC5B  F008         	call	___ftadd	;wreg free
  3758  0016CA  C080  F095         	movff	?___ftadd,eval_poly@res
  3759  0016CE  C081  F096         	movff	?___ftadd+1,eval_poly@res+1
  3760  0016D2  C082  F097         	movff	?___ftadd+2,eval_poly@res+2
  3761  0016D6                     l955:
  3762  0016D6  0100               	movlb	0	; () banked
  3763  0016D8  5191               	movf	eval_poly@n& (0+255),w,b
  3764  0016DA  1192               	iorwf	(eval_poly@n+1)& (0+255),w,b
  3765  0016DC  A4D8               	btfss	status,2,c
  3766  0016DE  D7BB               	goto	l956
  3767                           
  3768                           ; BSR set to: 0
  3769  0016E0  C095  F08C         	movff	eval_poly@res,?_eval_poly
  3770  0016E4  C096  F08D         	movff	eval_poly@res+1,?_eval_poly+1
  3771  0016E8  C097  F08E         	movff	eval_poly@res+2,?_eval_poly+2
  3772                           
  3773                           ; BSR set to: 0
  3774  0016EC  0012               	return		;funcret
  3775  0016EE                     __end_of_eval_poly:
  3776                           	opt stack 0
  3777                           tblptru	equ	0xFF8
  3778                           tblptrh	equ	0xFF7
  3779                           tblptrl	equ	0xFF6
  3780                           tablat	equ	0xFF5
  3781                           prodh	equ	0xFF4
  3782                           prodl	equ	0xFF3
  3783                           intcon	equ	0xFF2
  3784                           postinc0	equ	0xFEE
  3785                           wreg	equ	0xFE8
  3786                           indf1	equ	0xFE7
  3787                           postdec1	equ	0xFE5
  3788                           fsr1h	equ	0xFE2
  3789                           fsr1l	equ	0xFE1
  3790                           indf2	equ	0xFDF
  3791                           postinc2	equ	0xFDE
  3792                           postdec2	equ	0xFDD
  3793                           fsr2h	equ	0xFDA
  3794                           fsr2l	equ	0xFD9
  3795                           status	equ	0xFD8
  3796                           
  3797 ;; *************** function ___wmul *****************
  3798 ;; Defined at:
  3799 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3800 ;; Parameters:    Size  Location     Type
  3801 ;;  multiplier      2   29[COMRAM] unsigned int 
  3802 ;;  multiplicand    2   31[COMRAM] unsigned int 
  3803 ;; Auto vars:     Size  Location     Type
  3804 ;;  product         2   33[COMRAM] unsigned int 
  3805 ;; Return value:  Size  Location     Type
  3806 ;;                  2   29[COMRAM] unsigned int 
  3807 ;; Registers used:
  3808 ;;		wreg, status,2, status,0, prodl, prodh
  3809 ;; Tracked objects:
  3810 ;;		On entry : 0/0
  3811 ;;		On exit  : 0/0
  3812 ;;		Unchanged: 0/0
  3813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3814 ;;      Params:         4       0       0       0       0       0       0
  3815 ;;      Locals:         2       0       0       0       0       0       0
  3816 ;;      Temps:          0       0       0       0       0       0       0
  3817 ;;      Totals:         6       0       0       0       0       0       0
  3818 ;;Total ram usage:        6 bytes
  3819 ;; Hardware stack levels used:    1
  3820 ;; Hardware stack levels required when called:    2
  3821 ;; This function calls:
  3822 ;;		Nothing
  3823 ;; This function is called by:
  3824 ;;		_eval_poly
  3825 ;; This function uses a non-reentrant model
  3826 ;;
  3827                           
  3828                           	psect	text9
  3829  001CD4                     __ptext9:
  3830                           	opt stack 0
  3831  001CD4                     ___wmul:
  3832                           	opt stack 26
  3833                           
  3834                           ; BSR set to: 0
  3835                           ;incstack = 0
  3836  001CD4  501E               	movf	___wmul@multiplier,w,c
  3837  001CD6  0220               	mulwf	___wmul@multiplicand,c
  3838  001CD8  CFF3 F022          	movff	prodl,___wmul@product
  3839  001CDC  CFF4 F023          	movff	prodh,___wmul@product+1
  3840  001CE0  501E               	movf	___wmul@multiplier,w,c
  3841  001CE2  0221               	mulwf	___wmul@multiplicand+1,c
  3842  001CE4  50F3               	movf	prodl,w,c
  3843  001CE6  2623               	addwf	___wmul@product+1,f,c
  3844  001CE8  501F               	movf	___wmul@multiplier+1,w,c
  3845  001CEA  0220               	mulwf	___wmul@multiplicand,c
  3846  001CEC  50F3               	movf	prodl,w,c
  3847  001CEE  2623               	addwf	___wmul@product+1,f,c
  3848  001CF0  C022  F01E         	movff	___wmul@product,?___wmul
  3849  001CF4  C023  F01F         	movff	___wmul@product+1,?___wmul+1
  3850  001CF8  0012               	return	
  3851  001CFA                     __end_of___wmul:
  3852                           	opt stack 0
  3853                           tblptru	equ	0xFF8
  3854                           tblptrh	equ	0xFF7
  3855                           tblptrl	equ	0xFF6
  3856                           tablat	equ	0xFF5
  3857                           prodh	equ	0xFF4
  3858                           prodl	equ	0xFF3
  3859                           intcon	equ	0xFF2
  3860                           postinc0	equ	0xFEE
  3861                           wreg	equ	0xFE8
  3862                           indf1	equ	0xFE7
  3863                           postdec1	equ	0xFE5
  3864                           fsr1h	equ	0xFE2
  3865                           fsr1l	equ	0xFE1
  3866                           indf2	equ	0xFDF
  3867                           postinc2	equ	0xFDE
  3868                           postdec2	equ	0xFDD
  3869                           fsr2h	equ	0xFDA
  3870                           fsr2l	equ	0xFD9
  3871                           status	equ	0xFD8
  3872                           
  3873 ;; *************** function ___ftmul *****************
  3874 ;; Defined at:
  3875 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  3876 ;; Parameters:    Size  Location     Type
  3877 ;;  f1              3   74[COMRAM] float 
  3878 ;;  f2              3   77[COMRAM] float 
  3879 ;; Auto vars:     Size  Location     Type
  3880 ;;  f3_as_produc    3   84[COMRAM] unsigned um
  3881 ;;  sign            1   88[COMRAM] unsigned char 
  3882 ;;  cntr            1   87[COMRAM] unsigned char 
  3883 ;;  exp             1   83[COMRAM] unsigned char 
  3884 ;; Return value:  Size  Location     Type
  3885 ;;                  3   74[COMRAM] float 
  3886 ;; Registers used:
  3887 ;;		wreg, status,2, status,0, cstack
  3888 ;; Tracked objects:
  3889 ;;		On entry : 0/0
  3890 ;;		On exit  : 0/0
  3891 ;;		Unchanged: 0/0
  3892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3893 ;;      Params:         6       0       0       0       0       0       0
  3894 ;;      Locals:         6       0       0       0       0       0       0
  3895 ;;      Temps:          3       0       0       0       0       0       0
  3896 ;;      Totals:        15       0       0       0       0       0       0
  3897 ;;Total ram usage:       15 bytes
  3898 ;; Hardware stack levels used:    1
  3899 ;; Hardware stack levels required when called:    3
  3900 ;; This function calls:
  3901 ;;		___ftpack
  3902 ;; This function is called by:
  3903 ;;		_main
  3904 ;;		_exp
  3905 ;;		_eval_poly
  3906 ;; This function uses a non-reentrant model
  3907 ;;
  3908                           
  3909                           	psect	text10
  3910  001358                     __ptext10:
  3911                           	opt stack 0
  3912  001358                     ___ftmul:
  3913                           	opt stack 25
  3914                           
  3915                           ;incstack = 0
  3916  001358  C04D  F051         	movff	___ftmul@f1+2,??___ftmul
  3917  00135C  6A52               	clrf	(??___ftmul+1)& (0+255),c
  3918  00135E  6A53               	clrf	(??___ftmul+2)& (0+255),c
  3919  001360  344C               	rlcf	___ftmul@f1+1,w,c
  3920  001362  3651               	rlcf	??___ftmul& (0+255),f,c
  3921  001364  E301               	bnc	u1661
  3922  001366  8052               	bsf	(??___ftmul+1)& (0+255),0,c
  3923  001368                     u1661:
  3924  001368  5051               	movf	??___ftmul,w,c
  3925  00136A  6E54               	movwf	___ftmul@exp,c
  3926  00136C  5054               	movf	___ftmul@exp,w,c
  3927  00136E  A4D8               	btfss	status,2,c
  3928  001370  D007               	goto	l680
  3929  001372  0E00               	movlw	0
  3930  001374  6E4B               	movwf	?___ftmul,c
  3931  001376  0E00               	movlw	0
  3932  001378  6E4C               	movwf	?___ftmul+1,c
  3933  00137A  0E00               	movlw	0
  3934  00137C  6E4D               	movwf	?___ftmul+2,c
  3935  00137E  0012               	return	
  3936  001380                     l680:
  3937  001380  C050  F051         	movff	___ftmul@f2+2,??___ftmul
  3938  001384  6A52               	clrf	(??___ftmul+1)& (0+255),c
  3939  001386  6A53               	clrf	(??___ftmul+2)& (0+255),c
  3940  001388  344F               	rlcf	___ftmul@f2+1,w,c
  3941  00138A  3651               	rlcf	??___ftmul& (0+255),f,c
  3942  00138C  E301               	bnc	u1681
  3943  00138E  8052               	bsf	(??___ftmul+1)& (0+255),0,c
  3944  001390                     u1681:
  3945  001390  5051               	movf	??___ftmul,w,c
  3946  001392  6E59               	movwf	___ftmul@sign,c
  3947  001394  5059               	movf	___ftmul@sign,w,c
  3948  001396  A4D8               	btfss	status,2,c
  3949  001398  D007               	goto	l682
  3950  00139A  0E00               	movlw	0
  3951  00139C  6E4B               	movwf	?___ftmul,c
  3952  00139E  0E00               	movlw	0
  3953  0013A0  6E4C               	movwf	?___ftmul+1,c
  3954  0013A2  0E00               	movlw	0
  3955  0013A4  6E4D               	movwf	?___ftmul+2,c
  3956  0013A6  0012               	return	
  3957  0013A8                     l682:
  3958  0013A8  5059               	movf	___ftmul@sign,w,c
  3959  0013AA  0F7B               	addlw	123
  3960  0013AC  2654               	addwf	___ftmul@exp,f,c
  3961  0013AE  C04D  F059         	movff	___ftmul@f1+2,___ftmul@sign
  3962  0013B2  5050               	movf	___ftmul@f2+2,w,c
  3963  0013B4  1A59               	xorwf	___ftmul@sign,f,c
  3964  0013B6  0E80               	movlw	128
  3965  0013B8  1659               	andwf	___ftmul@sign,f,c
  3966  0013BA  8E4C               	bsf	___ftmul@f1+1,7,c
  3967  0013BC  8E4F               	bsf	___ftmul@f2+1,7,c
  3968  0013BE  0EFF               	movlw	255
  3969  0013C0  164E               	andwf	___ftmul@f2,f,c
  3970  0013C2  0EFF               	movlw	255
  3971  0013C4  164F               	andwf	___ftmul@f2+1,f,c
  3972  0013C6  0E00               	movlw	0
  3973  0013C8  1650               	andwf	___ftmul@f2+2,f,c
  3974  0013CA  0E00               	movlw	0
  3975  0013CC  6E55               	movwf	___ftmul@f3_as_product,c
  3976  0013CE  0E00               	movlw	0
  3977  0013D0  6E56               	movwf	___ftmul@f3_as_product+1,c
  3978  0013D2  0E00               	movlw	0
  3979  0013D4  6E57               	movwf	___ftmul@f3_as_product+2,c
  3980  0013D6  0E07               	movlw	7
  3981  0013D8  6E58               	movwf	___ftmul@cntr,c
  3982  0013DA  A04B               	btfss	___ftmul@f1,0,c
  3983  0013DC  D006               	goto	l684
  3984  0013DE  504E               	movf	___ftmul@f2,w,c
  3985  0013E0  2655               	addwf	___ftmul@f3_as_product,f,c
  3986  0013E2  504F               	movf	___ftmul@f2+1,w,c
  3987  0013E4  2256               	addwfc	___ftmul@f3_as_product+1,f,c
  3988  0013E6  5050               	movf	___ftmul@f2+2,w,c
  3989  0013E8  2257               	addwfc	___ftmul@f3_as_product+2,f,c
  3990  0013EA                     l684:
  3991  0013EA  90D8               	bcf	status,0,c
  3992  0013EC  324D               	rrcf	___ftmul@f1+2,f,c
  3993  0013EE  324C               	rrcf	___ftmul@f1+1,f,c
  3994  0013F0  324B               	rrcf	___ftmul@f1,f,c
  3995  0013F2  90D8               	bcf	status,0,c
  3996  0013F4  364E               	rlcf	___ftmul@f2,f,c
  3997  0013F6  364F               	rlcf	___ftmul@f2+1,f,c
  3998  0013F8  3650               	rlcf	___ftmul@f2+2,f,c
  3999  0013FA  2E58               	decfsz	___ftmul@cntr,f,c
  4000  0013FC  D7EE               	goto	l683
  4001  0013FE  0E09               	movlw	9
  4002  001400  6E58               	movwf	___ftmul@cntr,c
  4003  001402  A04B               	btfss	___ftmul@f1,0,c
  4004  001404  D006               	goto	l687
  4005  001406  504E               	movf	___ftmul@f2,w,c
  4006  001408  2655               	addwf	___ftmul@f3_as_product,f,c
  4007  00140A  504F               	movf	___ftmul@f2+1,w,c
  4008  00140C  2256               	addwfc	___ftmul@f3_as_product+1,f,c
  4009  00140E  5050               	movf	___ftmul@f2+2,w,c
  4010  001410  2257               	addwfc	___ftmul@f3_as_product+2,f,c
  4011  001412                     l687:
  4012  001412  90D8               	bcf	status,0,c
  4013  001414  324D               	rrcf	___ftmul@f1+2,f,c
  4014  001416  324C               	rrcf	___ftmul@f1+1,f,c
  4015  001418  324B               	rrcf	___ftmul@f1,f,c
  4016  00141A  90D8               	bcf	status,0,c
  4017  00141C  3257               	rrcf	___ftmul@f3_as_product+2,f,c
  4018  00141E  3256               	rrcf	___ftmul@f3_as_product+1,f,c
  4019  001420  3255               	rrcf	___ftmul@f3_as_product,f,c
  4020  001422  2E58               	decfsz	___ftmul@cntr,f,c
  4021  001424  D7EE               	goto	l686
  4022  001426  C055  F01E         	movff	___ftmul@f3_as_product,___ftpack@arg
  4023  00142A  C056  F01F         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4024  00142E  C057  F020         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4025  001432  C054  F021         	movff	___ftmul@exp,___ftpack@exp
  4026  001436  C059  F022         	movff	___ftmul@sign,___ftpack@sign
  4027  00143A  ECDA  F00B         	call	___ftpack	;wreg free
  4028  00143E  C01E  F04B         	movff	?___ftpack,?___ftmul
  4029  001442  C01F  F04C         	movff	?___ftpack+1,?___ftmul+1
  4030  001446  C020  F04D         	movff	?___ftpack+2,?___ftmul+2
  4031  00144A  0012               	return	
  4032  00144C                     __end_of___ftmul:
  4033                           	opt stack 0
  4034                           tblptru	equ	0xFF8
  4035                           tblptrh	equ	0xFF7
  4036                           tblptrl	equ	0xFF6
  4037                           tablat	equ	0xFF5
  4038                           prodh	equ	0xFF4
  4039                           prodl	equ	0xFF3
  4040                           intcon	equ	0xFF2
  4041                           postinc0	equ	0xFEE
  4042                           wreg	equ	0xFE8
  4043                           indf1	equ	0xFE7
  4044                           postdec1	equ	0xFE5
  4045                           fsr1h	equ	0xFE2
  4046                           fsr1l	equ	0xFE1
  4047                           indf2	equ	0xFDF
  4048                           postinc2	equ	0xFDE
  4049                           postdec2	equ	0xFDD
  4050                           fsr2h	equ	0xFDA
  4051                           fsr2l	equ	0xFD9
  4052                           status	equ	0xFD8
  4053                           
  4054 ;; *************** function ___ftsub *****************
  4055 ;; Defined at:
  4056 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  4057 ;; Parameters:    Size  Location     Type
  4058 ;;  f1              3   12[BANK0 ] float 
  4059 ;;  f2              3   15[BANK0 ] float 
  4060 ;; Auto vars:     Size  Location     Type
  4061 ;;		None
  4062 ;; Return value:  Size  Location     Type
  4063 ;;                  3   12[BANK0 ] float 
  4064 ;; Registers used:
  4065 ;;		wreg, status,2, status,0, cstack
  4066 ;; Tracked objects:
  4067 ;;		On entry : 0/0
  4068 ;;		On exit  : 0/0
  4069 ;;		Unchanged: 0/0
  4070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4071 ;;      Params:         0       6       0       0       0       0       0
  4072 ;;      Locals:         0       0       0       0       0       0       0
  4073 ;;      Temps:          0       0       0       0       0       0       0
  4074 ;;      Totals:         0       6       0       0       0       0       0
  4075 ;;Total ram usage:        6 bytes
  4076 ;; Hardware stack levels used:    1
  4077 ;; Hardware stack levels required when called:    4
  4078 ;; This function calls:
  4079 ;;		___ftadd
  4080 ;; This function is called by:
  4081 ;;		_exp
  4082 ;; This function uses a non-reentrant model
  4083 ;;
  4084                           
  4085                           	psect	text11
  4086  001B48                     __ptext11:
  4087                           	opt stack 0
  4088  001B48                     ___ftsub:
  4089                           	opt stack 25
  4090                           
  4091                           ;incstack = 0
  4092  001B48  0100               	movlb	0	; () banked
  4093  001B4A  518F               	movf	___ftsub@f2& (0+255),w,b
  4094  001B4C  1190               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  4095  001B4E  1191               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  4096  001B50  B4D8               	btfsc	status,2,c
  4097  001B52  D006               	goto	l697
  4098                           
  4099                           ; BSR set to: 0
  4100  001B54  0E00               	movlw	0
  4101  001B56  1B8F               	xorwf	___ftsub@f2& (0+255),f,b
  4102  001B58  0E00               	movlw	0
  4103  001B5A  1B90               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  4104  001B5C  0E80               	movlw	128
  4105  001B5E  1B91               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  4106  001B60                     l697:
  4107                           
  4108                           ; BSR set to: 0
  4109                           
  4110                           ; BSR set to: 0
  4111  001B60  C08C  F080         	movff	___ftsub@f1,___ftadd@f1
  4112  001B64  C08D  F081         	movff	___ftsub@f1+1,___ftadd@f1+1
  4113  001B68  C08E  F082         	movff	___ftsub@f1+2,___ftadd@f1+2
  4114  001B6C  C08F  F083         	movff	___ftsub@f2,___ftadd@f2
  4115  001B70  C090  F084         	movff	___ftsub@f2+1,___ftadd@f2+1
  4116  001B74  C091  F085         	movff	___ftsub@f2+2,___ftadd@f2+2
  4117  001B78  EC5B  F008         	call	___ftadd	;wreg free
  4118  001B7C  C080  F08C         	movff	?___ftadd,?___ftsub
  4119  001B80  C081  F08D         	movff	?___ftadd+1,?___ftsub+1
  4120  001B84  C082  F08E         	movff	?___ftadd+2,?___ftsub+2
  4121  001B88  0012               	return	
  4122  001B8A                     __end_of___ftsub:
  4123                           	opt stack 0
  4124                           tblptru	equ	0xFF8
  4125                           tblptrh	equ	0xFF7
  4126                           tblptrl	equ	0xFF6
  4127                           tablat	equ	0xFF5
  4128                           prodh	equ	0xFF4
  4129                           prodl	equ	0xFF3
  4130                           intcon	equ	0xFF2
  4131                           postinc0	equ	0xFEE
  4132                           wreg	equ	0xFE8
  4133                           indf1	equ	0xFE7
  4134                           postdec1	equ	0xFE5
  4135                           fsr1h	equ	0xFE2
  4136                           fsr1l	equ	0xFE1
  4137                           indf2	equ	0xFDF
  4138                           postinc2	equ	0xFDE
  4139                           postdec2	equ	0xFDD
  4140                           fsr2h	equ	0xFDA
  4141                           fsr2l	equ	0xFD9
  4142                           status	equ	0xFD8
  4143                           
  4144 ;; *************** function ___ftadd *****************
  4145 ;; Defined at:
  4146 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  4147 ;; Parameters:    Size  Location     Type
  4148 ;;  f1              3    0[BANK0 ] float 
  4149 ;;  f2              3    3[BANK0 ] float 
  4150 ;; Auto vars:     Size  Location     Type
  4151 ;;  exp1            1   11[BANK0 ] unsigned char 
  4152 ;;  exp2            1   10[BANK0 ] unsigned char 
  4153 ;;  sign            1    9[BANK0 ] unsigned char 
  4154 ;; Return value:  Size  Location     Type
  4155 ;;                  3    0[BANK0 ] float 
  4156 ;; Registers used:
  4157 ;;		wreg, status,2, status,0, cstack
  4158 ;; Tracked objects:
  4159 ;;		On entry : 0/0
  4160 ;;		On exit  : 0/0
  4161 ;;		Unchanged: 0/0
  4162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4163 ;;      Params:         0       6       0       0       0       0       0
  4164 ;;      Locals:         0       3       0       0       0       0       0
  4165 ;;      Temps:          0       3       0       0       0       0       0
  4166 ;;      Totals:         0      12       0       0       0       0       0
  4167 ;;Total ram usage:       12 bytes
  4168 ;; Hardware stack levels used:    1
  4169 ;; Hardware stack levels required when called:    3
  4170 ;; This function calls:
  4171 ;;		___ftpack
  4172 ;; This function is called by:
  4173 ;;		_main
  4174 ;;		_floor
  4175 ;;		___ftsub
  4176 ;;		_eval_poly
  4177 ;; This function uses a non-reentrant model
  4178 ;;
  4179                           
  4180                           	psect	text12
  4181  0010B6                     __ptext12:
  4182                           	opt stack 0
  4183  0010B6                     ___ftadd:
  4184                           	opt stack 25
  4185                           
  4186                           ;incstack = 0
  4187  0010B6  C082  F086         	movff	___ftadd@f1+2,??___ftadd
  4188  0010BA  0100               	movlb	0	; () banked
  4189  0010BC  6B87               	clrf	(??___ftadd+1)& (0+255),b
  4190  0010BE  6B88               	clrf	(??___ftadd+2)& (0+255),b
  4191  0010C0  3581               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  4192  0010C2  3786               	rlcf	??___ftadd& (0+255),f,b
  4193  0010C4  E301               	bnc	u2691
  4194  0010C6  8187               	bsf	(??___ftadd+1)& (0+255),0,b
  4195  0010C8                     u2691:
  4196  0010C8  5186               	movf	??___ftadd& (0+255),w,b
  4197  0010CA  6F8B               	movwf	___ftadd@exp1& (0+255),b
  4198  0010CC  C085  F086         	movff	___ftadd@f2+2,??___ftadd
  4199  0010D0  6B87               	clrf	(??___ftadd+1)& (0+255),b
  4200  0010D2  6B88               	clrf	(??___ftadd+2)& (0+255),b
  4201  0010D4  3584               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  4202  0010D6  3786               	rlcf	??___ftadd& (0+255),f,b
  4203  0010D8  E301               	bnc	u2701
  4204  0010DA  8187               	bsf	(??___ftadd+1)& (0+255),0,b
  4205  0010DC                     u2701:
  4206  0010DC  5186               	movf	??___ftadd& (0+255),w,b
  4207  0010DE  6F8A               	movwf	___ftadd@exp2& (0+255),b
  4208                           
  4209                           ; BSR set to: 0
  4210  0010E0  518B               	movf	___ftadd@exp1& (0+255),w,b
  4211  0010E2  B4D8               	btfsc	status,2,c
  4212  0010E4  D00B               	goto	u2730
  4213                           
  4214                           ; BSR set to: 0
  4215  0010E6  518A               	movf	___ftadd@exp2& (0+255),w,b
  4216  0010E8  5D8B               	subwf	___ftadd@exp1& (0+255),w,b
  4217  0010EA  B0D8               	btfsc	status,0,c
  4218  0010EC  D00E               	goto	l632
  4219                           
  4220                           ; BSR set to: 0
  4221  0010EE  518B               	movf	___ftadd@exp1& (0+255),w,b
  4222  0010F0  0800               	sublw	0
  4223  0010F2  258A               	addwf	___ftadd@exp2& (0+255),w,b
  4224  0010F4  6F86               	movwf	??___ftadd& (0+255),b
  4225  0010F6  0E18               	movlw	24
  4226  0010F8  6586               	cpfsgt	??___ftadd& (0+255),b
  4227  0010FA  D007               	goto	l632
  4228  0010FC                     u2730:
  4229                           
  4230                           ; BSR set to: 0
  4231  0010FC  C083  F080         	movff	___ftadd@f2,?___ftadd
  4232  001100  C084  F081         	movff	___ftadd@f2+1,?___ftadd+1
  4233  001104  C085  F082         	movff	___ftadd@f2+2,?___ftadd+2
  4234  001108  0012               	return	
  4235  00110A                     l632:
  4236                           
  4237                           ; BSR set to: 0
  4238                           
  4239                           ; BSR set to: 0
  4240  00110A  518A               	movf	___ftadd@exp2& (0+255),w,b
  4241  00110C  B4D8               	btfsc	status,2,c
  4242  00110E  D00B               	goto	u2760
  4243                           
  4244                           ; BSR set to: 0
  4245  001110  518B               	movf	___ftadd@exp1& (0+255),w,b
  4246  001112  5D8A               	subwf	___ftadd@exp2& (0+255),w,b
  4247  001114  B0D8               	btfsc	status,0,c
  4248  001116  D00E               	goto	l636
  4249                           
  4250                           ; BSR set to: 0
  4251  001118  518A               	movf	___ftadd@exp2& (0+255),w,b
  4252  00111A  0800               	sublw	0
  4253  00111C  258B               	addwf	___ftadd@exp1& (0+255),w,b
  4254  00111E  6F86               	movwf	??___ftadd& (0+255),b
  4255  001120  0E18               	movlw	24
  4256  001122  6586               	cpfsgt	??___ftadd& (0+255),b
  4257  001124  D007               	goto	l636
  4258  001126                     u2760:
  4259                           
  4260                           ; BSR set to: 0
  4261  001126  C080  F080         	movff	___ftadd@f1,?___ftadd
  4262  00112A  C081  F081         	movff	___ftadd@f1+1,?___ftadd+1
  4263  00112E  C082  F082         	movff	___ftadd@f1+2,?___ftadd+2
  4264  001132  0012               	return	
  4265  001134                     l636:
  4266                           
  4267                           ; BSR set to: 0
  4268                           
  4269                           ; BSR set to: 0
  4270  001134  0E06               	movlw	6
  4271  001136  6F89               	movwf	___ftadd@sign& (0+255),b
  4272                           
  4273                           ; BSR set to: 0
  4274  001138  BF82               	btfsc	(___ftadd@f1+2)& (0+255),7,b
  4275                           
  4276                           ; BSR set to: 0
  4277  00113A  8F89               	bsf	___ftadd@sign& (0+255),7,b
  4278                           
  4279                           ; BSR set to: 0
  4280                           
  4281                           ; BSR set to: 0
  4282  00113C  BF85               	btfsc	(___ftadd@f2+2)& (0+255),7,b
  4283                           
  4284                           ; BSR set to: 0
  4285  00113E  8D89               	bsf	___ftadd@sign& (0+255),6,b
  4286                           
  4287                           ; BSR set to: 0
  4288  001140  8F81               	bsf	(___ftadd@f1+1)& (0+255),7,b
  4289                           
  4290                           ; BSR set to: 0
  4291  001142  0EFF               	movlw	255
  4292  001144  1780               	andwf	___ftadd@f1& (0+255),f,b
  4293  001146  0EFF               	movlw	255
  4294  001148  1781               	andwf	(___ftadd@f1+1)& (0+255),f,b
  4295  00114A  0E00               	movlw	0
  4296  00114C  1782               	andwf	(___ftadd@f1+2)& (0+255),f,b
  4297  00114E  8F84               	bsf	(___ftadd@f2+1)& (0+255),7,b
  4298                           
  4299                           ; BSR set to: 0
  4300  001150  0EFF               	movlw	255
  4301  001152  1783               	andwf	___ftadd@f2& (0+255),f,b
  4302  001154  0EFF               	movlw	255
  4303  001156  1784               	andwf	(___ftadd@f2+1)& (0+255),f,b
  4304  001158  0E00               	movlw	0
  4305  00115A  1785               	andwf	(___ftadd@f2+2)& (0+255),f,b
  4306                           
  4307                           ; BSR set to: 0
  4308  00115C  518A               	movf	___ftadd@exp2& (0+255),w,b
  4309  00115E  5D8B               	subwf	___ftadd@exp1& (0+255),w,b
  4310  001160  B0D8               	btfsc	status,0,c
  4311  001162  D01B               	goto	l641
  4312  001164                     u2790:
  4313                           
  4314                           ; BSR set to: 0
  4315                           
  4316                           ; BSR set to: 0
  4317  001164  90D8               	bcf	status,0,c
  4318  001166  3783               	rlcf	___ftadd@f2& (0+255),f,b
  4319  001168  3784               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  4320  00116A  3785               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  4321  00116C  078A               	decf	___ftadd@exp2& (0+255),f,b
  4322                           
  4323                           ; BSR set to: 0
  4324  00116E  518B               	movf	___ftadd@exp1& (0+255),w,b
  4325  001170  198A               	xorwf	___ftadd@exp2& (0+255),w,b
  4326  001172  B4D8               	btfsc	status,2,c
  4327  001174  D00D               	goto	l646
  4328                           
  4329                           ; BSR set to: 0
  4330  001176  0789               	decf	___ftadd@sign& (0+255),f,b
  4331  001178  C089  F086         	movff	___ftadd@sign,??___ftadd
  4332  00117C  0E07               	movlw	7
  4333  00117E  1786               	andwf	??___ftadd& (0+255),f,b
  4334  001180  B4D8               	btfsc	status,2,c
  4335  001182  D006               	goto	l646
  4336  001184  D7EF               	goto	u2790
  4337  001186                     
  4338                           ; BSR set to: 0
  4339                           
  4340                           ; BSR set to: 0
  4341  001186  90D8               	bcf	status,0,c
  4342  001188  3382               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  4343  00118A  3381               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  4344  00118C  3380               	rrcf	___ftadd@f1& (0+255),f,b
  4345  00118E  2B8B               	incf	___ftadd@exp1& (0+255),f,b
  4346  001190                     l646:
  4347                           
  4348                           ; BSR set to: 0
  4349                           
  4350                           ; BSR set to: 0
  4351  001190  518A               	movf	___ftadd@exp2& (0+255),w,b
  4352  001192  198B               	xorwf	___ftadd@exp1& (0+255),w,b
  4353  001194  B4D8               	btfsc	status,2,c
  4354  001196  D01F               	goto	u2860
  4355  001198  D7F6               	goto	l647
  4356  00119A                     l641:
  4357                           
  4358                           ; BSR set to: 0
  4359                           
  4360                           ; BSR set to: 0
  4361  00119A  518B               	movf	___ftadd@exp1& (0+255),w,b
  4362  00119C  5D8A               	subwf	___ftadd@exp2& (0+255),w,b
  4363  00119E  B0D8               	btfsc	status,0,c
  4364  0011A0  D01A               	goto	u2860
  4365  0011A2                     u2830:
  4366                           
  4367                           ; BSR set to: 0
  4368                           
  4369                           ; BSR set to: 0
  4370  0011A2  90D8               	bcf	status,0,c
  4371  0011A4  3780               	rlcf	___ftadd@f1& (0+255),f,b
  4372  0011A6  3781               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  4373  0011A8  3782               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  4374  0011AA  078B               	decf	___ftadd@exp1& (0+255),f,b
  4375                           
  4376                           ; BSR set to: 0
  4377  0011AC  518B               	movf	___ftadd@exp1& (0+255),w,b
  4378  0011AE  198A               	xorwf	___ftadd@exp2& (0+255),w,b
  4379  0011B0  B4D8               	btfsc	status,2,c
  4380  0011B2  D00D               	goto	l655
  4381                           
  4382                           ; BSR set to: 0
  4383  0011B4  0789               	decf	___ftadd@sign& (0+255),f,b
  4384  0011B6  C089  F086         	movff	___ftadd@sign,??___ftadd
  4385  0011BA  0E07               	movlw	7
  4386  0011BC  1786               	andwf	??___ftadd& (0+255),f,b
  4387  0011BE  B4D8               	btfsc	status,2,c
  4388  0011C0  D006               	goto	l655
  4389  0011C2  D7EF               	goto	u2830
  4390  0011C4                     
  4391                           ; BSR set to: 0
  4392                           
  4393                           ; BSR set to: 0
  4394  0011C4  90D8               	bcf	status,0,c
  4395  0011C6  3385               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  4396  0011C8  3384               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  4397  0011CA  3383               	rrcf	___ftadd@f2& (0+255),f,b
  4398  0011CC  2B8A               	incf	___ftadd@exp2& (0+255),f,b
  4399  0011CE                     l655:
  4400                           
  4401                           ; BSR set to: 0
  4402                           
  4403                           ; BSR set to: 0
  4404  0011CE  518A               	movf	___ftadd@exp2& (0+255),w,b
  4405  0011D0  198B               	xorwf	___ftadd@exp1& (0+255),w,b
  4406  0011D2  A4D8               	btfss	status,2,c
  4407  0011D4  D7F7               	goto	l656
  4408  0011D6                     u2860:
  4409                           
  4410                           ; BSR set to: 0
  4411                           
  4412                           ; BSR set to: 0
  4413                           
  4414                           ; BSR set to: 0
  4415  0011D6  AF89               	btfss	___ftadd@sign& (0+255),7,b
  4416  0011D8  D00C               	goto	l658
  4417                           
  4418                           ; BSR set to: 0
  4419  0011DA  0EFF               	movlw	255
  4420  0011DC  1B80               	xorwf	___ftadd@f1& (0+255),f,b
  4421  0011DE  0EFF               	movlw	255
  4422  0011E0  1B81               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  4423  0011E2  0EFF               	movlw	255
  4424  0011E4  1B82               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  4425  0011E6  0E01               	movlw	1
  4426  0011E8  2780               	addwf	___ftadd@f1& (0+255),f,b
  4427  0011EA  0E00               	movlw	0
  4428  0011EC  2381               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  4429  0011EE  0E00               	movlw	0
  4430  0011F0  2382               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  4431  0011F2                     l658:
  4432                           
  4433                           ; BSR set to: 0
  4434  0011F2  AD89               	btfss	___ftadd@sign& (0+255),6,b
  4435  0011F4  D00C               	goto	l659
  4436                           
  4437                           ; BSR set to: 0
  4438  0011F6  0EFF               	movlw	255
  4439  0011F8  1B83               	xorwf	___ftadd@f2& (0+255),f,b
  4440  0011FA  0EFF               	movlw	255
  4441  0011FC  1B84               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  4442  0011FE  0EFF               	movlw	255
  4443  001200  1B85               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  4444  001202  0E01               	movlw	1
  4445  001204  2783               	addwf	___ftadd@f2& (0+255),f,b
  4446  001206  0E00               	movlw	0
  4447  001208  2384               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  4448  00120A  0E00               	movlw	0
  4449  00120C  2385               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  4450  00120E                     l659:
  4451                           
  4452                           ; BSR set to: 0
  4453                           
  4454                           ; BSR set to: 0
  4455  00120E  0E00               	movlw	0
  4456  001210  6F89               	movwf	___ftadd@sign& (0+255),b
  4457                           
  4458                           ; BSR set to: 0
  4459  001212  5180               	movf	___ftadd@f1& (0+255),w,b
  4460  001214  2783               	addwf	___ftadd@f2& (0+255),f,b
  4461  001216  5181               	movf	(___ftadd@f1+1)& (0+255),w,b
  4462  001218  2384               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  4463  00121A  5182               	movf	(___ftadd@f1+2)& (0+255),w,b
  4464  00121C  2385               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  4465                           
  4466                           ; BSR set to: 0
  4467  00121E  AF85               	btfss	(___ftadd@f2+2)& (0+255),7,b
  4468  001220  D00E               	goto	l660
  4469                           
  4470                           ; BSR set to: 0
  4471  001222  0EFF               	movlw	255
  4472  001224  1B83               	xorwf	___ftadd@f2& (0+255),f,b
  4473  001226  0EFF               	movlw	255
  4474  001228  1B84               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  4475  00122A  0EFF               	movlw	255
  4476  00122C  1B85               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  4477  00122E  0E01               	movlw	1
  4478  001230  2783               	addwf	___ftadd@f2& (0+255),f,b
  4479  001232  0E00               	movlw	0
  4480  001234  2384               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  4481  001236  0E00               	movlw	0
  4482  001238  2385               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  4483                           
  4484                           ; BSR set to: 0
  4485  00123A  0E01               	movlw	1
  4486  00123C  6F89               	movwf	___ftadd@sign& (0+255),b
  4487  00123E                     l660:
  4488                           
  4489                           ; BSR set to: 0
  4490                           
  4491                           ; BSR set to: 0
  4492  00123E  C083  F01E         	movff	___ftadd@f2,___ftpack@arg
  4493  001242  C084  F01F         	movff	___ftadd@f2+1,___ftpack@arg+1
  4494  001246  C085  F020         	movff	___ftadd@f2+2,___ftpack@arg+2
  4495  00124A  C08B  F021         	movff	___ftadd@exp1,___ftpack@exp
  4496  00124E  C089  F022         	movff	___ftadd@sign,___ftpack@sign
  4497  001252  ECDA  F00B         	call	___ftpack	;wreg free
  4498  001256  C01E  F080         	movff	?___ftpack,?___ftadd
  4499  00125A  C01F  F081         	movff	?___ftpack+1,?___ftadd+1
  4500  00125E  C020  F082         	movff	?___ftpack+2,?___ftadd+2
  4501  001262  0012               	return	
  4502  001264                     __end_of___ftadd:
  4503                           	opt stack 0
  4504                           tblptru	equ	0xFF8
  4505                           tblptrh	equ	0xFF7
  4506                           tblptrl	equ	0xFF6
  4507                           tablat	equ	0xFF5
  4508                           prodh	equ	0xFF4
  4509                           prodl	equ	0xFF3
  4510                           intcon	equ	0xFF2
  4511                           postinc0	equ	0xFEE
  4512                           wreg	equ	0xFE8
  4513                           indf1	equ	0xFE7
  4514                           postdec1	equ	0xFE5
  4515                           fsr1h	equ	0xFE2
  4516                           fsr1l	equ	0xFE1
  4517                           indf2	equ	0xFDF
  4518                           postinc2	equ	0xFDE
  4519                           postdec2	equ	0xFDD
  4520                           fsr2h	equ	0xFDA
  4521                           fsr2l	equ	0xFD9
  4522                           status	equ	0xFD8
  4523                           
  4524 ;; *************** function ___ftneg *****************
  4525 ;; Defined at:
  4526 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  4527 ;; Parameters:    Size  Location     Type
  4528 ;;  f1              3   71[COMRAM] float 
  4529 ;; Auto vars:     Size  Location     Type
  4530 ;;		None
  4531 ;; Return value:  Size  Location     Type
  4532 ;;                  3   71[COMRAM] float 
  4533 ;; Registers used:
  4534 ;;		wreg, status,2, status,0
  4535 ;; Tracked objects:
  4536 ;;		On entry : 0/0
  4537 ;;		On exit  : 0/0
  4538 ;;		Unchanged: 0/0
  4539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4540 ;;      Params:         3       0       0       0       0       0       0
  4541 ;;      Locals:         0       0       0       0       0       0       0
  4542 ;;      Temps:          0       0       0       0       0       0       0
  4543 ;;      Totals:         3       0       0       0       0       0       0
  4544 ;;Total ram usage:        3 bytes
  4545 ;; Hardware stack levels used:    1
  4546 ;; Hardware stack levels required when called:    2
  4547 ;; This function calls:
  4548 ;;		Nothing
  4549 ;; This function is called by:
  4550 ;;		_main
  4551 ;;		_exp
  4552 ;; This function uses a non-reentrant model
  4553 ;;
  4554                           
  4555                           	psect	text13
  4556  001CFA                     __ptext13:
  4557                           	opt stack 0
  4558  001CFA                     ___ftneg:
  4559                           	opt stack 27
  4560                           
  4561                           ;incstack = 0
  4562  001CFA  5048               	movf	___ftneg@f1,w,c
  4563  001CFC  1049               	iorwf	___ftneg@f1+1,w,c
  4564  001CFE  104A               	iorwf	___ftneg@f1+2,w,c
  4565  001D00  B4D8               	btfsc	status,2,c
  4566  001D02  D006               	goto	l691
  4567  001D04  0E00               	movlw	0
  4568  001D06  1A48               	xorwf	___ftneg@f1,f,c
  4569  001D08  0E00               	movlw	0
  4570  001D0A  1A49               	xorwf	___ftneg@f1+1,f,c
  4571  001D0C  0E80               	movlw	128
  4572  001D0E  1A4A               	xorwf	___ftneg@f1+2,f,c
  4573  001D10                     l691:
  4574  001D10  C048  F048         	movff	___ftneg@f1,?___ftneg
  4575  001D14  C049  F049         	movff	___ftneg@f1+1,?___ftneg+1
  4576  001D18  C04A  F04A         	movff	___ftneg@f1+2,?___ftneg+2
  4577  001D1C  0012               	return		;funcret
  4578  001D1E                     __end_of___ftneg:
  4579                           	opt stack 0
  4580                           tblptru	equ	0xFF8
  4581                           tblptrh	equ	0xFF7
  4582                           tblptrl	equ	0xFF6
  4583                           tablat	equ	0xFF5
  4584                           prodh	equ	0xFF4
  4585                           prodl	equ	0xFF3
  4586                           intcon	equ	0xFF2
  4587                           postinc0	equ	0xFEE
  4588                           wreg	equ	0xFE8
  4589                           indf1	equ	0xFE7
  4590                           postdec1	equ	0xFE5
  4591                           fsr1h	equ	0xFE2
  4592                           fsr1l	equ	0xFE1
  4593                           indf2	equ	0xFDF
  4594                           postinc2	equ	0xFDE
  4595                           postdec2	equ	0xFDD
  4596                           fsr2h	equ	0xFDA
  4597                           fsr2l	equ	0xFD9
  4598                           status	equ	0xFD8
  4599                           
  4600 ;; *************** function ___ftdiv *****************
  4601 ;; Defined at:
  4602 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  4603 ;; Parameters:    Size  Location     Type
  4604 ;;  f1              3   37[COMRAM] float 
  4605 ;;  f2              3   40[COMRAM] float 
  4606 ;; Auto vars:     Size  Location     Type
  4607 ;;  f3              3   47[COMRAM] float 
  4608 ;;  sign            1   51[COMRAM] unsigned char 
  4609 ;;  exp             1   50[COMRAM] unsigned char 
  4610 ;;  cntr            1   46[COMRAM] unsigned char 
  4611 ;; Return value:  Size  Location     Type
  4612 ;;                  3   37[COMRAM] float 
  4613 ;; Registers used:
  4614 ;;		wreg, status,2, status,0, cstack
  4615 ;; Tracked objects:
  4616 ;;		On entry : 0/0
  4617 ;;		On exit  : 0/0
  4618 ;;		Unchanged: 0/0
  4619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4620 ;;      Params:         6       0       0       0       0       0       0
  4621 ;;      Locals:         6       0       0       0       0       0       0
  4622 ;;      Temps:          3       0       0       0       0       0       0
  4623 ;;      Totals:        15       0       0       0       0       0       0
  4624 ;;Total ram usage:       15 bytes
  4625 ;; Hardware stack levels used:    1
  4626 ;; Hardware stack levels required when called:    3
  4627 ;; This function calls:
  4628 ;;		___ftpack
  4629 ;; This function is called by:
  4630 ;;		_main
  4631 ;;		_exp
  4632 ;; This function uses a non-reentrant model
  4633 ;;
  4634                           
  4635                           	psect	text14
  4636  00144C                     __ptext14:
  4637                           	opt stack 0
  4638  00144C                     ___ftdiv:
  4639                           	opt stack 26
  4640                           
  4641                           ;incstack = 0
  4642  00144C  C028  F02C         	movff	___ftdiv@f1+2,??___ftdiv
  4643  001450  6A2D               	clrf	(??___ftdiv+1)& (0+255),c
  4644  001452  6A2E               	clrf	(??___ftdiv+2)& (0+255),c
  4645  001454  3427               	rlcf	___ftdiv@f1+1,w,c
  4646  001456  362C               	rlcf	??___ftdiv& (0+255),f,c
  4647  001458  E301               	bnc	u1861
  4648  00145A  802D               	bsf	(??___ftdiv+1)& (0+255),0,c
  4649  00145C                     u1861:
  4650  00145C  502C               	movf	??___ftdiv,w,c
  4651  00145E  6E33               	movwf	___ftdiv@exp,c
  4652  001460  5033               	movf	___ftdiv@exp,w,c
  4653  001462  A4D8               	btfss	status,2,c
  4654  001464  D007               	goto	l665
  4655  001466  0E00               	movlw	0
  4656  001468  6E26               	movwf	?___ftdiv,c
  4657  00146A  0E00               	movlw	0
  4658  00146C  6E27               	movwf	?___ftdiv+1,c
  4659  00146E  0E00               	movlw	0
  4660  001470  6E28               	movwf	?___ftdiv+2,c
  4661  001472  0012               	return	
  4662  001474                     l665:
  4663  001474  C02B  F02C         	movff	___ftdiv@f2+2,??___ftdiv
  4664  001478  6A2D               	clrf	(??___ftdiv+1)& (0+255),c
  4665  00147A  6A2E               	clrf	(??___ftdiv+2)& (0+255),c
  4666  00147C  342A               	rlcf	___ftdiv@f2+1,w,c
  4667  00147E  362C               	rlcf	??___ftdiv& (0+255),f,c
  4668  001480  E301               	bnc	u1881
  4669  001482  802D               	bsf	(??___ftdiv+1)& (0+255),0,c
  4670  001484                     u1881:
  4671  001484  502C               	movf	??___ftdiv,w,c
  4672  001486  6E34               	movwf	___ftdiv@sign,c
  4673  001488  5034               	movf	___ftdiv@sign,w,c
  4674  00148A  A4D8               	btfss	status,2,c
  4675  00148C  D007               	goto	l667
  4676  00148E  0E00               	movlw	0
  4677  001490  6E26               	movwf	?___ftdiv,c
  4678  001492  0E00               	movlw	0
  4679  001494  6E27               	movwf	?___ftdiv+1,c
  4680  001496  0E00               	movlw	0
  4681  001498  6E28               	movwf	?___ftdiv+2,c
  4682  00149A  0012               	return	
  4683  00149C                     l667:
  4684  00149C  0E00               	movlw	0
  4685  00149E  6E30               	movwf	___ftdiv@f3,c
  4686  0014A0  0E00               	movlw	0
  4687  0014A2  6E31               	movwf	___ftdiv@f3+1,c
  4688  0014A4  0E00               	movlw	0
  4689  0014A6  6E32               	movwf	___ftdiv@f3+2,c
  4690  0014A8  5034               	movf	___ftdiv@sign,w,c
  4691  0014AA  0F89               	addlw	137
  4692  0014AC  5E33               	subwf	___ftdiv@exp,f,c
  4693  0014AE  C028  F034         	movff	___ftdiv@f1+2,___ftdiv@sign
  4694  0014B2  502B               	movf	___ftdiv@f2+2,w,c
  4695  0014B4  1A34               	xorwf	___ftdiv@sign,f,c
  4696  0014B6  0E80               	movlw	128
  4697  0014B8  1634               	andwf	___ftdiv@sign,f,c
  4698  0014BA  8E27               	bsf	___ftdiv@f1+1,7,c
  4699  0014BC  0EFF               	movlw	255
  4700  0014BE  1626               	andwf	___ftdiv@f1,f,c
  4701  0014C0  0EFF               	movlw	255
  4702  0014C2  1627               	andwf	___ftdiv@f1+1,f,c
  4703  0014C4  0E00               	movlw	0
  4704  0014C6  1628               	andwf	___ftdiv@f1+2,f,c
  4705  0014C8  8E2A               	bsf	___ftdiv@f2+1,7,c
  4706  0014CA  0EFF               	movlw	255
  4707  0014CC  1629               	andwf	___ftdiv@f2,f,c
  4708  0014CE  0EFF               	movlw	255
  4709  0014D0  162A               	andwf	___ftdiv@f2+1,f,c
  4710  0014D2  0E00               	movlw	0
  4711  0014D4  162B               	andwf	___ftdiv@f2+2,f,c
  4712  0014D6  0E18               	movlw	24
  4713  0014D8  6E2F               	movwf	___ftdiv@cntr,c
  4714  0014DA  90D8               	bcf	status,0,c
  4715  0014DC  3630               	rlcf	___ftdiv@f3,f,c
  4716  0014DE  3631               	rlcf	___ftdiv@f3+1,f,c
  4717  0014E0  3632               	rlcf	___ftdiv@f3+2,f,c
  4718  0014E2  5029               	movf	___ftdiv@f2,w,c
  4719  0014E4  5C26               	subwf	___ftdiv@f1,w,c
  4720  0014E6  502A               	movf	___ftdiv@f2+1,w,c
  4721  0014E8  5827               	subwfb	___ftdiv@f1+1,w,c
  4722  0014EA  502B               	movf	___ftdiv@f2+2,w,c
  4723  0014EC  5828               	subwfb	___ftdiv@f1+2,w,c
  4724  0014EE  A0D8               	btfss	status,0,c
  4725  0014F0  D007               	goto	l669
  4726  0014F2  5029               	movf	___ftdiv@f2,w,c
  4727  0014F4  5E26               	subwf	___ftdiv@f1,f,c
  4728  0014F6  502A               	movf	___ftdiv@f2+1,w,c
  4729  0014F8  5A27               	subwfb	___ftdiv@f1+1,f,c
  4730  0014FA  502B               	movf	___ftdiv@f2+2,w,c
  4731  0014FC  5A28               	subwfb	___ftdiv@f1+2,f,c
  4732  0014FE  8030               	bsf	___ftdiv@f3,0,c
  4733  001500                     l669:
  4734  001500  90D8               	bcf	status,0,c
  4735  001502  3626               	rlcf	___ftdiv@f1,f,c
  4736  001504  3627               	rlcf	___ftdiv@f1+1,f,c
  4737  001506  3628               	rlcf	___ftdiv@f1+2,f,c
  4738  001508  2E2F               	decfsz	___ftdiv@cntr,f,c
  4739  00150A  D7E7               	goto	l668
  4740  00150C  C030  F01E         	movff	___ftdiv@f3,___ftpack@arg
  4741  001510  C031  F01F         	movff	___ftdiv@f3+1,___ftpack@arg+1
  4742  001514  C032  F020         	movff	___ftdiv@f3+2,___ftpack@arg+2
  4743  001518  C033  F021         	movff	___ftdiv@exp,___ftpack@exp
  4744  00151C  C034  F022         	movff	___ftdiv@sign,___ftpack@sign
  4745  001520  ECDA  F00B         	call	___ftpack	;wreg free
  4746  001524  C01E  F026         	movff	?___ftpack,?___ftdiv
  4747  001528  C01F  F027         	movff	?___ftpack+1,?___ftdiv+1
  4748  00152C  C020  F028         	movff	?___ftpack+2,?___ftdiv+2
  4749  001530  0012               	return	
  4750  001532                     __end_of___ftdiv:
  4751                           	opt stack 0
  4752                           tblptru	equ	0xFF8
  4753                           tblptrh	equ	0xFF7
  4754                           tblptrl	equ	0xFF6
  4755                           tablat	equ	0xFF5
  4756                           prodh	equ	0xFF4
  4757                           prodl	equ	0xFF3
  4758                           intcon	equ	0xFF2
  4759                           postinc0	equ	0xFEE
  4760                           wreg	equ	0xFE8
  4761                           indf1	equ	0xFE7
  4762                           postdec1	equ	0xFE5
  4763                           fsr1h	equ	0xFE2
  4764                           fsr1l	equ	0xFE1
  4765                           indf2	equ	0xFDF
  4766                           postinc2	equ	0xFDE
  4767                           postdec2	equ	0xFDD
  4768                           fsr2h	equ	0xFDA
  4769                           fsr2l	equ	0xFD9
  4770                           status	equ	0xFD8
  4771                           
  4772 ;; *************** function ___awtoft *****************
  4773 ;; Defined at:
  4774 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  4775 ;; Parameters:    Size  Location     Type
  4776 ;;  c               2   67[COMRAM] int 
  4777 ;; Auto vars:     Size  Location     Type
  4778 ;;  sign            1   70[COMRAM] unsigned char 
  4779 ;; Return value:  Size  Location     Type
  4780 ;;                  3   67[COMRAM] float 
  4781 ;; Registers used:
  4782 ;;		wreg, status,2, status,0, cstack
  4783 ;; Tracked objects:
  4784 ;;		On entry : 0/0
  4785 ;;		On exit  : 0/0
  4786 ;;		Unchanged: 0/0
  4787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4788 ;;      Params:         3       0       0       0       0       0       0
  4789 ;;      Locals:         1       0       0       0       0       0       0
  4790 ;;      Temps:          0       0       0       0       0       0       0
  4791 ;;      Totals:         4       0       0       0       0       0       0
  4792 ;;Total ram usage:        4 bytes
  4793 ;; Hardware stack levels used:    1
  4794 ;; Hardware stack levels required when called:    3
  4795 ;; This function calls:
  4796 ;;		___ftpack
  4797 ;; This function is called by:
  4798 ;;		_main
  4799 ;;		_exp
  4800 ;; This function uses a non-reentrant model
  4801 ;;
  4802                           
  4803                           	psect	text15
  4804  001B8A                     __ptext15:
  4805                           	opt stack 0
  4806  001B8A                     ___awtoft:
  4807                           	opt stack 26
  4808                           
  4809                           ;incstack = 0
  4810  001B8A  0E00               	movlw	0
  4811  001B8C  6E47               	movwf	___awtoft@sign,c
  4812  001B8E  AE45               	btfss	___awtoft@c+1,7,c
  4813  001B90  D006               	goto	l538
  4814  001B92  6C44               	negf	___awtoft@c,c
  4815  001B94  1E45               	comf	___awtoft@c+1,f,c
  4816  001B96  B0D8               	btfsc	status,0,c
  4817  001B98  2A45               	incf	___awtoft@c+1,f,c
  4818  001B9A  0E01               	movlw	1
  4819  001B9C  6E47               	movwf	___awtoft@sign,c
  4820  001B9E                     l538:
  4821  001B9E  C044  F01E         	movff	___awtoft@c,___ftpack@arg
  4822  001BA2  C045  F01F         	movff	___awtoft@c+1,___ftpack@arg+1
  4823  001BA6  6A20               	clrf	___ftpack@arg+2,c
  4824  001BA8  0E8E               	movlw	142
  4825  001BAA  6E21               	movwf	___ftpack@exp,c
  4826  001BAC  C047  F022         	movff	___awtoft@sign,___ftpack@sign
  4827  001BB0  ECDA  F00B         	call	___ftpack	;wreg free
  4828  001BB4  C01E  F044         	movff	?___ftpack,?___awtoft
  4829  001BB8  C01F  F045         	movff	?___ftpack+1,?___awtoft+1
  4830  001BBC  C020  F046         	movff	?___ftpack+2,?___awtoft+2
  4831  001BC0  0012               	return	
  4832  001BC2                     __end_of___awtoft:
  4833                           	opt stack 0
  4834                           tblptru	equ	0xFF8
  4835                           tblptrh	equ	0xFF7
  4836                           tblptrl	equ	0xFF6
  4837                           tablat	equ	0xFF5
  4838                           prodh	equ	0xFF4
  4839                           prodl	equ	0xFF3
  4840                           intcon	equ	0xFF2
  4841                           postinc0	equ	0xFEE
  4842                           wreg	equ	0xFE8
  4843                           indf1	equ	0xFE7
  4844                           postdec1	equ	0xFE5
  4845                           fsr1h	equ	0xFE2
  4846                           fsr1l	equ	0xFE1
  4847                           indf2	equ	0xFDF
  4848                           postinc2	equ	0xFDE
  4849                           postdec2	equ	0xFDD
  4850                           fsr2h	equ	0xFDA
  4851                           fsr2l	equ	0xFD9
  4852                           status	equ	0xFD8
  4853                           
  4854 ;; *************** function ___lwtoft *****************
  4855 ;; Defined at:
  4856 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
  4857 ;; Parameters:    Size  Location     Type
  4858 ;;  c               2   37[COMRAM] unsigned int 
  4859 ;; Auto vars:     Size  Location     Type
  4860 ;;		None
  4861 ;; Return value:  Size  Location     Type
  4862 ;;                  3   37[COMRAM] float 
  4863 ;; Registers used:
  4864 ;;		wreg, status,2, status,0, cstack
  4865 ;; Tracked objects:
  4866 ;;		On entry : 0/0
  4867 ;;		On exit  : 0/0
  4868 ;;		Unchanged: 0/0
  4869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4870 ;;      Params:         3       0       0       0       0       0       0
  4871 ;;      Locals:         0       0       0       0       0       0       0
  4872 ;;      Temps:          0       0       0       0       0       0       0
  4873 ;;      Totals:         3       0       0       0       0       0       0
  4874 ;;Total ram usage:        3 bytes
  4875 ;; Hardware stack levels used:    1
  4876 ;; Hardware stack levels required when called:    3
  4877 ;; This function calls:
  4878 ;;		___ftpack
  4879 ;; This function is called by:
  4880 ;;		_main
  4881 ;; This function uses a non-reentrant model
  4882 ;;
  4883                           
  4884                           	psect	text16
  4885  001D1E                     __ptext16:
  4886                           	opt stack 0
  4887  001D1E                     ___lwtoft:
  4888                           	opt stack 27
  4889                           
  4890                           ;incstack = 0
  4891  001D1E  C026  F01E         	movff	___lwtoft@c,___ftpack@arg
  4892  001D22  C027  F01F         	movff	___lwtoft@c+1,___ftpack@arg+1
  4893  001D26  6A20               	clrf	___ftpack@arg+2,c
  4894  001D28  0E8E               	movlw	142
  4895  001D2A  6E21               	movwf	___ftpack@exp,c
  4896  001D2C  0E00               	movlw	0
  4897  001D2E  6E22               	movwf	___ftpack@sign,c
  4898  001D30  ECDA  F00B         	call	___ftpack	;wreg free
  4899  001D34  C01E  F026         	movff	?___ftpack,?___lwtoft
  4900  001D38  C01F  F027         	movff	?___ftpack+1,?___lwtoft+1
  4901  001D3C  C020  F028         	movff	?___ftpack+2,?___lwtoft+2
  4902  001D40  0012               	return	
  4903  001D42                     __end_of___lwtoft:
  4904                           	opt stack 0
  4905                           tblptru	equ	0xFF8
  4906                           tblptrh	equ	0xFF7
  4907                           tblptrl	equ	0xFF6
  4908                           tablat	equ	0xFF5
  4909                           prodh	equ	0xFF4
  4910                           prodl	equ	0xFF3
  4911                           intcon	equ	0xFF2
  4912                           postinc0	equ	0xFEE
  4913                           wreg	equ	0xFE8
  4914                           indf1	equ	0xFE7
  4915                           postdec1	equ	0xFE5
  4916                           fsr1h	equ	0xFE2
  4917                           fsr1l	equ	0xFE1
  4918                           indf2	equ	0xFDF
  4919                           postinc2	equ	0xFDE
  4920                           postdec2	equ	0xFDD
  4921                           fsr2h	equ	0xFDA
  4922                           fsr2l	equ	0xFD9
  4923                           status	equ	0xFD8
  4924                           
  4925 ;; *************** function ___ftpack *****************
  4926 ;; Defined at:
  4927 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  4928 ;; Parameters:    Size  Location     Type
  4929 ;;  arg             3   29[COMRAM] unsigned um
  4930 ;;  exp             1   32[COMRAM] unsigned char 
  4931 ;;  sign            1   33[COMRAM] unsigned char 
  4932 ;; Auto vars:     Size  Location     Type
  4933 ;;		None
  4934 ;; Return value:  Size  Location     Type
  4935 ;;                  3   29[COMRAM] float 
  4936 ;; Registers used:
  4937 ;;		wreg, status,2, status,0
  4938 ;; Tracked objects:
  4939 ;;		On entry : 0/0
  4940 ;;		On exit  : 0/0
  4941 ;;		Unchanged: 0/0
  4942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4943 ;;      Params:         5       0       0       0       0       0       0
  4944 ;;      Locals:         0       0       0       0       0       0       0
  4945 ;;      Temps:          3       0       0       0       0       0       0
  4946 ;;      Totals:         8       0       0       0       0       0       0
  4947 ;;Total ram usage:        8 bytes
  4948 ;; Hardware stack levels used:    1
  4949 ;; Hardware stack levels required when called:    2
  4950 ;; This function calls:
  4951 ;;		Nothing
  4952 ;; This function is called by:
  4953 ;;		___altoft
  4954 ;;		___awtoft
  4955 ;;		___ftadd
  4956 ;;		___ftdiv
  4957 ;;		___ftmul
  4958 ;;		___lwtoft
  4959 ;; This function uses a non-reentrant model
  4960 ;;
  4961                           
  4962                           	psect	text17
  4963  0017B4                     __ptext17:
  4964                           	opt stack 0
  4965  0017B4                     ___ftpack:
  4966                           	opt stack 25
  4967                           
  4968                           ;incstack = 0
  4969  0017B4  5021               	movf	___ftpack@exp,w,c
  4970  0017B6  B4D8               	btfsc	status,2,c
  4971  0017B8  D005               	goto	u1360
  4972  0017BA  501E               	movf	___ftpack@arg,w,c
  4973  0017BC  101F               	iorwf	___ftpack@arg+1,w,c
  4974  0017BE  1020               	iorwf	___ftpack@arg+2,w,c
  4975  0017C0  A4D8               	btfss	status,2,c
  4976  0017C2  D00C               	goto	l576
  4977  0017C4                     u1360:
  4978  0017C4  0E00               	movlw	0
  4979  0017C6  6E1E               	movwf	?___ftpack,c
  4980  0017C8  0E00               	movlw	0
  4981  0017CA  6E1F               	movwf	?___ftpack+1,c
  4982  0017CC  0E00               	movlw	0
  4983  0017CE  6E20               	movwf	?___ftpack+2,c
  4984  0017D0  0012               	return	
  4985  0017D2  2A21               	incf	___ftpack@exp,f,c
  4986  0017D4  90D8               	bcf	status,0,c
  4987  0017D6  3220               	rrcf	___ftpack@arg+2,f,c
  4988  0017D8  321F               	rrcf	___ftpack@arg+1,f,c
  4989  0017DA  321E               	rrcf	___ftpack@arg,f,c
  4990  0017DC                     l576:
  4991  0017DC  0E00               	movlw	0
  4992  0017DE  141E               	andwf	___ftpack@arg,w,c
  4993  0017E0  6E23               	movwf	??___ftpack& (0+255),c
  4994  0017E2  0E00               	movlw	0
  4995  0017E4  141F               	andwf	___ftpack@arg+1,w,c
  4996  0017E6  6E24               	movwf	(??___ftpack+1)& (0+255),c
  4997  0017E8  0EFE               	movlw	254
  4998  0017EA  1420               	andwf	___ftpack@arg+2,w,c
  4999  0017EC  6E25               	movwf	(??___ftpack+2)& (0+255),c
  5000  0017EE  5023               	movf	??___ftpack,w,c
  5001  0017F0  1024               	iorwf	??___ftpack+1,w,c
  5002  0017F2  1025               	iorwf	??___ftpack+2,w,c
  5003  0017F4  B4D8               	btfsc	status,2,c
  5004  0017F6  D00C               	goto	l579
  5005  0017F8  D7EC               	goto	l577
  5006  0017FA  2A21               	incf	___ftpack@exp,f,c
  5007  0017FC  0E01               	movlw	1
  5008  0017FE  261E               	addwf	___ftpack@arg,f,c
  5009  001800  0E00               	movlw	0
  5010  001802  221F               	addwfc	___ftpack@arg+1,f,c
  5011  001804  0E00               	movlw	0
  5012  001806  2220               	addwfc	___ftpack@arg+2,f,c
  5013  001808  90D8               	bcf	status,0,c
  5014  00180A  3220               	rrcf	___ftpack@arg+2,f,c
  5015  00180C  321F               	rrcf	___ftpack@arg+1,f,c
  5016  00180E  321E               	rrcf	___ftpack@arg,f,c
  5017  001810                     l579:
  5018  001810  0E00               	movlw	0
  5019  001812  141E               	andwf	___ftpack@arg,w,c
  5020  001814  6E23               	movwf	??___ftpack& (0+255),c
  5021  001816  0E00               	movlw	0
  5022  001818  141F               	andwf	___ftpack@arg+1,w,c
  5023  00181A  6E24               	movwf	(??___ftpack+1)& (0+255),c
  5024  00181C  0EFF               	movlw	255
  5025  00181E  1420               	andwf	___ftpack@arg+2,w,c
  5026  001820  6E25               	movwf	(??___ftpack+2)& (0+255),c
  5027  001822  5023               	movf	??___ftpack,w,c
  5028  001824  1024               	iorwf	??___ftpack+1,w,c
  5029  001826  1025               	iorwf	??___ftpack+2,w,c
  5030  001828  B4D8               	btfsc	status,2,c
  5031  00182A  D006               	goto	l582
  5032  00182C  D7E6               	goto	l580
  5033  00182E  0621               	decf	___ftpack@exp,f,c
  5034  001830  90D8               	bcf	status,0,c
  5035  001832  361E               	rlcf	___ftpack@arg,f,c
  5036  001834  361F               	rlcf	___ftpack@arg+1,f,c
  5037  001836  3620               	rlcf	___ftpack@arg+2,f,c
  5038  001838                     l582:
  5039  001838  BE1F               	btfsc	___ftpack@arg+1,7,c
  5040  00183A  D003               	goto	u1400
  5041  00183C  0E02               	movlw	2
  5042  00183E  6021               	cpfslt	___ftpack@exp,c
  5043  001840  D7F6               	goto	l583
  5044  001842                     u1400:
  5045  001842  A021               	btfss	___ftpack@exp,0,c
  5046  001844  9E1F               	bcf	___ftpack@arg+1,7,c
  5047  001846  90D8               	bcf	status,0,c
  5048  001848  3221               	rrcf	___ftpack@exp,f,c
  5049  00184A  5021               	movf	___ftpack@exp,w,c
  5050  00184C  1220               	iorwf	___ftpack@arg+2,f,c
  5051  00184E  5022               	movf	___ftpack@sign,w,c
  5052  001850  A4D8               	btfss	status,2,c
  5053  001852  8E20               	bsf	___ftpack@arg+2,7,c
  5054  001854  C01E  F01E         	movff	___ftpack@arg,?___ftpack
  5055  001858  C01F  F01F         	movff	___ftpack@arg+1,?___ftpack+1
  5056  00185C  C020  F020         	movff	___ftpack@arg+2,?___ftpack+2
  5057  001860  0012               	return	
  5058  001862                     __end_of___ftpack:
  5059                           	opt stack 0
  5060                           tblptru	equ	0xFF8
  5061                           tblptrh	equ	0xFF7
  5062                           tblptrl	equ	0xFF6
  5063                           tablat	equ	0xFF5
  5064                           prodh	equ	0xFF4
  5065                           prodl	equ	0xFF3
  5066                           intcon	equ	0xFF2
  5067                           postinc0	equ	0xFEE
  5068                           wreg	equ	0xFE8
  5069                           indf1	equ	0xFE7
  5070                           postdec1	equ	0xFE5
  5071                           fsr1h	equ	0xFE2
  5072                           fsr1l	equ	0xFE1
  5073                           indf2	equ	0xFDF
  5074                           postinc2	equ	0xFDE
  5075                           postdec2	equ	0xFDD
  5076                           fsr2h	equ	0xFDA
  5077                           fsr2l	equ	0xFD9
  5078                           status	equ	0xFD8
  5079                           
  5080 ;; *************** function ___awdiv *****************
  5081 ;; Defined at:
  5082 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  5083 ;; Parameters:    Size  Location     Type
  5084 ;;  dividend        2   29[COMRAM] int 
  5085 ;;  divisor         2   31[COMRAM] int 
  5086 ;; Auto vars:     Size  Location     Type
  5087 ;;  quotient        2   35[COMRAM] int 
  5088 ;;  sign            1   34[COMRAM] unsigned char 
  5089 ;;  counter         1   33[COMRAM] unsigned char 
  5090 ;; Return value:  Size  Location     Type
  5091 ;;                  2   29[COMRAM] int 
  5092 ;; Registers used:
  5093 ;;		wreg, status,2, status,0
  5094 ;; Tracked objects:
  5095 ;;		On entry : 0/0
  5096 ;;		On exit  : 0/0
  5097 ;;		Unchanged: 0/0
  5098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5099 ;;      Params:         4       0       0       0       0       0       0
  5100 ;;      Locals:         4       0       0       0       0       0       0
  5101 ;;      Temps:          0       0       0       0       0       0       0
  5102 ;;      Totals:         8       0       0       0       0       0       0
  5103 ;;Total ram usage:        8 bytes
  5104 ;; Hardware stack levels used:    1
  5105 ;; Hardware stack levels required when called:    2
  5106 ;; This function calls:
  5107 ;;		Nothing
  5108 ;; This function is called by:
  5109 ;;		_main
  5110 ;; This function uses a non-reentrant model
  5111 ;;
  5112                           
  5113                           	psect	text18
  5114  001988                     __ptext18:
  5115                           	opt stack 0
  5116  001988                     ___awdiv:
  5117                           	opt stack 28
  5118                           
  5119                           ;incstack = 0
  5120  001988  0E00               	movlw	0
  5121  00198A  6E23               	movwf	___awdiv@sign,c
  5122  00198C  AE21               	btfss	___awdiv@divisor+1,7,c
  5123  00198E  D006               	goto	l510
  5124  001990  6C20               	negf	___awdiv@divisor,c
  5125  001992  1E21               	comf	___awdiv@divisor+1,f,c
  5126  001994  B0D8               	btfsc	status,0,c
  5127  001996  2A21               	incf	___awdiv@divisor+1,f,c
  5128  001998  0E01               	movlw	1
  5129  00199A  6E23               	movwf	___awdiv@sign,c
  5130  00199C                     l510:
  5131  00199C  AE1F               	btfss	___awdiv@dividend+1,7,c
  5132  00199E  D006               	goto	l511
  5133  0019A0  6C1E               	negf	___awdiv@dividend,c
  5134  0019A2  1E1F               	comf	___awdiv@dividend+1,f,c
  5135  0019A4  B0D8               	btfsc	status,0,c
  5136  0019A6  2A1F               	incf	___awdiv@dividend+1,f,c
  5137  0019A8  0E01               	movlw	1
  5138  0019AA  1A23               	xorwf	___awdiv@sign,f,c
  5139  0019AC                     l511:
  5140  0019AC  0E00               	movlw	0
  5141  0019AE  6E25               	movwf	___awdiv@quotient+1,c
  5142  0019B0  0E00               	movlw	0
  5143  0019B2  6E24               	movwf	___awdiv@quotient,c
  5144  0019B4  5020               	movf	___awdiv@divisor,w,c
  5145  0019B6  1021               	iorwf	___awdiv@divisor+1,w,c
  5146  0019B8  B4D8               	btfsc	status,2,c
  5147  0019BA  D01C               	goto	l518
  5148  0019BC  0E01               	movlw	1
  5149  0019BE  6E22               	movwf	___awdiv@counter,c
  5150  0019C0  D004               	goto	l513
  5151  0019C2  90D8               	bcf	status,0,c
  5152  0019C4  3620               	rlcf	___awdiv@divisor,f,c
  5153  0019C6  3621               	rlcf	___awdiv@divisor+1,f,c
  5154  0019C8  2A22               	incf	___awdiv@counter,f,c
  5155  0019CA                     l513:
  5156  0019CA  AE21               	btfss	___awdiv@divisor+1,7,c
  5157  0019CC  D7FA               	goto	l514
  5158  0019CE                     u2210:
  5159  0019CE  90D8               	bcf	status,0,c
  5160  0019D0  3624               	rlcf	___awdiv@quotient,f,c
  5161  0019D2  3625               	rlcf	___awdiv@quotient+1,f,c
  5162  0019D4  5020               	movf	___awdiv@divisor,w,c
  5163  0019D6  5C1E               	subwf	___awdiv@dividend,w,c
  5164  0019D8  5021               	movf	___awdiv@divisor+1,w,c
  5165  0019DA  581F               	subwfb	___awdiv@dividend+1,w,c
  5166  0019DC  A0D8               	btfss	status,0,c
  5167  0019DE  D005               	goto	l517
  5168  0019E0  5020               	movf	___awdiv@divisor,w,c
  5169  0019E2  5E1E               	subwf	___awdiv@dividend,f,c
  5170  0019E4  5021               	movf	___awdiv@divisor+1,w,c
  5171  0019E6  5A1F               	subwfb	___awdiv@dividend+1,f,c
  5172  0019E8  8024               	bsf	___awdiv@quotient,0,c
  5173  0019EA                     l517:
  5174  0019EA  90D8               	bcf	status,0,c
  5175  0019EC  3221               	rrcf	___awdiv@divisor+1,f,c
  5176  0019EE  3220               	rrcf	___awdiv@divisor,f,c
  5177  0019F0  2E22               	decfsz	___awdiv@counter,f,c
  5178  0019F2  D7ED               	goto	u2210
  5179  0019F4                     l518:
  5180  0019F4  5023               	movf	___awdiv@sign,w,c
  5181  0019F6  B4D8               	btfsc	status,2,c
  5182  0019F8  D004               	goto	l519
  5183  0019FA  6C24               	negf	___awdiv@quotient,c
  5184  0019FC  1E25               	comf	___awdiv@quotient+1,f,c
  5185  0019FE  B0D8               	btfsc	status,0,c
  5186  001A00  2A25               	incf	___awdiv@quotient+1,f,c
  5187  001A02                     l519:
  5188  001A02  C024  F01E         	movff	___awdiv@quotient,?___awdiv
  5189  001A06  C025  F01F         	movff	___awdiv@quotient+1,?___awdiv+1
  5190  001A0A  0012               	return	
  5191  001A0C                     __end_of___awdiv:
  5192                           	opt stack 0
  5193                           tblptru	equ	0xFF8
  5194                           tblptrh	equ	0xFF7
  5195                           tblptrl	equ	0xFF6
  5196                           tablat	equ	0xFF5
  5197                           prodh	equ	0xFF4
  5198                           prodl	equ	0xFF3
  5199                           intcon	equ	0xFF2
  5200                           postinc0	equ	0xFEE
  5201                           wreg	equ	0xFE8
  5202                           indf1	equ	0xFE7
  5203                           postdec1	equ	0xFE5
  5204                           fsr1h	equ	0xFE2
  5205                           fsr1l	equ	0xFE1
  5206                           indf2	equ	0xFDF
  5207                           postinc2	equ	0xFDE
  5208                           postdec2	equ	0xFDD
  5209                           fsr2h	equ	0xFDA
  5210                           fsr2l	equ	0xFD9
  5211                           status	equ	0xFD8
  5212                           
  5213 ;; *************** function _UartInit *****************
  5214 ;; Defined at:
  5215 ;;		line 426 in file "main.c"
  5216 ;; Parameters:    Size  Location     Type
  5217 ;;		None
  5218 ;; Auto vars:     Size  Location     Type
  5219 ;;		None
  5220 ;; Return value:  Size  Location     Type
  5221 ;;                  1    wreg      void 
  5222 ;; Registers used:
  5223 ;;		wreg, status,2
  5224 ;; Tracked objects:
  5225 ;;		On entry : 0/0
  5226 ;;		On exit  : 0/0
  5227 ;;		Unchanged: 0/0
  5228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5229 ;;      Params:         0       0       0       0       0       0       0
  5230 ;;      Locals:         0       0       0       0       0       0       0
  5231 ;;      Temps:          0       0       0       0       0       0       0
  5232 ;;      Totals:         0       0       0       0       0       0       0
  5233 ;;Total ram usage:        0 bytes
  5234 ;; Hardware stack levels used:    1
  5235 ;; Hardware stack levels required when called:    2
  5236 ;; This function calls:
  5237 ;;		Nothing
  5238 ;; This function is called by:
  5239 ;;		_main
  5240 ;; This function uses a non-reentrant model
  5241 ;;
  5242                           
  5243                           	psect	text19
  5244  001C2A                     __ptext19:
  5245                           	opt stack 0
  5246  001C2A                     _UartInit:
  5247                           	opt stack 28
  5248                           
  5249                           ;main.c: 428: TRISC6 = 0;
  5250                           
  5251                           ;incstack = 0
  5252  001C2A  9C94               	bcf	3988,6,c	;volatile
  5253                           
  5254                           ;main.c: 429: TRISC7 = 1;
  5255  001C2C  8E94               	bsf	3988,7,c	;volatile
  5256                           
  5257                           ;main.c: 433: TX9 = 0;
  5258  001C2E  9CAC               	bcf	4012,6,c	;volatile
  5259                           
  5260                           ;main.c: 434: SYNC = 0;
  5261  001C30  98AC               	bcf	4012,4,c	;volatile
  5262                           
  5263                           ;main.c: 435: SENDB = 0;
  5264  001C32  96AC               	bcf	4012,3,c	;volatile
  5265                           
  5266                           ;main.c: 436: BRGH = 0;
  5267  001C34  94AC               	bcf	4012,2,c	;volatile
  5268                           
  5269                           ;main.c: 438: RX9 = 0;
  5270  001C36  9CAB               	bcf	4011,6,c	;volatile
  5271                           
  5272                           ;main.c: 439: CREN = 1;
  5273  001C38  88AB               	bsf	4011,4,c	;volatile
  5274                           
  5275                           ;main.c: 440: FERR = 0;
  5276  001C3A  94AB               	bcf	4011,2,c	;volatile
  5277                           
  5278                           ;main.c: 441: OERR = 0;
  5279  001C3C  92AB               	bcf	4011,1,c	;volatile
  5280                           
  5281                           ;main.c: 442: RXDTP = 0;
  5282  001C3E  9AB8               	bcf	4024,5,c	;volatile
  5283                           
  5284                           ;main.c: 443: TXCKP = 0;
  5285  001C40  98B8               	bcf	4024,4,c	;volatile
  5286                           
  5287                           ;main.c: 444: BRG16 = 1;
  5288  001C42  86B8               	bsf	4024,3,c	;volatile
  5289                           
  5290                           ;main.c: 445: WUE = 0;
  5291  001C44  92B8               	bcf	4024,1,c	;volatile
  5292                           
  5293                           ;main.c: 446: ABDEN = 0;
  5294  001C46  90B8               	bcf	4024,0,c	;volatile
  5295                           
  5296                           ;main.c: 447: SPBRGH = 0;
  5297  001C48  0E00               	movlw	0
  5298  001C4A  6EB0               	movwf	4016,c	;volatile
  5299                           
  5300                           ;main.c: 448: SPBRG = 16;
  5301  001C4C  0E10               	movlw	16
  5302  001C4E  6EAF               	movwf	4015,c	;volatile
  5303                           
  5304                           ;main.c: 451: RCIE = 1;
  5305  001C50  8A9D               	bsf	3997,5,c	;volatile
  5306                           
  5307                           ;main.c: 452: RCIF = 0;
  5308  001C52  9A9E               	bcf	3998,5,c	;volatile
  5309                           
  5310                           ;main.c: 454: TXEN = 1;
  5311  001C54  8AAC               	bsf	4012,5,c	;volatile
  5312                           
  5313                           ;main.c: 455: SPEN = 1;
  5314  001C56  8EAB               	bsf	4011,7,c	;volatile
  5315  001C58  0012               	return		;funcret
  5316  001C5A                     __end_of_UartInit:
  5317                           	opt stack 0
  5318                           tblptru	equ	0xFF8
  5319                           tblptrh	equ	0xFF7
  5320                           tblptrl	equ	0xFF6
  5321                           tablat	equ	0xFF5
  5322                           prodh	equ	0xFF4
  5323                           prodl	equ	0xFF3
  5324                           intcon	equ	0xFF2
  5325                           postinc0	equ	0xFEE
  5326                           wreg	equ	0xFE8
  5327                           indf1	equ	0xFE7
  5328                           postdec1	equ	0xFE5
  5329                           fsr1h	equ	0xFE2
  5330                           fsr1l	equ	0xFE1
  5331                           indf2	equ	0xFDF
  5332                           postinc2	equ	0xFDE
  5333                           postdec2	equ	0xFDD
  5334                           fsr2h	equ	0xFDA
  5335                           fsr2l	equ	0xFD9
  5336                           status	equ	0xFD8
  5337                           
  5338 ;; *************** function _SpiInit *****************
  5339 ;; Defined at:
  5340 ;;		line 403 in file "main.c"
  5341 ;; Parameters:    Size  Location     Type
  5342 ;;		None
  5343 ;; Auto vars:     Size  Location     Type
  5344 ;;		None
  5345 ;; Return value:  Size  Location     Type
  5346 ;;                  1    wreg      void 
  5347 ;; Registers used:
  5348 ;;		wreg, status,2
  5349 ;; Tracked objects:
  5350 ;;		On entry : 0/0
  5351 ;;		On exit  : 0/0
  5352 ;;		Unchanged: 0/0
  5353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5354 ;;      Params:         0       0       0       0       0       0       0
  5355 ;;      Locals:         0       0       0       0       0       0       0
  5356 ;;      Temps:          0       0       0       0       0       0       0
  5357 ;;      Totals:         0       0       0       0       0       0       0
  5358 ;;Total ram usage:        0 bytes
  5359 ;; Hardware stack levels used:    1
  5360 ;; Hardware stack levels required when called:    2
  5361 ;; This function calls:
  5362 ;;		Nothing
  5363 ;; This function is called by:
  5364 ;;		_main
  5365 ;; This function uses a non-reentrant model
  5366 ;;
  5367                           
  5368                           	psect	text20
  5369  001C5A                     __ptext20:
  5370                           	opt stack 0
  5371  001C5A                     _SpiInit:
  5372                           	opt stack 28
  5373                           
  5374                           ;main.c: 404: TRISA5 = 1;
  5375                           
  5376                           ;incstack = 0
  5377  001C5A  8A92               	bsf	3986,5,c	;volatile
  5378                           
  5379                           ;main.c: 405: TRISC3 = 1;
  5380  001C5C  8694               	bsf	3988,3,c	;volatile
  5381                           
  5382                           ;main.c: 406: TRISC4 = 1;
  5383  001C5E  8894               	bsf	3988,4,c	;volatile
  5384                           
  5385                           ;main.c: 407: TRISC5 = 0;
  5386  001C60  9A94               	bcf	3988,5,c	;volatile
  5387                           
  5388                           ;main.c: 408: LATAbits.LATA5 = 1;
  5389  001C62  8A89               	bsf	3977,5,c	;volatile
  5390                           
  5391                           ;main.c: 410: PIR1bits.SSPIF = 0;
  5392  001C64  969E               	bcf	3998,3,c	;volatile
  5393                           
  5394                           ;main.c: 411: PIE1bits.SSPIE = 1;
  5395  001C66  869D               	bsf	3997,3,c	;volatile
  5396                           
  5397                           ;main.c: 413: SSPSTATbits.SMP = 0;
  5398  001C68  9EC7               	bcf	4039,7,c	;volatile
  5399                           
  5400                           ;main.c: 414: SSPSTATbits.CKE = 1;
  5401  001C6A  8CC7               	bsf	4039,6,c	;volatile
  5402                           
  5403                           ;main.c: 415: SSPCON1bits.WCOL = 0;
  5404  001C6C  9EC6               	bcf	4038,7,c	;volatile
  5405                           
  5406                           ;main.c: 416: SSPCON1bits.CKP = 0;
  5407  001C6E  98C6               	bcf	4038,4,c	;volatile
  5408                           
  5409                           ;main.c: 417: SSPCON1bits.SSPM = 0b0100;
  5410  001C70  50C6               	movf	4038,w,c	;volatile
  5411  001C72  0BF0               	andlw	-16
  5412  001C74  0904               	iorlw	4
  5413  001C76  6EC6               	movwf	4038,c	;volatile
  5414                           
  5415                           ;main.c: 418: SSPCON1bits.SSPEN = 1;
  5416  001C78  8AC6               	bsf	4038,5,c	;volatile
  5417                           
  5418                           ;main.c: 420: SSPBUF = 0;
  5419  001C7A  0E00               	movlw	0
  5420  001C7C  6EC9               	movwf	4041,c	;volatile
  5421                           
  5422                           ;main.c: 422: INTCONbits.PEIE = 1;
  5423  001C7E  8CF2               	bsf	intcon,6,c	;volatile
  5424                           
  5425                           ;main.c: 423: INTCONbits.GIE = 1;
  5426  001C80  8EF2               	bsf	intcon,7,c	;volatile
  5427  001C82  0012               	return		;funcret
  5428  001C84                     __end_of_SpiInit:
  5429                           	opt stack 0
  5430                           tblptru	equ	0xFF8
  5431                           tblptrh	equ	0xFF7
  5432                           tblptrl	equ	0xFF6
  5433                           tablat	equ	0xFF5
  5434                           prodh	equ	0xFF4
  5435                           prodl	equ	0xFF3
  5436                           intcon	equ	0xFF2
  5437                           postinc0	equ	0xFEE
  5438                           wreg	equ	0xFE8
  5439                           indf1	equ	0xFE7
  5440                           postdec1	equ	0xFE5
  5441                           fsr1h	equ	0xFE2
  5442                           fsr1l	equ	0xFE1
  5443                           indf2	equ	0xFDF
  5444                           postinc2	equ	0xFDE
  5445                           postdec2	equ	0xFDD
  5446                           fsr2h	equ	0xFDA
  5447                           fsr2l	equ	0xFD9
  5448                           status	equ	0xFD8
  5449                           
  5450 ;; *************** function _PrintS *****************
  5451 ;; Defined at:
  5452 ;;		line 521 in file "main.c"
  5453 ;; Parameters:    Size  Location     Type
  5454 ;;  s_printS        2   30[COMRAM] PTR const unsigned char 
  5455 ;;		 -> SendMsgSreen(252), 
  5456 ;; Auto vars:     Size  Location     Type
  5457 ;;		None
  5458 ;; Return value:  Size  Location     Type
  5459 ;;                  1    wreg      void 
  5460 ;; Registers used:
  5461 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5462 ;; Tracked objects:
  5463 ;;		On entry : 0/0
  5464 ;;		On exit  : 0/0
  5465 ;;		Unchanged: 0/0
  5466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5467 ;;      Params:         2       0       0       0       0       0       0
  5468 ;;      Locals:         0       0       0       0       0       0       0
  5469 ;;      Temps:          0       0       0       0       0       0       0
  5470 ;;      Totals:         2       0       0       0       0       0       0
  5471 ;;Total ram usage:        2 bytes
  5472 ;; Hardware stack levels used:    1
  5473 ;; Hardware stack levels required when called:    3
  5474 ;; This function calls:
  5475 ;;		_PrintC
  5476 ;; This function is called by:
  5477 ;;		_main
  5478 ;; This function uses a non-reentrant model
  5479 ;;
  5480                           
  5481                           	psect	text21
  5482  001BC2                     __ptext21:
  5483                           	opt stack 0
  5484  001BC2                     _PrintS:
  5485                           	opt stack 27
  5486                           
  5487                           ;main.c: 522: while(*s_printS) {
  5488                           
  5489                           ;incstack = 0
  5490  001BC2  D009               	goto	l240
  5491  001BC4                     
  5492                           ;main.c: 523: PrintC(*s_printS++);
  5493  001BC4  C01F  FFD9         	movff	PrintS@s_printS,fsr2l
  5494  001BC8  C020  FFDA         	movff	PrintS@s_printS+1,fsr2h
  5495  001BCC  50DF               	movf	indf2,w,c
  5496  001BCE  ECBB  F00E         	call	_PrintC
  5497  001BD2  4A1F               	infsnz	PrintS@s_printS,f,c
  5498  001BD4  2A20               	incf	PrintS@s_printS+1,f,c
  5499  001BD6                     l240:
  5500  001BD6  C01F  FFD9         	movff	PrintS@s_printS,fsr2l
  5501  001BDA  C020  FFDA         	movff	PrintS@s_printS+1,fsr2h
  5502  001BDE  50DF               	movf	indf2,w,c
  5503  001BE0  A4D8               	btfss	status,2,c
  5504  001BE2  D7F0               	goto	l241
  5505                           
  5506                           ;main.c: 524: }
  5507                           ;main.c: 525: PrintC(0xFF);
  5508  001BE4  0EFF               	movlw	255
  5509  001BE6  ECBB  F00E         	call	_PrintC
  5510                           
  5511                           ;main.c: 526: PrintC(0xFF);
  5512  001BEA  0EFF               	movlw	255
  5513  001BEC  ECBB  F00E         	call	_PrintC
  5514                           
  5515                           ;main.c: 527: PrintC(0xFF);
  5516  001BF0  0EFF               	movlw	255
  5517  001BF2  ECBB  F00E         	call	_PrintC
  5518  001BF6  0012               	return		;funcret
  5519  001BF8                     __end_of_PrintS:
  5520                           	opt stack 0
  5521                           tblptru	equ	0xFF8
  5522                           tblptrh	equ	0xFF7
  5523                           tblptrl	equ	0xFF6
  5524                           tablat	equ	0xFF5
  5525                           prodh	equ	0xFF4
  5526                           prodl	equ	0xFF3
  5527                           intcon	equ	0xFF2
  5528                           postinc0	equ	0xFEE
  5529                           wreg	equ	0xFE8
  5530                           indf1	equ	0xFE7
  5531                           postdec1	equ	0xFE5
  5532                           fsr1h	equ	0xFE2
  5533                           fsr1l	equ	0xFE1
  5534                           indf2	equ	0xFDF
  5535                           postinc2	equ	0xFDE
  5536                           postdec2	equ	0xFDD
  5537                           fsr2h	equ	0xFDA
  5538                           fsr2l	equ	0xFD9
  5539                           status	equ	0xFD8
  5540                           
  5541 ;; *************** function _PrintC *****************
  5542 ;; Defined at:
  5543 ;;		line 506 in file "main.c"
  5544 ;; Parameters:    Size  Location     Type
  5545 ;;  c_printC        1    wreg     unsigned char 
  5546 ;; Auto vars:     Size  Location     Type
  5547 ;;  c_printC        1   29[COMRAM] unsigned char 
  5548 ;; Return value:  Size  Location     Type
  5549 ;;                  1    wreg      void 
  5550 ;; Registers used:
  5551 ;;		wreg
  5552 ;; Tracked objects:
  5553 ;;		On entry : 0/0
  5554 ;;		On exit  : 0/0
  5555 ;;		Unchanged: 0/0
  5556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5557 ;;      Params:         0       0       0       0       0       0       0
  5558 ;;      Locals:         1       0       0       0       0       0       0
  5559 ;;      Temps:          0       0       0       0       0       0       0
  5560 ;;      Totals:         1       0       0       0       0       0       0
  5561 ;;Total ram usage:        1 bytes
  5562 ;; Hardware stack levels used:    1
  5563 ;; Hardware stack levels required when called:    2
  5564 ;; This function calls:
  5565 ;;		Nothing
  5566 ;; This function is called by:
  5567 ;;		_PrintS
  5568 ;; This function uses a non-reentrant model
  5569 ;;
  5570                           
  5571                           	psect	text22
  5572  001D76                     __ptext22:
  5573                           	opt stack 0
  5574  001D76                     _PrintC:
  5575                           	opt stack 27
  5576                           
  5577                           ;incstack = 0
  5578                           ;PrintC@c_printC stored from wreg
  5579  001D76  6E1E               	movwf	PrintC@c_printC,c
  5580  001D78                     
  5581                           ;main.c: 507: while(TXSTA1bits.TRMT == 0) {};
  5582  001D78  A2AC               	btfss	4012,1,c	;volatile
  5583  001D7A  D7FE               	goto	l2308
  5584                           
  5585                           ;main.c: 508: TXREG1 = c_printC;
  5586  001D7C  C01E  FFAD         	movff	PrintC@c_printC,4013	;volatile
  5587  001D80  F000               	nop		;# 
  5588  001D82  0012               	return		;funcret
  5589  001D84                     __end_of_PrintC:
  5590                           	opt stack 0
  5591                           tblptru	equ	0xFF8
  5592                           tblptrh	equ	0xFF7
  5593                           tblptrl	equ	0xFF6
  5594                           tablat	equ	0xFF5
  5595                           prodh	equ	0xFF4
  5596                           prodl	equ	0xFF3
  5597                           intcon	equ	0xFF2
  5598                           postinc0	equ	0xFEE
  5599                           wreg	equ	0xFE8
  5600                           indf1	equ	0xFE7
  5601                           postdec1	equ	0xFE5
  5602                           fsr1h	equ	0xFE2
  5603                           fsr1l	equ	0xFE1
  5604                           indf2	equ	0xFDF
  5605                           postinc2	equ	0xFDE
  5606                           postdec2	equ	0xFDD
  5607                           fsr2h	equ	0xFDA
  5608                           fsr2l	equ	0xFD9
  5609                           status	equ	0xFD8
  5610                           
  5611 ;; *************** function _InitTmr0 *****************
  5612 ;; Defined at:
  5613 ;;		line 458 in file "main.c"
  5614 ;; Parameters:    Size  Location     Type
  5615 ;;		None
  5616 ;; Auto vars:     Size  Location     Type
  5617 ;;		None
  5618 ;; Return value:  Size  Location     Type
  5619 ;;                  1    wreg      void 
  5620 ;; Registers used:
  5621 ;;		wreg, status,2
  5622 ;; Tracked objects:
  5623 ;;		On entry : 0/0
  5624 ;;		On exit  : 0/0
  5625 ;;		Unchanged: 0/0
  5626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5627 ;;      Params:         0       0       0       0       0       0       0
  5628 ;;      Locals:         0       0       0       0       0       0       0
  5629 ;;      Temps:          0       0       0       0       0       0       0
  5630 ;;      Totals:         0       0       0       0       0       0       0
  5631 ;;Total ram usage:        0 bytes
  5632 ;; Hardware stack levels used:    1
  5633 ;; Hardware stack levels required when called:    2
  5634 ;; This function calls:
  5635 ;;		Nothing
  5636 ;; This function is called by:
  5637 ;;		_main
  5638 ;; This function uses a non-reentrant model
  5639 ;;
  5640                           
  5641                           	psect	text23
  5642  001D42                     __ptext23:
  5643                           	opt stack 0
  5644  001D42                     _InitTmr0:
  5645                           	opt stack 28
  5646                           
  5647                           ;main.c: 459: T08BIT = 0;
  5648                           
  5649                           ;incstack = 0
  5650  001D42  9CD5               	bcf	4053,6,c	;volatile
  5651                           
  5652                           ;main.c: 460: T0CS = 0;
  5653  001D44  9AD5               	bcf	4053,5,c	;volatile
  5654                           
  5655                           ;main.c: 461: T0SE = 0;
  5656  001D46  98D5               	bcf	4053,4,c	;volatile
  5657                           
  5658                           ;main.c: 462: PSA = 0;
  5659  001D48  96D5               	bcf	4053,3,c	;volatile
  5660                           
  5661                           ;main.c: 463: T0PS2 = 0;
  5662  001D4A  94D5               	bcf	4053,2,c	;volatile
  5663                           
  5664                           ;main.c: 464: T0PS1 = 1;
  5665  001D4C  82D5               	bsf	4053,1,c	;volatile
  5666                           
  5667                           ;main.c: 465: T0PS0 = 1;
  5668  001D4E  80D5               	bsf	4053,0,c	;volatile
  5669                           
  5670                           ;main.c: 466: TMR0L = 0xB0;
  5671  001D50  0EB0               	movlw	176
  5672  001D52  6ED6               	movwf	4054,c	;volatile
  5673                           
  5674                           ;main.c: 467: TMR0H = 0x3C;
  5675  001D54  0E3C               	movlw	60
  5676  001D56  6ED7               	movwf	4055,c	;volatile
  5677                           
  5678                           ;main.c: 468: TMR0IF = 0;
  5679  001D58  94F2               	bcf	intcon,2,c	;volatile
  5680                           
  5681                           ;main.c: 471: TMR0ON = 1;
  5682  001D5A  8ED5               	bsf	4053,7,c	;volatile
  5683  001D5C  0012               	return		;funcret
  5684  001D5E                     __end_of_InitTmr0:
  5685                           	opt stack 0
  5686                           tblptru	equ	0xFF8
  5687                           tblptrh	equ	0xFF7
  5688                           tblptrl	equ	0xFF6
  5689                           tablat	equ	0xFF5
  5690                           prodh	equ	0xFF4
  5691                           prodl	equ	0xFF3
  5692                           intcon	equ	0xFF2
  5693                           postinc0	equ	0xFEE
  5694                           wreg	equ	0xFE8
  5695                           indf1	equ	0xFE7
  5696                           postdec1	equ	0xFE5
  5697                           fsr1h	equ	0xFE2
  5698                           fsr1l	equ	0xFE1
  5699                           indf2	equ	0xFDF
  5700                           postinc2	equ	0xFDE
  5701                           postdec2	equ	0xFDD
  5702                           fsr2h	equ	0xFDA
  5703                           fsr2l	equ	0xFD9
  5704                           status	equ	0xFD8
  5705                           
  5706 ;; *************** function _ClockInit *****************
  5707 ;; Defined at:
  5708 ;;		line 383 in file "main.c"
  5709 ;; Parameters:    Size  Location     Type
  5710 ;;		None
  5711 ;; Auto vars:     Size  Location     Type
  5712 ;;		None
  5713 ;; Return value:  Size  Location     Type
  5714 ;;                  1    wreg      void 
  5715 ;; Registers used:
  5716 ;;		None
  5717 ;; Tracked objects:
  5718 ;;		On entry : 0/0
  5719 ;;		On exit  : 0/0
  5720 ;;		Unchanged: 0/0
  5721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5722 ;;      Params:         0       0       0       0       0       0       0
  5723 ;;      Locals:         0       0       0       0       0       0       0
  5724 ;;      Temps:          0       0       0       0       0       0       0
  5725 ;;      Totals:         0       0       0       0       0       0       0
  5726 ;;Total ram usage:        0 bytes
  5727 ;; Hardware stack levels used:    1
  5728 ;; Hardware stack levels required when called:    2
  5729 ;; This function calls:
  5730 ;;		Nothing
  5731 ;; This function is called by:
  5732 ;;		_main
  5733 ;; This function uses a non-reentrant model
  5734 ;;
  5735                           
  5736                           	psect	text24
  5737  001D84                     __ptext24:
  5738                           	opt stack 0
  5739  001D84                     _ClockInit:
  5740                           	opt stack 28
  5741                           
  5742                           ;main.c: 384: OSCCONbits.IRCF = 0b111;
  5743                           
  5744                           ;incstack = 0
  5745  001D84  88D3               	bsf	4051,4,c	;volatile
  5746  001D86  8AD3               	bsf	4051,5,c	;volatile
  5747  001D88  8CD3               	bsf	4051,6,c	;volatile
  5748                           
  5749                           ;main.c: 385: OSCTUNEbits.PLLEN = 1;
  5750  001D8A  8C9B               	bsf	3995,6,c	;volatile
  5751  001D8C  B4D3               	btfsc	4051,2,c	;volatile
  5752  001D8E  0012               	return	
  5753  001D90  D7FD               	goto	l211
  5754  001D92                     __end_of_ClockInit:
  5755                           	opt stack 0
  5756                           tblptru	equ	0xFF8
  5757                           tblptrh	equ	0xFF7
  5758                           tblptrl	equ	0xFF6
  5759                           tablat	equ	0xFF5
  5760                           prodh	equ	0xFF4
  5761                           prodl	equ	0xFF3
  5762                           intcon	equ	0xFF2
  5763                           postinc0	equ	0xFEE
  5764                           wreg	equ	0xFE8
  5765                           indf1	equ	0xFE7
  5766                           postdec1	equ	0xFE5
  5767                           fsr1h	equ	0xFE2
  5768                           fsr1l	equ	0xFE1
  5769                           indf2	equ	0xFDF
  5770                           postinc2	equ	0xFDE
  5771                           postdec2	equ	0xFDD
  5772                           fsr2h	equ	0xFDA
  5773                           fsr2l	equ	0xFD9
  5774                           status	equ	0xFD8
  5775                           
  5776 ;; *************** function _ClearArray *****************
  5777 ;; Defined at:
  5778 ;;		line 537 in file "main.c"
  5779 ;; Parameters:    Size  Location     Type
  5780 ;;		None
  5781 ;; Auto vars:     Size  Location     Type
  5782 ;;  cpt_vide        1   29[COMRAM] unsigned char 
  5783 ;; Return value:  Size  Location     Type
  5784 ;;                  1    wreg      void 
  5785 ;; Registers used:
  5786 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5787 ;; Tracked objects:
  5788 ;;		On entry : 0/0
  5789 ;;		On exit  : 0/0
  5790 ;;		Unchanged: 0/0
  5791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5792 ;;      Params:         0       0       0       0       0       0       0
  5793 ;;      Locals:         1       0       0       0       0       0       0
  5794 ;;      Temps:          0       0       0       0       0       0       0
  5795 ;;      Totals:         1       0       0       0       0       0       0
  5796 ;;Total ram usage:        1 bytes
  5797 ;; Hardware stack levels used:    1
  5798 ;; Hardware stack levels required when called:    2
  5799 ;; This function calls:
  5800 ;;		Nothing
  5801 ;; This function is called by:
  5802 ;;		_main
  5803 ;; This function uses a non-reentrant model
  5804 ;;
  5805                           
  5806                           	psect	text25
  5807  001C84                     __ptext25:
  5808                           	opt stack 0
  5809  001C84                     _ClearArray:
  5810                           	opt stack 28
  5811                           
  5812                           ;main.c: 538: char cpt_vide = 0;
  5813                           
  5814                           ;incstack = 0
  5815  001C84  0E00               	movlw	0
  5816  001C86  6E1E               	movwf	ClearArray@cpt_vide,c
  5817                           
  5818                           ;main.c: 539: for(cpt_vide=0;cpt_vide<252;cpt_vide++) {
  5819  001C88  0E00               	movlw	0
  5820  001C8A  6E1E               	movwf	ClearArray@cpt_vide,c
  5821  001C8C                     l2552:
  5822  001C8C  0EFB               	movlw	251
  5823  001C8E  641E               	cpfsgt	ClearArray@cpt_vide,c
  5824  001C90  D001               	goto	l246
  5825  001C92  0012               	return	
  5826  001C94                     l246:
  5827                           
  5828                           ;main.c: 540: SendMsgSreen[cpt_vide] = '\0';
  5829  001C94  501E               	movf	ClearArray@cpt_vide,w,c
  5830  001C96  0D01               	mullw	1
  5831  001C98  0E00               	movlw	low _SendMsgSreen
  5832  001C9A  24F3               	addwf	prodl,w,c
  5833  001C9C  6ED9               	movwf	fsr2l,c
  5834  001C9E  0E01               	movlw	high _SendMsgSreen
  5835  001CA0  20F4               	addwfc	prodh,w,c
  5836  001CA2  6EDA               	movwf	fsr2h,c
  5837  001CA4  0E00               	movlw	0
  5838  001CA6  6EDF               	movwf	indf2,c
  5839  001CA8  2A1E               	incf	ClearArray@cpt_vide,f,c
  5840  001CAA  D7F0               	goto	l2552
  5841  001CAC                     __end_of_ClearArray:
  5842                           	opt stack 0
  5843                           tblptru	equ	0xFF8
  5844                           tblptrh	equ	0xFF7
  5845                           tblptrl	equ	0xFF6
  5846                           tablat	equ	0xFF5
  5847                           prodh	equ	0xFF4
  5848                           prodl	equ	0xFF3
  5849                           intcon	equ	0xFF2
  5850                           postinc0	equ	0xFEE
  5851                           wreg	equ	0xFE8
  5852                           indf1	equ	0xFE7
  5853                           postdec1	equ	0xFE5
  5854                           fsr1h	equ	0xFE2
  5855                           fsr1l	equ	0xFE1
  5856                           indf2	equ	0xFDF
  5857                           postinc2	equ	0xFDE
  5858                           postdec2	equ	0xFDD
  5859                           fsr2h	equ	0xFDA
  5860                           fsr2l	equ	0xFD9
  5861                           status	equ	0xFD8
  5862                           
  5863 ;; *************** function _Adc *****************
  5864 ;; Defined at:
  5865 ;;		line 488 in file "main.c"
  5866 ;; Parameters:    Size  Location     Type
  5867 ;;  channel         1    wreg     unsigned char 
  5868 ;; Auto vars:     Size  Location     Type
  5869 ;;  channel         1   33[COMRAM] unsigned char 
  5870 ;; Return value:  Size  Location     Type
  5871 ;;                  2   29[COMRAM] unsigned int 
  5872 ;; Registers used:
  5873 ;;		wreg, status,2, status,0
  5874 ;; Tracked objects:
  5875 ;;		On entry : 0/0
  5876 ;;		On exit  : 0/0
  5877 ;;		Unchanged: 0/0
  5878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5879 ;;      Params:         2       0       0       0       0       0       0
  5880 ;;      Locals:         1       0       0       0       0       0       0
  5881 ;;      Temps:          2       0       0       0       0       0       0
  5882 ;;      Totals:         5       0       0       0       0       0       0
  5883 ;;Total ram usage:        5 bytes
  5884 ;; Hardware stack levels used:    1
  5885 ;; Hardware stack levels required when called:    2
  5886 ;; This function calls:
  5887 ;;		Nothing
  5888 ;; This function is called by:
  5889 ;;		_main
  5890 ;; This function uses a non-reentrant model
  5891 ;;
  5892                           
  5893                           	psect	text26
  5894  001BF8                     __ptext26:
  5895                           	opt stack 0
  5896  001BF8                     _Adc:
  5897                           	opt stack 28
  5898                           
  5899                           ;incstack = 0
  5900                           ;Adc@channel stored from wreg
  5901  001BF8  6E22               	movwf	Adc@channel,c
  5902                           
  5903                           ;main.c: 489: ADCON0bits.ADON = 1;
  5904  001BFA  80C2               	bsf	4034,0,c	;volatile
  5905                           
  5906                           ;main.c: 490: ADCON0bits.CHS = channel;
  5907  001BFC  C022  F020         	movff	Adc@channel,??_Adc
  5908  001C00  4620               	rlncf	??_Adc,f,c
  5909  001C02  4620               	rlncf	??_Adc,f,c
  5910  001C04  50C2               	movf	4034,w,c	;volatile
  5911  001C06  1820               	xorwf	??_Adc,w,c
  5912  001C08  0BC3               	andlw	-61
  5913  001C0A  1820               	xorwf	??_Adc,w,c
  5914  001C0C  6EC2               	movwf	4034,c	;volatile
  5915                           
  5916                           ;main.c: 491: ADCON0bits.GO = 1;
  5917  001C0E  82C2               	bsf	4034,1,c	;volatile
  5918  001C10  B2C2               	btfsc	4034,1,c	;volatile
  5919  001C12  D7FE               	goto	l229
  5920                           
  5921                           ;main.c: 493: ADCON0bits.ADON = 0;
  5922  001C14  90C2               	bcf	4034,0,c	;volatile
  5923                           
  5924                           ;main.c: 494: return (ADRESH << 8) + ADRESL;
  5925  001C16  50C4               	movf	4036,w,c	;volatile
  5926  001C18  6E21               	movwf	(??_Adc+1)& (0+255),c
  5927  001C1A  6A20               	clrf	??_Adc& (0+255),c
  5928  001C1C  50C3               	movf	4035,w,c	;volatile
  5929  001C1E  2420               	addwf	??_Adc,w,c
  5930  001C20  6E1E               	movwf	?_Adc,c
  5931  001C22  0E00               	movlw	0
  5932  001C24  2021               	addwfc	??_Adc+1,w,c
  5933  001C26  6E1F               	movwf	?_Adc+1,c
  5934  001C28  0012               	return	
  5935  001C2A                     __end_of_Adc:
  5936                           	opt stack 0
  5937                           tblptru	equ	0xFF8
  5938                           tblptrh	equ	0xFF7
  5939                           tblptrl	equ	0xFF6
  5940                           tablat	equ	0xFF5
  5941                           prodh	equ	0xFF4
  5942                           prodl	equ	0xFF3
  5943                           intcon	equ	0xFF2
  5944                           postinc0	equ	0xFEE
  5945                           wreg	equ	0xFE8
  5946                           indf1	equ	0xFE7
  5947                           postdec1	equ	0xFE5
  5948                           fsr1h	equ	0xFE2
  5949                           fsr1l	equ	0xFE1
  5950                           indf2	equ	0xFDF
  5951                           postinc2	equ	0xFDE
  5952                           postdec2	equ	0xFDD
  5953                           fsr2h	equ	0xFDA
  5954                           fsr2l	equ	0xFD9
  5955                           status	equ	0xFD8
  5956                           
  5957 ;; *************** function _ADCInit *****************
  5958 ;; Defined at:
  5959 ;;		line 389 in file "main.c"
  5960 ;; Parameters:    Size  Location     Type
  5961 ;;		None
  5962 ;; Auto vars:     Size  Location     Type
  5963 ;;		None
  5964 ;; Return value:  Size  Location     Type
  5965 ;;                  1    wreg      void 
  5966 ;; Registers used:
  5967 ;;		wreg, status,2
  5968 ;; Tracked objects:
  5969 ;;		On entry : 0/0
  5970 ;;		On exit  : 0/0
  5971 ;;		Unchanged: 0/0
  5972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5973 ;;      Params:         0       0       0       0       0       0       0
  5974 ;;      Locals:         0       0       0       0       0       0       0
  5975 ;;      Temps:          0       0       0       0       0       0       0
  5976 ;;      Totals:         0       0       0       0       0       0       0
  5977 ;;Total ram usage:        0 bytes
  5978 ;; Hardware stack levels used:    1
  5979 ;; Hardware stack levels required when called:    2
  5980 ;; This function calls:
  5981 ;;		Nothing
  5982 ;; This function is called by:
  5983 ;;		_main
  5984 ;; This function uses a non-reentrant model
  5985 ;;
  5986                           
  5987                           	psect	text27
  5988  001CAC                     __ptext27:
  5989                           	opt stack 0
  5990  001CAC                     _ADCInit:
  5991                           	opt stack 28
  5992                           
  5993                           ;main.c: 390: TRISAbits.TRISA0 = 1;
  5994                           
  5995                           ;incstack = 0
  5996  001CAC  8092               	bsf	3986,0,c	;volatile
  5997                           
  5998                           ;main.c: 391: TRISAbits.TRISA1 = 1;
  5999  001CAE  8292               	bsf	3986,1,c	;volatile
  6000                           
  6001                           ;main.c: 392: TRISAbits.TRISA2 = 1;
  6002  001CB0  8492               	bsf	3986,2,c	;volatile
  6003                           
  6004                           ;main.c: 393: TRISAbits.TRISA3 = 1;
  6005  001CB2  8692               	bsf	3986,3,c	;volatile
  6006                           
  6007                           ;main.c: 396: ADCON1bits.PCFG = 0b1011;
  6008  001CB4  50C1               	movf	4033,w,c	;volatile
  6009  001CB6  0BF0               	andlw	-16
  6010  001CB8  090B               	iorlw	11
  6011  001CBA  6EC1               	movwf	4033,c	;volatile
  6012                           
  6013                           ;main.c: 397: ADCON1bits.VCFG = 0;
  6014  001CBC  0ECF               	movlw	-49
  6015  001CBE  16C1               	andwf	4033,f,c	;volatile
  6016                           
  6017                           ;main.c: 398: ADCON2bits.ADFM = 1;
  6018  001CC0  8EC0               	bsf	4032,7,c	;volatile
  6019                           
  6020                           ;main.c: 399: ADCON2bits.ACQT = 0b010;
  6021  001CC2  50C0               	movf	4032,w,c	;volatile
  6022  001CC4  0BC7               	andlw	-57
  6023  001CC6  0910               	iorlw	16
  6024  001CC8  6EC0               	movwf	4032,c	;volatile
  6025                           
  6026                           ;main.c: 400: ADCON2bits.ADCS = 0b001;
  6027  001CCA  50C0               	movf	4032,w,c	;volatile
  6028  001CCC  0BF8               	andlw	-8
  6029  001CCE  0901               	iorlw	1
  6030  001CD0  6EC0               	movwf	4032,c	;volatile
  6031  001CD2  0012               	return		;funcret
  6032  001CD4                     __end_of_ADCInit:
  6033                           	opt stack 0
  6034                           tblptru	equ	0xFF8
  6035                           tblptrh	equ	0xFF7
  6036                           tblptrl	equ	0xFF6
  6037                           tablat	equ	0xFF5
  6038                           prodh	equ	0xFF4
  6039                           prodl	equ	0xFF3
  6040                           intcon	equ	0xFF2
  6041                           postinc0	equ	0xFEE
  6042                           wreg	equ	0xFE8
  6043                           indf1	equ	0xFE7
  6044                           postdec1	equ	0xFE5
  6045                           fsr1h	equ	0xFE2
  6046                           fsr1l	equ	0xFE1
  6047                           indf2	equ	0xFDF
  6048                           postinc2	equ	0xFDE
  6049                           postdec2	equ	0xFDD
  6050                           fsr2h	equ	0xFDA
  6051                           fsr2l	equ	0xFD9
  6052                           status	equ	0xFD8
  6053                           
  6054 ;; *************** function _ISR *****************
  6055 ;; Defined at:
  6056 ;;		line 564 in file "main.c"
  6057 ;; Parameters:    Size  Location     Type
  6058 ;;		None
  6059 ;; Auto vars:     Size  Location     Type
  6060 ;;  Receive         1   27[COMRAM] unsigned char 
  6061 ;;  data_spi        1   28[COMRAM] unsigned char 
  6062 ;; Return value:  Size  Location     Type
  6063 ;;                  1    wreg      void 
  6064 ;; Registers used:
  6065 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6066 ;; Tracked objects:
  6067 ;;		On entry : 0/0
  6068 ;;		On exit  : 0/0
  6069 ;;		Unchanged: 0/0
  6070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6071 ;;      Params:         0       0       0       0       0       0       0
  6072 ;;      Locals:         2       0       0       0       0       0       0
  6073 ;;      Temps:         25       0       0       0       0       0       0
  6074 ;;      Totals:        27       0       0       0       0       0       0
  6075 ;;Total ram usage:       27 bytes
  6076 ;; Hardware stack levels used:    1
  6077 ;; Hardware stack levels required when called:    1
  6078 ;; This function calls:
  6079 ;;		_Modulo
  6080 ;; This function is called by:
  6081 ;;		Interrupt level 2
  6082 ;; This function uses a non-reentrant model
  6083 ;;
  6084                           
  6085                           	psect	intcode
  6086  000008                     __pintcode:
  6087                           	opt stack 0
  6088  000008                     _ISR:
  6089                           	opt stack 25
  6090                           
  6091                           ;incstack = 0
  6092  000008  8262               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6093  00000A  CFFA F00A          	movff	pclath,??_ISR+7
  6094  00000E  CFFB F00B          	movff	pclatu,??_ISR+8
  6095  000012  CFE9 F00C          	movff	fsr0l,??_ISR+9
  6096  000016  CFEA F00D          	movff	fsr0h,??_ISR+10
  6097  00001A  CFE1 F00E          	movff	fsr1l,??_ISR+11
  6098  00001E  CFE2 F00F          	movff	fsr1h,??_ISR+12
  6099  000022  CFD9 F010          	movff	fsr2l,??_ISR+13
  6100  000026  CFDA F011          	movff	fsr2h,??_ISR+14
  6101  00002A  CFF3 F012          	movff	prodl,??_ISR+15
  6102  00002E  CFF4 F013          	movff	prodh,??_ISR+16
  6103  000032  CFF6 F014          	movff	tblptrl,??_ISR+17
  6104  000036  CFF7 F015          	movff	tblptrh,??_ISR+18
  6105  00003A  CFF8 F016          	movff	tblptru,??_ISR+19
  6106  00003E  CFF5 F017          	movff	tablat,??_ISR+20
  6107  000042  C062  F018         	movff	btemp,??_ISR+21
  6108  000046  C063  F019         	movff	btemp+1,??_ISR+22
  6109  00004A  C064  F01A         	movff	btemp+2,??_ISR+23
  6110  00004E  C065  F01B         	movff	btemp+3,??_ISR+24
  6111                           
  6112                           ;main.c: 566: if(PIR1bits.SSPIF){
  6113  000052  A69E               	btfss	3998,3,c	;volatile
  6114  000054  D22D               	goto	i2l318
  6115                           
  6116                           ;main.c: 567: char data_spi = SSPBUF;
  6117  000056  CFC9 F01D          	movff	4041,ISR@data_spi	;volatile
  6118                           
  6119                           ;main.c: 568: PIR1bits.SSPIF = 0;
  6120  00005A  969E               	bcf	3998,3,c	;volatile
  6121                           
  6122                           ;main.c: 571: switch(EtatSpi) {
  6123  00005C  D1EE               	goto	i2l260
  6124  00005E                     i2l261:
  6125                           
  6126                           ;main.c: 573: TailleMsgSpi = data_spi;
  6127  00005E  C01D  F05E         	movff	ISR@data_spi,_TailleMsgSpi
  6128                           
  6129                           ;main.c: 574: if(TailleMsgSpi) {
  6130  000062  505E               	movf	_TailleMsgSpi,w,c
  6131  000064  B4D8               	btfsc	status,2,c
  6132  000066  D002               	goto	i2l262
  6133                           
  6134                           ;main.c: 575: EtatSpi = 1;
  6135  000068  0E01               	movlw	1
  6136  00006A  6E5F               	movwf	_EtatSpi,c
  6137  00006C                     i2l262:
  6138                           
  6139                           ;main.c: 576: }
  6140                           ;main.c: 577: Checksum = 0;
  6141  00006C  0E00               	movlw	0
  6142  00006E  6E5B               	movwf	_Checksum+1,c
  6143  000070  0E00               	movlw	0
  6144  000072  6E5A               	movwf	_Checksum,c
  6145                           
  6146                           ;main.c: 578: CptSpi = 1;
  6147  000074  0E01               	movlw	1
  6148  000076  6E61               	movwf	_CptSpi,c
  6149                           
  6150                           ;main.c: 579: break;
  6151  000078  D1EE               	goto	i2l263
  6152  00007A                     i2l264:
  6153                           
  6154                           ;main.c: 581: TypeVarSpi = data_spi;
  6155  00007A  C01D  F0C4         	movff	ISR@data_spi,_TypeVarSpi
  6156                           
  6157                           ;main.c: 585: EtatSpi = 2;
  6158  00007E  0E02               	movlw	2
  6159  000080  6E5F               	movwf	_EtatSpi,c
  6160                           
  6161                           ;main.c: 587: CptSpi++;
  6162  000082  2A61               	incf	_CptSpi,f,c
  6163                           
  6164                           ;main.c: 588: break;
  6165  000084  D1E8               	goto	i2l263
  6166  000086                     
  6167                           ;main.c: 590: TextSpi[CptSpi-2] = data_spi;
  6168  000086  0EFE               	movlw	254
  6169  000088  6E03               	movwf	??_ISR& (0+255),c
  6170  00008A  0EFF               	movlw	255
  6171  00008C  6E04               	movwf	(??_ISR+1)& (0+255),c
  6172  00008E  5061               	movf	_CptSpi,w,c
  6173  000090  6E05               	movwf	(??_ISR+2)& (0+255),c
  6174  000092  6A06               	clrf	(??_ISR+3)& (0+255),c
  6175  000094  5003               	movf	??_ISR,w,c
  6176  000096  2605               	addwf	??_ISR+2,f,c
  6177  000098  5004               	movf	??_ISR+1,w,c
  6178  00009A  2206               	addwfc	??_ISR+3,f,c
  6179  00009C  0E00               	movlw	low _TextSpi
  6180  00009E  2405               	addwf	??_ISR+2,w,c
  6181  0000A0  6ED9               	movwf	fsr2l,c
  6182  0000A2  0E03               	movlw	high _TextSpi
  6183  0000A4  2006               	addwfc	??_ISR+3,w,c
  6184  0000A6  6EDA               	movwf	fsr2h,c
  6185  0000A8  C01D  FFDF         	movff	ISR@data_spi,indf2
  6186                           
  6187                           ;main.c: 591: CptSpi++;
  6188  0000AC  2A61               	incf	_CptSpi,f,c
  6189                           
  6190                           ;main.c: 592: if(CptSpi == TailleMsgSpi) {
  6191  0000AE  505E               	movf	_TailleMsgSpi,w,c
  6192  0000B0  1861               	xorwf	_CptSpi,w,c
  6193  0000B2  A4D8               	btfss	status,2,c
  6194  0000B4  D1D0               	goto	i2l263
  6195                           
  6196                           ;main.c: 593: EtatSpi = 3;
  6197  0000B6  0E03               	movlw	3
  6198  0000B8  D1BC               	goto	L2
  6199  0000BA                     
  6200                           ;main.c: 597: if(Modulo(Checksum) == data_spi) {
  6201  0000BA  C05A  F001         	movff	_Checksum,Modulo@M_nombre
  6202  0000BE  C05B  F002         	movff	_Checksum+1,Modulo@M_nombre+1
  6203  0000C2  ECAF  F00E         	call	_Modulo	;wreg free
  6204  0000C6  181D               	xorwf	ISR@data_spi,w,c
  6205  0000C8  A4D8               	btfss	status,2,c
  6206  0000CA  D1B5               	goto	i2l309
  6207                           
  6208                           ;main.c: 598: FlagSpi = 1;
  6209  0000CC  0E01               	movlw	1
  6210  0000CE  0100               	movlb	0	; () banked
  6211  0000D0  6FCC               	movwf	_FlagSpi& (0+255),b
  6212                           
  6213                           ;main.c: 599: CptSpi = 0;
  6214  0000D2  0E00               	movlw	0
  6215  0000D4  6E61               	movwf	_CptSpi,c
  6216                           
  6217                           ;main.c: 600: switch(TypeVarSpi) {
  6218  0000D6  D183               	goto	i2l269
  6219  0000D8                     
  6220                           ; BSR set to: 0
  6221                           ;main.c: 602: for(CptSpi=0;CptSpi<15;CptSpi++) {
  6222                           
  6223                           ; BSR set to: 0
  6224  0000D8  0E00               	movlw	0
  6225  0000DA  6E61               	movwf	_CptSpi,c
  6226  0000DC                     i2l2884:
  6227                           
  6228                           ; BSR set to: 0
  6229  0000DC  0E0E               	movlw	14
  6230  0000DE  6461               	cpfsgt	_CptSpi,c
  6231  0000E0  D001               	goto	i2l271
  6232  0000E2  D1A9               	goto	i2l309
  6233  0000E4                     i2l271:
  6234                           
  6235                           ;main.c: 603: if(CptSpi < TailleMsgSpi-2) {
  6236                           
  6237                           ; BSR set to: 0
  6238  0000E4  0EFE               	movlw	254
  6239  0000E6  6E03               	movwf	??_ISR& (0+255),c
  6240  0000E8  0EFF               	movlw	255
  6241  0000EA  6E04               	movwf	(??_ISR+1)& (0+255),c
  6242  0000EC  505E               	movf	_TailleMsgSpi,w,c
  6243  0000EE  6E05               	movwf	(??_ISR+2)& (0+255),c
  6244  0000F0  6A06               	clrf	(??_ISR+3)& (0+255),c
  6245  0000F2  5003               	movf	??_ISR,w,c
  6246  0000F4  2605               	addwf	??_ISR+2,f,c
  6247  0000F6  5004               	movf	??_ISR+1,w,c
  6248  0000F8  2206               	addwfc	??_ISR+3,f,c
  6249  0000FA  5061               	movf	_CptSpi,w,c
  6250  0000FC  6E07               	movwf	(??_ISR+4)& (0+255),c
  6251  0000FE  6A08               	clrf	(??_ISR+5)& (0+255),c
  6252  000100  5005               	movf	??_ISR+2,w,c
  6253  000102  5C07               	subwf	??_ISR+4,w,c
  6254  000104  5008               	movf	??_ISR+5,w,c
  6255  000106  0A80               	xorlw	128
  6256  000108  6E09               	movwf	(??_ISR+6)& (0+255),c
  6257  00010A  5006               	movf	??_ISR+3,w,c
  6258  00010C  0A80               	xorlw	128
  6259  00010E  5809               	subwfb	(??_ISR+6)& (0+255),w,c
  6260  000110  B0D8               	btfsc	status,0,c
  6261  000112  D013               	goto	i2l273
  6262                           
  6263                           ;main.c: 604: text_prgm[0][CptSpi] = TextSpi[CptSpi];
  6264  000114  5061               	movf	_CptSpi,w,c
  6265  000116  0D01               	mullw	1
  6266  000118  0E00               	movlw	low _TextSpi
  6267  00011A  24F3               	addwf	prodl,w,c
  6268  00011C  6ED9               	movwf	fsr2l,c
  6269  00011E  0E03               	movlw	high _TextSpi
  6270  000120  20F4               	addwfc	prodh,w,c
  6271  000122  6EDA               	movwf	fsr2h,c
  6272  000124  5061               	movf	_CptSpi,w,c
  6273  000126  0D01               	mullw	1
  6274  000128  0E00               	movlw	low _text_prgm
  6275  00012A  24F3               	addwf	prodl,w,c
  6276  00012C  6EE1               	movwf	fsr1l,c
  6277  00012E  0E02               	movlw	high _text_prgm
  6278  000130  20F4               	addwfc	prodh,w,c
  6279  000132  6EE2               	movwf	fsr1h,c
  6280  000134  CFDF FFE7          	movff	indf2,indf1
  6281                           
  6282                           ;main.c: 605: } else {
  6283  000138  D00A               	goto	i2l274
  6284  00013A                     i2l273:
  6285                           
  6286                           ;main.c: 606: text_prgm[0][CptSpi] = '\0';
  6287  00013A  5061               	movf	_CptSpi,w,c
  6288  00013C  0D01               	mullw	1
  6289  00013E  0E00               	movlw	low _text_prgm
  6290  000140  24F3               	addwf	prodl,w,c
  6291  000142  6ED9               	movwf	fsr2l,c
  6292  000144  0E02               	movlw	high _text_prgm
  6293  000146  20F4               	addwfc	prodh,w,c
  6294  000148  6EDA               	movwf	fsr2h,c
  6295  00014A  0E00               	movlw	0
  6296  00014C  6EDF               	movwf	indf2,c
  6297  00014E                     i2l274:
  6298  00014E  2A61               	incf	_CptSpi,f,c
  6299  000150  D7C5               	goto	i2l2884
  6300  000152                     
  6301                           ;main.c: 611: for(CptSpi=0;CptSpi<15;CptSpi++) {
  6302  000152  0E00               	movlw	0
  6303  000154  6E61               	movwf	_CptSpi,c
  6304  000156                     i2l2900:
  6305  000156  0E0E               	movlw	14
  6306  000158  6461               	cpfsgt	_CptSpi,c
  6307  00015A  D001               	goto	i2l277
  6308  00015C  D16C               	goto	i2l309
  6309  00015E                     i2l277:
  6310                           
  6311                           ;main.c: 612: if(CptSpi < TailleMsgSpi-2) {
  6312  00015E  0EFE               	movlw	254
  6313  000160  6E03               	movwf	??_ISR& (0+255),c
  6314  000162  0EFF               	movlw	255
  6315  000164  6E04               	movwf	(??_ISR+1)& (0+255),c
  6316  000166  505E               	movf	_TailleMsgSpi,w,c
  6317  000168  6E05               	movwf	(??_ISR+2)& (0+255),c
  6318  00016A  6A06               	clrf	(??_ISR+3)& (0+255),c
  6319  00016C  5003               	movf	??_ISR,w,c
  6320  00016E  2605               	addwf	??_ISR+2,f,c
  6321  000170  5004               	movf	??_ISR+1,w,c
  6322  000172  2206               	addwfc	??_ISR+3,f,c
  6323  000174  5061               	movf	_CptSpi,w,c
  6324  000176  6E07               	movwf	(??_ISR+4)& (0+255),c
  6325  000178  6A08               	clrf	(??_ISR+5)& (0+255),c
  6326  00017A  5005               	movf	??_ISR+2,w,c
  6327  00017C  5C07               	subwf	??_ISR+4,w,c
  6328  00017E  5008               	movf	??_ISR+5,w,c
  6329  000180  0A80               	xorlw	128
  6330  000182  6E09               	movwf	(??_ISR+6)& (0+255),c
  6331  000184  5006               	movf	??_ISR+3,w,c
  6332  000186  0A80               	xorlw	128
  6333  000188  5809               	subwfb	(??_ISR+6)& (0+255),w,c
  6334  00018A  B0D8               	btfsc	status,0,c
  6335  00018C  D013               	goto	i2l279
  6336                           
  6337                           ;main.c: 613: text_prgm[1][CptSpi] = TextSpi[CptSpi];
  6338  00018E  5061               	movf	_CptSpi,w,c
  6339  000190  0D01               	mullw	1
  6340  000192  0E00               	movlw	low _TextSpi
  6341  000194  24F3               	addwf	prodl,w,c
  6342  000196  6ED9               	movwf	fsr2l,c
  6343  000198  0E03               	movlw	high _TextSpi
  6344  00019A  20F4               	addwfc	prodh,w,c
  6345  00019C  6EDA               	movwf	fsr2h,c
  6346  00019E  5061               	movf	_CptSpi,w,c
  6347  0001A0  0D01               	mullw	1
  6348  0001A2  0E0F               	movlw	low (_text_prgm+15)
  6349  0001A4  24F3               	addwf	prodl,w,c
  6350  0001A6  6EE1               	movwf	fsr1l,c
  6351  0001A8  0E02               	movlw	high (_text_prgm+15)
  6352  0001AA  20F4               	addwfc	prodh,w,c
  6353  0001AC  6EE2               	movwf	fsr1h,c
  6354  0001AE  CFDF FFE7          	movff	indf2,indf1
  6355                           
  6356                           ;main.c: 614: } else {
  6357  0001B2  D00A               	goto	i2l280
  6358  0001B4                     i2l279:
  6359                           
  6360                           ;main.c: 615: text_prgm[1][CptSpi] = '\0';
  6361  0001B4  5061               	movf	_CptSpi,w,c
  6362  0001B6  0D01               	mullw	1
  6363  0001B8  0E0F               	movlw	low (_text_prgm+15)
  6364  0001BA  24F3               	addwf	prodl,w,c
  6365  0001BC  6ED9               	movwf	fsr2l,c
  6366  0001BE  0E02               	movlw	high (_text_prgm+15)
  6367  0001C0  20F4               	addwfc	prodh,w,c
  6368  0001C2  6EDA               	movwf	fsr2h,c
  6369  0001C4  0E00               	movlw	0
  6370  0001C6  6EDF               	movwf	indf2,c
  6371  0001C8                     i2l280:
  6372  0001C8  2A61               	incf	_CptSpi,f,c
  6373  0001CA  D7C5               	goto	i2l2900
  6374  0001CC                     
  6375                           ;main.c: 620: for(CptSpi=0;CptSpi<15;CptSpi++) {
  6376  0001CC  0E00               	movlw	0
  6377  0001CE  6E61               	movwf	_CptSpi,c
  6378  0001D0                     i2l2916:
  6379  0001D0  0E0E               	movlw	14
  6380  0001D2  6461               	cpfsgt	_CptSpi,c
  6381  0001D4  D001               	goto	i2l282
  6382  0001D6  D12F               	goto	i2l309
  6383  0001D8                     i2l282:
  6384                           
  6385                           ;main.c: 621: if(CptSpi < TailleMsgSpi-2) {
  6386  0001D8  0EFE               	movlw	254
  6387  0001DA  6E03               	movwf	??_ISR& (0+255),c
  6388  0001DC  0EFF               	movlw	255
  6389  0001DE  6E04               	movwf	(??_ISR+1)& (0+255),c
  6390  0001E0  505E               	movf	_TailleMsgSpi,w,c
  6391  0001E2  6E05               	movwf	(??_ISR+2)& (0+255),c
  6392  0001E4  6A06               	clrf	(??_ISR+3)& (0+255),c
  6393  0001E6  5003               	movf	??_ISR,w,c
  6394  0001E8  2605               	addwf	??_ISR+2,f,c
  6395  0001EA  5004               	movf	??_ISR+1,w,c
  6396  0001EC  2206               	addwfc	??_ISR+3,f,c
  6397  0001EE  5061               	movf	_CptSpi,w,c
  6398  0001F0  6E07               	movwf	(??_ISR+4)& (0+255),c
  6399  0001F2  6A08               	clrf	(??_ISR+5)& (0+255),c
  6400  0001F4  5005               	movf	??_ISR+2,w,c
  6401  0001F6  5C07               	subwf	??_ISR+4,w,c
  6402  0001F8  5008               	movf	??_ISR+5,w,c
  6403  0001FA  0A80               	xorlw	128
  6404  0001FC  6E09               	movwf	(??_ISR+6)& (0+255),c
  6405  0001FE  5006               	movf	??_ISR+3,w,c
  6406  000200  0A80               	xorlw	128
  6407  000202  5809               	subwfb	(??_ISR+6)& (0+255),w,c
  6408  000204  B0D8               	btfsc	status,0,c
  6409  000206  D013               	goto	i2l284
  6410                           
  6411                           ;main.c: 622: text_prgm[2][CptSpi] = TextSpi[CptSpi];
  6412  000208  5061               	movf	_CptSpi,w,c
  6413  00020A  0D01               	mullw	1
  6414  00020C  0E00               	movlw	low _TextSpi
  6415  00020E  24F3               	addwf	prodl,w,c
  6416  000210  6ED9               	movwf	fsr2l,c
  6417  000212  0E03               	movlw	high _TextSpi
  6418  000214  20F4               	addwfc	prodh,w,c
  6419  000216  6EDA               	movwf	fsr2h,c
  6420  000218  5061               	movf	_CptSpi,w,c
  6421  00021A  0D01               	mullw	1
  6422  00021C  0E1E               	movlw	low (_text_prgm+30)
  6423  00021E  24F3               	addwf	prodl,w,c
  6424  000220  6EE1               	movwf	fsr1l,c
  6425  000222  0E02               	movlw	high (_text_prgm+30)
  6426  000224  20F4               	addwfc	prodh,w,c
  6427  000226  6EE2               	movwf	fsr1h,c
  6428  000228  CFDF FFE7          	movff	indf2,indf1
  6429                           
  6430                           ;main.c: 623: } else {
  6431  00022C  D00A               	goto	i2l285
  6432  00022E                     i2l284:
  6433                           
  6434                           ;main.c: 624: text_prgm[2][CptSpi] = '\0';
  6435  00022E  5061               	movf	_CptSpi,w,c
  6436  000230  0D01               	mullw	1
  6437  000232  0E1E               	movlw	low (_text_prgm+30)
  6438  000234  24F3               	addwf	prodl,w,c
  6439  000236  6ED9               	movwf	fsr2l,c
  6440  000238  0E02               	movlw	high (_text_prgm+30)
  6441  00023A  20F4               	addwfc	prodh,w,c
  6442  00023C  6EDA               	movwf	fsr2h,c
  6443  00023E  0E00               	movlw	0
  6444  000240  6EDF               	movwf	indf2,c
  6445  000242                     i2l285:
  6446  000242  2A61               	incf	_CptSpi,f,c
  6447  000244  D7C5               	goto	i2l2916
  6448  000246                     
  6449                           ;main.c: 629: for(CptSpi=0;CptSpi<15;CptSpi++) {
  6450  000246  0E00               	movlw	0
  6451  000248  6E61               	movwf	_CptSpi,c
  6452  00024A                     i2l2932:
  6453  00024A  0E0E               	movlw	14
  6454  00024C  6461               	cpfsgt	_CptSpi,c
  6455  00024E  D001               	goto	i2l287
  6456  000250  D0F2               	goto	i2l309
  6457  000252                     i2l287:
  6458                           
  6459                           ;main.c: 630: if(CptSpi < TailleMsgSpi-2) {
  6460  000252  0EFE               	movlw	254
  6461  000254  6E03               	movwf	??_ISR& (0+255),c
  6462  000256  0EFF               	movlw	255
  6463  000258  6E04               	movwf	(??_ISR+1)& (0+255),c
  6464  00025A  505E               	movf	_TailleMsgSpi,w,c
  6465  00025C  6E05               	movwf	(??_ISR+2)& (0+255),c
  6466  00025E  6A06               	clrf	(??_ISR+3)& (0+255),c
  6467  000260  5003               	movf	??_ISR,w,c
  6468  000262  2605               	addwf	??_ISR+2,f,c
  6469  000264  5004               	movf	??_ISR+1,w,c
  6470  000266  2206               	addwfc	??_ISR+3,f,c
  6471  000268  5061               	movf	_CptSpi,w,c
  6472  00026A  6E07               	movwf	(??_ISR+4)& (0+255),c
  6473  00026C  6A08               	clrf	(??_ISR+5)& (0+255),c
  6474  00026E  5005               	movf	??_ISR+2,w,c
  6475  000270  5C07               	subwf	??_ISR+4,w,c
  6476  000272  5008               	movf	??_ISR+5,w,c
  6477  000274  0A80               	xorlw	128
  6478  000276  6E09               	movwf	(??_ISR+6)& (0+255),c
  6479  000278  5006               	movf	??_ISR+3,w,c
  6480  00027A  0A80               	xorlw	128
  6481  00027C  5809               	subwfb	(??_ISR+6)& (0+255),w,c
  6482  00027E  B0D8               	btfsc	status,0,c
  6483  000280  D013               	goto	i2l289
  6484                           
  6485                           ;main.c: 631: text_prgm[3][CptSpi] = TextSpi[CptSpi];
  6486  000282  5061               	movf	_CptSpi,w,c
  6487  000284  0D01               	mullw	1
  6488  000286  0E00               	movlw	low _TextSpi
  6489  000288  24F3               	addwf	prodl,w,c
  6490  00028A  6ED9               	movwf	fsr2l,c
  6491  00028C  0E03               	movlw	high _TextSpi
  6492  00028E  20F4               	addwfc	prodh,w,c
  6493  000290  6EDA               	movwf	fsr2h,c
  6494  000292  5061               	movf	_CptSpi,w,c
  6495  000294  0D01               	mullw	1
  6496  000296  0E2D               	movlw	low (_text_prgm+45)
  6497  000298  24F3               	addwf	prodl,w,c
  6498  00029A  6EE1               	movwf	fsr1l,c
  6499  00029C  0E02               	movlw	high (_text_prgm+45)
  6500  00029E  20F4               	addwfc	prodh,w,c
  6501  0002A0  6EE2               	movwf	fsr1h,c
  6502  0002A2  CFDF FFE7          	movff	indf2,indf1
  6503                           
  6504                           ;main.c: 632: } else {
  6505  0002A6  D00A               	goto	i2l290
  6506  0002A8                     i2l289:
  6507                           
  6508                           ;main.c: 633: text_prgm[3][CptSpi] = '\0';
  6509  0002A8  5061               	movf	_CptSpi,w,c
  6510  0002AA  0D01               	mullw	1
  6511  0002AC  0E2D               	movlw	low (_text_prgm+45)
  6512  0002AE  24F3               	addwf	prodl,w,c
  6513  0002B0  6ED9               	movwf	fsr2l,c
  6514  0002B2  0E02               	movlw	high (_text_prgm+45)
  6515  0002B4  20F4               	addwfc	prodh,w,c
  6516  0002B6  6EDA               	movwf	fsr2h,c
  6517  0002B8  0E00               	movlw	0
  6518  0002BA  6EDF               	movwf	indf2,c
  6519  0002BC                     i2l290:
  6520  0002BC  2A61               	incf	_CptSpi,f,c
  6521  0002BE  D7C5               	goto	i2l2932
  6522  0002C0                     
  6523                           ;main.c: 638: for(CptSpi=0;CptSpi<15;CptSpi++) {
  6524  0002C0  0E00               	movlw	0
  6525  0002C2  6E61               	movwf	_CptSpi,c
  6526  0002C4                     i2l2948:
  6527  0002C4  0E0E               	movlw	14
  6528  0002C6  6461               	cpfsgt	_CptSpi,c
  6529  0002C8  D001               	goto	i2l292
  6530  0002CA  D0B5               	goto	i2l309
  6531  0002CC                     i2l292:
  6532                           
  6533                           ;main.c: 639: if(CptSpi < TailleMsgSpi-2) {
  6534  0002CC  0EFE               	movlw	254
  6535  0002CE  6E03               	movwf	??_ISR& (0+255),c
  6536  0002D0  0EFF               	movlw	255
  6537  0002D2  6E04               	movwf	(??_ISR+1)& (0+255),c
  6538  0002D4  505E               	movf	_TailleMsgSpi,w,c
  6539  0002D6  6E05               	movwf	(??_ISR+2)& (0+255),c
  6540  0002D8  6A06               	clrf	(??_ISR+3)& (0+255),c
  6541  0002DA  5003               	movf	??_ISR,w,c
  6542  0002DC  2605               	addwf	??_ISR+2,f,c
  6543  0002DE  5004               	movf	??_ISR+1,w,c
  6544  0002E0  2206               	addwfc	??_ISR+3,f,c
  6545  0002E2  5061               	movf	_CptSpi,w,c
  6546  0002E4  6E07               	movwf	(??_ISR+4)& (0+255),c
  6547  0002E6  6A08               	clrf	(??_ISR+5)& (0+255),c
  6548  0002E8  5005               	movf	??_ISR+2,w,c
  6549  0002EA  5C07               	subwf	??_ISR+4,w,c
  6550  0002EC  5008               	movf	??_ISR+5,w,c
  6551  0002EE  0A80               	xorlw	128
  6552  0002F0  6E09               	movwf	(??_ISR+6)& (0+255),c
  6553  0002F2  5006               	movf	??_ISR+3,w,c
  6554  0002F4  0A80               	xorlw	128
  6555  0002F6  5809               	subwfb	(??_ISR+6)& (0+255),w,c
  6556  0002F8  B0D8               	btfsc	status,0,c
  6557  0002FA  D013               	goto	i2l294
  6558                           
  6559                           ;main.c: 640: text_prgm[4][CptSpi] = TextSpi[CptSpi];
  6560  0002FC  5061               	movf	_CptSpi,w,c
  6561  0002FE  0D01               	mullw	1
  6562  000300  0E00               	movlw	low _TextSpi
  6563  000302  24F3               	addwf	prodl,w,c
  6564  000304  6ED9               	movwf	fsr2l,c
  6565  000306  0E03               	movlw	high _TextSpi
  6566  000308  20F4               	addwfc	prodh,w,c
  6567  00030A  6EDA               	movwf	fsr2h,c
  6568  00030C  5061               	movf	_CptSpi,w,c
  6569  00030E  0D01               	mullw	1
  6570  000310  0E3C               	movlw	low (_text_prgm+60)
  6571  000312  24F3               	addwf	prodl,w,c
  6572  000314  6EE1               	movwf	fsr1l,c
  6573  000316  0E02               	movlw	high (_text_prgm+60)
  6574  000318  20F4               	addwfc	prodh,w,c
  6575  00031A  6EE2               	movwf	fsr1h,c
  6576  00031C  CFDF FFE7          	movff	indf2,indf1
  6577                           
  6578                           ;main.c: 641: } else {
  6579  000320  D00A               	goto	i2l295
  6580  000322                     i2l294:
  6581                           
  6582                           ;main.c: 642: text_prgm[4][CptSpi] = '\0';
  6583  000322  5061               	movf	_CptSpi,w,c
  6584  000324  0D01               	mullw	1
  6585  000326  0E3C               	movlw	low (_text_prgm+60)
  6586  000328  24F3               	addwf	prodl,w,c
  6587  00032A  6ED9               	movwf	fsr2l,c
  6588  00032C  0E02               	movlw	high (_text_prgm+60)
  6589  00032E  20F4               	addwfc	prodh,w,c
  6590  000330  6EDA               	movwf	fsr2h,c
  6591  000332  0E00               	movlw	0
  6592  000334  6EDF               	movwf	indf2,c
  6593  000336                     i2l295:
  6594  000336  2A61               	incf	_CptSpi,f,c
  6595  000338  D7C5               	goto	i2l2948
  6596  00033A                     i2l296:
  6597                           
  6598                           ; BSR set to: 0
  6599                           ;main.c: 647: PosX = TextSpi[0];
  6600  00033A  C300  F0CA         	movff	_TextSpi,_PosX
  6601  00033E  6BCB               	clrf	(_PosX+1)& (0+255),b
  6602                           
  6603                           ; BSR set to: 0
  6604                           ;main.c: 648: PosX = PosX << 8;
  6605  000340  51CA               	movf	_PosX& (0+255),w,b
  6606  000342  6FCB               	movwf	(_PosX+1)& (0+255),b
  6607  000344  6BCA               	clrf	_PosX& (0+255),b
  6608                           
  6609                           ; BSR set to: 0
  6610                           ;main.c: 649: PosX += TextSpi[1];
  6611  000346  0103               	movlb	3	; () banked
  6612  000348  5101               	movf	(_TextSpi+1)& (0+255),w,b
  6613  00034A  0100               	movlb	0	; () banked
  6614  00034C  27CA               	addwf	_PosX& (0+255),f,b
  6615  00034E  0E00               	movlw	0
  6616  000350  23CB               	addwfc	(_PosX+1)& (0+255),f,b
  6617                           
  6618                           ; BSR set to: 0
  6619                           ;main.c: 650: if(PosX > 750) {
  6620  000352  BFCB               	btfsc	(_PosX+1)& (0+255),7,b
  6621  000354  D070               	goto	i2l309
  6622  000356  0EEF               	movlw	239
  6623  000358  5DCA               	subwf	_PosX& (0+255),w,b
  6624  00035A  0E02               	movlw	2
  6625  00035C  59CB               	subwfb	(_PosX+1)& (0+255),w,b
  6626  00035E  A0D8               	btfss	status,0,c
  6627  000360  D06A               	goto	i2l309
  6628                           
  6629                           ; BSR set to: 0
  6630                           ;main.c: 651: PosX = 750;
  6631  000362  0E02               	movlw	2
  6632  000364  6FCB               	movwf	(_PosX+1)& (0+255),b
  6633  000366  0EEE               	movlw	238
  6634  000368  6FCA               	movwf	_PosX& (0+255),b
  6635                           
  6636                           ; BSR set to: 0
  6637                           ;main.c: 652: }
  6638                           ;main.c: 653: break;
  6639  00036A  D065               	goto	i2l309
  6640  00036C                     i2l298:
  6641                           
  6642                           ; BSR set to: 0
  6643                           ;main.c: 655: PosY = TextSpi[0];
  6644  00036C  C300  F0C8         	movff	_TextSpi,_PosY
  6645  000370  6BC9               	clrf	(_PosY+1)& (0+255),b
  6646                           
  6647                           ; BSR set to: 0
  6648                           ;main.c: 656: PosY = PosY << 8;
  6649  000372  51C8               	movf	_PosY& (0+255),w,b
  6650  000374  6FC9               	movwf	(_PosY+1)& (0+255),b
  6651  000376  6BC8               	clrf	_PosY& (0+255),b
  6652                           
  6653                           ; BSR set to: 0
  6654                           ;main.c: 657: PosY += TextSpi[1];
  6655  000378  0103               	movlb	3	; () banked
  6656  00037A  5101               	movf	(_TextSpi+1)& (0+255),w,b
  6657  00037C  0100               	movlb	0	; () banked
  6658  00037E  27C8               	addwf	_PosY& (0+255),f,b
  6659  000380  0E00               	movlw	0
  6660  000382  23C9               	addwfc	(_PosY+1)& (0+255),f,b
  6661                           
  6662                           ; BSR set to: 0
  6663                           ;main.c: 658: if(PosY > 430) {
  6664  000384  BFC9               	btfsc	(_PosY+1)& (0+255),7,b
  6665  000386  D057               	goto	i2l309
  6666  000388  0EAF               	movlw	175
  6667  00038A  5DC8               	subwf	_PosY& (0+255),w,b
  6668  00038C  0E01               	movlw	1
  6669  00038E  59C9               	subwfb	(_PosY+1)& (0+255),w,b
  6670  000390  A0D8               	btfss	status,0,c
  6671  000392  D051               	goto	i2l309
  6672                           
  6673                           ; BSR set to: 0
  6674                           ;main.c: 659: PosY = 430;
  6675  000394  0E01               	movlw	1
  6676  000396  6FC9               	movwf	(_PosY+1)& (0+255),b
  6677  000398  0EAE               	movlw	174
  6678  00039A  6FC8               	movwf	_PosY& (0+255),b
  6679                           
  6680                           ; BSR set to: 0
  6681                           ;main.c: 664: break;
  6682                           
  6683                           ;main.c: 662: case 12:
  6684                           
  6685                           ; BSR set to: 0
  6686                           ;main.c: 660: }
  6687                           ;main.c: 661: break;
  6688  00039C  D04C               	goto	i2l309
  6689  00039E                     
  6690                           ; BSR set to: 0
  6691                           ;main.c: 666: case 9:
  6692                           ;main.c: 667: case 10:
  6693                           ;main.c: 668: case 11:
  6694                           ;main.c: 669: TailleTerm = TailleMsgSpi-2;
  6695                           
  6696                           ; BSR set to: 0
  6697                           
  6698                           ; BSR set to: 0
  6699                           
  6700                           ; BSR set to: 0
  6701                           
  6702                           ; BSR set to: 0
  6703  00039E  0EFE               	movlw	254
  6704  0003A0  245E               	addwf	_TailleMsgSpi,w,c
  6705  0003A2  6FC1               	movwf	_TailleTerm& (0+255),b
  6706  0003A4  6BC2               	clrf	(_TailleTerm+1)& (0+255),b
  6707  0003A6  0EFF               	movlw	255
  6708  0003A8  23C2               	addwfc	(_TailleTerm+1)& (0+255),f,b
  6709                           
  6710                           ;main.c: 670: break;
  6711  0003AA  D045               	goto	i2l309
  6712  0003AC                     i2l305:
  6713                           
  6714                           ; BSR set to: 0
  6715                           ;main.c: 672: Score = TextSpi[0];
  6716  0003AC  C300  F0BF         	movff	_TextSpi,_Score
  6717  0003B0  6BC0               	clrf	(_Score+1)& (0+255),b
  6718                           
  6719                           ; BSR set to: 0
  6720                           ;main.c: 673: Score = Score << 8;
  6721  0003B2  51BF               	movf	_Score& (0+255),w,b
  6722  0003B4  6FC0               	movwf	(_Score+1)& (0+255),b
  6723  0003B6  6BBF               	clrf	_Score& (0+255),b
  6724                           
  6725                           ; BSR set to: 0
  6726                           ;main.c: 674: Score += TextSpi[1];
  6727  0003B8  0103               	movlb	3	; () banked
  6728  0003BA  5101               	movf	(_TextSpi+1)& (0+255),w,b
  6729  0003BC  0100               	movlb	0	; () banked
  6730  0003BE  27BF               	addwf	_Score& (0+255),f,b
  6731  0003C0  0E00               	movlw	0
  6732  0003C2  23C0               	addwfc	(_Score+1)& (0+255),f,b
  6733                           
  6734                           ; BSR set to: 0
  6735                           ;main.c: 675: if(Score > 999) {
  6736  0003C4  BFC0               	btfsc	(_Score+1)& (0+255),7,b
  6737  0003C6  D037               	goto	i2l309
  6738  0003C8  0EE8               	movlw	232
  6739  0003CA  5DBF               	subwf	_Score& (0+255),w,b
  6740  0003CC  0E03               	movlw	3
  6741  0003CE  59C0               	subwfb	(_Score+1)& (0+255),w,b
  6742  0003D0  A0D8               	btfss	status,0,c
  6743  0003D2  D031               	goto	i2l309
  6744                           
  6745                           ; BSR set to: 0
  6746                           ;main.c: 676: Score = 999;
  6747  0003D4  0E03               	movlw	3
  6748  0003D6  6FC0               	movwf	(_Score+1)& (0+255),b
  6749  0003D8  0EE7               	movlw	231
  6750  0003DA  6FBF               	movwf	_Score& (0+255),b
  6751                           
  6752                           ; BSR set to: 0
  6753                           ;main.c: 685: }
  6754                           
  6755                           ; BSR set to: 0
  6756                           ;main.c: 684: break;
  6757                           
  6758                           ;main.c: 682: default:
  6759                           
  6760                           ; BSR set to: 0
  6761                           ;main.c: 681: break;
  6762                           
  6763                           ;main.c: 679: case 14:
  6764                           
  6765                           ; BSR set to: 0
  6766                           ;main.c: 677: }
  6767                           ;main.c: 678: break;
  6768  0003DC  D02C               	goto	i2l309
  6769  0003DE                     i2l269:
  6770                           
  6771                           ; BSR set to: 0
  6772                           
  6773                           ; BSR set to: 0
  6774  0003DE  51C4               	movf	_TypeVarSpi& (0+255),w,b
  6775                           
  6776                           ; Switch size 1, requested type "space"
  6777                           ; Number of cases is 14, Range of values is 1 to 14
  6778                           ; switch strategies available:
  6779                           ; Name         Instructions Cycles
  6780                           ; simple_byte           43    22 (average)
  6781                           ;	Chosen strategy is simple_byte
  6782  0003E0  0A01               	xorlw	1	; case 1
  6783  0003E2  B4D8               	btfsc	status,2,c
  6784  0003E4  D679               	goto	i2l270
  6785  0003E6  0A03               	xorlw	3	; case 2
  6786  0003E8  B4D8               	btfsc	status,2,c
  6787  0003EA  D6B3               	goto	i2l276
  6788  0003EC  0A01               	xorlw	1	; case 3
  6789  0003EE  B4D8               	btfsc	status,2,c
  6790  0003F0  D6ED               	goto	i2l281
  6791  0003F2  0A07               	xorlw	7	; case 4
  6792  0003F4  B4D8               	btfsc	status,2,c
  6793  0003F6  D727               	goto	i2l286
  6794  0003F8  0A01               	xorlw	1	; case 5
  6795  0003FA  B4D8               	btfsc	status,2,c
  6796  0003FC  D761               	goto	i2l291
  6797  0003FE  0A03               	xorlw	3	; case 6
  6798  000400  B4D8               	btfsc	status,2,c
  6799  000402  D79B               	goto	i2l296
  6800  000404  0A01               	xorlw	1	; case 7
  6801  000406  B4D8               	btfsc	status,2,c
  6802  000408  D7B1               	goto	i2l298
  6803  00040A  0A0F               	xorlw	15	; case 8
  6804  00040C  B4D8               	btfsc	status,2,c
  6805  00040E  D7C7               	goto	i2l301
  6806  000410  0A01               	xorlw	1	; case 9
  6807  000412  B4D8               	btfsc	status,2,c
  6808  000414  D7C4               	goto	i2l301
  6809  000416  0A03               	xorlw	3	; case 10
  6810  000418  B4D8               	btfsc	status,2,c
  6811  00041A  D7C1               	goto	i2l301
  6812  00041C  0A01               	xorlw	1	; case 11
  6813  00041E  B4D8               	btfsc	status,2,c
  6814  000420  D7BE               	goto	i2l301
  6815  000422  0A07               	xorlw	7	; case 12
  6816  000424  B4D8               	btfsc	status,2,c
  6817  000426  D007               	goto	i2l309
  6818  000428  0A01               	xorlw	1	; case 13
  6819  00042A  B4D8               	btfsc	status,2,c
  6820  00042C  D7BF               	goto	i2l305
  6821  00042E  0A03               	xorlw	3	; case 14
  6822                           
  6823                           ; BSR set to: 0
  6824                           
  6825                           ; BSR set to: 0
  6826  000430  D002               	goto	i2l309
  6827  000432                     L2:
  6828  000432  6E5F               	movwf	_EtatSpi,c
  6829                           
  6830                           ;main.c: 688: break;
  6831  000434  D010               	goto	i2l263
  6832  000436                     i2l309:
  6833                           
  6834                           ;main.c: 690: EtatSpi = 0;
  6835  000436  0E00               	movlw	0
  6836  000438  D7FC               	goto	L2
  6837  00043A                     i2l260:
  6838  00043A  505F               	movf	_EtatSpi,w,c
  6839                           
  6840                           ; Switch size 1, requested type "space"
  6841                           ; Number of cases is 4, Range of values is 0 to 3
  6842                           ; switch strategies available:
  6843                           ; Name         Instructions Cycles
  6844                           ; simple_byte           13     7 (average)
  6845                           ;	Chosen strategy is simple_byte
  6846  00043C  0A00               	xorlw	0	; case 0
  6847  00043E  B4D8               	btfsc	status,2,c
  6848  000440  D60E               	goto	i2l261
  6849  000442  0A01               	xorlw	1	; case 1
  6850  000444  B4D8               	btfsc	status,2,c
  6851  000446  D619               	goto	i2l264
  6852  000448  0A03               	xorlw	3	; case 2
  6853  00044A  B4D8               	btfsc	status,2,c
  6854  00044C  D61C               	goto	i2l265
  6855  00044E  0A01               	xorlw	1	; case 3
  6856  000450  B4D8               	btfsc	status,2,c
  6857  000452  D633               	goto	i2l267
  6858  000454  D7F0               	goto	i2l309
  6859  000456                     i2l263:
  6860                           
  6861                           ;main.c: 693: Checksum += data_spi;
  6862  000456  501D               	movf	ISR@data_spi,w,c
  6863  000458  265A               	addwf	_Checksum,f,c
  6864  00045A  0E00               	movlw	0
  6865  00045C  225B               	addwfc	_Checksum+1,f,c
  6866                           
  6867                           ;main.c: 694: if(PrgmChoisi) {
  6868  00045E  505D               	movf	_PrgmChoisi,w,c
  6869  000460  A4D8               	btfss	status,2,c
  6870  000462  D014               	goto	i2l311
  6871  000464  D023               	goto	i2l310
  6872  000466                     
  6873                           ;main.c: 697: SSPBUF = 4;
  6874  000466  0E04               	movlw	4
  6875  000468  D001               	goto	L3
  6876  00046A                     
  6877                           ;main.c: 700: SSPBUF = 1;
  6878  00046A  0E01               	movlw	1
  6879  00046C                     L3:
  6880  00046C  6EC9               	movwf	4041,c	;volatile
  6881                           
  6882                           ;main.c: 701: break;
  6883  00046E  D01C               	goto	i2l313
  6884  000470                     i2l315:
  6885                           
  6886                           ;main.c: 703: SSPBUF = PosCursorPrgm;
  6887  000470  C0C5  FFC9         	movff	_PosCursorPrgm,4041	;volatile
  6888                           
  6889                           ;main.c: 704: break;
  6890  000474  D019               	goto	i2l313
  6891  000476                     
  6892                           ;main.c: 706: SSPBUF = 4 + 1 + PosCursorPrgm;
  6893  000476  0100               	movlb	0	; () banked
  6894  000478  51C5               	movf	_PosCursorPrgm& (0+255),w,b
  6895  00047A  0F05               	addlw	5
  6896  00047C  6EC9               	movwf	4041,c	;volatile
  6897                           
  6898                           ; BSR set to: 0
  6899                           ;main.c: 707: PrgmChoisi = 0;
  6900  00047E  0E00               	movlw	0
  6901  000480  6E5D               	movwf	_PrgmChoisi,c
  6902                           
  6903                           ; BSR set to: 0
  6904                           ;main.c: 708: CptSend = 0;
  6905  000482  0E00               	movlw	0
  6906  000484  D001               	goto	L4
  6907  000486                     
  6908                           ;main.c: 711: CptSend = 1;
  6909                           
  6910                           ; BSR set to: 0
  6911  000486  0E01               	movlw	1
  6912  000488                     L4:
  6913  000488  6E60               	movwf	_CptSend,c
  6914                           
  6915                           ;main.c: 713: }
  6916                           
  6917                           ;main.c: 712: break;
  6918  00048A  D00E               	goto	i2l313
  6919  00048C                     i2l311:
  6920  00048C  5060               	movf	_CptSend,w,c
  6921                           
  6922                           ; Switch size 1, requested type "space"
  6923                           ; Number of cases is 4, Range of values is 1 to 4
  6924                           ; switch strategies available:
  6925                           ; Name         Instructions Cycles
  6926                           ; simple_byte           13     7 (average)
  6927                           ;	Chosen strategy is simple_byte
  6928  00048E  0A01               	xorlw	1	; case 1
  6929  000490  B4D8               	btfsc	status,2,c
  6930  000492  D7E9               	goto	i2l312
  6931  000494  0A03               	xorlw	3	; case 2
  6932  000496  B4D8               	btfsc	status,2,c
  6933  000498  D7E8               	goto	i2l314
  6934  00049A  0A01               	xorlw	1	; case 3
  6935  00049C  B4D8               	btfsc	status,2,c
  6936  00049E  D7E8               	goto	i2l315
  6937  0004A0  0A07               	xorlw	7	; case 4
  6938  0004A2  B4D8               	btfsc	status,2,c
  6939  0004A4  D7E8               	goto	i2l316
  6940  0004A6  D7EF               	goto	i2l317
  6941  0004A8                     i2l313:
  6942                           
  6943                           ;main.c: 714: CptSend++;
  6944  0004A8  2A60               	incf	_CptSend,f,c
  6945                           
  6946                           ;main.c: 715: } else {
  6947  0004AA  D002               	goto	i2l318
  6948  0004AC                     i2l310:
  6949                           
  6950                           ;main.c: 716: SSPBUF = 0;
  6951  0004AC  0E00               	movlw	0
  6952  0004AE  6EC9               	movwf	4041,c	;volatile
  6953  0004B0                     i2l318:
  6954                           
  6955                           ;main.c: 717: }
  6956                           ;main.c: 718: }
  6957                           ;main.c: 720: if(RCIF) {
  6958  0004B0  AA9E               	btfss	3998,5,c	;volatile
  6959  0004B2  D05C               	goto	i2l328
  6960                           
  6961                           ;main.c: 721: char Receive;
  6962                           ;main.c: 722: RCIF = 0;
  6963  0004B4  9A9E               	bcf	3998,5,c	;volatile
  6964                           
  6965                           ;main.c: 723: Receive = RCREG;
  6966  0004B6  CFAE F01C          	movff	4014,ISR@Receive	;volatile
  6967                           
  6968                           ;main.c: 724: if(FlagSleep) {
  6969  0004BA  505C               	movf	_FlagSleep,w,c
  6970  0004BC  B4D8               	btfsc	status,2,c
  6971  0004BE  D02B               	goto	i2l323
  6972                           
  6973                           ;main.c: 725: if(Receive == 0x68) {
  6974  0004C0  0E68               	movlw	104
  6975  0004C2  181C               	xorwf	ISR@Receive,w,c
  6976  0004C4  A4D8               	btfss	status,2,c
  6977  0004C6  D052               	goto	i2l328
  6978                           
  6979                           ;main.c: 726: FlagSleep = 0;
  6980  0004C8  0E00               	movlw	0
  6981  0004CA  6E5C               	movwf	_FlagSleep,c
  6982                           
  6983                           ;main.c: 727: FlagSpi = 1;
  6984  0004CC  0E01               	movlw	1
  6985  0004CE  0100               	movlb	0	; () banked
  6986  0004D0  D004               	goto	L5
  6987  0004D2                     
  6988                           ;main.c: 732: case 0x32:
  6989                           ;main.c: 733: case 0x33:
  6990                           ;main.c: 734: case 0x34:
  6991                           ;main.c: 735: EtatScreen = Receive-0x30;
  6992                           
  6993                           ; BSR set to: 0
  6994                           
  6995                           ; BSR set to: 0
  6996                           
  6997                           ; BSR set to: 0
  6998                           
  6999                           ; BSR set to: 0
  7000  0004D2  501C               	movf	ISR@Receive,w,c
  7001  0004D4  0FD0               	addlw	208
  7002  0004D6  D004               	goto	L6
  7003  0004D8                     i2l3038:
  7004                           
  7005                           ; BSR set to: 0
  7006                           ;main.c: 736: FlagSpi = 1;
  7007  0004D8  0E01               	movlw	1
  7008  0004DA                     L5:
  7009  0004DA  6FCC               	movwf	_FlagSpi& (0+255),b
  7010                           
  7011                           ;main.c: 737: break;
  7012  0004DC  D047               	goto	i2l328
  7013  0004DE                     
  7014                           ;main.c: 739: case 0x42:
  7015                           ;main.c: 740: case 0x43:
  7016                           ;main.c: 741: case 0x44:
  7017                           ;main.c: 742: EtatScreen = 0;
  7018                           
  7019                           ; BSR set to: 0
  7020                           
  7021                           ; BSR set to: 0
  7022                           
  7023                           ; BSR set to: 0
  7024                           
  7025                           ; BSR set to: 0
  7026  0004DE  0E00               	movlw	0
  7027  0004E0                     L6:
  7028  0004E0  0100               	movlb	0	; () banked
  7029  0004E2  6FC7               	movwf	_EtatScreen& (0+255),b
  7030  0004E4  D7F9               	goto	i2l3038
  7031  0004E6                     
  7032                           ;main.c: 746: AutoLight = 1;
  7033                           
  7034                           ; BSR set to: 0
  7035  0004E6  0E01               	movlw	1
  7036  0004E8  D001               	goto	L7
  7037  0004EA                     
  7038                           ;main.c: 749: AutoLight = 0;
  7039                           
  7040                           ; BSR set to: 0
  7041  0004EA  0E00               	movlw	0
  7042  0004EC                     L7:
  7043  0004EC  0100               	movlb	0	; () banked
  7044  0004EE  6FC6               	movwf	_AutoLight& (0+255),b
  7045                           
  7046                           ;main.c: 750: break;
  7047  0004F0  D03D               	goto	i2l328
  7048  0004F2                     
  7049                           ;main.c: 752: if(PosCursorPrgm > 0) {
  7050                           
  7051                           ; BSR set to: 0
  7052  0004F2  0100               	movlb	0	; () banked
  7053  0004F4  51C5               	movf	_PosCursorPrgm& (0+255),w,b
  7054  0004F6  B4D8               	btfsc	status,2,c
  7055  0004F8  D039               	goto	i2l328
  7056                           
  7057                           ; BSR set to: 0
  7058                           ;main.c: 753: PosCursorPrgm--;
  7059  0004FA  07C5               	decf	_PosCursorPrgm& (0+255),f,b
  7060  0004FC  D7ED               	goto	i2l3038
  7061  0004FE                     
  7062                           ;main.c: 758: if(PosCursorPrgm < 5-1) {
  7063                           
  7064                           ; BSR set to: 0
  7065  0004FE  0E04               	movlw	4
  7066  000500  0100               	movlb	0	; () banked
  7067  000502  61C5               	cpfslt	_PosCursorPrgm& (0+255),b
  7068  000504  D033               	goto	i2l328
  7069                           
  7070                           ; BSR set to: 0
  7071                           ;main.c: 759: PosCursorPrgm++;
  7072  000506  2BC5               	incf	_PosCursorPrgm& (0+255),f,b
  7073  000508  D7E7               	goto	i2l3038
  7074  00050A                     
  7075                           ;main.c: 765: PrgmChoisi = 1;
  7076                           
  7077                           ; BSR set to: 0
  7078  00050A  0E01               	movlw	1
  7079  00050C  6E5D               	movwf	_PrgmChoisi,c
  7080                           
  7081                           ;main.c: 766: break;
  7082  00050E  D02E               	goto	i2l328
  7083  000510                     
  7084                           ;main.c: 768: FlagSleep = 1;
  7085  000510  0E01               	movlw	1
  7086  000512  6E5C               	movwf	_FlagSleep,c
  7087                           
  7088                           ;main.c: 773: }
  7089                           
  7090                           ;main.c: 772: break;
  7091                           
  7092                           ;main.c: 770: default:
  7093                           
  7094                           ;main.c: 769: break;
  7095  000514  D02B               	goto	i2l328
  7096  000516                     i2l323:
  7097  000516  501C               	movf	ISR@Receive,w,c
  7098                           
  7099                           ; Switch size 1, requested type "space"
  7100                           ; Number of cases is 14, Range of values is 49 to 68
  7101                           ; switch strategies available:
  7102                           ; Name         Instructions Cycles
  7103                           ; simple_byte           43    22 (average)
  7104                           ;	Chosen strategy is simple_byte
  7105  000518  0A31               	xorlw	49	; case 49
  7106  00051A  B4D8               	btfsc	status,2,c
  7107  00051C  D7DA               	goto	i2l324
  7108  00051E  0A03               	xorlw	3	; case 50
  7109  000520  B4D8               	btfsc	status,2,c
  7110  000522  D7D7               	goto	i2l324
  7111  000524  0A01               	xorlw	1	; case 51
  7112  000526  B4D8               	btfsc	status,2,c
  7113  000528  D7D4               	goto	i2l324
  7114  00052A  0A07               	xorlw	7	; case 52
  7115  00052C  B4D8               	btfsc	status,2,c
  7116  00052E  D7D1               	goto	i2l324
  7117  000530  0A01               	xorlw	1	; case 53
  7118  000532  B4D8               	btfsc	status,2,c
  7119  000534  D7D8               	goto	i2l333
  7120  000536  0A03               	xorlw	3	; case 54
  7121  000538  B4D8               	btfsc	status,2,c
  7122  00053A  D7D7               	goto	i2l334
  7123  00053C  0A01               	xorlw	1	; case 55
  7124  00053E  B4D8               	btfsc	status,2,c
  7125  000540  D7D8               	goto	i2l335
  7126  000542  0A0F               	xorlw	15	; case 56
  7127  000544  B4D8               	btfsc	status,2,c
  7128  000546  D7DB               	goto	i2l337
  7129  000548  0A01               	xorlw	1	; case 57
  7130  00054A  B4D8               	btfsc	status,2,c
  7131  00054C  D7DE               	goto	i2l339
  7132  00054E  0A79               	xorlw	121	; case 64
  7133  000550  B4D8               	btfsc	status,2,c
  7134  000552  D7DE               	goto	i2l340
  7135  000554  0A01               	xorlw	1	; case 65
  7136  000556  B4D8               	btfsc	status,2,c
  7137  000558  D7C2               	goto	i2l329
  7138  00055A  0A03               	xorlw	3	; case 66
  7139  00055C  B4D8               	btfsc	status,2,c
  7140  00055E  D7BF               	goto	i2l329
  7141  000560  0A01               	xorlw	1	; case 67
  7142  000562  B4D8               	btfsc	status,2,c
  7143  000564  D7BC               	goto	i2l329
  7144  000566  0A07               	xorlw	7	; case 68
  7145  000568  B4D8               	btfsc	status,2,c
  7146  00056A  D7B9               	goto	i2l329
  7147  00056C                     i2l328:
  7148  00056C  C01B  F065         	movff	??_ISR+24,btemp+3
  7149  000570  C01A  F064         	movff	??_ISR+23,btemp+2
  7150  000574  C019  F063         	movff	??_ISR+22,btemp+1
  7151  000578  C018  F062         	movff	??_ISR+21,btemp
  7152  00057C  C017  FFF5         	movff	??_ISR+20,tablat
  7153  000580  C016  FFF8         	movff	??_ISR+19,tblptru
  7154  000584  C015  FFF7         	movff	??_ISR+18,tblptrh
  7155  000588  C014  FFF6         	movff	??_ISR+17,tblptrl
  7156  00058C  C013  FFF4         	movff	??_ISR+16,prodh
  7157  000590  C012  FFF3         	movff	??_ISR+15,prodl
  7158  000594  C011  FFDA         	movff	??_ISR+14,fsr2h
  7159  000598  C010  FFD9         	movff	??_ISR+13,fsr2l
  7160  00059C  C00F  FFE2         	movff	??_ISR+12,fsr1h
  7161  0005A0  C00E  FFE1         	movff	??_ISR+11,fsr1l
  7162  0005A4  C00D  FFEA         	movff	??_ISR+10,fsr0h
  7163  0005A8  C00C  FFE9         	movff	??_ISR+9,fsr0l
  7164  0005AC  C00B  FFFB         	movff	??_ISR+8,pclatu
  7165  0005B0  C00A  FFFA         	movff	??_ISR+7,pclath
  7166  0005B4  9262               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7167  0005B6  0011               	retfie		f
  7168  0005B8                     __end_of_ISR:
  7169                           	opt stack 0
  7170                           pclatu	equ	0xFFB
  7171                           pclath	equ	0xFFA
  7172                           tblptru	equ	0xFF8
  7173                           tblptrh	equ	0xFF7
  7174                           tblptrl	equ	0xFF6
  7175                           tablat	equ	0xFF5
  7176                           prodh	equ	0xFF4
  7177                           prodl	equ	0xFF3
  7178                           intcon	equ	0xFF2
  7179                           postinc0	equ	0xFEE
  7180                           fsr0h	equ	0xFEA
  7181                           fsr0l	equ	0xFE9
  7182                           wreg	equ	0xFE8
  7183                           indf1	equ	0xFE7
  7184                           postdec1	equ	0xFE5
  7185                           fsr1h	equ	0xFE2
  7186                           fsr1l	equ	0xFE1
  7187                           indf2	equ	0xFDF
  7188                           postinc2	equ	0xFDE
  7189                           postdec2	equ	0xFDD
  7190                           fsr2h	equ	0xFDA
  7191                           fsr2l	equ	0xFD9
  7192                           status	equ	0xFD8
  7193                           
  7194 ;; *************** function _Modulo *****************
  7195 ;; Defined at:
  7196 ;;		line 555 in file "main.c"
  7197 ;; Parameters:    Size  Location     Type
  7198 ;;  M_nombre        2    0[COMRAM] short 
  7199 ;; Auto vars:     Size  Location     Type
  7200 ;;		None
  7201 ;; Return value:  Size  Location     Type
  7202 ;;                  1    wreg      unsigned char 
  7203 ;; Registers used:
  7204 ;;		wreg, status,2, status,0
  7205 ;; Tracked objects:
  7206 ;;		On entry : 0/0
  7207 ;;		On exit  : 0/0
  7208 ;;		Unchanged: 0/0
  7209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7210 ;;      Params:         2       0       0       0       0       0       0
  7211 ;;      Locals:         0       0       0       0       0       0       0
  7212 ;;      Temps:          0       0       0       0       0       0       0
  7213 ;;      Totals:         2       0       0       0       0       0       0
  7214 ;;Total ram usage:        2 bytes
  7215 ;; Hardware stack levels used:    1
  7216 ;; This function calls:
  7217 ;;		Nothing
  7218 ;; This function is called by:
  7219 ;;		_ISR
  7220 ;; This function uses a non-reentrant model
  7221 ;;
  7222                           
  7223                           	psect	text29
  7224  001D5E                     __ptext29:
  7225                           	opt stack 0
  7226  001D5E                     _Modulo:
  7227                           	opt stack 25
  7228                           
  7229                           ;main.c: 556: while(M_nombre > 255) {
  7230                           
  7231                           ;incstack = 0
  7232  001D5E  D004               	goto	i2l251
  7233  001D60                     
  7234                           ;main.c: 557: M_nombre -= 256;
  7235  001D60  0E00               	movlw	0
  7236  001D62  2601               	addwf	Modulo@M_nombre,f,c
  7237  001D64  0EFF               	movlw	255
  7238  001D66  2202               	addwfc	Modulo@M_nombre+1,f,c
  7239  001D68                     i2l251:
  7240  001D68  BE02               	btfsc	Modulo@M_nombre+1,7,c
  7241  001D6A  D003               	goto	i2u217_40
  7242  001D6C  0402               	decf	Modulo@M_nombre+1,w,c
  7243  001D6E  B0D8               	btfsc	status,0,c
  7244  001D70  D7F7               	goto	i2l252
  7245  001D72                     i2u217_40:
  7246                           
  7247                           ;main.c: 558: }
  7248                           ;main.c: 559: return M_nombre;
  7249  001D72  5001               	movf	Modulo@M_nombre,w,c
  7250  001D74  0012               	return	
  7251  001D76                     __end_of_Modulo:
  7252                           	opt stack 0
  7253                           pclatu	equ	0xFFB
  7254                           pclath	equ	0xFFA
  7255                           tblptru	equ	0xFF8
  7256                           tblptrh	equ	0xFF7
  7257                           tblptrl	equ	0xFF6
  7258                           tablat	equ	0xFF5
  7259                           prodh	equ	0xFF4
  7260                           prodl	equ	0xFF3
  7261                           intcon	equ	0xFF2
  7262                           postinc0	equ	0xFEE
  7263                           fsr0h	equ	0xFEA
  7264                           fsr0l	equ	0xFE9
  7265                           wreg	equ	0xFE8
  7266                           indf1	equ	0xFE7
  7267                           postdec1	equ	0xFE5
  7268                           fsr1h	equ	0xFE2
  7269                           fsr1l	equ	0xFE1
  7270                           indf2	equ	0xFDF
  7271                           postinc2	equ	0xFDE
  7272                           postdec2	equ	0xFDD
  7273                           fsr2h	equ	0xFDA
  7274                           fsr2l	equ	0xFD9
  7275                           status	equ	0xFD8
  7276                           pclatu	equ	0xFFB
  7277                           pclath	equ	0xFFA
  7278                           tblptru	equ	0xFF8
  7279                           tblptrh	equ	0xFF7
  7280                           tblptrl	equ	0xFF6
  7281                           tablat	equ	0xFF5
  7282                           prodh	equ	0xFF4
  7283                           prodl	equ	0xFF3
  7284                           intcon	equ	0xFF2
  7285                           postinc0	equ	0xFEE
  7286                           fsr0h	equ	0xFEA
  7287                           fsr0l	equ	0xFE9
  7288                           wreg	equ	0xFE8
  7289                           indf1	equ	0xFE7
  7290                           postdec1	equ	0xFE5
  7291                           fsr1h	equ	0xFE2
  7292                           fsr1l	equ	0xFE1
  7293                           indf2	equ	0xFDF
  7294                           postinc2	equ	0xFDE
  7295                           postdec2	equ	0xFDD
  7296                           fsr2h	equ	0xFDA
  7297                           fsr2l	equ	0xFD9
  7298                           status	equ	0xFD8
  7299                           
  7300                           	psect	rparam
  7301  0000                     pclatu	equ	0xFFB
  7302                           pclath	equ	0xFFA
  7303                           tblptru	equ	0xFF8
  7304                           tblptrh	equ	0xFF7
  7305                           tblptrl	equ	0xFF6
  7306                           tablat	equ	0xFF5
  7307                           prodh	equ	0xFF4
  7308                           prodl	equ	0xFF3
  7309                           intcon	equ	0xFF2
  7310                           postinc0	equ	0xFEE
  7311                           fsr0h	equ	0xFEA
  7312                           fsr0l	equ	0xFE9
  7313                           wreg	equ	0xFE8
  7314                           indf1	equ	0xFE7
  7315                           postdec1	equ	0xFE5
  7316                           fsr1h	equ	0xFE2
  7317                           fsr1l	equ	0xFE1
  7318                           indf2	equ	0xFDF
  7319                           postinc2	equ	0xFDE
  7320                           postdec2	equ	0xFDD
  7321                           fsr2h	equ	0xFDA
  7322                           fsr2l	equ	0xFD9
  7323                           status	equ	0xFD8
  7324                           
  7325                           	psect	temp
  7326  000062                     btemp:
  7327                           	opt stack 0
  7328  000062                     	ds	1
  7329  0000                     int$flags	set	btemp
  7330  0000                     wtemp6	set	btemp+1
  7331                           pclatu	equ	0xFFB
  7332                           pclath	equ	0xFFA
  7333                           tblptru	equ	0xFF8
  7334                           tblptrh	equ	0xFF7
  7335                           tblptrl	equ	0xFF6
  7336                           tablat	equ	0xFF5
  7337                           prodh	equ	0xFF4
  7338                           prodl	equ	0xFF3
  7339                           intcon	equ	0xFF2
  7340                           postinc0	equ	0xFEE
  7341                           fsr0h	equ	0xFEA
  7342                           fsr0l	equ	0xFE9
  7343                           wreg	equ	0xFE8
  7344                           indf1	equ	0xFE7
  7345                           postdec1	equ	0xFE5
  7346                           fsr1h	equ	0xFE2
  7347                           fsr1l	equ	0xFE1
  7348                           indf2	equ	0xFDF
  7349                           postinc2	equ	0xFDE
  7350                           postdec2	equ	0xFDD
  7351                           fsr2h	equ	0xFDA
  7352                           fsr2l	equ	0xFD9
  7353                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    30
    Data        82
    BSS         465
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     89      97
    BANK0           128     61      77
    BANK1           256      0     252
    BANK2           256      0      75
    BANK3           256      0     196
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> floor@expon(BANK0[2]), 

    PrintS@s_printS	PTR const unsigned char  size(2) Largest target is 252
		 -> SendMsgSreen(BANK1[252]), 


Critical Paths under _main in COMRAM

    _main->___ftmul
    _exp->___ftmul
    ___fttol->___ftdiv
    ___altoft->___fttol
    _eval_poly->___ftmul
    ___ftmul->___ftneg
    ___ftadd->___ftmul
    ___ftneg->___awtoft
    ___ftdiv->___ftpack
    ___awtoft->___fttol
    ___lwtoft->___ftpack
    _PrintS->_PrintC

Critical Paths under _ISR in COMRAM

    _ISR->_Modulo

Critical Paths under _main in BANK0

    _main->_exp
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___ftadd
    _eval_poly->___ftadd
    ___ftsub->___ftadd

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                21    21      0   61564
                                             40 BANK0     21    21      0
                            _ADCInit
                                _Adc
                         _ClearArray
                          _ClockInit
                           _InitTmr0
                             _PrintS
                            _SpiInit
                           _UartInit
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lwtoft
                                _exp
 ---------------------------------------------------------------------------------
 (1) _exp                                                  9     6      3   37858
                                             31 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
 ---------------------------------------------------------------------------------
 (2) _ldexp                                                7     2      5     400
                                             24 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (2) _floor                                                8     5      3   10065
                                             12 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                7     2      5     360
                                             29 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     936
                                             52 COMRAM    15    11      4
                            ___ftdiv (ARG)
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     744
                                             29 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (3) ___altoft                                            10     6      4    2758
                                             67 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (2) _eval_poly                                           12     5      7    9248
                                             12 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     463
                                             29 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    3452
                                             74 COMRAM    15     9      6
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5225
                                             12 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4809
                                              0 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                            ___fttol (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     349
                                             71 COMRAM     3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3862
                                             37 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    2939
                                             67 COMRAM     4     1      3
                            ___ftdiv (ARG)
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    2642
                                             37 COMRAM     3     0      3
                                _Adc (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2544
                                             29 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4    2124
                                             29 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _UartInit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SpiInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PrintS                                               2     0      2     675
                                             30 COMRAM     2     0      2
                             _PrintC
 ---------------------------------------------------------------------------------
 (2) _PrintC                                               1     1      0      22
                                             29 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitTmr0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ClockInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ClearArray                                           1     1      0      69
                                             29 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Adc                                                  5     3      2      22
                                             29 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ADCInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 27    27      0     299
                                              2 COMRAM    27    27      0
                             _Modulo
 ---------------------------------------------------------------------------------
 (6) _Modulo                                               2     0      2     121
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCInit
   _Adc
   _ClearArray
   _ClockInit
   _InitTmr0
   _PrintS
     _PrintC
   _SpiInit
   _UartInit
   ___awdiv
   ___awtoft
     ___ftdiv (ARG)
       ___ftpack
     ___ftpack (ARG)
     ___fttol (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
   ___ftadd
     ___awtoft (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___fttol (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___ftdiv (ARG)
       ___ftpack
     ___ftmul (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
       ___awtoft (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___fttol (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___ftpack (ARG)
     ___fttol (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___wmul (ARG)
   ___ftdiv
     ___ftpack
   ___ftge
   ___ftmul
     ___ftdiv (ARG)
       ___ftpack
     ___ftneg (ARG)
       ___awtoft (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___fttol (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___ftpack (ARG)
   ___ftneg
     ___awtoft (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___fttol (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___ftdiv (ARG)
       ___ftpack
     ___fttol (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
   ___fttol
     ___ftdiv (ARG)
       ___ftpack
     ___ftpack (ARG)
   ___lwtoft
     _Adc (ARG)
     ___ftpack (ARG)
   _exp
     ___awtoft
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___fttol (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___ftdiv
       ___ftpack
     ___ftge
     ___ftmul
       ___ftdiv (ARG)
         ___ftpack
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftneg
       ___awtoft (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___fttol (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___ftsub
       ___awtoft (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___wmul (ARG)
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
     _eval_poly
       ___ftadd
         ___awtoft (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___wmul (ARG)
       ___ftmul
         ___ftdiv (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___wmul
     _floor
       ___altoft
         ___ftpack
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___wmul (ARG)
       ___ftge
       ___fttol
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
       _frexp
     _ldexp
       _eval_poly (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___fttol (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___wmul (ARG)
         ___ftmul
           ___ftdiv (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___wmul

 _ISR (ROOT)
   _Modulo

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      C4      11       76.6%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      4B       9       29.3%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      FC       7       98.4%
BITBANK0            80      0       0       4        0.0%
BANK0               80     3D      4D       5       60.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     59      61       1       77.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2B9      15        0.0%
DATA                 0      0     2B9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon May 27 09:14:57 2019

           ___altoft@exp 004C              main@CptTmr0 00B2              _SSPSTATbits 000FC7  
          ___altoft@sign 004D             ___awdiv@sign 0023      ___wmul@multiplicand 0020  
            __CFG_BORV$3 000000             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000             ___ftadd@exp1 008B  
           ___ftadd@exp2 008A             ___ftadd@sign 0089                      l202 0E28  
                    l211 1D8C                      l203 0E78                      l204 0E98  
                    l240 1BD6                      l241 1BC4                      l229 1C10  
                    l181 0772                      l246 1C94                      l510 199C  
                    l182 07A0                      l511 19AC                      l183 0984  
                    l513 19CA                      l185 0EA2                      l193 0B7E  
                    l177 0662                      l514 19C2                      l194 0CFE  
                    l186 0992                      l427 1AB2                      l187 0A04  
                    l179 0698                      l428 1AA6                      l620 1708  
                    l188 09C0                      l517 19EA                      l701 1290  
                    l518 19F4                      l710 131E                      l622 174E  
                    l198 0D84                      l519 1A02                      l703 1306  
                    l199 0D54                      l632 110A                      l712 1346  
                    l704 12F6                      l616 1A28                      l624 177C  
                    l552 0EE0                      l641 119A                      l625 1770  
                    l538 1B9E                      l554 0F18                      l555 0F50  
                    l580 17FA                      l660 123E                      l636 1134  
                    l556 0F80                      l709 132A                      l557 10A8  
                    l582 1838                      l646 1190                      l558 107E  
                    l583 182E                      l655 11CE                      l647 1186  
                    l576 17DC                      l656 11C4                      l680 1380  
                    l577 17D2                      l665 1474                      l673 1928  
                    l593 1570                      l658 11F2                      l682 13A8  
                    l674 1958                      l594 1562                      l579 1810  
                    l667 149C                      l691 1D10                      l659 120E  
                    l683 13DA                      l668 14DA                      l684 13EA  
                    l596 158A                      l669 1500                      l597 1606  
                    l686 1402                      l687 1412                      l697 1B60  
                    l955 16D6                      l956 1656             __CFG_CPB$OFF 000000  
           __CFG_CPD$OFF 000000                      _ISR 0008                      _PSA 007EAB  
                    _Adc 1BF8                      _RX9 007D5E                      _TX9 007D66  
                    _WUE 007DC1                      _cpt 00C3                      _exp 0EC6  
        __end_of_ADCInit 1CD4                      prod 000FF3                      wreg 000FE8  
            main@adc_res 00BA               _TXSTA1bits 000FAC           Modulo@M_nombre 0001  
           __CFG_LVP$OFF 000000                     ?_ISR 0001                     ?_Adc 001E  
           ___ftdiv@cntr 002F             ___ftdiv@sign 0034             __CFG_WDT$OFF 000000  
                   l2048 1984                     l2308 1D78                     l3214 107E  
                   l2552 1C8C                     ?_exp 009F                     _BRGH 007D62  
                   _CREN 007D5C                     _T0CS 007EAD                     _FERR 007D5A  
                   u1400 1842                     u3000 0F5C                     u2210 19CE  
                   _T0SE 007EAC                     u1360 17C4                     u3140 0A34  
                   u3060 0684                     u3217 0654                     u1730 1A50  
                   u3180 0D20                     u2701 10DC                     u1661 1368  
                   u1830 1330                     u3078 0688                     u1681 1390  
                   u2730 10FC                     u1738 1A52                     u1771 1274  
                   u1861 145C                     u2830 11A2                     u1790 12AE  
                   u2760 1126                     u1881 1484                     u2930 157C  
                   u2691 10C8                     u1795 12A6                     u2860 11D6  
                   u2790 1164                     u1990 1728                     _RCIE 007CED  
                   _RCIF 007CF5                     u1998 172C                     u2990 0F5A  
                   _OERR 007D59                     _SPEN 007D5F                     _TXEN 007D65  
                   _SYNC 007D64                     _PosX 00CA                     _PosY 00C8  
                   _main 0620             ___ftpack@arg 001E             ___ftpack@exp 0021  
                   fsr0h 000FEA                     fsr1h 000FE2                     fsr2h 000FDA  
                   fsr0l 000FE9                     indf1 000FE7                     indf2 000FDF  
                   fsr1l 000FE1                     fsr2l 000FD9                     btemp 0062  
             _ClearArray 1C84                     exp@x 009F                     prodh 000FF4  
                   prodl 000FF3                     start 05B8            __CFG_IESO$OFF 000000  
          __CFG_MCLRE$ON 000000             ___ftmul@cntr 0058             ___param_bank 000000  
           ___ftmul@sign 0059                    ??_ISR 0003                    ??_Adc 0020  
           ___fttol@exp1 0043                    ??_exp 005A             ___fttol@lval 003F  
        __end_of_SpiInit 1C84                    _ABDEN 007DC0                    ?_main 0001  
        __end_of___awdiv 1A0C          __end_of___ftadd 1264                    _BRG16 007DC3  
        __end_of___ftdiv 1532          __end_of___ftneg 1D1E          __end_of___ftmul 144C  
        ___awdiv@divisor 0020          __end_of___ftsub 1B8A          __end_of___fttol 1358  
                  _T0PS0 007EA8                    _T0PS1 007EA9                    _T0PS2 007EAA  
                  i2l301 039E                    i2l310 04AC                    i2l311 048C  
                  i2l312 0466                    i2l313 04A8                    i2l305 03AC  
                  i2l314 046A                    i2l251 1D68                    i2l323 0516  
                  i2l315 0470                    i2l252 1D60                    i2l340 0510  
                  i2l324 04D2                    i2l316 0476                    i2l260 043A  
                  i2l333 04E6                    i2l317 0486                    i2l309 0436  
                  i2l261 005E                    i2l334 04EA                    i2l318 04B0  
                  i2l270 00D8                    i2l262 006C                    i2l335 04F2  
                  i2l263 0456                    i2l271 00E4                    i2l328 056C  
                  i2l280 01C8                    i2l264 007A                    i2l337 04FE  
                  i2l329 04DE                    i2l281 01CC                    i2l273 013A  
                  i2l265 0086                    i2l290 02BC                    i2l282 01D8  
                  i2l274 014E                    i2l339 050A                    i2l291 02C0  
                  i2l267 00BA                    i2l292 02CC                    i2l284 022E  
                  i2l276 0152                    i2l269 03DE                    i2l285 0242  
                  i2l277 015E                    i2l294 0322                    i2l286 0246  
                  i2l295 0336                    i2l287 0252                    i2l279 01B4  
                  i2l296 033A                    i2l289 02A8                    i2l298 036C  
        ___awdiv@counter 0022                    _RCREG 000FAE                    _SENDB 007D63  
                  _TMR0H 000FD7                    _TMR0L 000FD6                    _SPBRG 000FAF  
                  _RXDTP 007DC5                    _TXCKP 007DC4            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000                    _Score 00BF  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000            ___awtoft@sign 0047  
                  _floor 1532                    _ldexp 16EE                    _frexp 1A0C  
                  _errno 00BD            ___ftpack@sign 0022               _EtatScreen 00C7  
                  pclath 000FFA                    tablat 000FF5                    status 000FD8  
                  wtemp6 0063           __CFG_PBADEN$ON 000000              exp@exponent 00A5  
            ldexp@newexp 009B          __initialization 1862             __end_of_main 0EC6  
       __end_of_InitTmr0 1D5E                ??_ADCInit 001E                   ??_main 00A8  
          ___fttol@sign1 003E            __activetblptr 000002       __size_of_ClockInit 000E  
       __end_of_UartInit 1C5A           PrintC@c_printC 001E                   ?_floor 008C  
                 ?_ldexp 0098                   ?_frexp 001E         __end_of___altoft 1AFC  
                 _ADRESH 000FC4                   _ADRESL 000FC3                   _T08BIT 007EAE  
             _TailleTerm 00C1         ___awdiv@dividend 001E         __end_of___awtoft 1BC2  
       __end_of___ftpack 1862                   i2l3038 04D8                   i2l2900 0156  
                 i2l2932 024A                   i2l2916 01D0                   i2l2948 02C4  
                 i2l2884 00DC         __end_of___lwtoft 1D42                   _TMR0IF 007F92  
                 _TMR0ON 007EAF                   _SPBRGH 000FB0                   _TRISA5 007C95  
                 _TRISC3 007CA3                   _TRISC4 007CA4                   _TRISC5 007CA5  
                 _TRISC6 007CA6                   _TRISC7 007CA7                   _SSPBUF 000FC9  
            ?_ClearArray 0001                   _TXREG1 000FAD               _PrgmChoisi 005D  
                 _CptSpi 0061           __CFG_XINST$OFF 000000                   _Modulo 1D5E  
              ??_SpiInit 001E                   _PrintC 1D76                   _PrintS 1BC2  
                 ___ftge 18F8                   ___wmul 1CD4                ??___awdiv 0022  
              ??___ftadd 0086           __CFG_STVREN$ON 000000                ??___ftdiv 002C  
              ??___ftneg 004B                ??___ftmul 0051                ??___ftsub 005A  
              ??___fttol 0039                   clear_0 18C0                   clear_1 18CC  
                 clear_2 18D8         ___awdiv@quotient 0024                   floor@i 008F  
                 floor@x 008C    ___ftmul@f3_as_product 0055             __pdataCOMRAM 0060  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8         __end_ofexp@coeff 061F               __accesstop 0080  
__end_of__initialization 18EA               ___altoft@c 0044               ___ftadd@f1 0080  
             ___ftadd@f2 0083               ___ftge@ff1 001E               ___ftge@ff2 0021  
           eval_poly@res 0095            ___rparam_used 000001        __end_of_ClockInit 1D92  
             ___ftdiv@f1 0026               ___ftdiv@f2 0029               ___ftdiv@f3 0030  
             ___ftneg@f1 0048      main@taille_text_spi 00B8               ___awtoft@c 0044  
             ___ftmul@f1 004B               ___ftmul@f2 004E               ___ftsub@f1 008C  
             ___ftsub@f2 008F               ___fttol@f1 0035           __pcstackCOMRAM 0001  
            ISR@data_spi 001D             __pidataBANK0 1D92             __pidataBANK2 1AFC  
             _TypeVarSpi 00C4            __end_of_floor 1614            __end_of_ldexp 17B4  
          __end_of_frexp 1A84               ___lwtoft@c 0026      __size_of_ClearArray 0028  
                ??_floor 005A                  ??_ldexp 009D                  ??_frexp 0023  
             __pbssBANK0 00BD               __pbssBANK1 0100               __pbssBANK3 0300  
     __size_of_eval_poly 00DA                ?_InitTmr0 0001                  ?_Modulo 0001  
              ?_UartInit 0001                  ?_PrintC 0001                  ?_PrintS 001F  
                ?___ftge 001E           PrintS@s_printS 001F                  ?___wmul 001E  
              ?___altoft 0044                  _ADCInit 1CAC                ?___awtoft 0044  
              ?___ftpack 001E                ?___lwtoft 0026               ??_InitTmr0 001E  
                _FlagSpi 00CC                  _CptSend 0060                  _EtatSpi 005F  
                __Hparam 0000                  __Lparam 0000               ??_UartInit 001E  
                _SpiInit 1C5A          __size_of_Modulo 0018                  _TextSpi 0300  
        __size_of_PrintC 000E          __size_of_PrintS 0036          __size_of___ftge 0090  
                ___awdiv 1988                  ___ftadd 10B6                  ___ftdiv 144C  
                ___ftneg 1CFA          __size_of___wmul 0026                  ___ftmul 1358  
                ___ftsub 1B48                  ___fttol 1264             __psmallconst 0600  
             ??___altoft 0048                  __pcinit 1862               ??___awtoft 0047  
             ??___ftpack 0023        __end_of_eval_poly 16EE                  __ramtop 0600  
                __ptext0 0620                  __ptext1 0EC6                  __ptext2 16EE  
                __ptext3 1532                  __ptext4 1A0C                  __ptext5 1264  
                __ptext6 18F8                  __ptext7 1A84                  __ptext8 1614  
                __ptext9 1CD4               ??___lwtoft 0029             __size_of_ISR 05B0  
           __size_of_Adc 0032             __size_of_exp 01F0     end_of_initialization 18EA  
                exp@sign 00A7            __Lmediumconst 0000             ??_ClearArray 001E  
                postdec1 000FE5                  postdec2 000FDD                  postinc0 000FEE  
                postinc2 000FDE       __end_of_ClearArray 1CAC                _TRISAbits 000F92  
              _TRISCbits 000F94              ___ftdiv@exp 0033     main@taille_text_prgm 00B9  
          _PosCursorPrgm 00C5              ___ftmul@exp 0054                _FlagSleep 005C  
              _ClockInit 1D84           __end_of_Modulo 1D76           __end_of_PrintC 1D84  
         __end_of_PrintS 1BF8           __end_of___ftge 1988           __end_of___wmul 1CFA  
          __pidataCOMRAM 1D97                _AutoLight 00C6               floor@expon 0092  
    start_initialization 1862               eval_poly@d 008F               eval_poly@n 0091  
             eval_poly@x 008C              __end_of_ISR 05B8              __end_of_Adc 1C2A  
             ldexp@value 0098              __end_of_exp 10B6               frexp@value 001E  
       __CFG_OSC$INTIO67 000000        __size_of_InitTmr0 001C                 ??_Modulo 0003  
               ??_PrintC 001E                 ??_PrintS 0021                 ??___ftge 0024  
             ?_ClockInit 0001                 ??___wmul 0022        __size_of_UartInit 0030  
            __pdataBANK0 00C8              __pdataBANK2 0200         __CFG_LPT1OSC$OFF 000000  
               ?_ADCInit 0001               ISR@Receive 001C        __size_of___altoft 0078  
      __size_of___awtoft 0038        __size_of___ftpack 00AE              __pbssCOMRAM 005A  
      __size_of___lwtoft 0024            __pcstackBANK0 0080                _main$1525 00AC  
              _main$1526 00AF                _main$1527 00B3                _main$1528 00B6  
               ?_SpiInit 0001        __CFG_CCP2MX$PORTC 000000                __pintcode 0008  
               ?___awdiv 001E                 ?___ftadd 0080                 ?___ftdiv 0026  
               ?___ftneg 0048                 ?___ftmul 004B                 ?___ftsub 008C  
               ?___fttol 0035              __smallconst 0600                _eval_poly 1614  
           _SendMsgSreen 0100             _TailleMsgSpi 005E           __size_of_floor 00E2  
         __size_of_ldexp 00C6           __size_of_frexp 0078               Adc@channel 0022  
         ___wmul@product 0022                 _LATAbits 000F89                 _LATCbits 000F8B  
               _PIE1bits 000F9D                 i2u217_40 1D72                 _PIR1bits 000F9E  
       __CFG_WDTPS$32768 000000              ??_ClockInit 001E                _text_prgm 0200  
       __size_of_ADCInit 0028               _ADCON0bits 000FC2               _ADCON1bits 000FC1  
             _ADCON2bits 000FC0        ___wmul@multiplier 001E               ?_eval_poly 008C  
               _Checksum 005A                copy_data0 1876                copy_data1 1896  
               _InitTmr0 1D42                frexp@eptr 0021                 __Hrparam 0000  
               _UartInit 1C2A                 __Lrparam 0000       __CFG_BOREN$SBORDIS 000000  
       __size_of_SpiInit 002A         __size_of___awdiv 0084         __size_of___ftadd 01AE  
       __size_of___ftdiv 00E6         __size_of___ftneg 0024                 ___altoft 1A84  
       __size_of___ftmul 00F4         __size_of___ftsub 0042         __size_of___fttol 00F4  
               ___awtoft 1B8A                 ___ftpack 17B4                 ___lwtoft 1D1E  
               _exp$1529 00A2                 __ptext10 1358                 __ptext11 1B48  
               __ptext20 1C5A                 __ptext12 10B6                 __ptext21 1BC2  
               __ptext13 1CFA                 __ptext22 1D76                 __ptext14 144C  
               __ptext23 1D42                 __ptext15 1B8A                 __ptext24 1D84  
               __ptext16 1D1E                 __ptext25 1C84                 __ptext17 17B4  
               __ptext26 1BF8                 __ptext18 1988                 __ptext27 1CAC  
               __ptext19 1C2A                 __ptext29 1D5E            __size_of_main 08A6  
               int$flags 0062                 exp@coeff 0601              _OSCTUNEbits 000F9B  
             _INTCONbits 000FF2              ??_eval_poly 0093                 intlevel2 0000  
             _OSCCONbits 000FD3       ClearArray@cpt_vide 001E              _SSPCON1bits 000FC6  
