

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu May 30 20:57:12 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18LF2520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    51                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    52                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    53  0000                     
    54                           ; Version 1.45
    55                           ; Generated 16/11/2017 GMT
    56                           ; 
    57                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC18LF2520 Definitions
    86                           ; 
    87                           ; SFR Addresses
    88  0000                     
    89                           	psect	idataCOMRAM
    90  001EE9                     __pidataCOMRAM:
    91                           	opt stack 0
    92                           
    93                           ;initializer for _CptSend
    94  001EE9  01                 	db	1
    95                           
    96                           ;initializer for _CptSpi
    97  001EEA  01                 	db	1
    98                           
    99                           	psect	idataBANK0
   100  001EE4                     __pidataBANK0:
   101                           	opt stack 0
   102                           
   103                           ;initializer for _PosY
   104  001EE4  00F0               	dw	240
   105                           
   106                           ;initializer for _PosX
   107  001EE6  0190               	dw	400
   108                           
   109                           ;initializer for _FlagSpi
   110  001EE8  01                 	db	1
   111                           
   112                           	psect	idataBANK2
   113  001C20                     __pidataBANK2:
   114                           	opt stack 0
   115                           
   116                           ;initializer for _text_prgm
   117  001C20  70                 	db	112
   118  001C21  72                 	db	114
   119  001C22  67                 	db	103
   120  001C23  6D                 	db	109
   121  001C24  44                 	db	68
   122  001C25  72                 	db	114
   123  001C26  6F                 	db	111
   124  001C27  69                 	db	105
   125  001C28  74                 	db	116
   126  001C29  65                 	db	101
   127  001C2A  00                 	db	0
   128  001C2B  00                 	db	0
   129  001C2C  00                 	db	0
   130  001C2D  00                 	db	0
   131  001C2E  00                 	db	0
   132  001C2F  70                 	db	112
   133  001C30  72                 	db	114
   134  001C31  67                 	db	103
   135  001C32  6D                 	db	109
   136  001C33  47                 	db	71
   137  001C34  61                 	db	97
   138  001C35  75                 	db	117
   139  001C36  63                 	db	99
   140  001C37  68                 	db	104
   141  001C38  65                 	db	101
   142  001C39  00                 	db	0
   143  001C3A  00                 	db	0
   144  001C3B  00                 	db	0
   145  001C3C  00                 	db	0
   146  001C3D  00                 	db	0
   147  001C3E  70                 	db	112
   148  001C3F  72                 	db	114
   149  001C40  67                 	db	103
   150  001C41  6D                 	db	109
   151  001C42  42                 	db	66
   152  001C43  6C                 	db	108
   153  001C44  65                 	db	101
   154  001C45  75                 	db	117
   155  001C46  00                 	db	0
   156  001C47  00                 	db	0
   157  001C48  00                 	db	0
   158  001C49  00                 	db	0
   159  001C4A  00                 	db	0
   160  001C4B  00                 	db	0
   161  001C4C  00                 	db	0
   162  001C4D  70                 	db	112
   163  001C4E  72                 	db	114
   164  001C4F  67                 	db	103
   165  001C50  6D                 	db	109
   166  001C51  42                 	db	66
   167  001C52  6C                 	db	108
   168  001C53  61                 	db	97
   169  001C54  6E                 	db	110
   170  001C55  63                 	db	99
   171  001C56  00                 	db	0
   172  001C57  00                 	db	0
   173  001C58  00                 	db	0
   174  001C59  00                 	db	0
   175  001C5A  00                 	db	0
   176  001C5B  00                 	db	0
   177  001C5C  70                 	db	112
   178  001C5D  72                 	db	114
   179  001C5E  67                 	db	103
   180  001C5F  6D                 	db	109
   181  001C60  52                 	db	82
   182  001C61  6F                 	db	111
   183  001C62  75                 	db	117
   184  001C63  67                 	db	103
   185  001C64  65                 	db	101
   186  001C65  00                 	db	0
   187  001C66  00                 	db	0
   188  001C67  00                 	db	0
   189  001C68  00                 	db	0
   190  001C69  00                 	db	0
   191  001C6A  00                 	db	0
   192                           
   193                           	psect	smallconst
   194  00071C                     __psmallconst:
   195                           	opt stack 0
   196  00071C  00                 	db	0
   197  00071D                     exp@coeff:
   198                           	opt stack 0
   199  00071D  00                 	db	0
   200  00071E  80                 	db	128
   201  00071F  3F                 	db	63
   202  000720  72                 	db	114
   203  000721  31                 	db	49
   204  000722  3F                 	db	63
   205  000723  FE                 	db	254
   206  000724  75                 	db	117
   207  000725  3E                 	db	62
   208  000726  58                 	db	88
   209  000727  63                 	db	99
   210  000728  3D                 	db	61
   211  000729  95                 	db	149
   212  00072A  1D                 	db	29
   213  00072B  3C                 	db	60
   214  00072C  C5                 	db	197
   215  00072D  AE                 	db	174
   216  00072E  3A                 	db	58
   217  00072F  79                 	db	121
   218  000730  21                 	db	33
   219  000731  39                 	db	57
   220  000732  94                 	db	148
   221  000733  80                 	db	128
   222  000734  37                 	db	55
   223  000735  93                 	db	147
   224  000736  A7                 	db	167
   225  000737  35                 	db	53
   226  000738  56                 	db	86
   227  000739  15                 	db	21
   228  00073A  34                 	db	52
   229  00073B                     __end_ofexp@coeff:
   230                           	opt stack 0
   231  0000                     _RCREG	set	4014
   232  0000                     _TXREG1	set	4013
   233  0000                     _TXSTA1bits	set	4012
   234  0000                     _ADRESL	set	4035
   235  0000                     _ADRESH	set	4036
   236  0000                     _ADCON0bits	set	4034
   237  0000                     _SPBRG	set	4015
   238  0000                     _SPBRGH	set	4016
   239  0000                     _INTCONbits	set	4082
   240  0000                     _SSPBUF	set	4041
   241  0000                     _SSPCON1bits	set	4038
   242  0000                     _SSPSTATbits	set	4039
   243  0000                     _PIE1bits	set	3997
   244  0000                     _PIR1bits	set	3998
   245  0000                     _LATAbits	set	3977
   246  0000                     _ADCON2bits	set	4032
   247  0000                     _ADCON1bits	set	4033
   248  0000                     _TRISAbits	set	3986
   249  0000                     _OSCTUNEbits	set	3995
   250  0000                     _OSCCONbits	set	4051
   251  0000                     _LATCbits	set	3979
   252  0000                     _TMR0H	set	4055
   253  0000                     _TMR0L	set	4054
   254  0000                     _TRISCbits	set	3988
   255  0000                     _TMR0ON	set	32431
   256  0000                     _T0PS0	set	32424
   257  0000                     _T0PS1	set	32425
   258  0000                     _T0PS2	set	32426
   259  0000                     _PSA	set	32427
   260  0000                     _T0SE	set	32428
   261  0000                     _T0CS	set	32429
   262  0000                     _T08BIT	set	32430
   263  0000                     _SPEN	set	32095
   264  0000                     _TXEN	set	32101
   265  0000                     _RCIF	set	31989
   266  0000                     _RCIE	set	31981
   267  0000                     _ABDEN	set	32192
   268  0000                     _WUE	set	32193
   269  0000                     _BRG16	set	32195
   270  0000                     _TXCKP	set	32196
   271  0000                     _RXDTP	set	32197
   272  0000                     _OERR	set	32089
   273  0000                     _FERR	set	32090
   274  0000                     _CREN	set	32092
   275  0000                     _RX9	set	32094
   276  0000                     _BRGH	set	32098
   277  0000                     _SENDB	set	32099
   278  0000                     _SYNC	set	32100
   279  0000                     _TX9	set	32102
   280  0000                     _TRISC7	set	31911
   281  0000                     _TRISC6	set	31910
   282  0000                     _TRISC5	set	31909
   283  0000                     _TRISC4	set	31908
   284  0000                     _TRISC3	set	31907
   285  0000                     _TRISA5	set	31893
   286  0000                     _TMR0IF	set	32658
   287                           
   288                           ; #config settings
   289  00073B  00                 	db	0	; dummy byte at the end
   290  0000                     
   291                           	psect	cinit
   292  001984                     __pcinit:
   293                           	opt stack 0
   294  001984                     start_initialization:
   295                           	opt stack 0
   296  001984                     __initialization:
   297                           	opt stack 0
   298                           
   299                           ; Initialize objects allocated to BANK2 (75 bytes)
   300                           ; load TBLPTR registers with __pidataBANK2
   301  001984  0E20               	movlw	low __pidataBANK2
   302  001986  6EF6               	movwf	tblptrl,c
   303  001988  0E1C               	movlw	high __pidataBANK2
   304  00198A  6EF7               	movwf	tblptrh,c
   305  00198C  0E00               	movlw	low (__pidataBANK2 shr (0+16))
   306  00198E  6EF8               	movwf	tblptru,c
   307  001990  EE02  F000         	lfsr	0,__pdataBANK2
   308  001994  EE10 F04B          	lfsr	1,75
   309  001998                     copy_data0:
   310  001998  0009               	tblrd		*+
   311  00199A  CFF5 FFEE          	movff	tablat,postinc0
   312  00199E  50E5               	movf	postdec1,w,c
   313  0019A0  50E1               	movf	fsr1l,w,c
   314  0019A2  E1FA               	bnz	copy_data0
   315                           
   316                           ; Initialize objects allocated to BANK0 (5 bytes)
   317                           ; load TBLPTR registers with __pidataBANK0
   318  0019A4  0EE4               	movlw	low __pidataBANK0
   319  0019A6  6EF6               	movwf	tblptrl,c
   320  0019A8  0E1E               	movlw	high __pidataBANK0
   321  0019AA  6EF7               	movwf	tblptrh,c
   322  0019AC  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   323  0019AE  6EF8               	movwf	tblptru,c
   324  0019B0  EE00  F0DD         	lfsr	0,__pdataBANK0
   325  0019B4  EE10 F005          	lfsr	1,5
   326  0019B8                     copy_data1:
   327  0019B8  0009               	tblrd		*+
   328  0019BA  CFF5 FFEE          	movff	tablat,postinc0
   329  0019BE  50E5               	movf	postdec1,w,c
   330  0019C0  50E1               	movf	fsr1l,w,c
   331  0019C2  E1FA               	bnz	copy_data1
   332                           
   333                           ; Initialize objects allocated to COMRAM (2 bytes)
   334                           ; load TBLPTR registers with __pidataCOMRAM
   335  0019C4  0EE9               	movlw	low __pidataCOMRAM
   336  0019C6  6EF6               	movwf	tblptrl,c
   337  0019C8  0E1E               	movlw	high __pidataCOMRAM
   338  0019CA  6EF7               	movwf	tblptrh,c
   339  0019CC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   340  0019CE  6EF8               	movwf	tblptru,c
   341  0019D0  0009               	tblrd		*+	;fetch initializer
   342  0019D2  CFF5 F05E          	movff	tablat,__pdataCOMRAM
   343  0019D6  0009               	tblrd		*+	;fetch initializer
   344  0019D8  CFF5 F05F          	movff	tablat,__pdataCOMRAM+1
   345                           
   346                           ; Clear objects allocated to BANK3 (196 bytes)
   347  0019DC  EE03  F000         	lfsr	0,__pbssBANK3
   348  0019E0  0EC4               	movlw	196
   349  0019E2                     clear_0:
   350  0019E2  6AEE               	clrf	postinc0,c
   351  0019E4  06E8               	decf	wreg,f,c
   352  0019E6  E1FD               	bnz	clear_0
   353                           
   354                           ; Clear objects allocated to BANK1 (252 bytes)
   355  0019E8  EE01  F000         	lfsr	0,__pbssBANK1
   356  0019EC  0EFC               	movlw	252
   357  0019EE                     clear_1:
   358  0019EE  6AEE               	clrf	postinc0,c
   359  0019F0  06E8               	decf	wreg,f,c
   360  0019F2  E1FD               	bnz	clear_1
   361                           
   362                           ; Clear objects allocated to BANK0 (11 bytes)
   363  0019F4  EE00  F0D2         	lfsr	0,__pbssBANK0
   364  0019F8  0E0B               	movlw	11
   365  0019FA                     clear_2:
   366  0019FA  6AEE               	clrf	postinc0,c
   367  0019FC  06E8               	decf	wreg,f,c
   368  0019FE  E1FD               	bnz	clear_2
   369                           
   370                           ; Clear objects allocated to COMRAM (22 bytes)
   371  001A00  EE00  F048         	lfsr	0,__pbssCOMRAM
   372  001A04  0E16               	movlw	22
   373  001A06                     clear_3:
   374  001A06  6AEE               	clrf	postinc0,c
   375  001A08  06E8               	decf	wreg,f,c
   376  001A0A  E1FD               	bnz	clear_3
   377  001A0C                     end_of_initialization:
   378                           	opt stack 0
   379  001A0C                     __end_of__initialization:
   380                           	opt stack 0
   381  001A0C  9060               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   382  001A0E  9260               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   383  001A10  0E00               	movlw	low (__Lmediumconst shr (0+16))
   384  001A12  6EF8               	movwf	tblptru,c
   385  001A14  0100               	movlb	0
   386  001A16  EF9E  F003         	goto	_main	;jump to C main() function
   387                           tblptru	equ	0xFF8
   388                           tblptrh	equ	0xFF7
   389                           tblptrl	equ	0xFF6
   390                           tablat	equ	0xFF5
   391                           postinc0	equ	0xFEE
   392                           wreg	equ	0xFE8
   393                           postdec1	equ	0xFE5
   394                           fsr1l	equ	0xFE1
   395                           
   396                           	psect	bssCOMRAM
   397  000048                     __pbssCOMRAM:
   398                           	opt stack 0
   399  000048                     _TabPileSend:
   400                           	opt stack 0
   401  000048                     	ds	10
   402  000052                     _Checksum:
   403                           	opt stack 0
   404  000052                     	ds	2
   405  000054                     _CptPile:
   406                           	opt stack 0
   407  000054                     	ds	1
   408  000055                     _CptReadPile:
   409                           	opt stack 0
   410  000055                     	ds	1
   411  000056                     _SendNbSpi:
   412                           	opt stack 0
   413  000056                     	ds	1
   414  000057                     _CptSpiSend:
   415                           	opt stack 0
   416  000057                     	ds	1
   417  000058                     _Stop:
   418                           	opt stack 0
   419  000058                     	ds	1
   420  000059                     _PrgmSens:
   421                           	opt stack 0
   422  000059                     	ds	1
   423  00005A                     _FlagSleep:
   424                           	opt stack 0
   425  00005A                     	ds	1
   426  00005B                     _PrgmChoisi:
   427                           	opt stack 0
   428  00005B                     	ds	1
   429  00005C                     _TailleMsgSpi:
   430                           	opt stack 0
   431  00005C                     	ds	1
   432  00005D                     _EtatSpi:
   433                           	opt stack 0
   434  00005D                     	ds	1
   435                           tblptru	equ	0xFF8
   436                           tblptrh	equ	0xFF7
   437                           tblptrl	equ	0xFF6
   438                           tablat	equ	0xFF5
   439                           postinc0	equ	0xFEE
   440                           wreg	equ	0xFE8
   441                           postdec1	equ	0xFE5
   442                           fsr1l	equ	0xFE1
   443                           
   444                           	psect	dataCOMRAM
   445  00005E                     __pdataCOMRAM:
   446                           	opt stack 0
   447  00005E                     _CptSend:
   448                           	opt stack 0
   449  00005E                     	ds	1
   450  00005F                     _CptSpi:
   451                           	opt stack 0
   452  00005F                     	ds	1
   453                           tblptru	equ	0xFF8
   454                           tblptrh	equ	0xFF7
   455                           tblptrl	equ	0xFF6
   456                           tablat	equ	0xFF5
   457                           postinc0	equ	0xFEE
   458                           wreg	equ	0xFE8
   459                           postdec1	equ	0xFE5
   460                           fsr1l	equ	0xFE1
   461                           
   462                           	psect	bssBANK0
   463  0000D2                     __pbssBANK0:
   464                           	opt stack 0
   465  0000D2                     _errno:
   466                           	opt stack 0
   467  0000D2                     	ds	2
   468  0000D4                     _Score:
   469                           	opt stack 0
   470  0000D4                     	ds	2
   471  0000D6                     _TailleTerm:
   472                           	opt stack 0
   473  0000D6                     	ds	2
   474  0000D8                     _cpt:
   475                           	opt stack 0
   476  0000D8                     	ds	1
   477  0000D9                     _TypeVarSpi:
   478                           	opt stack 0
   479  0000D9                     	ds	1
   480  0000DA                     _PosCursorPrgm:
   481                           	opt stack 0
   482  0000DA                     	ds	1
   483  0000DB                     _AutoLight:
   484                           	opt stack 0
   485  0000DB                     	ds	1
   486  0000DC                     _EtatScreen:
   487                           	opt stack 0
   488  0000DC                     	ds	1
   489                           tblptru	equ	0xFF8
   490                           tblptrh	equ	0xFF7
   491                           tblptrl	equ	0xFF6
   492                           tablat	equ	0xFF5
   493                           postinc0	equ	0xFEE
   494                           wreg	equ	0xFE8
   495                           postdec1	equ	0xFE5
   496                           fsr1l	equ	0xFE1
   497                           
   498                           	psect	dataBANK0
   499  0000DD                     __pdataBANK0:
   500                           	opt stack 0
   501  0000DD                     _PosY:
   502                           	opt stack 0
   503  0000DD                     	ds	2
   504  0000DF                     _PosX:
   505                           	opt stack 0
   506  0000DF                     	ds	2
   507  0000E1                     _FlagSpi:
   508                           	opt stack 0
   509  0000E1                     	ds	1
   510                           tblptru	equ	0xFF8
   511                           tblptrh	equ	0xFF7
   512                           tblptrl	equ	0xFF6
   513                           tablat	equ	0xFF5
   514                           postinc0	equ	0xFEE
   515                           wreg	equ	0xFE8
   516                           postdec1	equ	0xFE5
   517                           fsr1l	equ	0xFE1
   518                           
   519                           	psect	bssBANK1
   520  000100                     __pbssBANK1:
   521                           	opt stack 0
   522  000100                     _SendMsgSreen:
   523                           	opt stack 0
   524  000100                     	ds	252
   525                           tblptru	equ	0xFF8
   526                           tblptrh	equ	0xFF7
   527                           tblptrl	equ	0xFF6
   528                           tablat	equ	0xFF5
   529                           postinc0	equ	0xFEE
   530                           wreg	equ	0xFE8
   531                           postdec1	equ	0xFE5
   532                           fsr1l	equ	0xFE1
   533                           
   534                           	psect	dataBANK2
   535  000200                     __pdataBANK2:
   536                           	opt stack 0
   537  000200                     _text_prgm:
   538                           	opt stack 0
   539  000200                     	ds	75
   540                           tblptru	equ	0xFF8
   541                           tblptrh	equ	0xFF7
   542                           tblptrl	equ	0xFF6
   543                           tablat	equ	0xFF5
   544                           postinc0	equ	0xFEE
   545                           wreg	equ	0xFE8
   546                           postdec1	equ	0xFE5
   547                           fsr1l	equ	0xFE1
   548                           
   549                           	psect	bssBANK3
   550  000300                     __pbssBANK3:
   551                           	opt stack 0
   552  000300                     _TextSpi:
   553                           	opt stack 0
   554  000300                     	ds	196
   555                           tblptru	equ	0xFF8
   556                           tblptrh	equ	0xFF7
   557                           tblptrl	equ	0xFF6
   558                           tablat	equ	0xFF5
   559                           postinc0	equ	0xFEE
   560                           wreg	equ	0xFE8
   561                           postdec1	equ	0xFE5
   562                           fsr1l	equ	0xFE1
   563                           
   564                           	psect	cstackBANK0
   565  000080                     __pcstackBANK0:
   566                           	opt stack 0
   567  000080                     ?___altoft:
   568                           	opt stack 0
   569  000080                     ?___awtoft:
   570                           	opt stack 0
   571  000080                     ___awtoft@c:
   572                           	opt stack 0
   573  000080                     ___altoft@c:
   574                           	opt stack 0
   575                           
   576                           ; 4 bytes @ 0x0
   577  000080                     	ds	3
   578  000083                     ?___ftneg:
   579                           	opt stack 0
   580  000083                     ___ftneg@f1:
   581                           	opt stack 0
   582                           
   583                           ; 3 bytes @ 0x3
   584  000083                     	ds	1
   585  000084                     ??___altoft:
   586                           
   587                           ; 1 bytes @ 0x4
   588  000084                     	ds	2
   589  000086                     ?___ftmul:
   590                           	opt stack 0
   591  000086                     ___ftmul@f1:
   592                           	opt stack 0
   593                           
   594                           ; 3 bytes @ 0x6
   595  000086                     	ds	3
   596  000089                     ___ftmul@f2:
   597                           	opt stack 0
   598                           
   599                           ; 3 bytes @ 0x9
   600  000089                     	ds	3
   601  00008C                     ??___ftmul:
   602                           
   603                           ; 1 bytes @ 0xC
   604  00008C                     	ds	3
   605  00008F                     ___ftmul@exp:
   606                           	opt stack 0
   607                           
   608                           ; 1 bytes @ 0xF
   609  00008F                     	ds	1
   610  000090                     ___ftmul@f3_as_product:
   611                           	opt stack 0
   612                           
   613                           ; 3 bytes @ 0x10
   614  000090                     	ds	3
   615  000093                     ___ftmul@cntr:
   616                           	opt stack 0
   617                           
   618                           ; 1 bytes @ 0x13
   619  000093                     	ds	1
   620  000094                     ___ftmul@sign:
   621                           	opt stack 0
   622                           
   623                           ; 1 bytes @ 0x14
   624  000094                     	ds	1
   625  000095                     ?___ftadd:
   626                           	opt stack 0
   627  000095                     ___ftadd@f1:
   628                           	opt stack 0
   629                           
   630                           ; 3 bytes @ 0x15
   631  000095                     	ds	3
   632  000098                     ___ftadd@f2:
   633                           	opt stack 0
   634                           
   635                           ; 3 bytes @ 0x18
   636  000098                     	ds	3
   637  00009B                     ??___ftadd:
   638                           
   639                           ; 1 bytes @ 0x1B
   640  00009B                     	ds	3
   641  00009E                     ___ftadd@sign:
   642                           	opt stack 0
   643                           
   644                           ; 1 bytes @ 0x1E
   645  00009E                     	ds	1
   646  00009F                     ___ftadd@exp2:
   647                           	opt stack 0
   648                           
   649                           ; 1 bytes @ 0x1F
   650  00009F                     	ds	1
   651  0000A0                     ___ftadd@exp1:
   652                           	opt stack 0
   653                           
   654                           ; 1 bytes @ 0x20
   655  0000A0                     	ds	1
   656  0000A1                     ?___ftsub:
   657                           	opt stack 0
   658  0000A1                     ?_floor:
   659                           	opt stack 0
   660  0000A1                     ?_eval_poly:
   661                           	opt stack 0
   662  0000A1                     floor@x:
   663                           	opt stack 0
   664  0000A1                     ___ftsub@f1:
   665                           	opt stack 0
   666  0000A1                     eval_poly@x:
   667                           	opt stack 0
   668                           
   669                           ; 3 bytes @ 0x21
   670  0000A1                     	ds	3
   671  0000A4                     eval_poly@d:
   672                           	opt stack 0
   673  0000A4                     floor@i:
   674                           	opt stack 0
   675  0000A4                     ___ftsub@f2:
   676                           	opt stack 0
   677                           
   678                           ; 3 bytes @ 0x24
   679  0000A4                     	ds	2
   680  0000A6                     eval_poly@n:
   681                           	opt stack 0
   682                           
   683                           ; 2 bytes @ 0x26
   684  0000A6                     	ds	1
   685  0000A7                     floor@expon:
   686                           	opt stack 0
   687                           
   688                           ; 2 bytes @ 0x27
   689  0000A7                     	ds	1
   690  0000A8                     ??_eval_poly:
   691                           
   692                           ; 1 bytes @ 0x28
   693  0000A8                     	ds	2
   694  0000AA                     eval_poly@res:
   695                           	opt stack 0
   696                           
   697                           ; 3 bytes @ 0x2A
   698  0000AA                     	ds	3
   699  0000AD                     ?_ldexp:
   700                           	opt stack 0
   701  0000AD                     ldexp@value:
   702                           	opt stack 0
   703                           
   704                           ; 3 bytes @ 0x2D
   705  0000AD                     	ds	3
   706  0000B0                     ldexp@newexp:
   707                           	opt stack 0
   708                           
   709                           ; 2 bytes @ 0x30
   710  0000B0                     	ds	2
   711  0000B2                     ??_ldexp:
   712                           
   713                           ; 1 bytes @ 0x32
   714  0000B2                     	ds	2
   715  0000B4                     ?_exp:
   716                           	opt stack 0
   717  0000B4                     exp@x:
   718                           	opt stack 0
   719                           
   720                           ; 3 bytes @ 0x34
   721  0000B4                     	ds	3
   722  0000B7                     _exp$1536:
   723                           	opt stack 0
   724                           
   725                           ; 3 bytes @ 0x37
   726  0000B7                     	ds	3
   727  0000BA                     exp@exponent:
   728                           	opt stack 0
   729                           
   730                           ; 2 bytes @ 0x3A
   731  0000BA                     	ds	2
   732  0000BC                     exp@sign:
   733                           	opt stack 0
   734                           
   735                           ; 1 bytes @ 0x3C
   736  0000BC                     	ds	1
   737  0000BD                     ??_main:
   738                           
   739                           ; 1 bytes @ 0x3D
   740  0000BD                     	ds	4
   741  0000C1                     _main$1532:
   742                           	opt stack 0
   743                           
   744                           ; 3 bytes @ 0x41
   745  0000C1                     	ds	3
   746  0000C4                     _main$1533:
   747                           	opt stack 0
   748                           
   749                           ; 3 bytes @ 0x44
   750  0000C4                     	ds	3
   751  0000C7                     main@CptTmr0:
   752                           	opt stack 0
   753                           
   754                           ; 1 bytes @ 0x47
   755  0000C7                     	ds	1
   756  0000C8                     _main$1534:
   757                           	opt stack 0
   758                           
   759                           ; 3 bytes @ 0x48
   760  0000C8                     	ds	3
   761  0000CB                     _main$1535:
   762                           	opt stack 0
   763                           
   764                           ; 2 bytes @ 0x4B
   765  0000CB                     	ds	2
   766  0000CD                     main@taille_text_spi:
   767                           	opt stack 0
   768                           
   769                           ; 1 bytes @ 0x4D
   770  0000CD                     	ds	1
   771  0000CE                     main@taille_text_prgm:
   772                           	opt stack 0
   773                           
   774                           ; 1 bytes @ 0x4E
   775  0000CE                     	ds	1
   776  0000CF                     main@adc_res:
   777                           	opt stack 0
   778                           
   779                           ; 3 bytes @ 0x4F
   780  0000CF                     	ds	3
   781                           tblptru	equ	0xFF8
   782                           tblptrh	equ	0xFF7
   783                           tblptrl	equ	0xFF6
   784                           tablat	equ	0xFF5
   785                           postinc0	equ	0xFEE
   786                           wreg	equ	0xFE8
   787                           postdec1	equ	0xFE5
   788                           fsr1l	equ	0xFE1
   789                           
   790                           	psect	cstackCOMRAM
   791  000001                     __pcstackCOMRAM:
   792                           	opt stack 0
   793  000001                     ___lbmod@divisor:
   794                           	opt stack 0
   795  000001                     Modulo@M_nombre:
   796                           	opt stack 0
   797                           
   798                           ; 2 bytes @ 0x0
   799  000001                     	ds	1
   800  000002                     ___lbmod@dividend:
   801                           	opt stack 0
   802                           
   803                           ; 1 bytes @ 0x1
   804  000002                     	ds	1
   805  000003                     ___lbmod@counter:
   806                           	opt stack 0
   807                           
   808                           ; 1 bytes @ 0x2
   809  000003                     	ds	1
   810  000004                     ___lbmod@rem:
   811                           	opt stack 0
   812                           
   813                           ; 1 bytes @ 0x3
   814  000004                     	ds	1
   815  000005                     ??_ISR:
   816                           
   817                           ; 1 bytes @ 0x4
   818  000005                     	ds	25
   819  00001E                     ISR@Receive:
   820                           	opt stack 0
   821                           
   822                           ; 1 bytes @ 0x1D
   823  00001E                     	ds	1
   824  00001F                     ISR@data_spi:
   825                           	opt stack 0
   826                           
   827                           ; 1 bytes @ 0x1E
   828  00001F                     	ds	1
   829  000020                     ?_Adc:
   830                           	opt stack 0
   831  000020                     ?___wmul:
   832                           	opt stack 0
   833  000020                     ?___awdiv:
   834                           	opt stack 0
   835  000020                     ?___ftpack:
   836                           	opt stack 0
   837  000020                     PrintC@c_printC:
   838                           	opt stack 0
   839  000020                     ClearArray@cpt_vide:
   840                           	opt stack 0
   841  000020                     ___wmul@multiplier:
   842                           	opt stack 0
   843  000020                     ___awdiv@dividend:
   844                           	opt stack 0
   845  000020                     ___ftpack@arg:
   846                           	opt stack 0
   847  000020                     frexp@value:
   848                           	opt stack 0
   849  000020                     ___ftge@ff1:
   850                           	opt stack 0
   851                           
   852                           ; 3 bytes @ 0x1F
   853  000020                     	ds	1
   854  000021                     PrintS@s_printS:
   855                           	opt stack 0
   856                           
   857                           ; 2 bytes @ 0x20
   858  000021                     	ds	1
   859  000022                     ??_Adc:
   860  000022                     ___wmul@multiplicand:
   861                           	opt stack 0
   862  000022                     ___awdiv@divisor:
   863                           	opt stack 0
   864                           
   865                           ; 2 bytes @ 0x21
   866  000022                     	ds	1
   867  000023                     ___ftpack@exp:
   868                           	opt stack 0
   869  000023                     frexp@eptr:
   870                           	opt stack 0
   871  000023                     ___ftge@ff2:
   872                           	opt stack 0
   873                           
   874                           ; 3 bytes @ 0x22
   875  000023                     	ds	1
   876  000024                     Adc@channel:
   877                           	opt stack 0
   878  000024                     ___awdiv@counter:
   879                           	opt stack 0
   880  000024                     ___ftpack@sign:
   881                           	opt stack 0
   882  000024                     ___wmul@product:
   883                           	opt stack 0
   884                           
   885                           ; 2 bytes @ 0x23
   886  000024                     	ds	1
   887  000025                     ??___ftpack:
   888  000025                     ??_frexp:
   889  000025                     ___awdiv@sign:
   890                           	opt stack 0
   891                           
   892                           ; 1 bytes @ 0x24
   893  000025                     	ds	1
   894  000026                     ??___ftge:
   895  000026                     ___awdiv@quotient:
   896                           	opt stack 0
   897                           
   898                           ; 2 bytes @ 0x25
   899  000026                     	ds	2
   900  000028                     ?___ftdiv:
   901                           	opt stack 0
   902  000028                     ?___lwtoft:
   903                           	opt stack 0
   904  000028                     ___lwtoft@c:
   905                           	opt stack 0
   906  000028                     ___ftdiv@f1:
   907                           	opt stack 0
   908                           
   909                           ; 3 bytes @ 0x27
   910  000028                     	ds	3
   911  00002B                     ___ftdiv@f2:
   912                           	opt stack 0
   913                           
   914                           ; 3 bytes @ 0x2A
   915  00002B                     	ds	3
   916  00002E                     ??___ftdiv:
   917                           
   918                           ; 1 bytes @ 0x2D
   919  00002E                     	ds	3
   920  000031                     ___ftdiv@cntr:
   921                           	opt stack 0
   922                           
   923                           ; 1 bytes @ 0x30
   924  000031                     	ds	1
   925  000032                     ___ftdiv@f3:
   926                           	opt stack 0
   927                           
   928                           ; 3 bytes @ 0x31
   929  000032                     	ds	3
   930  000035                     ___ftdiv@exp:
   931                           	opt stack 0
   932                           
   933                           ; 1 bytes @ 0x34
   934  000035                     	ds	1
   935  000036                     ___ftdiv@sign:
   936                           	opt stack 0
   937                           
   938                           ; 1 bytes @ 0x35
   939  000036                     	ds	1
   940  000037                     ?___fttol:
   941                           	opt stack 0
   942  000037                     ___fttol@f1:
   943                           	opt stack 0
   944                           
   945                           ; 3 bytes @ 0x36
   946  000037                     	ds	4
   947  00003B                     ??___fttol:
   948                           
   949                           ; 1 bytes @ 0x3A
   950  00003B                     	ds	5
   951  000040                     ___fttol@sign1:
   952                           	opt stack 0
   953                           
   954                           ; 1 bytes @ 0x3F
   955  000040                     	ds	1
   956  000041                     ___fttol@lval:
   957                           	opt stack 0
   958                           
   959                           ; 4 bytes @ 0x40
   960  000041                     	ds	4
   961  000045                     ___fttol@exp1:
   962                           	opt stack 0
   963                           
   964                           ; 1 bytes @ 0x44
   965  000045                     	ds	1
   966  000046                     ___altoft@exp:
   967                           	opt stack 0
   968  000046                     ___awtoft@sign:
   969                           	opt stack 0
   970                           
   971                           ; 1 bytes @ 0x45
   972  000046                     	ds	1
   973  000047                     ___altoft@sign:
   974                           	opt stack 0
   975                           
   976                           ; 1 bytes @ 0x46
   977  000047                     	ds	1
   978  000048                     tblptru	equ	0xFF8
   979                           tblptrh	equ	0xFF7
   980                           tblptrl	equ	0xFF6
   981                           tablat	equ	0xFF5
   982                           postinc0	equ	0xFEE
   983                           wreg	equ	0xFE8
   984                           postdec1	equ	0xFE5
   985                           fsr1l	equ	0xFE1
   986                           
   987                           ; 1 bytes @ 0x47
   988 ;;
   989 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   990 ;;
   991 ;; *************** function _main *****************
   992 ;; Defined at:
   993 ;;		line 172 in file "main.c"
   994 ;; Parameters:    Size  Location     Type
   995 ;;		None
   996 ;; Auto vars:     Size  Location     Type
   997 ;;  adc_res         3   79[BANK0 ] float 
   998 ;;  taille_text_    1   78[BANK0 ] unsigned char 
   999 ;;  taille_text_    1   77[BANK0 ] unsigned char 
  1000 ;;  CptTmr0         1   71[BANK0 ] unsigned char 
  1001 ;; Return value:  Size  Location     Type
  1002 ;;                  1    wreg      void 
  1003 ;; Registers used:
  1004 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1005 ;; Tracked objects:
  1006 ;;		On entry : 0/0
  1007 ;;		On exit  : 0/0
  1008 ;;		Unchanged: 0/0
  1009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1010 ;;      Params:         0       0       0       0       0       0       0
  1011 ;;      Locals:         0      17       0       0       0       0       0
  1012 ;;      Temps:          0       4       0       0       0       0       0
  1013 ;;      Totals:         0      21       0       0       0       0       0
  1014 ;;Total ram usage:       21 bytes
  1015 ;; Hardware stack levels required when called:    6
  1016 ;; This function calls:
  1017 ;;		_ADCInit
  1018 ;;		_Adc
  1019 ;;		_ClearArray
  1020 ;;		_ClockInit
  1021 ;;		_InitTmr0
  1022 ;;		_PrintS
  1023 ;;		_SpiInit
  1024 ;;		_UartInit
  1025 ;;		___awdiv
  1026 ;;		___awtoft
  1027 ;;		___ftadd
  1028 ;;		___ftdiv
  1029 ;;		___ftge
  1030 ;;		___ftmul
  1031 ;;		___ftneg
  1032 ;;		___fttol
  1033 ;;		___lwtoft
  1034 ;;		_exp
  1035 ;; This function is called by:
  1036 ;;		Startup code after reset
  1037 ;; This function uses a non-reentrant model
  1038 ;;
  1039                           
  1040                           	psect	text0
  1041  00073C                     __ptext0:
  1042                           	opt stack 0
  1043  00073C                     _main:
  1044                           	opt stack 25
  1045                           
  1046                           ;main.c: 173: ClockInit();
  1047                           
  1048                           ;incstack = 0
  1049  00073C  EC6B  F00F         	call	_ClockInit	;wreg free
  1050                           
  1051                           ;main.c: 174: ADCInit();
  1052  000740  ECFE  F00E         	call	_ADCInit	;wreg free
  1053                           
  1054                           ;main.c: 175: SpiInit();
  1055  000744  ECC0  F00E         	call	_SpiInit	;wreg free
  1056                           
  1057                           ;main.c: 176: UartInit();
  1058  000748  ECA8  F00E         	call	_UartInit	;wreg free
  1059                           
  1060                           ;main.c: 177: TRISCbits.TRISC1=0;
  1061  00074C  9294               	bcf	3988,1,c	;volatile
  1062                           
  1063                           ;main.c: 178: InitTmr0();
  1064  00074E  EC4A  F00F         	call	_InitTmr0	;wreg free
  1065                           
  1066                           ;main.c: 180: char CptTmr0 = 0;
  1067  000752  0E00               	movlw	0
  1068  000754  0100               	movlb	0	; () banked
  1069  000756  6FC7               	movwf	main@CptTmr0& (0+255),b
  1070                           
  1071                           ; BSR set to: 0
  1072                           ;main.c: 181: float adc_res = 0;
  1073  000758  0E00               	movlw	0
  1074  00075A  6FCF               	movwf	main@adc_res& (0+255),b
  1075  00075C  0E00               	movlw	0
  1076  00075E  6FD0               	movwf	(main@adc_res+1)& (0+255),b
  1077  000760  0E00               	movlw	0
  1078  000762  6FD1               	movwf	(main@adc_res+2)& (0+255),b
  1079                           
  1080                           ; BSR set to: 0
  1081                           ;main.c: 182: unsigned char taille_text_prgm;
  1082                           ;main.c: 183: unsigned char taille_text_spi;
  1083                           ;main.c: 184: _delay((unsigned long)((2000)*(32000000/4000.0)));
  1084  000764  0E52               	movlw	82
  1085  000766  0100               	movlb	0	; () banked
  1086  000768  6FBE               	movwf	(??_main+1)& (0+255),b
  1087  00076A  0E2B               	movlw	43
  1088  00076C  6FBD               	movwf	??_main& (0+255),b
  1089  00076E  0E00               	movlw	0
  1090  000770                     u3487:
  1091  000770  2EE8               	decfsz	wreg,f,c
  1092  000772  D7FE               	bra	u3487
  1093  000774  2FBD               	decfsz	??_main& (0+255),f,b
  1094  000776  D7FC               	bra	u3487
  1095  000778  2FBE               	decfsz	(??_main+1)& (0+255),f,b
  1096  00077A  D7FA               	bra	u3487
  1097  00077C  F000               	nop	
  1098  00077E                     
  1099                           ;main.c: 187: if(TMR0IF) {
  1100  00077E  A4F2               	btfss	intcon,2,c	;volatile
  1101  000780  D7FE               	goto	l191
  1102                           
  1103                           ;main.c: 188: TMR0L = 0xB0;
  1104  000782  0EB0               	movlw	176
  1105  000784  6ED6               	movwf	4054,c	;volatile
  1106                           
  1107                           ;main.c: 189: TMR0H = 0x3C;
  1108  000786  0E3C               	movlw	60
  1109  000788  6ED7               	movwf	4055,c	;volatile
  1110                           
  1111                           ;main.c: 190: TMR0IF = 0;
  1112  00078A  94F2               	bcf	intcon,2,c	;volatile
  1113                           
  1114                           ;main.c: 191: CptTmr0++;
  1115  00078C  0100               	movlb	0	; () banked
  1116  00078E  2BC7               	incf	main@CptTmr0& (0+255),f,b
  1117                           
  1118                           ; BSR set to: 0
  1119                           ;main.c: 192: if(CptTmr0 > 10) {
  1120  000790  0E0A               	movlw	10
  1121  000792  65C7               	cpfsgt	main@CptTmr0& (0+255),b
  1122  000794  D00F               	goto	l193
  1123                           
  1124                           ; BSR set to: 0
  1125                           ;main.c: 193: LATCbits.LATC1=!(LATCbits.LATC1);
  1126  000796  B28B               	btfsc	3979,1,c	;volatile
  1127  000798  D003               	goto	u3330
  1128  00079A  6BBD               	clrf	??_main& (0+255),b
  1129  00079C  2BBD               	incf	??_main& (0+255),f,b
  1130  00079E  D002               	goto	u3348
  1131  0007A0                     u3330:
  1132  0007A0  0100               	movlb	0	; () banked
  1133  0007A2  6BBD               	clrf	??_main& (0+255),b
  1134  0007A4                     u3348:
  1135  0007A4  47BD               	rlncf	??_main& (0+255),f,b
  1136  0007A6  508B               	movf	3979,w,c	;volatile
  1137  0007A8  19BD               	xorwf	??_main& (0+255),w,b
  1138  0007AA  0BFD               	andlw	-3
  1139  0007AC  19BD               	xorwf	??_main& (0+255),w,b
  1140  0007AE  6E8B               	movwf	3979,c	;volatile
  1141                           
  1142                           ; BSR set to: 0
  1143                           ;main.c: 194: CptTmr0 = 0;
  1144  0007B0  0E00               	movlw	0
  1145  0007B2  6FC7               	movwf	main@CptTmr0& (0+255),b
  1146  0007B4                     l193:
  1147                           
  1148                           ; BSR set to: 0
  1149                           ;main.c: 195: }
  1150                           ;main.c: 196: if(AutoLight) {
  1151                           
  1152                           ; BSR set to: 0
  1153  0007B4  51DB               	movf	_AutoLight& (0+255),w,b
  1154  0007B6  B4D8               	btfsc	status,2,c
  1155  0007B8  D174               	goto	l197
  1156                           
  1157                           ; BSR set to: 0
  1158                           ;main.c: 197: adc_res = Adc(1);
  1159  0007BA  0E01               	movlw	1
  1160  0007BC  EC8F  F00E         	call	_Adc
  1161  0007C0  C020  F028         	movff	?_Adc,___lwtoft@c
  1162  0007C4  C021  F029         	movff	?_Adc+1,___lwtoft@c+1
  1163  0007C8  EC38  F00F         	call	___lwtoft	;wreg free
  1164  0007CC  C028  F0CF         	movff	?___lwtoft,main@adc_res
  1165  0007D0  C029  F0D0         	movff	?___lwtoft+1,main@adc_res+1
  1166  0007D4  C02A  F0D1         	movff	?___lwtoft+2,main@adc_res+2
  1167                           
  1168                           ;main.c: 208: adc_res = 90*exp(-(adc_res/901));
  1169  0007D8  0E40               	movlw	64
  1170  0007DA  6E2B               	movwf	___ftdiv@f2,c
  1171  0007DC  0E61               	movlw	97
  1172  0007DE  6E2C               	movwf	___ftdiv@f2+1,c
  1173  0007E0  0E44               	movlw	68
  1174  0007E2  6E2D               	movwf	___ftdiv@f2+2,c
  1175  0007E4  C0CF  F028         	movff	main@adc_res,___ftdiv@f1
  1176  0007E8  C0D0  F029         	movff	main@adc_res+1,___ftdiv@f1+1
  1177  0007EC  C0D1  F02A         	movff	main@adc_res+2,___ftdiv@f1+2
  1178  0007F0  ECB7  F00A         	call	___ftdiv	;wreg free
  1179  0007F4  C028  F083         	movff	?___ftdiv,___ftneg@f1
  1180  0007F8  C029  F084         	movff	?___ftdiv+1,___ftneg@f1+1
  1181  0007FC  C02A  F085         	movff	?___ftdiv+2,___ftneg@f1+2
  1182  000800  EC25  F00F         	call	___ftneg	;wreg free
  1183  000804  C083  F0C1         	movff	?___ftneg,_main$1532
  1184  000808  C084  F0C2         	movff	?___ftneg+1,_main$1532+1
  1185  00080C  C085  F0C3         	movff	?___ftneg+2,_main$1532+2
  1186                           
  1187                           ;main.c: 208: adc_res = 90*exp(-(adc_res/901));
  1188  000810  C0C1  F0B4         	movff	_main$1532,exp@x
  1189  000814  C0C2  F0B5         	movff	_main$1532+1,exp@x+1
  1190  000818  C0C3  F0B6         	movff	_main$1532+2,exp@x+2
  1191  00081C  ECF2  F007         	call	_exp	;wreg free
  1192  000820  C0B4  F0C4         	movff	?_exp,_main$1533
  1193  000824  C0B5  F0C5         	movff	?_exp+1,_main$1533+1
  1194  000828  C0B6  F0C6         	movff	?_exp+2,_main$1533+2
  1195                           
  1196                           ;main.c: 208: adc_res = 90*exp(-(adc_res/901));
  1197  00082C  C0C4  F086         	movff	_main$1533,___ftmul@f1
  1198  000830  C0C5  F087         	movff	_main$1533+1,___ftmul@f1+1
  1199  000834  C0C6  F088         	movff	_main$1533+2,___ftmul@f1+2
  1200  000838  0E00               	movlw	0
  1201  00083A  0100               	movlb	0	; () banked
  1202  00083C  6F89               	movwf	___ftmul@f2& (0+255),b
  1203  00083E  0EB4               	movlw	180
  1204  000840  6F8A               	movwf	(___ftmul@f2+1)& (0+255),b
  1205  000842  0E42               	movlw	66
  1206  000844  6F8B               	movwf	(___ftmul@f2+2)& (0+255),b
  1207  000846  ECC2  F009         	call	___ftmul	;wreg free
  1208  00084A  C086  F0CF         	movff	?___ftmul,main@adc_res
  1209  00084E  C087  F0D0         	movff	?___ftmul+1,main@adc_res+1
  1210  000852  C088  F0D1         	movff	?___ftmul+2,main@adc_res+2
  1211                           
  1212                           ;main.c: 209: adc_res = (int)(adc_res);
  1213  000856  C0CF  F037         	movff	main@adc_res,___fttol@f1
  1214  00085A  C0D0  F038         	movff	main@adc_res+1,___fttol@f1+1
  1215  00085E  C0D1  F039         	movff	main@adc_res+2,___fttol@f1+2
  1216  000862  EC3D  F00A         	call	___fttol	;wreg free
  1217  000866  C037  F080         	movff	?___fttol,___awtoft@c
  1218  00086A  C038  F081         	movff	?___fttol+1,___awtoft@c+1
  1219  00086E  EC57  F00E         	call	___awtoft	;wreg free
  1220  000872  C080  F0CF         	movff	?___awtoft,main@adc_res
  1221  000876  C081  F0D0         	movff	?___awtoft+1,main@adc_res+1
  1222  00087A  C082  F0D1         	movff	?___awtoft+2,main@adc_res+2
  1223                           
  1224                           ;main.c: 210: if(adc_res < 0) {
  1225  00087E  0100               	movlb	0	; () banked
  1226  000880  AFD1               	btfss	(main@adc_res+2)& (0+255),7,b
  1227  000882  D006               	goto	l195
  1228                           
  1229                           ; BSR set to: 0
  1230                           ;main.c: 211: adc_res = 0;
  1231  000884  0E00               	movlw	0
  1232  000886  6FCF               	movwf	main@adc_res& (0+255),b
  1233  000888  0E00               	movlw	0
  1234  00088A  6FD0               	movwf	(main@adc_res+1)& (0+255),b
  1235  00088C  0E00               	movlw	0
  1236  00088E  6FD1               	movwf	(main@adc_res+2)& (0+255),b
  1237  000890                     l195:
  1238                           
  1239                           ; BSR set to: 0
  1240                           ;main.c: 212: }
  1241                           ;main.c: 213: if(adc_res > 99) {
  1242                           
  1243                           ; BSR set to: 0
  1244  000890  0E00               	movlw	0
  1245  000892  6E20               	movwf	___ftge@ff1,c
  1246  000894  0EC6               	movlw	198
  1247  000896  6E21               	movwf	___ftge@ff1+1,c
  1248  000898  0E42               	movlw	66
  1249  00089A  6E22               	movwf	___ftge@ff1+2,c
  1250  00089C  C0CF  F023         	movff	main@adc_res,___ftge@ff2
  1251  0008A0  C0D0  F024         	movff	main@adc_res+1,___ftge@ff2+1
  1252  0008A4  C0D1  F025         	movff	main@adc_res+2,___ftge@ff2+2
  1253  0008A8  EC0D  F00D         	call	___ftge	;wreg free
  1254  0008AC  B0D8               	btfsc	status,0,c
  1255  0008AE  D007               	goto	l196
  1256                           
  1257                           ;main.c: 214: adc_res = 99;
  1258  0008B0  0E00               	movlw	0
  1259  0008B2  0100               	movlb	0	; () banked
  1260  0008B4  6FCF               	movwf	main@adc_res& (0+255),b
  1261  0008B6  0EC6               	movlw	198
  1262  0008B8  6FD0               	movwf	(main@adc_res+1)& (0+255),b
  1263  0008BA  0E42               	movlw	66
  1264  0008BC  6FD1               	movwf	(main@adc_res+2)& (0+255),b
  1265  0008BE                     l196:
  1266                           
  1267                           ;main.c: 215: }
  1268                           ;main.c: 218: SendMsgSreen[0] = 0x64;
  1269  0008BE  0E64               	movlw	100
  1270  0008C0  0101               	movlb	1	; () banked
  1271  0008C2  6F00               	movwf	_SendMsgSreen& (0+255),b
  1272                           
  1273                           ;main.c: 219: SendMsgSreen[1] = 0x69;
  1274  0008C4  0E69               	movlw	105
  1275  0008C6  6F01               	movwf	(_SendMsgSreen+1)& (0+255),b
  1276                           
  1277                           ;main.c: 220: SendMsgSreen[2] = 0x6D;
  1278  0008C8  0E6D               	movlw	109
  1279  0008CA  6F02               	movwf	(_SendMsgSreen+2)& (0+255),b
  1280                           
  1281                           ;main.c: 221: SendMsgSreen[3] = 0x3D;
  1282  0008CC  0E3D               	movlw	61
  1283  0008CE  6F03               	movwf	(_SendMsgSreen+3)& (0+255),b
  1284                           
  1285                           ; BSR set to: 1
  1286                           ;main.c: 222: SendMsgSreen[4] = 0x30 + (char)(adc_res/10);
  1287  0008D0  0E00               	movlw	0
  1288  0008D2  6E2B               	movwf	___ftdiv@f2,c
  1289  0008D4  0E20               	movlw	32
  1290  0008D6  6E2C               	movwf	___ftdiv@f2+1,c
  1291  0008D8  0E41               	movlw	65
  1292  0008DA  6E2D               	movwf	___ftdiv@f2+2,c
  1293  0008DC  C0CF  F028         	movff	main@adc_res,___ftdiv@f1
  1294  0008E0  C0D0  F029         	movff	main@adc_res+1,___ftdiv@f1+1
  1295  0008E4  C0D1  F02A         	movff	main@adc_res+2,___ftdiv@f1+2
  1296  0008E8  ECB7  F00A         	call	___ftdiv	;wreg free
  1297  0008EC  C028  F037         	movff	?___ftdiv,___fttol@f1
  1298  0008F0  C029  F038         	movff	?___ftdiv+1,___fttol@f1+1
  1299  0008F4  C02A  F039         	movff	?___ftdiv+2,___fttol@f1+2
  1300  0008F8  EC3D  F00A         	call	___fttol	;wreg free
  1301  0008FC  5037               	movf	?___fttol,w,c
  1302  0008FE  0F30               	addlw	48
  1303  000900  0101               	movlb	1	; () banked
  1304  000902  6F04               	movwf	(_SendMsgSreen+4)& (0+255),b
  1305                           
  1306                           ; BSR set to: 1
  1307                           ;main.c: 223: SendMsgSreen[5] = 0x30 + (char)(adc_res-(10*(char)(adc_res/10)));
  1308  000904  C0CF  F098         	movff	main@adc_res,___ftadd@f2
  1309  000908  C0D0  F099         	movff	main@adc_res+1,___ftadd@f2+1
  1310  00090C  C0D1  F09A         	movff	main@adc_res+2,___ftadd@f2+2
  1311  000910  0E00               	movlw	0
  1312  000912  6E2B               	movwf	___ftdiv@f2,c
  1313  000914  0E20               	movlw	32
  1314  000916  6E2C               	movwf	___ftdiv@f2+1,c
  1315  000918  0E41               	movlw	65
  1316  00091A  6E2D               	movwf	___ftdiv@f2+2,c
  1317  00091C  C0CF  F028         	movff	main@adc_res,___ftdiv@f1
  1318  000920  C0D0  F029         	movff	main@adc_res+1,___ftdiv@f1+1
  1319  000924  C0D1  F02A         	movff	main@adc_res+2,___ftdiv@f1+2
  1320  000928  ECB7  F00A         	call	___ftdiv	;wreg free
  1321  00092C  C028  F037         	movff	?___ftdiv,___fttol@f1
  1322  000930  C029  F038         	movff	?___ftdiv+1,___fttol@f1+1
  1323  000934  C02A  F039         	movff	?___ftdiv+2,___fttol@f1+2
  1324  000938  EC3D  F00A         	call	___fttol	;wreg free
  1325  00093C  5037               	movf	?___fttol,w,c
  1326  00093E  0D0A               	mullw	10
  1327  000940  CFF3 F080          	movff	prodl,___awtoft@c
  1328  000944  CFF4 F081          	movff	prodh,___awtoft@c+1
  1329  000948  EC57  F00E         	call	___awtoft	;wreg free
  1330  00094C  C080  F083         	movff	?___awtoft,___ftneg@f1
  1331  000950  C081  F084         	movff	?___awtoft+1,___ftneg@f1+1
  1332  000954  C082  F085         	movff	?___awtoft+2,___ftneg@f1+2
  1333  000958  EC25  F00F         	call	___ftneg	;wreg free
  1334  00095C  C083  F095         	movff	?___ftneg,___ftadd@f1
  1335  000960  C084  F096         	movff	?___ftneg+1,___ftadd@f1+1
  1336  000964  C085  F097         	movff	?___ftneg+2,___ftadd@f1+2
  1337  000968  ECEB  F008         	call	___ftadd	;wreg free
  1338  00096C  C095  F0C8         	movff	?___ftadd,_main$1534
  1339  000970  C096  F0C9         	movff	?___ftadd+1,_main$1534+1
  1340  000974  C097  F0CA         	movff	?___ftadd+2,_main$1534+2
  1341                           
  1342                           ;main.c: 223: SendMsgSreen[5] = 0x30 + (char)(adc_res-(10*(char)(adc_res/10)));
  1343  000978  C0C8  F037         	movff	_main$1534,___fttol@f1
  1344  00097C  C0C9  F038         	movff	_main$1534+1,___fttol@f1+1
  1345  000980  C0CA  F039         	movff	_main$1534+2,___fttol@f1+2
  1346  000984  EC3D  F00A         	call	___fttol	;wreg free
  1347  000988  5037               	movf	?___fttol,w,c
  1348  00098A  0F30               	addlw	48
  1349  00098C  0101               	movlb	1	; () banked
  1350  00098E  6F05               	movwf	(_SendMsgSreen+5)& (0+255),b
  1351                           
  1352                           ; BSR set to: 1
  1353                           ;main.c: 224: SendMsgSreen[6] = 0xFF;
  1354  000990  6906               	setf	(_SendMsgSreen+6)& (0+255),b
  1355                           
  1356                           ; BSR set to: 1
  1357                           ;main.c: 225: SendMsgSreen[7] = 0xFF;
  1358  000992  6907               	setf	(_SendMsgSreen+7)& (0+255),b
  1359                           
  1360                           ; BSR set to: 1
  1361                           ;main.c: 226: SendMsgSreen[8] = 0xFF;
  1362  000994  6908               	setf	(_SendMsgSreen+8)& (0+255),b
  1363                           
  1364                           ; BSR set to: 1
  1365                           ;main.c: 227: PrintS(SendMsgSreen);
  1366  000996  0E00               	movlw	low _SendMsgSreen
  1367  000998  6E21               	movwf	PrintS@s_printS,c
  1368  00099A  0E01               	movlw	high _SendMsgSreen
  1369  00099C  6E22               	movwf	PrintS@s_printS+1,c
  1370  00099E  EC74  F00E         	call	_PrintS	;wreg free
  1371                           
  1372                           ;main.c: 228: ClearArray();
  1373  0009A2  ECEA  F00E         	call	_ClearArray	;wreg free
  1374                           
  1375                           ;main.c: 229: if(EtatScreen == 0) {
  1376  0009A6  0100               	movlb	0	; () banked
  1377  0009A8  51DC               	movf	_EtatScreen& (0+255),w,b
  1378  0009AA  A4D8               	btfss	status,2,c
  1379  0009AC  D07A               	goto	l197
  1380                           
  1381                           ; BSR set to: 0
  1382                           ;main.c: 232: SendMsgSreen[0] = 0x68;
  1383  0009AE  0E68               	movlw	104
  1384  0009B0  0101               	movlb	1	; () banked
  1385  0009B2  6F00               	movwf	_SendMsgSreen& (0+255),b
  1386                           
  1387                           ;main.c: 233: SendMsgSreen[1] = 0x30;
  1388  0009B4  0E30               	movlw	48
  1389  0009B6  6F01               	movwf	(_SendMsgSreen+1)& (0+255),b
  1390                           
  1391                           ;main.c: 234: SendMsgSreen[2] = 0x2E;
  1392  0009B8  0E2E               	movlw	46
  1393  0009BA  6F02               	movwf	(_SendMsgSreen+2)& (0+255),b
  1394                           
  1395                           ;main.c: 235: SendMsgSreen[3] = 0x76;
  1396  0009BC  0E76               	movlw	118
  1397  0009BE  6F03               	movwf	(_SendMsgSreen+3)& (0+255),b
  1398                           
  1399                           ;main.c: 236: SendMsgSreen[4] = 0x61;
  1400  0009C0  0E61               	movlw	97
  1401  0009C2  6F04               	movwf	(_SendMsgSreen+4)& (0+255),b
  1402                           
  1403                           ;main.c: 237: SendMsgSreen[5] = 0x6C;
  1404  0009C4  0E6C               	movlw	108
  1405  0009C6  6F05               	movwf	(_SendMsgSreen+5)& (0+255),b
  1406                           
  1407                           ;main.c: 238: SendMsgSreen[6] = 0x3D;
  1408  0009C8  0E3D               	movlw	61
  1409  0009CA  6F06               	movwf	(_SendMsgSreen+6)& (0+255),b
  1410                           
  1411                           ; BSR set to: 1
  1412                           ;main.c: 239: SendMsgSreen[7] = 0x30 + (char)(adc_res/10);
  1413  0009CC  0E00               	movlw	0
  1414  0009CE  6E2B               	movwf	___ftdiv@f2,c
  1415  0009D0  0E20               	movlw	32
  1416  0009D2  6E2C               	movwf	___ftdiv@f2+1,c
  1417  0009D4  0E41               	movlw	65
  1418  0009D6  6E2D               	movwf	___ftdiv@f2+2,c
  1419  0009D8  C0CF  F028         	movff	main@adc_res,___ftdiv@f1
  1420  0009DC  C0D0  F029         	movff	main@adc_res+1,___ftdiv@f1+1
  1421  0009E0  C0D1  F02A         	movff	main@adc_res+2,___ftdiv@f1+2
  1422  0009E4  ECB7  F00A         	call	___ftdiv	;wreg free
  1423  0009E8  C028  F037         	movff	?___ftdiv,___fttol@f1
  1424  0009EC  C029  F038         	movff	?___ftdiv+1,___fttol@f1+1
  1425  0009F0  C02A  F039         	movff	?___ftdiv+2,___fttol@f1+2
  1426  0009F4  EC3D  F00A         	call	___fttol	;wreg free
  1427  0009F8  5037               	movf	?___fttol,w,c
  1428  0009FA  0F30               	addlw	48
  1429  0009FC  0101               	movlb	1	; () banked
  1430  0009FE  6F07               	movwf	(_SendMsgSreen+7)& (0+255),b
  1431                           
  1432                           ; BSR set to: 1
  1433                           ;main.c: 240: SendMsgSreen[8] = 0x30 + (char)(adc_res-(10*(char)(adc_res/10)));
  1434  000A00  C0CF  F098         	movff	main@adc_res,___ftadd@f2
  1435  000A04  C0D0  F099         	movff	main@adc_res+1,___ftadd@f2+1
  1436  000A08  C0D1  F09A         	movff	main@adc_res+2,___ftadd@f2+2
  1437  000A0C  0E00               	movlw	0
  1438  000A0E  6E2B               	movwf	___ftdiv@f2,c
  1439  000A10  0E20               	movlw	32
  1440  000A12  6E2C               	movwf	___ftdiv@f2+1,c
  1441  000A14  0E41               	movlw	65
  1442  000A16  6E2D               	movwf	___ftdiv@f2+2,c
  1443  000A18  C0CF  F028         	movff	main@adc_res,___ftdiv@f1
  1444  000A1C  C0D0  F029         	movff	main@adc_res+1,___ftdiv@f1+1
  1445  000A20  C0D1  F02A         	movff	main@adc_res+2,___ftdiv@f1+2
  1446  000A24  ECB7  F00A         	call	___ftdiv	;wreg free
  1447  000A28  C028  F037         	movff	?___ftdiv,___fttol@f1
  1448  000A2C  C029  F038         	movff	?___ftdiv+1,___fttol@f1+1
  1449  000A30  C02A  F039         	movff	?___ftdiv+2,___fttol@f1+2
  1450  000A34  EC3D  F00A         	call	___fttol	;wreg free
  1451  000A38  5037               	movf	?___fttol,w,c
  1452  000A3A  0D0A               	mullw	10
  1453  000A3C  CFF3 F080          	movff	prodl,___awtoft@c
  1454  000A40  CFF4 F081          	movff	prodh,___awtoft@c+1
  1455  000A44  EC57  F00E         	call	___awtoft	;wreg free
  1456  000A48  C080  F083         	movff	?___awtoft,___ftneg@f1
  1457  000A4C  C081  F084         	movff	?___awtoft+1,___ftneg@f1+1
  1458  000A50  C082  F085         	movff	?___awtoft+2,___ftneg@f1+2
  1459  000A54  EC25  F00F         	call	___ftneg	;wreg free
  1460  000A58  C083  F095         	movff	?___ftneg,___ftadd@f1
  1461  000A5C  C084  F096         	movff	?___ftneg+1,___ftadd@f1+1
  1462  000A60  C085  F097         	movff	?___ftneg+2,___ftadd@f1+2
  1463  000A64  ECEB  F008         	call	___ftadd	;wreg free
  1464  000A68  C095  F0C8         	movff	?___ftadd,_main$1534
  1465  000A6C  C096  F0C9         	movff	?___ftadd+1,_main$1534+1
  1466  000A70  C097  F0CA         	movff	?___ftadd+2,_main$1534+2
  1467                           
  1468                           ;main.c: 240: SendMsgSreen[8] = 0x30 + (char)(adc_res-(10*(char)(adc_res/10)));
  1469  000A74  C0C8  F037         	movff	_main$1534,___fttol@f1
  1470  000A78  C0C9  F038         	movff	_main$1534+1,___fttol@f1+1
  1471  000A7C  C0CA  F039         	movff	_main$1534+2,___fttol@f1+2
  1472  000A80  EC3D  F00A         	call	___fttol	;wreg free
  1473  000A84  5037               	movf	?___fttol,w,c
  1474  000A86  0F30               	addlw	48
  1475  000A88  0101               	movlb	1	; () banked
  1476  000A8A  6F08               	movwf	(_SendMsgSreen+8)& (0+255),b
  1477                           
  1478                           ; BSR set to: 1
  1479                           ;main.c: 241: SendMsgSreen[9] = 0xFF;
  1480  000A8C  6909               	setf	(_SendMsgSreen+9)& (0+255),b
  1481                           
  1482                           ; BSR set to: 1
  1483                           ;main.c: 242: SendMsgSreen[10] = 0xFF;
  1484  000A8E  690A               	setf	(_SendMsgSreen+10)& (0+255),b
  1485                           
  1486                           ; BSR set to: 1
  1487                           ;main.c: 243: SendMsgSreen[11] = 0xFF;
  1488  000A90  690B               	setf	(_SendMsgSreen+11)& (0+255),b
  1489                           
  1490                           ; BSR set to: 1
  1491                           ;main.c: 244: PrintS(SendMsgSreen);
  1492  000A92  0E00               	movlw	low _SendMsgSreen
  1493  000A94  6E21               	movwf	PrintS@s_printS,c
  1494  000A96  0E01               	movlw	high _SendMsgSreen
  1495  000A98  6E22               	movwf	PrintS@s_printS+1,c
  1496  000A9A  EC74  F00E         	call	_PrintS	;wreg free
  1497                           
  1498                           ;main.c: 245: ClearArray();
  1499  000A9E  ECEA  F00E         	call	_ClearArray	;wreg free
  1500  000AA2                     l197:
  1501                           
  1502                           ;main.c: 246: }
  1503                           ;main.c: 247: }
  1504                           ;main.c: 248: if(FlagSpi) {
  1505  000AA2  0100               	movlb	0	; () banked
  1506  000AA4  51E1               	movf	_FlagSpi& (0+255),w,b
  1507  000AA6  B4D8               	btfsc	status,2,c
  1508  000AA8  D66A               	goto	l191
  1509                           
  1510                           ; BSR set to: 0
  1511                           ;main.c: 249: FlagSpi = 0;
  1512  000AAA  0E00               	movlw	0
  1513  000AAC  6FE1               	movwf	_FlagSpi& (0+255),b
  1514                           
  1515                           ;main.c: 250: switch(EtatScreen) {
  1516  000AAE  D288               	goto	l199
  1517  000AB0                     
  1518                           ; BSR set to: 0
  1519                           ;main.c: 254: SendMsgSreen[0] = 0x74;
  1520                           
  1521                           ; BSR set to: 0
  1522  000AB0  0E74               	movlw	116
  1523  000AB2  0101               	movlb	1	; () banked
  1524  000AB4  6F00               	movwf	_SendMsgSreen& (0+255),b
  1525                           
  1526                           ;main.c: 255: SendMsgSreen[1] = 0x30;
  1527  000AB6  0E30               	movlw	48
  1528  000AB8  6F01               	movwf	(_SendMsgSreen+1)& (0+255),b
  1529                           
  1530                           ;main.c: 256: SendMsgSreen[2] = 0x2E;
  1531  000ABA  0E2E               	movlw	46
  1532  000ABC  6F02               	movwf	(_SendMsgSreen+2)& (0+255),b
  1533                           
  1534                           ;main.c: 257: SendMsgSreen[3] = 0x74;
  1535  000ABE  0E74               	movlw	116
  1536  000AC0  6F03               	movwf	(_SendMsgSreen+3)& (0+255),b
  1537                           
  1538                           ;main.c: 258: SendMsgSreen[4] = 0x78;
  1539  000AC2  0E78               	movlw	120
  1540  000AC4  6F04               	movwf	(_SendMsgSreen+4)& (0+255),b
  1541                           
  1542                           ;main.c: 259: SendMsgSreen[5] = 0x74;
  1543  000AC6  0E74               	movlw	116
  1544  000AC8  6F05               	movwf	(_SendMsgSreen+5)& (0+255),b
  1545                           
  1546                           ;main.c: 260: SendMsgSreen[6] = 0x3D;
  1547  000ACA  0E3D               	movlw	61
  1548  000ACC  6F06               	movwf	(_SendMsgSreen+6)& (0+255),b
  1549                           
  1550                           ;main.c: 261: SendMsgSreen[7] = 0x22;
  1551  000ACE  0E22               	movlw	34
  1552  000AD0  6F07               	movwf	(_SendMsgSreen+7)& (0+255),b
  1553                           
  1554                           ;main.c: 262: SendMsgSreen[8] = 0x3E;
  1555  000AD2  0E3E               	movlw	62
  1556  000AD4  6F08               	movwf	(_SendMsgSreen+8)& (0+255),b
  1557                           
  1558                           ;main.c: 263: taille_text_prgm = 0;
  1559  000AD6  0E00               	movlw	0
  1560  000AD8  0100               	movlb	0	; () banked
  1561  000ADA  6FCE               	movwf	main@taille_text_prgm& (0+255),b
  1562                           
  1563                           ;main.c: 264: while(taille_text_prgm < 15 && text_prgm[PosCursorPrgm][taille_text_prgm] 
      +                          != 0) {
  1564  000ADC  D022               	goto	l201
  1565  000ADE                     
  1566                           ; BSR set to: 0
  1567                           ;main.c: 265: SendMsgSreen[taille_text_prgm+9] = text_prgm[PosCursorPrgm][taille_text_pr
      +                          gm];
  1568                           
  1569                           ; BSR set to: 0
  1570  000ADE  51DA               	movf	_PosCursorPrgm& (0+255),w,b
  1571  000AE0  0D0F               	mullw	15
  1572  000AE2  0E00               	movlw	low _text_prgm
  1573  000AE4  6FBD               	movwf	??_main& (0+255),b
  1574  000AE6  0E02               	movlw	high _text_prgm
  1575  000AE8  6FBE               	movwf	(??_main+1)& (0+255),b
  1576  000AEA  50F3               	movf	prodl,w,c
  1577  000AEC  27BD               	addwf	??_main& (0+255),f,b
  1578  000AEE  50F4               	movf	prodh,w,c
  1579  000AF0  23BE               	addwfc	(??_main+1)& (0+255),f,b
  1580  000AF2  51CE               	movf	main@taille_text_prgm& (0+255),w,b
  1581  000AF4  0D01               	mullw	1
  1582  000AF6  50F3               	movf	prodl,w,c
  1583  000AF8  25BD               	addwf	??_main& (0+255),w,b
  1584  000AFA  6ED9               	movwf	fsr2l,c
  1585  000AFC  50F4               	movf	prodh,w,c
  1586  000AFE  21BE               	addwfc	(??_main+1)& (0+255),w,b
  1587  000B00  6EDA               	movwf	fsr2h,c
  1588  000B02  51CE               	movf	main@taille_text_prgm& (0+255),w,b
  1589  000B04  6FBF               	movwf	(??_main+2)& (0+255),b
  1590  000B06  6BC0               	clrf	(??_main+3)& (0+255),b
  1591  000B08  0E09               	movlw	9
  1592  000B0A  27BF               	addwf	(??_main+2)& (0+255),f,b
  1593  000B0C  0E00               	movlw	0
  1594  000B0E  23C0               	addwfc	(??_main+3)& (0+255),f,b
  1595  000B10  0E00               	movlw	low _SendMsgSreen
  1596  000B12  25BF               	addwf	(??_main+2)& (0+255),w,b
  1597  000B14  6EE1               	movwf	fsr1l,c
  1598  000B16  0E01               	movlw	high _SendMsgSreen
  1599  000B18  21C0               	addwfc	(??_main+3)& (0+255),w,b
  1600  000B1A  6EE2               	movwf	fsr1h,c
  1601  000B1C  CFDF FFE7          	movff	indf2,indf1
  1602                           
  1603                           ; BSR set to: 0
  1604                           ;main.c: 266: taille_text_prgm++;
  1605  000B20  2BCE               	incf	main@taille_text_prgm& (0+255),f,b
  1606  000B22                     l201:
  1607                           
  1608                           ; BSR set to: 0
  1609                           
  1610                           ; BSR set to: 0
  1611  000B22  0E0F               	movlw	15
  1612  000B24  61CE               	cpfslt	main@taille_text_prgm& (0+255),b
  1613  000B26  D015               	goto	u3410
  1614                           
  1615                           ; BSR set to: 0
  1616  000B28  51DA               	movf	_PosCursorPrgm& (0+255),w,b
  1617  000B2A  0D0F               	mullw	15
  1618  000B2C  0E00               	movlw	low _text_prgm
  1619  000B2E  6FBD               	movwf	??_main& (0+255),b
  1620  000B30  0E02               	movlw	high _text_prgm
  1621  000B32  6FBE               	movwf	(??_main+1)& (0+255),b
  1622  000B34  50F3               	movf	prodl,w,c
  1623  000B36  27BD               	addwf	??_main& (0+255),f,b
  1624  000B38  50F4               	movf	prodh,w,c
  1625  000B3A  23BE               	addwfc	(??_main+1)& (0+255),f,b
  1626  000B3C  51CE               	movf	main@taille_text_prgm& (0+255),w,b
  1627  000B3E  0D01               	mullw	1
  1628  000B40  50F3               	movf	prodl,w,c
  1629  000B42  25BD               	addwf	??_main& (0+255),w,b
  1630  000B44  6ED9               	movwf	fsr2l,c
  1631  000B46  50F4               	movf	prodh,w,c
  1632  000B48  21BE               	addwfc	(??_main+1)& (0+255),w,b
  1633  000B4A  6EDA               	movwf	fsr2h,c
  1634  000B4C  50DF               	movf	indf2,w,c
  1635  000B4E  A4D8               	btfss	status,2,c
  1636  000B50  D7C6               	goto	l202
  1637  000B52                     u3410:
  1638                           
  1639                           ; BSR set to: 0
  1640                           ;main.c: 267: }
  1641                           ;main.c: 268: SendMsgSreen[taille_text_prgm+9] = 0x22;
  1642                           
  1643                           ; BSR set to: 0
  1644                           
  1645                           ; BSR set to: 0
  1646  000B52  51CE               	movf	main@taille_text_prgm& (0+255),w,b
  1647  000B54  6FBD               	movwf	??_main& (0+255),b
  1648  000B56  6BBE               	clrf	(??_main+1)& (0+255),b
  1649  000B58  0E09               	movlw	9
  1650  000B5A  27BD               	addwf	??_main& (0+255),f,b
  1651  000B5C  0E00               	movlw	0
  1652  000B5E  23BE               	addwfc	(??_main+1)& (0+255),f,b
  1653  000B60  0E00               	movlw	low _SendMsgSreen
  1654  000B62  25BD               	addwf	??_main& (0+255),w,b
  1655  000B64  6ED9               	movwf	fsr2l,c
  1656  000B66  0E01               	movlw	high _SendMsgSreen
  1657  000B68  21BE               	addwfc	(??_main+1)& (0+255),w,b
  1658  000B6A  6EDA               	movwf	fsr2h,c
  1659  000B6C  0E22               	movlw	34
  1660  000B6E  6EDF               	movwf	indf2,c
  1661                           
  1662                           ;main.c: 269: SendMsgSreen[taille_text_prgm+10] = 0xFF;
  1663  000B70  51CE               	movf	main@taille_text_prgm& (0+255),w,b
  1664  000B72  6FBD               	movwf	??_main& (0+255),b
  1665  000B74  6BBE               	clrf	(??_main+1)& (0+255),b
  1666  000B76  0E0A               	movlw	10
  1667  000B78  27BD               	addwf	??_main& (0+255),f,b
  1668  000B7A  0E00               	movlw	0
  1669  000B7C  23BE               	addwfc	(??_main+1)& (0+255),f,b
  1670  000B7E  0E00               	movlw	low _SendMsgSreen
  1671  000B80  25BD               	addwf	??_main& (0+255),w,b
  1672  000B82  6ED9               	movwf	fsr2l,c
  1673  000B84  0E01               	movlw	high _SendMsgSreen
  1674  000B86  21BE               	addwfc	(??_main+1)& (0+255),w,b
  1675  000B88  6EDA               	movwf	fsr2h,c
  1676  000B8A  0EFF               	movlw	255
  1677  000B8C  6EDF               	movwf	indf2,c
  1678                           
  1679                           ;main.c: 270: SendMsgSreen[taille_text_prgm+11] = 0xFF;
  1680  000B8E  51CE               	movf	main@taille_text_prgm& (0+255),w,b
  1681  000B90  6FBD               	movwf	??_main& (0+255),b
  1682  000B92  6BBE               	clrf	(??_main+1)& (0+255),b
  1683  000B94  0E0B               	movlw	11
  1684  000B96  27BD               	addwf	??_main& (0+255),f,b
  1685  000B98  0E00               	movlw	0
  1686  000B9A  23BE               	addwfc	(??_main+1)& (0+255),f,b
  1687  000B9C  0E00               	movlw	low _SendMsgSreen
  1688  000B9E  25BD               	addwf	??_main& (0+255),w,b
  1689  000BA0  6ED9               	movwf	fsr2l,c
  1690  000BA2  0E01               	movlw	high _SendMsgSreen
  1691  000BA4  21BE               	addwfc	(??_main+1)& (0+255),w,b
  1692  000BA6  6EDA               	movwf	fsr2h,c
  1693  000BA8  0EFF               	movlw	255
  1694  000BAA  6EDF               	movwf	indf2,c
  1695                           
  1696                           ;main.c: 271: SendMsgSreen[taille_text_prgm+12] = 0xFF;
  1697  000BAC  51CE               	movf	main@taille_text_prgm& (0+255),w,b
  1698  000BAE  6FBD               	movwf	??_main& (0+255),b
  1699  000BB0  6BBE               	clrf	(??_main+1)& (0+255),b
  1700  000BB2  0E0C               	movlw	12
  1701  000BB4  27BD               	addwf	??_main& (0+255),f,b
  1702  000BB6  0E00               	movlw	0
  1703  000BB8  23BE               	addwfc	(??_main+1)& (0+255),f,b
  1704  000BBA  0E00               	movlw	low _SendMsgSreen
  1705  000BBC  25BD               	addwf	??_main& (0+255),w,b
  1706  000BBE  6ED9               	movwf	fsr2l,c
  1707  000BC0  0E01               	movlw	high _SendMsgSreen
  1708  000BC2  21BE               	addwfc	(??_main+1)& (0+255),w,b
  1709  000BC4  6EDA               	movwf	fsr2h,c
  1710  000BC6  0EFF               	movlw	255
  1711  000BC8  6EDF               	movwf	indf2,c
  1712                           
  1713                           ; BSR set to: 0
  1714                           ;main.c: 272: PrintS(SendMsgSreen);
  1715  000BCA  0E00               	movlw	low _SendMsgSreen
  1716  000BCC  6E21               	movwf	PrintS@s_printS,c
  1717  000BCE  0E01               	movlw	high _SendMsgSreen
  1718  000BD0  6E22               	movwf	PrintS@s_printS+1,c
  1719  000BD2  EC74  F00E         	call	_PrintS	;wreg free
  1720                           
  1721                           ;main.c: 273: ClearArray();
  1722  000BD6  ECEA  F00E         	call	_ClearArray	;wreg free
  1723                           
  1724                           ;main.c: 274: SendMsgSreen[0] = 0x6E;
  1725  000BDA  0E6E               	movlw	110
  1726  000BDC  0101               	movlb	1	; () banked
  1727  000BDE  6F00               	movwf	_SendMsgSreen& (0+255),b
  1728                           
  1729                           ; BSR set to: 1
  1730                           ;main.c: 275: SendMsgSreen[1] = 0x30;
  1731  000BE0  0E30               	movlw	48
  1732  000BE2  6F01               	movwf	(_SendMsgSreen+1)& (0+255),b
  1733                           
  1734                           ; BSR set to: 1
  1735                           ;main.c: 276: SendMsgSreen[2] = 0x2E;
  1736  000BE4  0E2E               	movlw	46
  1737  000BE6  6F02               	movwf	(_SendMsgSreen+2)& (0+255),b
  1738                           
  1739                           ; BSR set to: 1
  1740                           ;main.c: 277: SendMsgSreen[3] = 0x76;
  1741  000BE8  0E76               	movlw	118
  1742  000BEA  6F03               	movwf	(_SendMsgSreen+3)& (0+255),b
  1743                           
  1744                           ; BSR set to: 1
  1745                           ;main.c: 278: SendMsgSreen[4] = 0x61;
  1746  000BEC  0E61               	movlw	97
  1747  000BEE  6F04               	movwf	(_SendMsgSreen+4)& (0+255),b
  1748                           
  1749                           ; BSR set to: 1
  1750                           ;main.c: 279: SendMsgSreen[5] = 0x6C;
  1751  000BF0  0E6C               	movlw	108
  1752  000BF2  6F05               	movwf	(_SendMsgSreen+5)& (0+255),b
  1753                           
  1754                           ; BSR set to: 1
  1755                           ;main.c: 280: SendMsgSreen[6] = 0x3D;
  1756  000BF4  0E3D               	movlw	61
  1757  000BF6  6F06               	movwf	(_SendMsgSreen+6)& (0+255),b
  1758                           
  1759                           ; BSR set to: 1
  1760                           ;main.c: 281: SendMsgSreen[7] = 0x30 + (char)(Score/100);
  1761  000BF8  C0D4  F020         	movff	_Score,___awdiv@dividend
  1762  000BFC  C0D5  F021         	movff	_Score+1,___awdiv@dividend+1
  1763  000C00  0E00               	movlw	0
  1764  000C02  6E23               	movwf	___awdiv@divisor+1,c
  1765  000C04  0E64               	movlw	100
  1766  000C06  6E22               	movwf	___awdiv@divisor,c
  1767  000C08  EC55  F00D         	call	___awdiv	;wreg free
  1768  000C0C  5020               	movf	?___awdiv,w,c
  1769  000C0E  0F30               	addlw	48
  1770  000C10  0101               	movlb	1	; () banked
  1771  000C12  6F07               	movwf	(_SendMsgSreen+7)& (0+255),b
  1772                           
  1773                           ; BSR set to: 1
  1774                           ;main.c: 282: SendMsgSreen[8] = 0x30 + (char)((Score-((char)(Score/100)*100))/10);
  1775  000C14  0E00               	movlw	0
  1776  000C16  6E23               	movwf	___awdiv@divisor+1,c
  1777  000C18  0E64               	movlw	100
  1778  000C1A  6E22               	movwf	___awdiv@divisor,c
  1779  000C1C  C0D4  F020         	movff	_Score,___awdiv@dividend
  1780  000C20  C0D5  F021         	movff	_Score+1,___awdiv@dividend+1
  1781  000C24  EC55  F00D         	call	___awdiv	;wreg free
  1782  000C28  5020               	movf	?___awdiv,w,c
  1783  000C2A  0D64               	mullw	100
  1784  000C2C  1EF3               	comf	prodl,f,c
  1785  000C2E  1EF4               	comf	prodh,f,c
  1786  000C30  4AF3               	infsnz	prodl,f,c
  1787  000C32  2AF4               	incf	prodh,f,c
  1788  000C34  0100               	movlb	0	; () banked
  1789  000C36  51D4               	movf	_Score& (0+255),w,b
  1790  000C38  24F3               	addwf	prodl,w,c
  1791  000C3A  6FCB               	movwf	_main$1535& (0+255),b
  1792  000C3C  51D5               	movf	(_Score+1)& (0+255),w,b
  1793  000C3E  20F4               	addwfc	prodh,w,c
  1794  000C40  6FCC               	movwf	(_main$1535+1)& (0+255),b
  1795                           
  1796                           ; BSR set to: 0
  1797                           ;main.c: 282: SendMsgSreen[8] = 0x30 + (char)((Score-((char)(Score/100)*100))/10);
  1798  000C42  C0CB  F020         	movff	_main$1535,___awdiv@dividend
  1799  000C46  C0CC  F021         	movff	_main$1535+1,___awdiv@dividend+1
  1800  000C4A  0E00               	movlw	0
  1801  000C4C  6E23               	movwf	___awdiv@divisor+1,c
  1802  000C4E  0E0A               	movlw	10
  1803  000C50  6E22               	movwf	___awdiv@divisor,c
  1804  000C52  EC55  F00D         	call	___awdiv	;wreg free
  1805  000C56  5020               	movf	?___awdiv,w,c
  1806  000C58  0F30               	addlw	48
  1807  000C5A  0101               	movlb	1	; () banked
  1808  000C5C  6F08               	movwf	(_SendMsgSreen+8)& (0+255),b
  1809                           
  1810                           ; BSR set to: 1
  1811                           ;main.c: 283: SendMsgSreen[9] = 0x30 + (char)((Score-((char)(Score/10)*10)));
  1812  000C5E  C0D4  F020         	movff	_Score,___awdiv@dividend
  1813  000C62  C0D5  F021         	movff	_Score+1,___awdiv@dividend+1
  1814  000C66  0E00               	movlw	0
  1815  000C68  6E23               	movwf	___awdiv@divisor+1,c
  1816  000C6A  0E0A               	movlw	10
  1817  000C6C  6E22               	movwf	___awdiv@divisor,c
  1818  000C6E  EC55  F00D         	call	___awdiv	;wreg free
  1819  000C72  5020               	movf	?___awdiv,w,c
  1820  000C74  0D0A               	mullw	10
  1821  000C76  50F3               	movf	prodl,w,c
  1822  000C78  0800               	sublw	0
  1823  000C7A  0100               	movlb	0	; () banked
  1824  000C7C  25D4               	addwf	_Score& (0+255),w,b
  1825  000C7E  0F30               	addlw	48
  1826  000C80  0101               	movlb	1	; () banked
  1827  000C82  6F09               	movwf	(_SendMsgSreen+9)& (0+255),b
  1828                           
  1829                           ; BSR set to: 1
  1830                           ;main.c: 284: SendMsgSreen[10] = 0xFF;
  1831  000C84  690A               	setf	(_SendMsgSreen+10)& (0+255),b
  1832                           
  1833                           ; BSR set to: 1
  1834                           ;main.c: 285: SendMsgSreen[11] = 0xFF;
  1835  000C86  690B               	setf	(_SendMsgSreen+11)& (0+255),b
  1836                           
  1837                           ; BSR set to: 1
  1838                           ;main.c: 286: SendMsgSreen[12] = 0xFF;
  1839  000C88  690C               	setf	(_SendMsgSreen+12)& (0+255),b
  1840                           
  1841                           ; BSR set to: 1
  1842                           ;main.c: 287: PrintS(SendMsgSreen);
  1843  000C8A  0E00               	movlw	low _SendMsgSreen
  1844  000C8C  6E21               	movwf	PrintS@s_printS,c
  1845  000C8E  0E01               	movlw	high _SendMsgSreen
  1846  000C90  6E22               	movwf	PrintS@s_printS+1,c
  1847  000C92  EC74  F00E         	call	_PrintS	;wreg free
  1848                           
  1849                           ;main.c: 288: ClearArray();
  1850  000C96  ECEA  F00E         	call	_ClearArray	;wreg free
  1851                           
  1852                           ;main.c: 289: break;
  1853  000C9A  D571               	goto	l191
  1854  000C9C                     
  1855                           ;main.c: 293: FlagSpi = 1;
  1856  000C9C  0E01               	movlw	1
  1857  000C9E  0100               	movlb	0	; () banked
  1858  000CA0  6FE1               	movwf	_FlagSpi& (0+255),b
  1859                           
  1860                           ;main.c: 294: SendMsgSreen[0] = 0x72;
  1861  000CA2  0E72               	movlw	114
  1862  000CA4  0101               	movlb	1	; () banked
  1863  000CA6  6F00               	movwf	_SendMsgSreen& (0+255),b
  1864                           
  1865                           ;main.c: 295: SendMsgSreen[1] = 0x65;
  1866  000CA8  0E65               	movlw	101
  1867  000CAA  6F01               	movwf	(_SendMsgSreen+1)& (0+255),b
  1868                           
  1869                           ;main.c: 296: SendMsgSreen[2] = 0x66;
  1870  000CAC  0E66               	movlw	102
  1871  000CAE  6F02               	movwf	(_SendMsgSreen+2)& (0+255),b
  1872                           
  1873                           ;main.c: 297: SendMsgSreen[3] = 0x20;
  1874  000CB0  0E20               	movlw	32
  1875  000CB2  6F03               	movwf	(_SendMsgSreen+3)& (0+255),b
  1876                           
  1877                           ;main.c: 298: SendMsgSreen[4] = 0x30;
  1878  000CB4  0E30               	movlw	48
  1879  000CB6  6F04               	movwf	(_SendMsgSreen+4)& (0+255),b
  1880                           
  1881                           ; BSR set to: 1
  1882                           ;main.c: 299: SendMsgSreen[5] = 0xFF;
  1883  000CB8  6905               	setf	(_SendMsgSreen+5)& (0+255),b
  1884                           
  1885                           ; BSR set to: 1
  1886                           ;main.c: 300: SendMsgSreen[6] = 0xFF;
  1887  000CBA  6906               	setf	(_SendMsgSreen+6)& (0+255),b
  1888                           
  1889                           ; BSR set to: 1
  1890                           ;main.c: 301: SendMsgSreen[7] = 0xFF;
  1891  000CBC  6907               	setf	(_SendMsgSreen+7)& (0+255),b
  1892                           
  1893                           ; BSR set to: 1
  1894                           ;main.c: 302: PrintS(SendMsgSreen);
  1895  000CBE  0E00               	movlw	low _SendMsgSreen
  1896  000CC0  6E21               	movwf	PrintS@s_printS,c
  1897  000CC2  0E01               	movlw	high _SendMsgSreen
  1898  000CC4  6E22               	movwf	PrintS@s_printS+1,c
  1899  000CC6  EC74  F00E         	call	_PrintS	;wreg free
  1900                           
  1901                           ;main.c: 303: ClearArray();
  1902  000CCA  ECEA  F00E         	call	_ClearArray	;wreg free
  1903                           
  1904                           ;main.c: 306: SendMsgSreen[0] = 0x70;
  1905  000CCE  0E70               	movlw	112
  1906  000CD0  0101               	movlb	1	; () banked
  1907  000CD2  6F00               	movwf	_SendMsgSreen& (0+255),b
  1908                           
  1909                           ; BSR set to: 1
  1910                           ;main.c: 307: SendMsgSreen[1] = 0x69;
  1911  000CD4  0E69               	movlw	105
  1912  000CD6  6F01               	movwf	(_SendMsgSreen+1)& (0+255),b
  1913                           
  1914                           ; BSR set to: 1
  1915                           ;main.c: 308: SendMsgSreen[2] = 0x63;
  1916  000CD8  0E63               	movlw	99
  1917  000CDA  6F02               	movwf	(_SendMsgSreen+2)& (0+255),b
  1918                           
  1919                           ; BSR set to: 1
  1920                           ;main.c: 309: SendMsgSreen[3] = 0x20;
  1921  000CDC  0E20               	movlw	32
  1922  000CDE  6F03               	movwf	(_SendMsgSreen+3)& (0+255),b
  1923                           
  1924                           ; BSR set to: 1
  1925                           ;main.c: 310: SendMsgSreen[4] = 0x30 + (char)(PosX/100);
  1926  000CE0  C0DF  F020         	movff	_PosX,___awdiv@dividend
  1927  000CE4  C0E0  F021         	movff	_PosX+1,___awdiv@dividend+1
  1928  000CE8  0E00               	movlw	0
  1929  000CEA  6E23               	movwf	___awdiv@divisor+1,c
  1930  000CEC  0E64               	movlw	100
  1931  000CEE  6E22               	movwf	___awdiv@divisor,c
  1932  000CF0  EC55  F00D         	call	___awdiv	;wreg free
  1933  000CF4  5020               	movf	?___awdiv,w,c
  1934  000CF6  0F30               	addlw	48
  1935  000CF8  0101               	movlb	1	; () banked
  1936  000CFA  6F04               	movwf	(_SendMsgSreen+4)& (0+255),b
  1937                           
  1938                           ; BSR set to: 1
  1939                           ;main.c: 311: SendMsgSreen[5] = 0x30 + (char)((PosX-(100*(char)(PosX/100)))/10);
  1940  000CFC  0E00               	movlw	0
  1941  000CFE  6E23               	movwf	___awdiv@divisor+1,c
  1942  000D00  0E64               	movlw	100
  1943  000D02  6E22               	movwf	___awdiv@divisor,c
  1944  000D04  C0DF  F020         	movff	_PosX,___awdiv@dividend
  1945  000D08  C0E0  F021         	movff	_PosX+1,___awdiv@dividend+1
  1946  000D0C  EC55  F00D         	call	___awdiv	;wreg free
  1947  000D10  5020               	movf	?___awdiv,w,c
  1948  000D12  0D64               	mullw	100
  1949  000D14  1EF3               	comf	prodl,f,c
  1950  000D16  1EF4               	comf	prodh,f,c
  1951  000D18  4AF3               	infsnz	prodl,f,c
  1952  000D1A  2AF4               	incf	prodh,f,c
  1953  000D1C  0100               	movlb	0	; () banked
  1954  000D1E  51DF               	movf	_PosX& (0+255),w,b
  1955  000D20  24F3               	addwf	prodl,w,c
  1956  000D22  6FCB               	movwf	_main$1535& (0+255),b
  1957  000D24  51E0               	movf	(_PosX+1)& (0+255),w,b
  1958  000D26  20F4               	addwfc	prodh,w,c
  1959  000D28  6FCC               	movwf	(_main$1535+1)& (0+255),b
  1960                           
  1961                           ; BSR set to: 0
  1962                           ;main.c: 311: SendMsgSreen[5] = 0x30 + (char)((PosX-(100*(char)(PosX/100)))/10);
  1963  000D2A  C0CB  F020         	movff	_main$1535,___awdiv@dividend
  1964  000D2E  C0CC  F021         	movff	_main$1535+1,___awdiv@dividend+1
  1965  000D32  0E00               	movlw	0
  1966  000D34  6E23               	movwf	___awdiv@divisor+1,c
  1967  000D36  0E0A               	movlw	10
  1968  000D38  6E22               	movwf	___awdiv@divisor,c
  1969  000D3A  EC55  F00D         	call	___awdiv	;wreg free
  1970  000D3E  5020               	movf	?___awdiv,w,c
  1971  000D40  0F30               	addlw	48
  1972  000D42  0101               	movlb	1	; () banked
  1973  000D44  6F05               	movwf	(_SendMsgSreen+5)& (0+255),b
  1974                           
  1975                           ; BSR set to: 1
  1976                           ;main.c: 312: SendMsgSreen[6] = 0x30 + (char)(PosX-(10*(char)(PosX/10)));
  1977  000D46  C0DF  F020         	movff	_PosX,___awdiv@dividend
  1978  000D4A  C0E0  F021         	movff	_PosX+1,___awdiv@dividend+1
  1979  000D4E  0E00               	movlw	0
  1980  000D50  6E23               	movwf	___awdiv@divisor+1,c
  1981  000D52  0E0A               	movlw	10
  1982  000D54  6E22               	movwf	___awdiv@divisor,c
  1983  000D56  EC55  F00D         	call	___awdiv	;wreg free
  1984  000D5A  5020               	movf	?___awdiv,w,c
  1985  000D5C  0D0A               	mullw	10
  1986  000D5E  50F3               	movf	prodl,w,c
  1987  000D60  0800               	sublw	0
  1988  000D62  0100               	movlb	0	; () banked
  1989  000D64  25DF               	addwf	_PosX& (0+255),w,b
  1990  000D66  0F30               	addlw	48
  1991  000D68  0101               	movlb	1	; () banked
  1992  000D6A  6F06               	movwf	(_SendMsgSreen+6)& (0+255),b
  1993                           
  1994                           ; BSR set to: 1
  1995                           ;main.c: 313: SendMsgSreen[7] = 0x2C;
  1996  000D6C  0E2C               	movlw	44
  1997  000D6E  6F07               	movwf	(_SendMsgSreen+7)& (0+255),b
  1998                           
  1999                           ; BSR set to: 1
  2000                           ;main.c: 314: SendMsgSreen[8] = 0x30 + (char)(PosY/100);
  2001  000D70  C0DD  F020         	movff	_PosY,___awdiv@dividend
  2002  000D74  C0DE  F021         	movff	_PosY+1,___awdiv@dividend+1
  2003  000D78  0E00               	movlw	0
  2004  000D7A  6E23               	movwf	___awdiv@divisor+1,c
  2005  000D7C  0E64               	movlw	100
  2006  000D7E  6E22               	movwf	___awdiv@divisor,c
  2007  000D80  EC55  F00D         	call	___awdiv	;wreg free
  2008  000D84  5020               	movf	?___awdiv,w,c
  2009  000D86  0F30               	addlw	48
  2010  000D88  0101               	movlb	1	; () banked
  2011  000D8A  6F08               	movwf	(_SendMsgSreen+8)& (0+255),b
  2012                           
  2013                           ;main.c: 315: SendMsgSreen[9] = 0x30 + (char)((PosY-(100*(char)(PosY/100)))/10);
  2014  000D8C  0E00               	movlw	0
  2015  000D8E  6E23               	movwf	___awdiv@divisor+1,c
  2016  000D90  0E64               	movlw	100
  2017  000D92  6E22               	movwf	___awdiv@divisor,c
  2018  000D94  C0DD  F020         	movff	_PosY,___awdiv@dividend
  2019  000D98  C0DE  F021         	movff	_PosY+1,___awdiv@dividend+1
  2020  000D9C  EC55  F00D         	call	___awdiv	;wreg free
  2021  000DA0  5020               	movf	?___awdiv,w,c
  2022  000DA2  0D64               	mullw	100
  2023  000DA4  1EF3               	comf	prodl,f,c
  2024  000DA6  1EF4               	comf	prodh,f,c
  2025  000DA8  4AF3               	infsnz	prodl,f,c
  2026  000DAA  2AF4               	incf	prodh,f,c
  2027  000DAC  0100               	movlb	0	; () banked
  2028  000DAE  51DD               	movf	_PosY& (0+255),w,b
  2029  000DB0  24F3               	addwf	prodl,w,c
  2030  000DB2  6FCB               	movwf	_main$1535& (0+255),b
  2031  000DB4  51DE               	movf	(_PosY+1)& (0+255),w,b
  2032  000DB6  20F4               	addwfc	prodh,w,c
  2033  000DB8  6FCC               	movwf	(_main$1535+1)& (0+255),b
  2034                           
  2035                           ; BSR set to: 0
  2036                           ;main.c: 315: SendMsgSreen[9] = 0x30 + (char)((PosY-(100*(char)(PosY/100)))/10);
  2037  000DBA  C0CB  F020         	movff	_main$1535,___awdiv@dividend
  2038  000DBE  C0CC  F021         	movff	_main$1535+1,___awdiv@dividend+1
  2039  000DC2  0E00               	movlw	0
  2040  000DC4  6E23               	movwf	___awdiv@divisor+1,c
  2041  000DC6  0E0A               	movlw	10
  2042  000DC8  6E22               	movwf	___awdiv@divisor,c
  2043  000DCA  EC55  F00D         	call	___awdiv	;wreg free
  2044  000DCE  5020               	movf	?___awdiv,w,c
  2045  000DD0  0F30               	addlw	48
  2046  000DD2  0101               	movlb	1	; () banked
  2047  000DD4  6F09               	movwf	(_SendMsgSreen+9)& (0+255),b
  2048                           
  2049                           ; BSR set to: 1
  2050                           ;main.c: 316: SendMsgSreen[10] = 0x30 + (char)(PosY-(10*(char)(PosY/10)));
  2051  000DD6  C0DD  F020         	movff	_PosY,___awdiv@dividend
  2052  000DDA  C0DE  F021         	movff	_PosY+1,___awdiv@dividend+1
  2053  000DDE  0E00               	movlw	0
  2054  000DE0  6E23               	movwf	___awdiv@divisor+1,c
  2055  000DE2  0E0A               	movlw	10
  2056  000DE4  6E22               	movwf	___awdiv@divisor,c
  2057  000DE6  EC55  F00D         	call	___awdiv	;wreg free
  2058  000DEA  5020               	movf	?___awdiv,w,c
  2059  000DEC  0D0A               	mullw	10
  2060  000DEE  50F3               	movf	prodl,w,c
  2061  000DF0  0800               	sublw	0
  2062  000DF2  0100               	movlb	0	; () banked
  2063  000DF4  25DD               	addwf	_PosY& (0+255),w,b
  2064  000DF6  0F30               	addlw	48
  2065  000DF8  0101               	movlb	1	; () banked
  2066  000DFA  6F0A               	movwf	(_SendMsgSreen+10)& (0+255),b
  2067                           
  2068                           ; BSR set to: 1
  2069                           ;main.c: 317: SendMsgSreen[11] = 0x2C;
  2070  000DFC  0E2C               	movlw	44
  2071  000DFE  6F0B               	movwf	(_SendMsgSreen+11)& (0+255),b
  2072                           
  2073                           ; BSR set to: 1
  2074                           ;main.c: 318: SendMsgSreen[12] = 0x32;
  2075  000E00  0E32               	movlw	50
  2076  000E02  6F0C               	movwf	(_SendMsgSreen+12)& (0+255),b
  2077                           
  2078                           ; BSR set to: 1
  2079                           ;main.c: 319: SendMsgSreen[13] = 0xFF;
  2080  000E04  690D               	setf	(_SendMsgSreen+13)& (0+255),b
  2081                           
  2082                           ; BSR set to: 1
  2083                           ;main.c: 320: SendMsgSreen[14] = 0xFF;
  2084  000E06  690E               	setf	(_SendMsgSreen+14)& (0+255),b
  2085                           
  2086                           ; BSR set to: 1
  2087                           ;main.c: 321: SendMsgSreen[15] = 0xFF;
  2088  000E08  690F               	setf	(_SendMsgSreen+15)& (0+255),b
  2089                           
  2090                           ; BSR set to: 1
  2091                           ;main.c: 322: PrintS(SendMsgSreen);
  2092  000E0A  0E00               	movlw	low _SendMsgSreen
  2093  000E0C  6E21               	movwf	PrintS@s_printS,c
  2094  000E0E  0E01               	movlw	high _SendMsgSreen
  2095  000E10  6E22               	movwf	PrintS@s_printS+1,c
  2096  000E12  EC74  F00E         	call	_PrintS	;wreg free
  2097                           
  2098                           ;main.c: 323: ClearArray();
  2099  000E16  ECEA  F00E         	call	_ClearArray	;wreg free
  2100                           
  2101                           ;main.c: 324: break;
  2102  000E1A  D4B1               	goto	l191
  2103  000E1C                     
  2104                           ;main.c: 328: if(TypeVarSpi == 8 || TypeVarSpi == 9 || TypeVarSpi == 10 || TypeVarSpi ==
      +                           11) {
  2105  000E1C  0E08               	movlw	8
  2106  000E1E  0100               	movlb	0	; () banked
  2107  000E20  19D9               	xorwf	_TypeVarSpi& (0+255),w,b
  2108  000E22  B4D8               	btfsc	status,2,c
  2109  000E24  D00C               	goto	u3450
  2110                           
  2111                           ; BSR set to: 0
  2112  000E26  0E09               	movlw	9
  2113  000E28  19D9               	xorwf	_TypeVarSpi& (0+255),w,b
  2114  000E2A  B4D8               	btfsc	status,2,c
  2115  000E2C  D008               	goto	u3450
  2116                           
  2117                           ; BSR set to: 0
  2118  000E2E  0E0A               	movlw	10
  2119  000E30  19D9               	xorwf	_TypeVarSpi& (0+255),w,b
  2120  000E32  B4D8               	btfsc	status,2,c
  2121  000E34  D004               	goto	u3450
  2122                           
  2123                           ; BSR set to: 0
  2124  000E36  0E0B               	movlw	11
  2125  000E38  19D9               	xorwf	_TypeVarSpi& (0+255),w,b
  2126  000E3A  A4D8               	btfss	status,2,c
  2127  000E3C  D4A0               	goto	l191
  2128  000E3E                     u3450:
  2129                           
  2130                           ; BSR set to: 0
  2131                           ;main.c: 329: TypeVarSpi -= 8;
  2132                           
  2133                           ; BSR set to: 0
  2134  000E3E  0E08               	movlw	8
  2135  000E40  5FD9               	subwf	_TypeVarSpi& (0+255),f,b
  2136                           
  2137                           ; BSR set to: 0
  2138                           ;main.c: 330: SendMsgSreen[0] = 0x74;
  2139  000E42  0E74               	movlw	116
  2140  000E44  0101               	movlb	1	; () banked
  2141  000E46  6F00               	movwf	_SendMsgSreen& (0+255),b
  2142                           
  2143                           ; BSR set to: 1
  2144                           ;main.c: 331: SendMsgSreen[1] = 0x30 + TypeVarSpi;
  2145  000E48  0100               	movlb	0	; () banked
  2146  000E4A  51D9               	movf	_TypeVarSpi& (0+255),w,b
  2147  000E4C  0F30               	addlw	48
  2148  000E4E  0101               	movlb	1	; () banked
  2149  000E50  6F01               	movwf	(_SendMsgSreen+1)& (0+255),b
  2150                           
  2151                           ;main.c: 332: SendMsgSreen[2] = 0x2E;
  2152  000E52  0E2E               	movlw	46
  2153  000E54  6F02               	movwf	(_SendMsgSreen+2)& (0+255),b
  2154                           
  2155                           ;main.c: 333: SendMsgSreen[3] = 0x74;
  2156  000E56  0E74               	movlw	116
  2157  000E58  6F03               	movwf	(_SendMsgSreen+3)& (0+255),b
  2158                           
  2159                           ;main.c: 334: SendMsgSreen[4] = 0x78;
  2160  000E5A  0E78               	movlw	120
  2161  000E5C  6F04               	movwf	(_SendMsgSreen+4)& (0+255),b
  2162                           
  2163                           ;main.c: 335: SendMsgSreen[5] = 0x74;
  2164  000E5E  0E74               	movlw	116
  2165  000E60  6F05               	movwf	(_SendMsgSreen+5)& (0+255),b
  2166                           
  2167                           ;main.c: 336: SendMsgSreen[6] = 0x3D;
  2168  000E62  0E3D               	movlw	61
  2169  000E64  6F06               	movwf	(_SendMsgSreen+6)& (0+255),b
  2170                           
  2171                           ;main.c: 337: SendMsgSreen[7] = 0x22;
  2172  000E66  0E22               	movlw	34
  2173  000E68  6F07               	movwf	(_SendMsgSreen+7)& (0+255),b
  2174                           
  2175                           ;main.c: 338: taille_text_spi = 0;
  2176  000E6A  0E00               	movlw	0
  2177  000E6C  0100               	movlb	0	; () banked
  2178  000E6E  6FCD               	movwf	main@taille_text_spi& (0+255),b
  2179                           
  2180                           ;main.c: 343: while(taille_text_spi < TailleTerm) {
  2181  000E70  D018               	goto	l212
  2182  000E72                     
  2183                           ; BSR set to: 0
  2184                           ;main.c: 344: SendMsgSreen[taille_text_spi+8] = TextSpi[taille_text_spi];
  2185                           
  2186                           ; BSR set to: 0
  2187  000E72  51CD               	movf	main@taille_text_spi& (0+255),w,b
  2188  000E74  0D01               	mullw	1
  2189  000E76  0E00               	movlw	low _TextSpi
  2190  000E78  24F3               	addwf	prodl,w,c
  2191  000E7A  6ED9               	movwf	fsr2l,c
  2192  000E7C  0E03               	movlw	high _TextSpi
  2193  000E7E  20F4               	addwfc	prodh,w,c
  2194  000E80  6EDA               	movwf	fsr2h,c
  2195  000E82  51CD               	movf	main@taille_text_spi& (0+255),w,b
  2196  000E84  6FBD               	movwf	??_main& (0+255),b
  2197  000E86  6BBE               	clrf	(??_main+1)& (0+255),b
  2198  000E88  0E08               	movlw	8
  2199  000E8A  27BD               	addwf	??_main& (0+255),f,b
  2200  000E8C  0E00               	movlw	0
  2201  000E8E  23BE               	addwfc	(??_main+1)& (0+255),f,b
  2202  000E90  0E00               	movlw	low _SendMsgSreen
  2203  000E92  25BD               	addwf	??_main& (0+255),w,b
  2204  000E94  6EE1               	movwf	fsr1l,c
  2205  000E96  0E01               	movlw	high _SendMsgSreen
  2206  000E98  21BE               	addwfc	(??_main+1)& (0+255),w,b
  2207  000E9A  6EE2               	movwf	fsr1h,c
  2208  000E9C  CFDF FFE7          	movff	indf2,indf1
  2209                           
  2210                           ; BSR set to: 0
  2211                           ;main.c: 345: taille_text_spi++;
  2212  000EA0  2BCD               	incf	main@taille_text_spi& (0+255),f,b
  2213  000EA2                     l212:
  2214                           
  2215                           ; BSR set to: 0
  2216                           
  2217                           ; BSR set to: 0
  2218  000EA2  51CD               	movf	main@taille_text_spi& (0+255),w,b
  2219  000EA4  6FBD               	movwf	??_main& (0+255),b
  2220  000EA6  6BBE               	clrf	(??_main+1)& (0+255),b
  2221  000EA8  51D6               	movf	_TailleTerm& (0+255),w,b
  2222  000EAA  5DBD               	subwf	??_main& (0+255),w,b
  2223  000EAC  51BE               	movf	(??_main+1)& (0+255),w,b
  2224  000EAE  0A80               	xorlw	128
  2225  000EB0  6FBF               	movwf	(??_main+2)& (0+255),b
  2226  000EB2  51D7               	movf	(_TailleTerm+1)& (0+255),w,b
  2227  000EB4  0A80               	xorlw	128
  2228  000EB6  59BF               	subwfb	(??_main+2)& (0+255),w,b
  2229  000EB8  A0D8               	btfss	status,0,c
  2230  000EBA  D7DB               	goto	l213
  2231                           
  2232                           ; BSR set to: 0
  2233                           ;main.c: 346: }
  2234                           ;main.c: 347: SendMsgSreen[taille_text_spi+8] = 0x22;
  2235                           
  2236                           ; BSR set to: 0
  2237  000EBC  51CD               	movf	main@taille_text_spi& (0+255),w,b
  2238  000EBE  6FBD               	movwf	??_main& (0+255),b
  2239  000EC0  6BBE               	clrf	(??_main+1)& (0+255),b
  2240  000EC2  0E08               	movlw	8
  2241  000EC4  27BD               	addwf	??_main& (0+255),f,b
  2242  000EC6  0E00               	movlw	0
  2243  000EC8  23BE               	addwfc	(??_main+1)& (0+255),f,b
  2244  000ECA  0E00               	movlw	low _SendMsgSreen
  2245  000ECC  25BD               	addwf	??_main& (0+255),w,b
  2246  000ECE  6ED9               	movwf	fsr2l,c
  2247  000ED0  0E01               	movlw	high _SendMsgSreen
  2248  000ED2  21BE               	addwfc	(??_main+1)& (0+255),w,b
  2249  000ED4  6EDA               	movwf	fsr2h,c
  2250  000ED6  0E22               	movlw	34
  2251  000ED8  6EDF               	movwf	indf2,c
  2252                           
  2253                           ;main.c: 348: SendMsgSreen[taille_text_spi+9] = 0xFF;
  2254  000EDA  51CD               	movf	main@taille_text_spi& (0+255),w,b
  2255  000EDC  6FBD               	movwf	??_main& (0+255),b
  2256  000EDE  6BBE               	clrf	(??_main+1)& (0+255),b
  2257  000EE0  0E09               	movlw	9
  2258  000EE2  27BD               	addwf	??_main& (0+255),f,b
  2259  000EE4  0E00               	movlw	0
  2260  000EE6  23BE               	addwfc	(??_main+1)& (0+255),f,b
  2261  000EE8  0E00               	movlw	low _SendMsgSreen
  2262  000EEA  25BD               	addwf	??_main& (0+255),w,b
  2263  000EEC  6ED9               	movwf	fsr2l,c
  2264  000EEE  0E01               	movlw	high _SendMsgSreen
  2265  000EF0  21BE               	addwfc	(??_main+1)& (0+255),w,b
  2266  000EF2  6EDA               	movwf	fsr2h,c
  2267  000EF4  0EFF               	movlw	255
  2268  000EF6  6EDF               	movwf	indf2,c
  2269                           
  2270                           ;main.c: 349: SendMsgSreen[taille_text_spi+10] = 0xFF;
  2271  000EF8  51CD               	movf	main@taille_text_spi& (0+255),w,b
  2272  000EFA  6FBD               	movwf	??_main& (0+255),b
  2273  000EFC  6BBE               	clrf	(??_main+1)& (0+255),b
  2274  000EFE  0E0A               	movlw	10
  2275  000F00  27BD               	addwf	??_main& (0+255),f,b
  2276  000F02  0E00               	movlw	0
  2277  000F04  23BE               	addwfc	(??_main+1)& (0+255),f,b
  2278  000F06  0E00               	movlw	low _SendMsgSreen
  2279  000F08  25BD               	addwf	??_main& (0+255),w,b
  2280  000F0A  6ED9               	movwf	fsr2l,c
  2281  000F0C  0E01               	movlw	high _SendMsgSreen
  2282  000F0E  21BE               	addwfc	(??_main+1)& (0+255),w,b
  2283  000F10  6EDA               	movwf	fsr2h,c
  2284  000F12  0EFF               	movlw	255
  2285  000F14  6EDF               	movwf	indf2,c
  2286                           
  2287                           ;main.c: 350: SendMsgSreen[taille_text_spi+11] = 0xFF;
  2288  000F16  51CD               	movf	main@taille_text_spi& (0+255),w,b
  2289  000F18  6FBD               	movwf	??_main& (0+255),b
  2290  000F1A  6BBE               	clrf	(??_main+1)& (0+255),b
  2291  000F1C  0E0B               	movlw	11
  2292  000F1E  27BD               	addwf	??_main& (0+255),f,b
  2293  000F20  0E00               	movlw	0
  2294  000F22  23BE               	addwfc	(??_main+1)& (0+255),f,b
  2295  000F24  0E00               	movlw	low _SendMsgSreen
  2296  000F26  25BD               	addwf	??_main& (0+255),w,b
  2297  000F28  6ED9               	movwf	fsr2l,c
  2298  000F2A  0E01               	movlw	high _SendMsgSreen
  2299  000F2C  21BE               	addwfc	(??_main+1)& (0+255),w,b
  2300  000F2E  6EDA               	movwf	fsr2h,c
  2301  000F30  0EFF               	movlw	255
  2302  000F32  6EDF               	movwf	indf2,c
  2303                           
  2304                           ; BSR set to: 0
  2305                           ;main.c: 351: PrintS(SendMsgSreen);
  2306  000F34  0E00               	movlw	low _SendMsgSreen
  2307  000F36  6E21               	movwf	PrintS@s_printS,c
  2308  000F38  0E01               	movlw	high _SendMsgSreen
  2309  000F3A  6E22               	movwf	PrintS@s_printS+1,c
  2310  000F3C  EC74  F00E         	call	_PrintS	;wreg free
  2311                           
  2312                           ;main.c: 352: ClearArray();
  2313  000F40  ECEA  F00E         	call	_ClearArray	;wreg free
  2314                           
  2315                           ;main.c: 357: break;
  2316                           
  2317                           ;main.c: 355: case 3:
  2318                           
  2319                           ;main.c: 353: }
  2320                           ;main.c: 354: break;
  2321  000F44  D41C               	goto	l191
  2322  000F46                     
  2323                           ;main.c: 361: FlagSpi = 1;
  2324  000F46  0E01               	movlw	1
  2325  000F48  0100               	movlb	0	; () banked
  2326  000F4A  6FE1               	movwf	_FlagSpi& (0+255),b
  2327                           
  2328                           ;main.c: 362: SendMsgSreen[0] = 0x74;
  2329  000F4C  0E74               	movlw	116
  2330  000F4E  0101               	movlb	1	; () banked
  2331  000F50  6F00               	movwf	_SendMsgSreen& (0+255),b
  2332                           
  2333                           ;main.c: 363: SendMsgSreen[1] = 0x30;
  2334  000F52  0E30               	movlw	48
  2335  000F54  6F01               	movwf	(_SendMsgSreen+1)& (0+255),b
  2336                           
  2337                           ;main.c: 364: SendMsgSreen[2] = 0x2E;
  2338  000F56  0E2E               	movlw	46
  2339  000F58  6F02               	movwf	(_SendMsgSreen+2)& (0+255),b
  2340                           
  2341                           ;main.c: 365: SendMsgSreen[3] = 0x74;
  2342  000F5A  0E74               	movlw	116
  2343  000F5C  6F03               	movwf	(_SendMsgSreen+3)& (0+255),b
  2344                           
  2345                           ;main.c: 366: SendMsgSreen[4] = 0x78;
  2346  000F5E  0E78               	movlw	120
  2347  000F60  6F04               	movwf	(_SendMsgSreen+4)& (0+255),b
  2348                           
  2349                           ;main.c: 367: SendMsgSreen[5] = 0x74;
  2350  000F62  0E74               	movlw	116
  2351  000F64  6F05               	movwf	(_SendMsgSreen+5)& (0+255),b
  2352                           
  2353                           ;main.c: 368: SendMsgSreen[6] = 0x3D;
  2354  000F66  0E3D               	movlw	61
  2355  000F68  6F06               	movwf	(_SendMsgSreen+6)& (0+255),b
  2356                           
  2357                           ;main.c: 369: SendMsgSreen[7] = 0x22;
  2358  000F6A  0E22               	movlw	34
  2359  000F6C  6F07               	movwf	(_SendMsgSreen+7)& (0+255),b
  2360                           
  2361                           ;main.c: 370: SendMsgSreen[8] = 0x74;
  2362  000F6E  0E74               	movlw	116
  2363  000F70  6F08               	movwf	(_SendMsgSreen+8)& (0+255),b
  2364                           
  2365                           ;main.c: 371: SendMsgSreen[9] = 0x65;
  2366  000F72  0E65               	movlw	101
  2367  000F74  6F09               	movwf	(_SendMsgSreen+9)& (0+255),b
  2368                           
  2369                           ;main.c: 372: SendMsgSreen[10] = 0x73;
  2370  000F76  0E73               	movlw	115
  2371  000F78  6F0A               	movwf	(_SendMsgSreen+10)& (0+255),b
  2372                           
  2373                           ;main.c: 373: SendMsgSreen[11] = 0x74;
  2374  000F7A  0E74               	movlw	116
  2375  000F7C  6F0B               	movwf	(_SendMsgSreen+11)& (0+255),b
  2376                           
  2377                           ; BSR set to: 1
  2378                           ;main.c: 374: SendMsgSreen[12] = 0x30 + cpt;
  2379  000F7E  0100               	movlb	0	; () banked
  2380  000F80  51D8               	movf	_cpt& (0+255),w,b
  2381  000F82  0F30               	addlw	48
  2382  000F84  0101               	movlb	1	; () banked
  2383  000F86  6F0C               	movwf	(_SendMsgSreen+12)& (0+255),b
  2384                           
  2385                           ; BSR set to: 1
  2386                           ;main.c: 375: cpt++;
  2387  000F88  0100               	movlb	0	; () banked
  2388  000F8A  2BD8               	incf	_cpt& (0+255),f,b
  2389                           
  2390                           ; BSR set to: 0
  2391                           ;main.c: 376: if(cpt > 9) {cpt = 0;}
  2392  000F8C  0E09               	movlw	9
  2393  000F8E  65D8               	cpfsgt	_cpt& (0+255),b
  2394  000F90  D002               	goto	l217
  2395                           
  2396                           ; BSR set to: 0
  2397  000F92  0E00               	movlw	0
  2398  000F94  6FD8               	movwf	_cpt& (0+255),b
  2399  000F96                     l217:
  2400                           
  2401                           ; BSR set to: 0
  2402                           ;main.c: 377: SendMsgSreen[13] = 0x22;
  2403  000F96  0E22               	movlw	34
  2404  000F98  0101               	movlb	1	; () banked
  2405  000F9A  6F0D               	movwf	(_SendMsgSreen+13)& (0+255),b
  2406                           
  2407                           ; BSR set to: 1
  2408                           ;main.c: 378: SendMsgSreen[14] = 0xFF;
  2409  000F9C  690E               	setf	(_SendMsgSreen+14)& (0+255),b
  2410                           
  2411                           ; BSR set to: 1
  2412                           ;main.c: 379: SendMsgSreen[15] = 0xFF;
  2413  000F9E  690F               	setf	(_SendMsgSreen+15)& (0+255),b
  2414                           
  2415                           ; BSR set to: 1
  2416                           ;main.c: 380: SendMsgSreen[16] = 0xFF;
  2417  000FA0  6910               	setf	(_SendMsgSreen+16)& (0+255),b
  2418                           
  2419                           ; BSR set to: 1
  2420                           ;main.c: 381: PrintS(SendMsgSreen);
  2421  000FA2  0E00               	movlw	low _SendMsgSreen
  2422  000FA4  6E21               	movwf	PrintS@s_printS,c
  2423  000FA6  0E01               	movlw	high _SendMsgSreen
  2424  000FA8  6E22               	movwf	PrintS@s_printS+1,c
  2425  000FAA  EC74  F00E         	call	_PrintS	;wreg free
  2426                           
  2427                           ;main.c: 382: ClearArray();
  2428  000FAE  ECEA  F00E         	call	_ClearArray	;wreg free
  2429                           
  2430                           ;main.c: 383: break;
  2431  000FB2  EFBF  F003         	goto	l191
  2432  000FB6                     
  2433                           ;main.c: 385: EtatScreen = 0;
  2434  000FB6  0E00               	movlw	0
  2435  000FB8  0100               	movlb	0	; () banked
  2436  000FBA  6FDC               	movwf	_EtatScreen& (0+255),b
  2437                           
  2438                           ; BSR set to: 0
  2439                           ;main.c: 387: }
  2440                           
  2441                           ;main.c: 386: break;
  2442  000FBC  EFBF  F003         	goto	l191
  2443  000FC0                     l199:
  2444                           
  2445                           ; BSR set to: 0
  2446                           
  2447                           ; BSR set to: 0
  2448  000FC0  51DC               	movf	_EtatScreen& (0+255),w,b
  2449                           
  2450                           ; Switch size 1, requested type "space"
  2451                           ; Number of cases is 5, Range of values is 0 to 4
  2452                           ; switch strategies available:
  2453                           ; Name         Instructions Cycles
  2454                           ; simple_byte           16     9 (average)
  2455                           ;	Chosen strategy is simple_byte
  2456  000FC2  0A00               	xorlw	0	; case 0
  2457  000FC4  B4D8               	btfsc	status,2,c
  2458  000FC6  D574               	goto	l200
  2459  000FC8  0A01               	xorlw	1	; case 1
  2460  000FCA  B4D8               	btfsc	status,2,c
  2461  000FCC  D667               	goto	l207
  2462  000FCE  0A03               	xorlw	3	; case 2
  2463  000FD0  B4D8               	btfsc	status,2,c
  2464  000FD2  D724               	goto	l208
  2465  000FD4  0A01               	xorlw	1	; case 3
  2466  000FD6  B4D8               	btfsc	status,2,c
  2467  000FD8  EFBF  F003         	goto	l191
  2468  000FDC  0A07               	xorlw	7	; case 4
  2469  000FDE  B4D8               	btfsc	status,2,c
  2470  000FE0  D7B2               	goto	l216
  2471  000FE2  D7E9               	goto	l218
  2472  000FE4                     __end_of_main:
  2473                           	opt stack 0
  2474                           tblptru	equ	0xFF8
  2475                           tblptrh	equ	0xFF7
  2476                           tblptrl	equ	0xFF6
  2477                           tablat	equ	0xFF5
  2478                           prodh	equ	0xFF4
  2479                           prodl	equ	0xFF3
  2480                           intcon	equ	0xFF2
  2481                           postinc0	equ	0xFEE
  2482                           wreg	equ	0xFE8
  2483                           indf1	equ	0xFE7
  2484                           postdec1	equ	0xFE5
  2485                           fsr1h	equ	0xFE2
  2486                           fsr1l	equ	0xFE1
  2487                           indf2	equ	0xFDF
  2488                           fsr2h	equ	0xFDA
  2489                           fsr2l	equ	0xFD9
  2490                           status	equ	0xFD8
  2491                           
  2492 ;; *************** function _exp *****************
  2493 ;; Defined at:
  2494 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
  2495 ;; Parameters:    Size  Location     Type
  2496 ;;  x               3   52[BANK0 ] void 
  2497 ;; Auto vars:     Size  Location     Type
  2498 ;;  exponent        2   58[BANK0 ] int 
  2499 ;;  sign            1   60[BANK0 ] unsigned char 
  2500 ;; Return value:  Size  Location     Type
  2501 ;;                  3   52[BANK0 ] unsigned char 
  2502 ;; Registers used:
  2503 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2504 ;; Tracked objects:
  2505 ;;		On entry : 0/0
  2506 ;;		On exit  : 0/0
  2507 ;;		Unchanged: 0/0
  2508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2509 ;;      Params:         0       3       0       0       0       0       0
  2510 ;;      Locals:         0       6       0       0       0       0       0
  2511 ;;      Temps:          0       0       0       0       0       0       0
  2512 ;;      Totals:         0       9       0       0       0       0       0
  2513 ;;Total ram usage:        9 bytes
  2514 ;; Hardware stack levels used:    1
  2515 ;; Hardware stack levels required when called:    5
  2516 ;; This function calls:
  2517 ;;		___awtoft
  2518 ;;		___ftdiv
  2519 ;;		___ftge
  2520 ;;		___ftmul
  2521 ;;		___ftneg
  2522 ;;		___ftsub
  2523 ;;		___fttol
  2524 ;;		_eval_poly
  2525 ;;		_floor
  2526 ;;		_ldexp
  2527 ;; This function is called by:
  2528 ;;		_main
  2529 ;; This function uses a non-reentrant model
  2530 ;;
  2531                           
  2532                           	psect	text1
  2533  000FE4                     __ptext1:
  2534                           	opt stack 0
  2535  000FE4                     _exp:
  2536                           	opt stack 25
  2537                           
  2538                           ; BSR set to: 0
  2539                           ;incstack = 0
  2540  000FE4  0100               	movlb	0	; () banked
  2541  000FE6  51B4               	movf	exp@x& (0+255),w,b
  2542  000FE8  11B5               	iorwf	(exp@x+1)& (0+255),w,b
  2543  000FEA  11B6               	iorwf	(exp@x+2)& (0+255),w,b
  2544  000FEC  A4D8               	btfss	status,2,c
  2545  000FEE  D007               	goto	l575
  2546                           
  2547                           ; BSR set to: 0
  2548  000FF0  0E00               	movlw	0
  2549  000FF2  6FB4               	movwf	?_exp& (0+255),b
  2550  000FF4  0E80               	movlw	128
  2551  000FF6  6FB5               	movwf	(?_exp+1)& (0+255),b
  2552  000FF8  0E3F               	movlw	63
  2553  000FFA  6FB6               	movwf	(?_exp+2)& (0+255),b
  2554                           
  2555                           ; BSR set to: 0
  2556  000FFC  0012               	return	
  2557  000FFE                     l575:
  2558                           
  2559                           ; BSR set to: 0
  2560                           
  2561                           ; BSR set to: 0
  2562  000FFE  0E72               	movlw	114
  2563  001000  6E20               	movwf	___ftge@ff1,c
  2564  001002  0E31               	movlw	49
  2565  001004  6E21               	movwf	___ftge@ff1+1,c
  2566  001006  0E44               	movlw	68
  2567  001008  6E22               	movwf	___ftge@ff1+2,c
  2568  00100A  C0B4  F023         	movff	exp@x,___ftge@ff2
  2569  00100E  C0B5  F024         	movff	exp@x+1,___ftge@ff2+1
  2570  001012  C0B6  F025         	movff	exp@x+2,___ftge@ff2+2
  2571  001016  EC0D  F00D         	call	___ftge	;wreg free
  2572  00101A  B0D8               	btfsc	status,0,c
  2573  00101C  D00C               	goto	l577
  2574  00101E  0E00               	movlw	0
  2575  001020  0100               	movlb	0	; () banked
  2576  001022  6FD3               	movwf	(_errno+1)& (0+255),b
  2577  001024  0E22               	movlw	34
  2578  001026  6FD2               	movwf	_errno& (0+255),b
  2579  001028  0EFF               	movlw	255
  2580  00102A  6FB4               	movwf	?_exp& (0+255),b
  2581  00102C  0E7F               	movlw	127
  2582  00102E  6FB5               	movwf	(?_exp+1)& (0+255),b
  2583  001030  0E7F               	movlw	127
  2584  001032  6FB6               	movwf	(?_exp+2)& (0+255),b
  2585                           
  2586                           ; BSR set to: 0
  2587  001034  0012               	return	
  2588  001036                     l577:
  2589                           
  2590                           ; BSR set to: 0
  2591  001036  C0B4  F020         	movff	exp@x,___ftge@ff1
  2592  00103A  C0B5  F021         	movff	exp@x+1,___ftge@ff1+1
  2593  00103E  C0B6  F022         	movff	exp@x+2,___ftge@ff1+2
  2594  001042  0E49               	movlw	73
  2595  001044  6E23               	movwf	___ftge@ff2,c
  2596  001046  0E3A               	movlw	58
  2597  001048  6E24               	movwf	___ftge@ff2+1,c
  2598  00104A  0EC4               	movlw	196
  2599  00104C  6E25               	movwf	___ftge@ff2+2,c
  2600  00104E  EC0D  F00D         	call	___ftge	;wreg free
  2601  001052  B0D8               	btfsc	status,0,c
  2602  001054  D00C               	goto	l578
  2603  001056  0E00               	movlw	0
  2604  001058  0100               	movlb	0	; () banked
  2605  00105A  6FD3               	movwf	(_errno+1)& (0+255),b
  2606  00105C  0E22               	movlw	34
  2607  00105E  6FD2               	movwf	_errno& (0+255),b
  2608  001060  0E00               	movlw	0
  2609  001062  6FB4               	movwf	?_exp& (0+255),b
  2610  001064  0E00               	movlw	0
  2611  001066  6FB5               	movwf	(?_exp+1)& (0+255),b
  2612  001068  0E00               	movlw	0
  2613  00106A  6FB6               	movwf	(?_exp+2)& (0+255),b
  2614                           
  2615                           ; BSR set to: 0
  2616  00106C  0012               	return	
  2617  00106E                     l578:
  2618                           
  2619                           ; BSR set to: 0
  2620  00106E  0100               	movlb	0	; () banked
  2621  001070  AFB6               	btfss	(exp@x+2)& (0+255),7,b
  2622  001072  D002               	goto	u3260
  2623  001074  0E01               	movlw	1
  2624  001076  D001               	goto	u3270
  2625  001078                     u3260:
  2626  001078  0E00               	movlw	0
  2627  00107A                     u3270:
  2628  00107A  6FBC               	movwf	exp@sign& (0+255),b
  2629                           
  2630                           ; BSR set to: 0
  2631  00107C  51BC               	movf	exp@sign& (0+255),w,b
  2632  00107E  B4D8               	btfsc	status,2,c
  2633  001080  D00E               	goto	l579
  2634                           
  2635                           ; BSR set to: 0
  2636  001082  C0B4  F083         	movff	exp@x,___ftneg@f1
  2637  001086  C0B5  F084         	movff	exp@x+1,___ftneg@f1+1
  2638  00108A  C0B6  F085         	movff	exp@x+2,___ftneg@f1+2
  2639  00108E  EC25  F00F         	call	___ftneg	;wreg free
  2640  001092  C083  F0B4         	movff	?___ftneg,exp@x
  2641  001096  C084  F0B5         	movff	?___ftneg+1,exp@x+1
  2642  00109A  C085  F0B6         	movff	?___ftneg+2,exp@x+2
  2643  00109E                     l579:
  2644  00109E  C0B4  F086         	movff	exp@x,___ftmul@f1
  2645  0010A2  C0B5  F087         	movff	exp@x+1,___ftmul@f1+1
  2646  0010A6  C0B6  F088         	movff	exp@x+2,___ftmul@f1+2
  2647  0010AA  0EAA               	movlw	170
  2648  0010AC  0100               	movlb	0	; () banked
  2649  0010AE  6F89               	movwf	___ftmul@f2& (0+255),b
  2650  0010B0  0EB8               	movlw	184
  2651  0010B2  6F8A               	movwf	(___ftmul@f2+1)& (0+255),b
  2652  0010B4  0E3F               	movlw	63
  2653  0010B6  6F8B               	movwf	(___ftmul@f2+2)& (0+255),b
  2654  0010B8  ECC2  F009         	call	___ftmul	;wreg free
  2655  0010BC  C086  F0B4         	movff	?___ftmul,exp@x
  2656  0010C0  C087  F0B5         	movff	?___ftmul+1,exp@x+1
  2657  0010C4  C088  F0B6         	movff	?___ftmul+2,exp@x+2
  2658  0010C8  C0B4  F0A1         	movff	exp@x,floor@x
  2659  0010CC  C0B5  F0A2         	movff	exp@x+1,floor@x+1
  2660  0010D0  C0B6  F0A3         	movff	exp@x+2,floor@x+2
  2661  0010D4  EC2A  F00B         	call	_floor	;wreg free
  2662  0010D8  C0A1  F0B7         	movff	?_floor,_exp$1536
  2663  0010DC  C0A2  F0B8         	movff	?_floor+1,_exp$1536+1
  2664  0010E0  C0A3  F0B9         	movff	?_floor+2,_exp$1536+2
  2665  0010E4  C0B7  F037         	movff	_exp$1536,___fttol@f1
  2666  0010E8  C0B8  F038         	movff	_exp$1536+1,___fttol@f1+1
  2667  0010EC  C0B9  F039         	movff	_exp$1536+2,___fttol@f1+2
  2668  0010F0  EC3D  F00A         	call	___fttol	;wreg free
  2669  0010F4  C037  F0BA         	movff	?___fttol,exp@exponent
  2670  0010F8  C038  F0BB         	movff	?___fttol+1,exp@exponent+1
  2671  0010FC  C0B4  F0A1         	movff	exp@x,___ftsub@f1
  2672  001100  C0B5  F0A2         	movff	exp@x+1,___ftsub@f1+1
  2673  001104  C0B6  F0A3         	movff	exp@x+2,___ftsub@f1+2
  2674  001108  C0BA  F080         	movff	exp@exponent,___awtoft@c
  2675  00110C  C0BB  F081         	movff	exp@exponent+1,___awtoft@c+1
  2676  001110  EC57  F00E         	call	___awtoft	;wreg free
  2677  001114  C080  F0A4         	movff	?___awtoft,___ftsub@f2
  2678  001118  C081  F0A5         	movff	?___awtoft+1,___ftsub@f2+1
  2679  00111C  C082  F0A6         	movff	?___awtoft+2,___ftsub@f2+2
  2680  001120  EC36  F00E         	call	___ftsub	;wreg free
  2681  001124  C0A1  F0B4         	movff	?___ftsub,exp@x
  2682  001128  C0A2  F0B5         	movff	?___ftsub+1,exp@x+1
  2683  00112C  C0A3  F0B6         	movff	?___ftsub+2,exp@x+2
  2684  001130  C0B4  F0A1         	movff	exp@x,eval_poly@x
  2685  001134  C0B5  F0A2         	movff	exp@x+1,eval_poly@x+1
  2686  001138  C0B6  F0A3         	movff	exp@x+2,eval_poly@x+2
  2687  00113C  0E1D               	movlw	low exp@coeff
  2688  00113E  0100               	movlb	0	; () banked
  2689  001140  6FA4               	movwf	eval_poly@d& (0+255),b
  2690  001142  0E07               	movlw	high exp@coeff
  2691  001144  6FA5               	movwf	(eval_poly@d+1)& (0+255),b
  2692  001146  0E00               	movlw	0
  2693  001148  6FA7               	movwf	(eval_poly@n+1)& (0+255),b
  2694  00114A  0E09               	movlw	9
  2695  00114C  6FA6               	movwf	eval_poly@n& (0+255),b
  2696  00114E  EC9B  F00B         	call	_eval_poly	;wreg free
  2697  001152  C0A1  F0AD         	movff	?_eval_poly,ldexp@value
  2698  001156  C0A2  F0AE         	movff	?_eval_poly+1,ldexp@value+1
  2699  00115A  C0A3  F0AF         	movff	?_eval_poly+2,ldexp@value+2
  2700  00115E  C0BA  F0B0         	movff	exp@exponent,ldexp@newexp
  2701  001162  C0BB  F0B1         	movff	exp@exponent+1,ldexp@newexp+1
  2702  001166  EC08  F00C         	call	_ldexp	;wreg free
  2703  00116A  C0AD  F0B4         	movff	?_ldexp,exp@x
  2704  00116E  C0AE  F0B5         	movff	?_ldexp+1,exp@x+1
  2705  001172  C0AF  F0B6         	movff	?_ldexp+2,exp@x+2
  2706  001176  0100               	movlb	0	; () banked
  2707  001178  51BC               	movf	exp@sign& (0+255),w,b
  2708  00117A  B4D8               	btfsc	status,2,c
  2709  00117C  D025               	goto	l580
  2710                           
  2711                           ; BSR set to: 0
  2712  00117E  29B4               	incf	exp@x& (0+255),w,b
  2713  001180  E10E               	bnz	l3519
  2714  001182  0E7F               	movlw	127
  2715  001184  19B5               	xorwf	(exp@x+1)& (0+255),w,b
  2716  001186  E10B               	bnz	l3519
  2717  001188  0E7F               	movlw	127
  2718  00118A  19B6               	xorwf	(exp@x+2)& (0+255),w,b
  2719  00118C  A4D8               	btfss	status,2,c
  2720  00118E  D007               	goto	l581
  2721                           
  2722                           ; BSR set to: 0
  2723  001190  0E00               	movlw	0
  2724  001192  6FB4               	movwf	?_exp& (0+255),b
  2725  001194  0E00               	movlw	0
  2726  001196  6FB5               	movwf	(?_exp+1)& (0+255),b
  2727  001198  0E00               	movlw	0
  2728  00119A  6FB6               	movwf	(?_exp+2)& (0+255),b
  2729                           
  2730                           ; BSR set to: 0
  2731  00119C  0012               	return	
  2732  00119E                     l581:
  2733  00119E                     l3519:
  2734                           
  2735                           ; BSR set to: 0
  2736  00119E  0E00               	movlw	0
  2737  0011A0  6E28               	movwf	___ftdiv@f1,c
  2738  0011A2  0E80               	movlw	128
  2739  0011A4  6E29               	movwf	___ftdiv@f1+1,c
  2740  0011A6  0E3F               	movlw	63
  2741  0011A8  6E2A               	movwf	___ftdiv@f1+2,c
  2742  0011AA  C0B4  F02B         	movff	exp@x,___ftdiv@f2
  2743  0011AE  C0B5  F02C         	movff	exp@x+1,___ftdiv@f2+1
  2744  0011B2  C0B6  F02D         	movff	exp@x+2,___ftdiv@f2+2
  2745  0011B6  ECB7  F00A         	call	___ftdiv	;wreg free
  2746  0011BA  C028  F0B4         	movff	?___ftdiv,?_exp
  2747  0011BE  C029  F0B5         	movff	?___ftdiv+1,?_exp+1
  2748  0011C2  C02A  F0B6         	movff	?___ftdiv+2,?_exp+2
  2749  0011C6  0012               	return	
  2750  0011C8                     l580:
  2751                           
  2752                           ; BSR set to: 0
  2753  0011C8  C0B4  F0B4         	movff	exp@x,?_exp
  2754  0011CC  C0B5  F0B5         	movff	exp@x+1,?_exp+1
  2755  0011D0  C0B6  F0B6         	movff	exp@x+2,?_exp+2
  2756  0011D4  0012               	return		;funcret
  2757  0011D6                     __end_of_exp:
  2758                           	opt stack 0
  2759                           tblptru	equ	0xFF8
  2760                           tblptrh	equ	0xFF7
  2761                           tblptrl	equ	0xFF6
  2762                           tablat	equ	0xFF5
  2763                           prodh	equ	0xFF4
  2764                           prodl	equ	0xFF3
  2765                           intcon	equ	0xFF2
  2766                           postinc0	equ	0xFEE
  2767                           wreg	equ	0xFE8
  2768                           indf1	equ	0xFE7
  2769                           postdec1	equ	0xFE5
  2770                           fsr1h	equ	0xFE2
  2771                           fsr1l	equ	0xFE1
  2772                           indf2	equ	0xFDF
  2773                           fsr2h	equ	0xFDA
  2774                           fsr2l	equ	0xFD9
  2775                           status	equ	0xFD8
  2776                           
  2777 ;; *************** function _ldexp *****************
  2778 ;; Defined at:
  2779 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  2780 ;; Parameters:    Size  Location     Type
  2781 ;;  value           3   45[BANK0 ] unsigned char 
  2782 ;;  newexp          2   48[BANK0 ] int 
  2783 ;; Auto vars:     Size  Location     Type
  2784 ;;		None
  2785 ;; Return value:  Size  Location     Type
  2786 ;;                  3   45[BANK0 ] int 
  2787 ;; Registers used:
  2788 ;;		wreg, status,2, status,0
  2789 ;; Tracked objects:
  2790 ;;		On entry : 0/0
  2791 ;;		On exit  : 0/0
  2792 ;;		Unchanged: 0/0
  2793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2794 ;;      Params:         0       5       0       0       0       0       0
  2795 ;;      Locals:         0       0       0       0       0       0       0
  2796 ;;      Temps:          0       2       0       0       0       0       0
  2797 ;;      Totals:         0       7       0       0       0       0       0
  2798 ;;Total ram usage:        7 bytes
  2799 ;; Hardware stack levels used:    1
  2800 ;; Hardware stack levels required when called:    2
  2801 ;; This function calls:
  2802 ;;		Nothing
  2803 ;; This function is called by:
  2804 ;;		_exp
  2805 ;; This function uses a non-reentrant model
  2806 ;;
  2807                           
  2808                           	psect	text2
  2809  001810                     __ptext2:
  2810                           	opt stack 0
  2811  001810                     _ldexp:
  2812                           	opt stack 27
  2813                           
  2814                           ;incstack = 0
  2815  001810  0100               	movlb	0	; () banked
  2816  001812  51AD               	movf	ldexp@value& (0+255),w,b
  2817  001814  11AE               	iorwf	(ldexp@value+1)& (0+255),w,b
  2818  001816  11AF               	iorwf	(ldexp@value+2)& (0+255),w,b
  2819  001818  A4D8               	btfss	status,2,c
  2820  00181A  D007               	goto	l643
  2821                           
  2822                           ; BSR set to: 0
  2823  00181C  0E00               	movlw	0
  2824  00181E  6FAD               	movwf	?_ldexp& (0+255),b
  2825  001820  0E00               	movlw	0
  2826  001822  6FAE               	movwf	(?_ldexp+1)& (0+255),b
  2827  001824  0E00               	movlw	0
  2828  001826  6FAF               	movwf	(?_ldexp+2)& (0+255),b
  2829                           
  2830                           ; BSR set to: 0
  2831  001828  0012               	return	
  2832  00182A                     l643:
  2833                           
  2834                           ; BSR set to: 0
  2835                           
  2836                           ; BSR set to: 0
  2837  00182A  51AF               	movf	(ldexp@value+2)& (0+255),w,b
  2838  00182C  0B7F               	andlw	127
  2839  00182E  6FB2               	movwf	??_ldexp& (0+255),b
  2840  001830  6BB3               	clrf	(??_ldexp+1)& (0+255),b
  2841  001832  90D8               	bcf	status,0,c
  2842  001834  37B2               	rlcf	??_ldexp& (0+255),f,b
  2843  001836  37B3               	rlcf	(??_ldexp+1)& (0+255),f,b
  2844  001838  51B2               	movf	??_ldexp& (0+255),w,b
  2845  00183A  27B0               	addwf	ldexp@newexp& (0+255),f,b
  2846  00183C  51B3               	movf	(??_ldexp+1)& (0+255),w,b
  2847  00183E  23B1               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  2848  001840  AFAE               	btfss	(ldexp@value+1)& (0+255),7,b
  2849  001842  D003               	goto	u2010
  2850  001844  6BB2               	clrf	??_ldexp& (0+255),b
  2851  001846  2BB2               	incf	??_ldexp& (0+255),f,b
  2852  001848  D002               	goto	u2018
  2853  00184A                     u2010:
  2854  00184A  0100               	movlb	0	; () banked
  2855  00184C  6BB2               	clrf	??_ldexp& (0+255),b
  2856  00184E                     u2018:
  2857  00184E  51B2               	movf	??_ldexp& (0+255),w,b
  2858  001850  27B0               	addwf	ldexp@newexp& (0+255),f,b
  2859  001852  0E00               	movlw	0
  2860  001854  23B1               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  2861  001856  AFB1               	btfss	(ldexp@newexp+1)& (0+255),7,b
  2862  001858  D00B               	goto	l645
  2863                           
  2864                           ; BSR set to: 0
  2865  00185A  0E00               	movlw	0
  2866  00185C  6FD3               	movwf	(_errno+1)& (0+255),b
  2867  00185E  0E22               	movlw	34
  2868  001860  6FD2               	movwf	_errno& (0+255),b
  2869  001862  0E00               	movlw	0
  2870  001864  6FAD               	movwf	?_ldexp& (0+255),b
  2871  001866  0E00               	movlw	0
  2872  001868  6FAE               	movwf	(?_ldexp+1)& (0+255),b
  2873  00186A  0E00               	movlw	0
  2874  00186C                     L1:
  2875  00186C  6FAF               	movwf	(?_ldexp+2)& (0+255),b
  2876                           
  2877                           ; BSR set to: 0
  2878  00186E  0012               	return	
  2879  001870                     l645:
  2880                           
  2881                           ; BSR set to: 0
  2882                           
  2883                           ; BSR set to: 0
  2884  001870  BFB1               	btfsc	(ldexp@newexp+1)& (0+255),7,b
  2885  001872  D015               	goto	l647
  2886  001874  05B1               	decf	(ldexp@newexp+1)& (0+255),w,b
  2887  001876  A0D8               	btfss	status,0,c
  2888  001878  D012               	goto	l647
  2889                           
  2890                           ; BSR set to: 0
  2891  00187A  0E00               	movlw	0
  2892  00187C  6FD3               	movwf	(_errno+1)& (0+255),b
  2893  00187E  0E22               	movlw	34
  2894  001880  6FD2               	movwf	_errno& (0+255),b
  2895                           
  2896                           ; BSR set to: 0
  2897  001882  AFAF               	btfss	(ldexp@value+2)& (0+255),7,b
  2898  001884  D006               	goto	l648
  2899                           
  2900                           ; BSR set to: 0
  2901  001886  0EFF               	movlw	255
  2902  001888  6FAD               	movwf	?_ldexp& (0+255),b
  2903  00188A  0E7F               	movlw	127
  2904  00188C  6FAE               	movwf	(?_ldexp+1)& (0+255),b
  2905  00188E  0EFF               	movlw	255
  2906  001890  D7ED               	goto	L1
  2907  001892                     l648:
  2908                           
  2909                           ; BSR set to: 0
  2910                           
  2911                           ; BSR set to: 0
  2912  001892  0EFF               	movlw	255
  2913  001894  6FAD               	movwf	?_ldexp& (0+255),b
  2914  001896  0E7F               	movlw	127
  2915  001898  6FAE               	movwf	(?_ldexp+1)& (0+255),b
  2916  00189A  0E7F               	movlw	127
  2917  00189C  D7E7               	goto	L1
  2918  00189E                     l647:
  2919                           
  2920                           ; BSR set to: 0
  2921                           
  2922                           ; BSR set to: 0
  2923  00189E  35B1               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  2924  0018A0  31B1               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  2925  0018A2  6FB3               	movwf	(??_ldexp+1)& (0+255),b
  2926  0018A4  31B0               	rrcf	ldexp@newexp& (0+255),w,b
  2927  0018A6  6FB2               	movwf	??_ldexp& (0+255),b
  2928  0018A8  51AF               	movf	(ldexp@value+2)& (0+255),w,b
  2929  0018AA  19B2               	xorwf	??_ldexp& (0+255),w,b
  2930  0018AC  0B80               	andlw	-128
  2931  0018AE  19B2               	xorwf	??_ldexp& (0+255),w,b
  2932  0018B0  6FAF               	movwf	(ldexp@value+2)& (0+255),b
  2933  0018B2  C0B0  F0B2         	movff	ldexp@newexp,??_ldexp
  2934  0018B6  0E01               	movlw	1
  2935  0018B8  17B2               	andwf	??_ldexp& (0+255),f,b
  2936  0018BA  33B2               	rrcf	??_ldexp& (0+255),f,b
  2937  0018BC  33B2               	rrcf	??_ldexp& (0+255),f,b
  2938  0018BE  51AE               	movf	(ldexp@value+1)& (0+255),w,b
  2939  0018C0  19B2               	xorwf	??_ldexp& (0+255),w,b
  2940  0018C2  0B7F               	andlw	-129
  2941  0018C4  19B2               	xorwf	??_ldexp& (0+255),w,b
  2942  0018C6  6FAE               	movwf	(ldexp@value+1)& (0+255),b
  2943                           
  2944                           ; BSR set to: 0
  2945                           
  2946                           ; BSR set to: 0
  2947                           
  2948                           ; BSR set to: 0
  2949  0018C8  C0AD  F0AD         	movff	ldexp@value,?_ldexp
  2950  0018CC  C0AE  F0AE         	movff	ldexp@value+1,?_ldexp+1
  2951  0018D0  C0AF  F0AF         	movff	ldexp@value+2,?_ldexp+2
  2952  0018D4  0012               	return	
  2953  0018D6                     __end_of_ldexp:
  2954                           	opt stack 0
  2955                           tblptru	equ	0xFF8
  2956                           tblptrh	equ	0xFF7
  2957                           tblptrl	equ	0xFF6
  2958                           tablat	equ	0xFF5
  2959                           prodh	equ	0xFF4
  2960                           prodl	equ	0xFF3
  2961                           intcon	equ	0xFF2
  2962                           postinc0	equ	0xFEE
  2963                           wreg	equ	0xFE8
  2964                           indf1	equ	0xFE7
  2965                           postdec1	equ	0xFE5
  2966                           fsr1h	equ	0xFE2
  2967                           fsr1l	equ	0xFE1
  2968                           indf2	equ	0xFDF
  2969                           fsr2h	equ	0xFDA
  2970                           fsr2l	equ	0xFD9
  2971                           status	equ	0xFD8
  2972                           
  2973 ;; *************** function _floor *****************
  2974 ;; Defined at:
  2975 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
  2976 ;; Parameters:    Size  Location     Type
  2977 ;;  x               3   33[BANK0 ] int 
  2978 ;; Auto vars:     Size  Location     Type
  2979 ;;  i               3   36[BANK0 ] int 
  2980 ;;  expon           2   39[BANK0 ] int 
  2981 ;; Return value:  Size  Location     Type
  2982 ;;                  3   33[BANK0 ] int 
  2983 ;; Registers used:
  2984 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2985 ;; Tracked objects:
  2986 ;;		On entry : 0/0
  2987 ;;		On exit  : 0/0
  2988 ;;		Unchanged: 0/0
  2989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2990 ;;      Params:         0       3       0       0       0       0       0
  2991 ;;      Locals:         0       5       0       0       0       0       0
  2992 ;;      Temps:          0       0       0       0       0       0       0
  2993 ;;      Totals:         0       8       0       0       0       0       0
  2994 ;;Total ram usage:        8 bytes
  2995 ;; Hardware stack levels used:    1
  2996 ;; Hardware stack levels required when called:    4
  2997 ;; This function calls:
  2998 ;;		___altoft
  2999 ;;		___ftadd
  3000 ;;		___ftge
  3001 ;;		___fttol
  3002 ;;		_frexp
  3003 ;; This function is called by:
  3004 ;;		_exp
  3005 ;; This function uses a non-reentrant model
  3006 ;;
  3007                           
  3008                           	psect	text3
  3009  001654                     __ptext3:
  3010                           	opt stack 0
  3011  001654                     _floor:
  3012                           	opt stack 25
  3013                           
  3014                           ; BSR set to: 0
  3015                           ;incstack = 0
  3016  001654  C0A1  F020         	movff	floor@x,frexp@value
  3017  001658  C0A2  F021         	movff	floor@x+1,frexp@value+1
  3018  00165C  C0A3  F022         	movff	floor@x+2,frexp@value+2
  3019  001660  0EA7               	movlw	low floor@expon
  3020  001662  6E23               	movwf	frexp@eptr,c
  3021  001664  0E00               	movlw	high floor@expon
  3022  001666  6E24               	movwf	frexp@eptr+1,c
  3023  001668  ECD4  F00D         	call	_frexp	;wreg free
  3024  00166C  0100               	movlb	0	; () banked
  3025  00166E  AFA8               	btfss	(floor@expon+1)& (0+255),7,b
  3026  001670  D010               	goto	l616
  3027                           
  3028                           ; BSR set to: 0
  3029  001672  AFA3               	btfss	(floor@x+2)& (0+255),7,b
  3030  001674  D007               	goto	l617
  3031                           
  3032                           ; BSR set to: 0
  3033  001676  0E00               	movlw	0
  3034  001678  6FA1               	movwf	?_floor& (0+255),b
  3035  00167A  0E80               	movlw	128
  3036  00167C  6FA2               	movwf	(?_floor+1)& (0+255),b
  3037  00167E  0EBF               	movlw	191
  3038  001680  6FA3               	movwf	(?_floor+2)& (0+255),b
  3039                           
  3040                           ; BSR set to: 0
  3041  001682  0012               	return	
  3042  001684                     l617:
  3043                           
  3044                           ; BSR set to: 0
  3045                           
  3046                           ; BSR set to: 0
  3047  001684  0E00               	movlw	0
  3048  001686  6FA1               	movwf	?_floor& (0+255),b
  3049  001688  0E00               	movlw	0
  3050  00168A  6FA2               	movwf	(?_floor+1)& (0+255),b
  3051  00168C  0E00               	movlw	0
  3052  00168E  6FA3               	movwf	(?_floor+2)& (0+255),b
  3053                           
  3054                           ; BSR set to: 0
  3055  001690  0012               	return	
  3056  001692                     l616:
  3057                           
  3058                           ; BSR set to: 0
  3059                           
  3060                           ; BSR set to: 0
  3061  001692  51A8               	movf	(floor@expon+1)& (0+255),w,b
  3062  001694  E104               	bnz	u3190
  3063  001696  0E15               	movlw	21
  3064  001698  5DA7               	subwf	floor@expon& (0+255),w,b
  3065  00169A  A0D8               	btfss	status,0,c
  3066  00169C  D007               	goto	l619
  3067  00169E                     u3190:
  3068                           
  3069                           ; BSR set to: 0
  3070  00169E  C0A1  F0A1         	movff	floor@x,?_floor
  3071  0016A2  C0A2  F0A2         	movff	floor@x+1,?_floor+1
  3072  0016A6  C0A3  F0A3         	movff	floor@x+2,?_floor+2
  3073  0016AA  0012               	return	
  3074  0016AC                     l619:
  3075                           
  3076                           ; BSR set to: 0
  3077                           
  3078                           ; BSR set to: 0
  3079  0016AC  C0A1  F037         	movff	floor@x,___fttol@f1
  3080  0016B0  C0A2  F038         	movff	floor@x+1,___fttol@f1+1
  3081  0016B4  C0A3  F039         	movff	floor@x+2,___fttol@f1+2
  3082  0016B8  EC3D  F00A         	call	___fttol	;wreg free
  3083  0016BC  C037  F080         	movff	?___fttol,___altoft@c
  3084  0016C0  C038  F081         	movff	?___fttol+1,___altoft@c+1
  3085  0016C4  C039  F082         	movff	?___fttol+2,___altoft@c+2
  3086  0016C8  C03A  F083         	movff	?___fttol+3,___altoft@c+3
  3087  0016CC  EC97  F00D         	call	___altoft	;wreg free
  3088  0016D0  C080  F0A4         	movff	?___altoft,floor@i
  3089  0016D4  C081  F0A5         	movff	?___altoft+1,floor@i+1
  3090  0016D8  C082  F0A6         	movff	?___altoft+2,floor@i+2
  3091  0016DC  C0A1  F020         	movff	floor@x,___ftge@ff1
  3092  0016E0  C0A2  F021         	movff	floor@x+1,___ftge@ff1+1
  3093  0016E4  C0A3  F022         	movff	floor@x+2,___ftge@ff1+2
  3094  0016E8  C0A4  F023         	movff	floor@i,___ftge@ff2
  3095  0016EC  C0A5  F024         	movff	floor@i+1,___ftge@ff2+1
  3096  0016F0  C0A6  F025         	movff	floor@i+2,___ftge@ff2+2
  3097  0016F4  EC0D  F00D         	call	___ftge	;wreg free
  3098  0016F8  B0D8               	btfsc	status,0,c
  3099  0016FA  D016               	goto	l620
  3100  0016FC  C0A4  F095         	movff	floor@i,___ftadd@f1
  3101  001700  C0A5  F096         	movff	floor@i+1,___ftadd@f1+1
  3102  001704  C0A6  F097         	movff	floor@i+2,___ftadd@f1+2
  3103  001708  0E00               	movlw	0
  3104  00170A  0100               	movlb	0	; () banked
  3105  00170C  6F98               	movwf	___ftadd@f2& (0+255),b
  3106  00170E  0E80               	movlw	128
  3107  001710  6F99               	movwf	(___ftadd@f2+1)& (0+255),b
  3108  001712  0EBF               	movlw	191
  3109  001714  6F9A               	movwf	(___ftadd@f2+2)& (0+255),b
  3110  001716  ECEB  F008         	call	___ftadd	;wreg free
  3111  00171A  C095  F0A1         	movff	?___ftadd,?_floor
  3112  00171E  C096  F0A2         	movff	?___ftadd+1,?_floor+1
  3113  001722  C097  F0A3         	movff	?___ftadd+2,?_floor+2
  3114  001726  0012               	return	
  3115  001728                     l620:
  3116  001728  C0A4  F0A1         	movff	floor@i,?_floor
  3117  00172C  C0A5  F0A2         	movff	floor@i+1,?_floor+1
  3118  001730  C0A6  F0A3         	movff	floor@i+2,?_floor+2
  3119  001734  0012               	return		;funcret
  3120  001736                     __end_of_floor:
  3121                           	opt stack 0
  3122                           tblptru	equ	0xFF8
  3123                           tblptrh	equ	0xFF7
  3124                           tblptrl	equ	0xFF6
  3125                           tablat	equ	0xFF5
  3126                           prodh	equ	0xFF4
  3127                           prodl	equ	0xFF3
  3128                           intcon	equ	0xFF2
  3129                           postinc0	equ	0xFEE
  3130                           wreg	equ	0xFE8
  3131                           indf1	equ	0xFE7
  3132                           postdec1	equ	0xFE5
  3133                           fsr1h	equ	0xFE2
  3134                           fsr1l	equ	0xFE1
  3135                           indf2	equ	0xFDF
  3136                           fsr2h	equ	0xFDA
  3137                           fsr2l	equ	0xFD9
  3138                           status	equ	0xFD8
  3139                           
  3140 ;; *************** function _frexp *****************
  3141 ;; Defined at:
  3142 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  3143 ;; Parameters:    Size  Location     Type
  3144 ;;  value           3   31[COMRAM] int 
  3145 ;;  eptr            2   34[COMRAM] PTR int 
  3146 ;;		 -> floor@expon(2), 
  3147 ;; Auto vars:     Size  Location     Type
  3148 ;;		None
  3149 ;; Return value:  Size  Location     Type
  3150 ;;                  3   31[COMRAM] PTR int 
  3151 ;; Registers used:
  3152 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3153 ;; Tracked objects:
  3154 ;;		On entry : 0/0
  3155 ;;		On exit  : 0/0
  3156 ;;		Unchanged: 0/0
  3157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3158 ;;      Params:         5       0       0       0       0       0       0
  3159 ;;      Locals:         0       0       0       0       0       0       0
  3160 ;;      Temps:          2       0       0       0       0       0       0
  3161 ;;      Totals:         7       0       0       0       0       0       0
  3162 ;;Total ram usage:        7 bytes
  3163 ;; Hardware stack levels used:    1
  3164 ;; Hardware stack levels required when called:    2
  3165 ;; This function calls:
  3166 ;;		Nothing
  3167 ;; This function is called by:
  3168 ;;		_floor
  3169 ;; This function uses a non-reentrant model
  3170 ;;
  3171                           
  3172                           	psect	text4
  3173  001BA8                     __ptext4:
  3174                           	opt stack 0
  3175  001BA8                     _frexp:
  3176                           	opt stack 26
  3177                           
  3178                           ;incstack = 0
  3179  001BA8  5020               	movf	frexp@value,w,c
  3180  001BAA  1021               	iorwf	frexp@value+1,w,c
  3181  001BAC  1022               	iorwf	frexp@value+2,w,c
  3182  001BAE  A4D8               	btfss	status,2,c
  3183  001BB0  D009               	goto	l639
  3184  001BB2  C023  FFD9         	movff	frexp@eptr,fsr2l
  3185  001BB6  C024  FFDA         	movff	frexp@eptr+1,fsr2h
  3186  001BBA  0E00               	movlw	0
  3187  001BBC  6EDE               	movwf	postinc2,c
  3188  001BBE  0E00               	movlw	0
  3189  001BC0  6EDD               	movwf	postdec2,c
  3190                           
  3191                           ;	Return value of _frexp is never used
  3192  001BC2  0012               	return	
  3193  001BC4                     l639:
  3194  001BC4  5022               	movf	frexp@value+2,w,c
  3195  001BC6  0B7F               	andlw	127
  3196  001BC8  6E25               	movwf	??_frexp& (0+255),c
  3197  001BCA  6A26               	clrf	(??_frexp+1)& (0+255),c
  3198  001BCC  90D8               	bcf	status,0,c
  3199  001BCE  3625               	rlcf	??_frexp,f,c
  3200  001BD0  3626               	rlcf	??_frexp+1,f,c
  3201  001BD2  C023  FFD9         	movff	frexp@eptr,fsr2l
  3202  001BD6  C024  FFDA         	movff	frexp@eptr+1,fsr2h
  3203  001BDA  C025  FFDE         	movff	??_frexp,postinc2
  3204  001BDE  C026  FFDD         	movff	??_frexp+1,postdec2
  3205  001BE2  AE21               	btfss	frexp@value+1,7,c
  3206  001BE4  D003               	goto	u1750
  3207  001BE6  6A25               	clrf	??_frexp& (0+255),c
  3208  001BE8  2A25               	incf	??_frexp& (0+255),f,c
  3209  001BEA  D001               	goto	u1758
  3210  001BEC                     u1750:
  3211  001BEC  6A25               	clrf	??_frexp& (0+255),c
  3212  001BEE                     u1758:
  3213  001BEE  5025               	movf	??_frexp,w,c
  3214  001BF0  C023  FFD9         	movff	frexp@eptr,fsr2l
  3215  001BF4  C024  FFDA         	movff	frexp@eptr+1,fsr2h
  3216  001BF8  12DE               	iorwf	postinc2,f,c
  3217  001BFA  0E00               	movlw	0
  3218  001BFC  12DD               	iorwf	postdec2,f,c
  3219  001BFE  C023  FFD9         	movff	frexp@eptr,fsr2l
  3220  001C02  C024  FFDA         	movff	frexp@eptr+1,fsr2h
  3221  001C06  0E82               	movlw	130
  3222  001C08  26DE               	addwf	postinc2,f,c
  3223  001C0A  0EFF               	movlw	255
  3224  001C0C  22DD               	addwfc	postdec2,f,c
  3225  001C0E  8022               	bsf	frexp@value+2,0,c
  3226  001C10  8222               	bsf	frexp@value+2,1,c
  3227  001C12  8422               	bsf	frexp@value+2,2,c
  3228  001C14  8622               	bsf	frexp@value+2,3,c
  3229  001C16  8822               	bsf	frexp@value+2,4,c
  3230  001C18  8A22               	bsf	frexp@value+2,5,c
  3231  001C1A  9C22               	bcf	frexp@value+2,6,c
  3232  001C1C  9E21               	bcf	frexp@value+1,7,c
  3233  001C1E  0012               	return	
  3234  001C20                     __end_of_frexp:
  3235                           	opt stack 0
  3236                           tblptru	equ	0xFF8
  3237                           tblptrh	equ	0xFF7
  3238                           tblptrl	equ	0xFF6
  3239                           tablat	equ	0xFF5
  3240                           prodh	equ	0xFF4
  3241                           prodl	equ	0xFF3
  3242                           intcon	equ	0xFF2
  3243                           postinc0	equ	0xFEE
  3244                           wreg	equ	0xFE8
  3245                           indf1	equ	0xFE7
  3246                           postdec1	equ	0xFE5
  3247                           fsr1h	equ	0xFE2
  3248                           fsr1l	equ	0xFE1
  3249                           indf2	equ	0xFDF
  3250                           postinc2	equ	0xFDE
  3251                           postdec2	equ	0xFDD
  3252                           fsr2h	equ	0xFDA
  3253                           fsr2l	equ	0xFD9
  3254                           status	equ	0xFD8
  3255                           
  3256 ;; *************** function ___fttol *****************
  3257 ;; Defined at:
  3258 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  3259 ;; Parameters:    Size  Location     Type
  3260 ;;  f1              3   54[COMRAM] float 
  3261 ;; Auto vars:     Size  Location     Type
  3262 ;;  lval            4   64[COMRAM] unsigned long 
  3263 ;;  exp1            1   68[COMRAM] unsigned char 
  3264 ;;  sign1           1   63[COMRAM] unsigned char 
  3265 ;; Return value:  Size  Location     Type
  3266 ;;                  4   54[COMRAM] long 
  3267 ;; Registers used:
  3268 ;;		wreg, status,2, status,0
  3269 ;; Tracked objects:
  3270 ;;		On entry : 0/0
  3271 ;;		On exit  : 0/0
  3272 ;;		Unchanged: 0/0
  3273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3274 ;;      Params:         4       0       0       0       0       0       0
  3275 ;;      Locals:         6       0       0       0       0       0       0
  3276 ;;      Temps:          5       0       0       0       0       0       0
  3277 ;;      Totals:        15       0       0       0       0       0       0
  3278 ;;Total ram usage:       15 bytes
  3279 ;; Hardware stack levels used:    1
  3280 ;; Hardware stack levels required when called:    2
  3281 ;; This function calls:
  3282 ;;		Nothing
  3283 ;; This function is called by:
  3284 ;;		_main
  3285 ;;		_exp
  3286 ;;		_floor
  3287 ;; This function uses a non-reentrant model
  3288 ;;
  3289                           
  3290                           	psect	text5
  3291  00147A                     __ptext5:
  3292                           	opt stack 0
  3293  00147A                     ___fttol:
  3294                           	opt stack 26
  3295                           
  3296                           ;incstack = 0
  3297  00147A  C039  F03B         	movff	___fttol@f1+2,??___fttol
  3298  00147E  6A3C               	clrf	(??___fttol+1)& (0+255),c
  3299  001480  6A3D               	clrf	(??___fttol+2)& (0+255),c
  3300  001482  3438               	rlcf	___fttol@f1+1,w,c
  3301  001484  363B               	rlcf	??___fttol& (0+255),f,c
  3302  001486  E301               	bnc	u1791
  3303  001488  803C               	bsf	(??___fttol+1)& (0+255),0,c
  3304  00148A                     u1791:
  3305  00148A  503B               	movf	??___fttol,w,c
  3306  00148C  6E45               	movwf	___fttol@exp1,c
  3307  00148E  5045               	movf	___fttol@exp1,w,c
  3308  001490  A4D8               	btfss	status,2,c
  3309  001492  D009               	goto	l724
  3310  001494  0E00               	movlw	0
  3311  001496  6E37               	movwf	?___fttol,c
  3312  001498  0E00               	movlw	0
  3313  00149A  6E38               	movwf	?___fttol+1,c
  3314  00149C  0E00               	movlw	0
  3315  00149E  6E39               	movwf	?___fttol+2,c
  3316  0014A0  0E00               	movlw	0
  3317  0014A2  6E3A               	movwf	?___fttol+3,c
  3318  0014A4  0012               	return	
  3319  0014A6                     l724:
  3320  0014A6  0E17               	movlw	23
  3321  0014A8  6E3B               	movwf	??___fttol& (0+255),c
  3322  0014AA  C037  F03C         	movff	___fttol@f1,??___fttol+1
  3323  0014AE  C038  F03D         	movff	___fttol@f1+1,??___fttol+2
  3324  0014B2  C039  F03E         	movff	___fttol@f1+2,??___fttol+3
  3325  0014B6  283B               	incf	??___fttol,w,c
  3326  0014B8  6E3F               	movwf	(??___fttol+4)& (0+255),c
  3327  0014BA  D004               	goto	u1810
  3328  0014BC                     u1815:
  3329  0014BC  90D8               	bcf	status,0,c
  3330  0014BE  323E               	rrcf	??___fttol+3,f,c
  3331  0014C0  323D               	rrcf	??___fttol+2,f,c
  3332  0014C2  323C               	rrcf	??___fttol+1,f,c
  3333  0014C4                     u1810:
  3334  0014C4  2E3F               	decfsz	(??___fttol+4)& (0+255),f,c
  3335  0014C6  D7FA               	goto	u1815
  3336  0014C8  503C               	movf	??___fttol+1,w,c
  3337  0014CA  6E40               	movwf	___fttol@sign1,c
  3338  0014CC  8E38               	bsf	___fttol@f1+1,7,c
  3339  0014CE  0EFF               	movlw	255
  3340  0014D0  1637               	andwf	___fttol@f1,f,c
  3341  0014D2  0EFF               	movlw	255
  3342  0014D4  1638               	andwf	___fttol@f1+1,f,c
  3343  0014D6  0E00               	movlw	0
  3344  0014D8  1639               	andwf	___fttol@f1+2,f,c
  3345  0014DA  5037               	movf	___fttol@f1,w,c
  3346  0014DC  6E41               	movwf	___fttol@lval,c
  3347  0014DE  5038               	movf	___fttol@f1+1,w,c
  3348  0014E0  6E42               	movwf	___fttol@lval+1,c
  3349  0014E2  5039               	movf	___fttol@f1+2,w,c
  3350  0014E4  6E43               	movwf	___fttol@lval+2,c
  3351  0014E6  6A44               	clrf	___fttol@lval+3,c
  3352  0014E8  0E8E               	movlw	142
  3353  0014EA  5E45               	subwf	___fttol@exp1,f,c
  3354  0014EC  AE45               	btfss	___fttol@exp1,7,c
  3355  0014EE  D016               	goto	l726
  3356  0014F0  5045               	movf	___fttol@exp1,w,c
  3357  0014F2  0A80               	xorlw	128
  3358  0014F4  0F8F               	addlw	143
  3359  0014F6  B0D8               	btfsc	status,0,c
  3360  0014F8  D009               	goto	l727
  3361  0014FA  0E00               	movlw	0
  3362  0014FC  6E37               	movwf	?___fttol,c
  3363  0014FE  0E00               	movlw	0
  3364  001500  6E38               	movwf	?___fttol+1,c
  3365  001502  0E00               	movlw	0
  3366  001504  6E39               	movwf	?___fttol+2,c
  3367  001506  0E00               	movlw	0
  3368  001508  6E3A               	movwf	?___fttol+3,c
  3369  00150A  0012               	return	
  3370  00150C                     l727:
  3371  00150C  90D8               	bcf	status,0,c
  3372  00150E  3244               	rrcf	___fttol@lval+3,f,c
  3373  001510  3243               	rrcf	___fttol@lval+2,f,c
  3374  001512  3242               	rrcf	___fttol@lval+1,f,c
  3375  001514  3241               	rrcf	___fttol@lval,f,c
  3376  001516  3E45               	incfsz	___fttol@exp1,f,c
  3377  001518  D7F9               	goto	l727
  3378  00151A  D015               	goto	u1850
  3379  00151C                     l726:
  3380  00151C  0E17               	movlw	23
  3381  00151E  6445               	cpfsgt	___fttol@exp1,c
  3382  001520  D00F               	goto	l732
  3383  001522  0E00               	movlw	0
  3384  001524  6E37               	movwf	?___fttol,c
  3385  001526  0E00               	movlw	0
  3386  001528  6E38               	movwf	?___fttol+1,c
  3387  00152A  0E00               	movlw	0
  3388  00152C  6E39               	movwf	?___fttol+2,c
  3389  00152E  0E00               	movlw	0
  3390  001530  6E3A               	movwf	?___fttol+3,c
  3391  001532  0012               	return	
  3392  001534  90D8               	bcf	status,0,c
  3393  001536  3641               	rlcf	___fttol@lval,f,c
  3394  001538  3642               	rlcf	___fttol@lval+1,f,c
  3395  00153A  3643               	rlcf	___fttol@lval+2,f,c
  3396  00153C  3644               	rlcf	___fttol@lval+3,f,c
  3397  00153E  0645               	decf	___fttol@exp1,f,c
  3398  001540                     l732:
  3399  001540  5045               	movf	___fttol@exp1,w,c
  3400  001542  A4D8               	btfss	status,2,c
  3401  001544  D7F7               	goto	l733
  3402  001546                     u1850:
  3403  001546  5040               	movf	___fttol@sign1,w,c
  3404  001548  B4D8               	btfsc	status,2,c
  3405  00154A  D008               	goto	l735
  3406  00154C  1E44               	comf	___fttol@lval+3,f,c
  3407  00154E  1E43               	comf	___fttol@lval+2,f,c
  3408  001550  1E42               	comf	___fttol@lval+1,f,c
  3409  001552  6C41               	negf	___fttol@lval,c
  3410  001554  0E00               	movlw	0
  3411  001556  2242               	addwfc	___fttol@lval+1,f,c
  3412  001558  2243               	addwfc	___fttol@lval+2,f,c
  3413  00155A  2244               	addwfc	___fttol@lval+3,f,c
  3414  00155C                     l735:
  3415  00155C  C041  F037         	movff	___fttol@lval,?___fttol
  3416  001560  C042  F038         	movff	___fttol@lval+1,?___fttol+1
  3417  001564  C043  F039         	movff	___fttol@lval+2,?___fttol+2
  3418  001568  C044  F03A         	movff	___fttol@lval+3,?___fttol+3
  3419  00156C  0012               	return	
  3420  00156E                     __end_of___fttol:
  3421                           	opt stack 0
  3422                           tblptru	equ	0xFF8
  3423                           tblptrh	equ	0xFF7
  3424                           tblptrl	equ	0xFF6
  3425                           tablat	equ	0xFF5
  3426                           prodh	equ	0xFF4
  3427                           prodl	equ	0xFF3
  3428                           intcon	equ	0xFF2
  3429                           postinc0	equ	0xFEE
  3430                           wreg	equ	0xFE8
  3431                           indf1	equ	0xFE7
  3432                           postdec1	equ	0xFE5
  3433                           fsr1h	equ	0xFE2
  3434                           fsr1l	equ	0xFE1
  3435                           indf2	equ	0xFDF
  3436                           postinc2	equ	0xFDE
  3437                           postdec2	equ	0xFDD
  3438                           fsr2h	equ	0xFDA
  3439                           fsr2l	equ	0xFD9
  3440                           status	equ	0xFD8
  3441                           
  3442 ;; *************** function ___ftge *****************
  3443 ;; Defined at:
  3444 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  3445 ;; Parameters:    Size  Location     Type
  3446 ;;  ff1             3   31[COMRAM] float 
  3447 ;;  ff2             3   34[COMRAM] float 
  3448 ;; Auto vars:     Size  Location     Type
  3449 ;;		None
  3450 ;; Return value:  Size  Location     Type
  3451 ;;		None               void
  3452 ;; Registers used:
  3453 ;;		wreg, status,2, status,0
  3454 ;; Tracked objects:
  3455 ;;		On entry : 0/0
  3456 ;;		On exit  : 0/0
  3457 ;;		Unchanged: 0/0
  3458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3459 ;;      Params:         6       0       0       0       0       0       0
  3460 ;;      Locals:         0       0       0       0       0       0       0
  3461 ;;      Temps:          3       0       0       0       0       0       0
  3462 ;;      Totals:         9       0       0       0       0       0       0
  3463 ;;Total ram usage:        9 bytes
  3464 ;; Hardware stack levels used:    1
  3465 ;; Hardware stack levels required when called:    2
  3466 ;; This function calls:
  3467 ;;		Nothing
  3468 ;; This function is called by:
  3469 ;;		_main
  3470 ;;		_exp
  3471 ;;		_floor
  3472 ;; This function uses a non-reentrant model
  3473 ;;
  3474                           
  3475                           	psect	text6
  3476  001A1A                     __ptext6:
  3477                           	opt stack 0
  3478  001A1A                     ___ftge:
  3479                           	opt stack 26
  3480                           
  3481                           ;incstack = 0
  3482  001A1A  AE22               	btfss	___ftge@ff1+2,7,c
  3483  001A1C  D016               	goto	l696
  3484  001A1E  C020  F026         	movff	___ftge@ff1,??___ftge
  3485  001A22  C021  F027         	movff	___ftge@ff1+1,??___ftge+1
  3486  001A26  C022  F028         	movff	___ftge@ff1+2,??___ftge+2
  3487  001A2A  1E26               	comf	??___ftge,f,c
  3488  001A2C  1E27               	comf	??___ftge+1,f,c
  3489  001A2E  1E28               	comf	??___ftge+2,f,c
  3490  001A30  2A26               	incf	??___ftge,f,c
  3491  001A32  0E00               	movlw	0
  3492  001A34  2227               	addwfc	??___ftge+1,f,c
  3493  001A36  2228               	addwfc	??___ftge+2,f,c
  3494  001A38  0E00               	movlw	0
  3495  001A3A  2426               	addwf	??___ftge,w,c
  3496  001A3C  6E20               	movwf	___ftge@ff1,c
  3497  001A3E  0E00               	movlw	0
  3498  001A40  2027               	addwfc	??___ftge+1,w,c
  3499  001A42  6E21               	movwf	___ftge@ff1+1,c
  3500  001A44  0E80               	movlw	128
  3501  001A46  2028               	addwfc	??___ftge+2,w,c
  3502  001A48  6E22               	movwf	___ftge@ff1+2,c
  3503  001A4A                     l696:
  3504  001A4A  AE25               	btfss	___ftge@ff2+2,7,c
  3505  001A4C  D016               	goto	l697
  3506  001A4E  C023  F026         	movff	___ftge@ff2,??___ftge
  3507  001A52  C024  F027         	movff	___ftge@ff2+1,??___ftge+1
  3508  001A56  C025  F028         	movff	___ftge@ff2+2,??___ftge+2
  3509  001A5A  1E26               	comf	??___ftge,f,c
  3510  001A5C  1E27               	comf	??___ftge+1,f,c
  3511  001A5E  1E28               	comf	??___ftge+2,f,c
  3512  001A60  2A26               	incf	??___ftge,f,c
  3513  001A62  0E00               	movlw	0
  3514  001A64  2227               	addwfc	??___ftge+1,f,c
  3515  001A66  2228               	addwfc	??___ftge+2,f,c
  3516  001A68  0E00               	movlw	0
  3517  001A6A  2426               	addwf	??___ftge,w,c
  3518  001A6C  6E23               	movwf	___ftge@ff2,c
  3519  001A6E  0E00               	movlw	0
  3520  001A70  2027               	addwfc	??___ftge+1,w,c
  3521  001A72  6E24               	movwf	___ftge@ff2+1,c
  3522  001A74  0E80               	movlw	128
  3523  001A76  2028               	addwfc	??___ftge+2,w,c
  3524  001A78  6E25               	movwf	___ftge@ff2+2,c
  3525  001A7A                     l697:
  3526  001A7A  0E00               	movlw	0
  3527  001A7C  1A20               	xorwf	___ftge@ff1,f,c
  3528  001A7E  0E00               	movlw	0
  3529  001A80  1A21               	xorwf	___ftge@ff1+1,f,c
  3530  001A82  0E80               	movlw	128
  3531  001A84  1A22               	xorwf	___ftge@ff1+2,f,c
  3532  001A86  0E00               	movlw	0
  3533  001A88  1A23               	xorwf	___ftge@ff2,f,c
  3534  001A8A  0E00               	movlw	0
  3535  001A8C  1A24               	xorwf	___ftge@ff2+1,f,c
  3536  001A8E  0E80               	movlw	128
  3537  001A90  1A25               	xorwf	___ftge@ff2+2,f,c
  3538  001A92  5023               	movf	___ftge@ff2,w,c
  3539  001A94  5C20               	subwf	___ftge@ff1,w,c
  3540  001A96  5024               	movf	___ftge@ff2+1,w,c
  3541  001A98  5821               	subwfb	___ftge@ff1+1,w,c
  3542  001A9A  5025               	movf	___ftge@ff2+2,w,c
  3543  001A9C  5822               	subwfb	___ftge@ff1+2,w,c
  3544  001A9E  B0D8               	btfsc	status,0,c
  3545  001AA0  D002               	goto	l2131
  3546  001AA2  90D8               	bcf	status,0,c
  3547  001AA4  0012               	return	
  3548  001AA6                     l2131:
  3549  001AA6  80D8               	bsf	status,0,c
  3550  001AA8  0012               	return	
  3551  001AAA                     __end_of___ftge:
  3552                           	opt stack 0
  3553                           tblptru	equ	0xFF8
  3554                           tblptrh	equ	0xFF7
  3555                           tblptrl	equ	0xFF6
  3556                           tablat	equ	0xFF5
  3557                           prodh	equ	0xFF4
  3558                           prodl	equ	0xFF3
  3559                           intcon	equ	0xFF2
  3560                           postinc0	equ	0xFEE
  3561                           wreg	equ	0xFE8
  3562                           indf1	equ	0xFE7
  3563                           postdec1	equ	0xFE5
  3564                           fsr1h	equ	0xFE2
  3565                           fsr1l	equ	0xFE1
  3566                           indf2	equ	0xFDF
  3567                           postinc2	equ	0xFDE
  3568                           postdec2	equ	0xFDD
  3569                           fsr2h	equ	0xFDA
  3570                           fsr2l	equ	0xFD9
  3571                           status	equ	0xFD8
  3572                           
  3573 ;; *************** function ___altoft *****************
  3574 ;; Defined at:
  3575 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
  3576 ;; Parameters:    Size  Location     Type
  3577 ;;  c               4    0[BANK0 ] long 
  3578 ;; Auto vars:     Size  Location     Type
  3579 ;;  sign            1   70[COMRAM] unsigned char 
  3580 ;;  exp             1   69[COMRAM] unsigned char 
  3581 ;; Return value:  Size  Location     Type
  3582 ;;                  3    0[BANK0 ] float 
  3583 ;; Registers used:
  3584 ;;		wreg, status,2, status,0, cstack
  3585 ;; Tracked objects:
  3586 ;;		On entry : 0/0
  3587 ;;		On exit  : 0/0
  3588 ;;		Unchanged: 0/0
  3589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3590 ;;      Params:         0       4       0       0       0       0       0
  3591 ;;      Locals:         2       0       0       0       0       0       0
  3592 ;;      Temps:          0       4       0       0       0       0       0
  3593 ;;      Totals:         2       8       0       0       0       0       0
  3594 ;;Total ram usage:       10 bytes
  3595 ;; Hardware stack levels used:    1
  3596 ;; Hardware stack levels required when called:    3
  3597 ;; This function calls:
  3598 ;;		___ftpack
  3599 ;; This function is called by:
  3600 ;;		_floor
  3601 ;; This function uses a non-reentrant model
  3602 ;;
  3603                           
  3604                           	psect	text7
  3605  001B2E                     __ptext7:
  3606                           	opt stack 0
  3607  001B2E                     ___altoft:
  3608                           	opt stack 25
  3609                           
  3610                           ;incstack = 0
  3611  001B2E  0E00               	movlw	0
  3612  001B30  6E47               	movwf	___altoft@sign,c
  3613  001B32  0E8E               	movlw	142
  3614  001B34  6E46               	movwf	___altoft@exp,c
  3615  001B36  0100               	movlb	0	; () banked
  3616  001B38  AF83               	btfss	(___altoft@c+3)& (0+255),7,b
  3617  001B3A  D011               	goto	l450
  3618                           
  3619                           ; BSR set to: 0
  3620  001B3C  1F83               	comf	(___altoft@c+3)& (0+255),f,b
  3621  001B3E  1F82               	comf	(___altoft@c+2)& (0+255),f,b
  3622  001B40  1F81               	comf	(___altoft@c+1)& (0+255),f,b
  3623  001B42  6D80               	negf	___altoft@c& (0+255),b
  3624  001B44  0E00               	movlw	0
  3625  001B46  2381               	addwfc	(___altoft@c+1)& (0+255),f,b
  3626  001B48  2382               	addwfc	(___altoft@c+2)& (0+255),f,b
  3627  001B4A  2383               	addwfc	(___altoft@c+3)& (0+255),f,b
  3628                           
  3629                           ; BSR set to: 0
  3630  001B4C  0E01               	movlw	1
  3631  001B4E  6E47               	movwf	___altoft@sign,c
  3632                           
  3633                           ; BSR set to: 0
  3634  001B50  D006               	goto	l450
  3635  001B52                     
  3636                           ; BSR set to: 0
  3637                           
  3638                           ; BSR set to: 0
  3639  001B52  90D8               	bcf	status,0,c
  3640  001B54  3383               	rrcf	(___altoft@c+3)& (0+255),f,b
  3641  001B56  3382               	rrcf	(___altoft@c+2)& (0+255),f,b
  3642  001B58  3381               	rrcf	(___altoft@c+1)& (0+255),f,b
  3643  001B5A  3380               	rrcf	___altoft@c& (0+255),f,b
  3644  001B5C  2A46               	incf	___altoft@exp,f,c
  3645  001B5E                     l450:
  3646                           
  3647                           ; BSR set to: 0
  3648                           
  3649                           ; BSR set to: 0
  3650  001B5E  0E00               	movlw	0
  3651  001B60  1580               	andwf	___altoft@c& (0+255),w,b
  3652  001B62  6F84               	movwf	??___altoft& (0+255),b
  3653  001B64  0E00               	movlw	0
  3654  001B66  1581               	andwf	(___altoft@c+1)& (0+255),w,b
  3655  001B68  6F85               	movwf	(??___altoft+1)& (0+255),b
  3656  001B6A  0E00               	movlw	0
  3657  001B6C  1582               	andwf	(___altoft@c+2)& (0+255),w,b
  3658  001B6E  6F86               	movwf	(??___altoft+2)& (0+255),b
  3659  001B70  0EFF               	movlw	255
  3660  001B72  1583               	andwf	(___altoft@c+3)& (0+255),w,b
  3661  001B74  6F87               	movwf	(??___altoft+3)& (0+255),b
  3662  001B76  5184               	movf	??___altoft& (0+255),w,b
  3663  001B78  1185               	iorwf	(??___altoft+1)& (0+255),w,b
  3664  001B7A  1186               	iorwf	(??___altoft+2)& (0+255),w,b
  3665  001B7C  1187               	iorwf	(??___altoft+3)& (0+255),w,b
  3666  001B7E  A4D8               	btfss	status,2,c
  3667  001B80  D7E8               	goto	l451
  3668                           
  3669                           ; BSR set to: 0
  3670                           
  3671                           ; BSR set to: 0
  3672  001B82  C080  F020         	movff	___altoft@c,___ftpack@arg
  3673  001B86  C081  F021         	movff	___altoft@c+1,___ftpack@arg+1
  3674  001B8A  C082  F022         	movff	___altoft@c+2,___ftpack@arg+2
  3675  001B8E  C046  F023         	movff	___altoft@exp,___ftpack@exp
  3676  001B92  C047  F024         	movff	___altoft@sign,___ftpack@sign
  3677  001B96  EC6B  F00C         	call	___ftpack	;wreg free
  3678  001B9A  C020  F080         	movff	?___ftpack,?___altoft
  3679  001B9E  C021  F081         	movff	?___ftpack+1,?___altoft+1
  3680  001BA2  C022  F082         	movff	?___ftpack+2,?___altoft+2
  3681  001BA6  0012               	return	
  3682  001BA8                     __end_of___altoft:
  3683                           	opt stack 0
  3684                           tblptru	equ	0xFF8
  3685                           tblptrh	equ	0xFF7
  3686                           tblptrl	equ	0xFF6
  3687                           tablat	equ	0xFF5
  3688                           prodh	equ	0xFF4
  3689                           prodl	equ	0xFF3
  3690                           intcon	equ	0xFF2
  3691                           postinc0	equ	0xFEE
  3692                           wreg	equ	0xFE8
  3693                           indf1	equ	0xFE7
  3694                           postdec1	equ	0xFE5
  3695                           fsr1h	equ	0xFE2
  3696                           fsr1l	equ	0xFE1
  3697                           indf2	equ	0xFDF
  3698                           postinc2	equ	0xFDE
  3699                           postdec2	equ	0xFDD
  3700                           fsr2h	equ	0xFDA
  3701                           fsr2l	equ	0xFD9
  3702                           status	equ	0xFD8
  3703                           
  3704 ;; *************** function _eval_poly *****************
  3705 ;; Defined at:
  3706 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
  3707 ;; Parameters:    Size  Location     Type
  3708 ;;  x               3   33[BANK0 ] float 
  3709 ;;  d               2   36[BANK0 ] PTR const 
  3710 ;;		 -> exp@coeff(30), 
  3711 ;;  n               2   38[BANK0 ] int 
  3712 ;; Auto vars:     Size  Location     Type
  3713 ;;  res             3   42[BANK0 ] int 
  3714 ;; Return value:  Size  Location     Type
  3715 ;;                  3   33[BANK0 ] int 
  3716 ;; Registers used:
  3717 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3718 ;; Tracked objects:
  3719 ;;		On entry : 0/0
  3720 ;;		On exit  : 0/0
  3721 ;;		Unchanged: 0/0
  3722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3723 ;;      Params:         0       7       0       0       0       0       0
  3724 ;;      Locals:         0       3       0       0       0       0       0
  3725 ;;      Temps:          0       2       0       0       0       0       0
  3726 ;;      Totals:         0      12       0       0       0       0       0
  3727 ;;Total ram usage:       12 bytes
  3728 ;; Hardware stack levels used:    1
  3729 ;; Hardware stack levels required when called:    4
  3730 ;; This function calls:
  3731 ;;		___ftadd
  3732 ;;		___ftmul
  3733 ;;		___wmul
  3734 ;; This function is called by:
  3735 ;;		_exp
  3736 ;; This function uses a non-reentrant model
  3737 ;;
  3738                           
  3739                           	psect	text8
  3740  001736                     __ptext8:
  3741                           	opt stack 0
  3742  001736                     _eval_poly:
  3743                           	opt stack 25
  3744                           
  3745                           ;incstack = 0
  3746  001736  C0A6  F020         	movff	eval_poly@n,___wmul@multiplier
  3747  00173A  C0A7  F021         	movff	eval_poly@n+1,___wmul@multiplier+1
  3748  00173E  0E00               	movlw	0
  3749  001740  6E23               	movwf	___wmul@multiplicand+1,c
  3750  001742  0E03               	movlw	3
  3751  001744  6E22               	movwf	___wmul@multiplicand,c
  3752  001746  EC12  F00F         	call	___wmul	;wreg free
  3753  00174A  C0A4  F0A8         	movff	eval_poly@d,??_eval_poly
  3754  00174E  C0A5  F0A9         	movff	eval_poly@d+1,??_eval_poly+1
  3755  001752  5020               	movf	?___wmul,w,c
  3756  001754  0100               	movlb	0	; () banked
  3757  001756  27A8               	addwf	??_eval_poly& (0+255),f,b
  3758  001758  5021               	movf	?___wmul+1,w,c
  3759  00175A  23A9               	addwfc	(??_eval_poly+1)& (0+255),f,b
  3760  00175C  C0A8  FFF6         	movff	??_eval_poly,tblptrl
  3761  001760  C0A9  FFF7         	movff	??_eval_poly+1,tblptrh
  3762  001764                     	if	0	;tblptru may be non-zero
  3763  001764                     	endif
  3764  001764                     	if	0	;tblptru may be non-zero
  3765  001764                     	endif
  3766  001764  0009               	tblrd		*+
  3767  001766  CFF5 F0AA          	movff	tablat,eval_poly@res
  3768  00176A  0009               	tblrd		*+
  3769  00176C  CFF5 F0AB          	movff	tablat,eval_poly@res+1
  3770  001770  000A               	tblrd		*-
  3771  001772  CFF5 F0AC          	movff	tablat,eval_poly@res+2
  3772  001776  D040               	goto	l978
  3773  001778                     
  3774                           ; BSR set to: 0
  3775                           
  3776                           ; BSR set to: 0
  3777  001778  C0AA  F089         	movff	eval_poly@res,___ftmul@f2
  3778  00177C  C0AB  F08A         	movff	eval_poly@res+1,___ftmul@f2+1
  3779  001780  C0AC  F08B         	movff	eval_poly@res+2,___ftmul@f2+2
  3780  001784  C0A1  F086         	movff	eval_poly@x,___ftmul@f1
  3781  001788  C0A2  F087         	movff	eval_poly@x+1,___ftmul@f1+1
  3782  00178C  C0A3  F088         	movff	eval_poly@x+2,___ftmul@f1+2
  3783  001790  ECC2  F009         	call	___ftmul	;wreg free
  3784  001794  C086  F095         	movff	?___ftmul,___ftadd@f1
  3785  001798  C087  F096         	movff	?___ftmul+1,___ftadd@f1+1
  3786  00179C  C088  F097         	movff	?___ftmul+2,___ftadd@f1+2
  3787  0017A0  0E00               	movlw	0
  3788  0017A2  6E23               	movwf	___wmul@multiplicand+1,c
  3789  0017A4  0E03               	movlw	3
  3790  0017A6  6E22               	movwf	___wmul@multiplicand,c
  3791  0017A8  0100               	movlb	0	; () banked
  3792  0017AA  07A6               	decf	eval_poly@n& (0+255),f,b
  3793  0017AC  A0D8               	btfss	status,0,c
  3794  0017AE  07A7               	decf	(eval_poly@n+1)& (0+255),f,b
  3795  0017B0  C0A6  F020         	movff	eval_poly@n,___wmul@multiplier
  3796  0017B4  C0A7  F021         	movff	eval_poly@n+1,___wmul@multiplier+1
  3797  0017B8  EC12  F00F         	call	___wmul	;wreg free
  3798  0017BC  C0A4  F0A8         	movff	eval_poly@d,??_eval_poly
  3799  0017C0  C0A5  F0A9         	movff	eval_poly@d+1,??_eval_poly+1
  3800  0017C4  5020               	movf	?___wmul,w,c
  3801  0017C6  0100               	movlb	0	; () banked
  3802  0017C8  27A8               	addwf	??_eval_poly& (0+255),f,b
  3803  0017CA  5021               	movf	?___wmul+1,w,c
  3804  0017CC  23A9               	addwfc	(??_eval_poly+1)& (0+255),f,b
  3805  0017CE  C0A8  FFF6         	movff	??_eval_poly,tblptrl
  3806  0017D2  C0A9  FFF7         	movff	??_eval_poly+1,tblptrh
  3807  0017D6                     	if	0	;tblptru may be non-zero
  3808  0017D6                     	endif
  3809  0017D6                     	if	0	;tblptru may be non-zero
  3810  0017D6                     	endif
  3811  0017D6  0009               	tblrd		*+
  3812  0017D8  CFF5 F098          	movff	tablat,___ftadd@f2
  3813  0017DC  0009               	tblrd		*+
  3814  0017DE  CFF5 F099          	movff	tablat,___ftadd@f2+1
  3815  0017E2  000A               	tblrd		*-
  3816  0017E4  CFF5 F09A          	movff	tablat,___ftadd@f2+2
  3817  0017E8  ECEB  F008         	call	___ftadd	;wreg free
  3818  0017EC  C095  F0AA         	movff	?___ftadd,eval_poly@res
  3819  0017F0  C096  F0AB         	movff	?___ftadd+1,eval_poly@res+1
  3820  0017F4  C097  F0AC         	movff	?___ftadd+2,eval_poly@res+2
  3821  0017F8                     l978:
  3822  0017F8  0100               	movlb	0	; () banked
  3823  0017FA  51A6               	movf	eval_poly@n& (0+255),w,b
  3824  0017FC  11A7               	iorwf	(eval_poly@n+1)& (0+255),w,b
  3825  0017FE  A4D8               	btfss	status,2,c
  3826  001800  D7BB               	goto	l979
  3827                           
  3828                           ; BSR set to: 0
  3829  001802  C0AA  F0A1         	movff	eval_poly@res,?_eval_poly
  3830  001806  C0AB  F0A2         	movff	eval_poly@res+1,?_eval_poly+1
  3831  00180A  C0AC  F0A3         	movff	eval_poly@res+2,?_eval_poly+2
  3832                           
  3833                           ; BSR set to: 0
  3834  00180E  0012               	return		;funcret
  3835  001810                     __end_of_eval_poly:
  3836                           	opt stack 0
  3837                           tblptru	equ	0xFF8
  3838                           tblptrh	equ	0xFF7
  3839                           tblptrl	equ	0xFF6
  3840                           tablat	equ	0xFF5
  3841                           prodh	equ	0xFF4
  3842                           prodl	equ	0xFF3
  3843                           intcon	equ	0xFF2
  3844                           postinc0	equ	0xFEE
  3845                           wreg	equ	0xFE8
  3846                           indf1	equ	0xFE7
  3847                           postdec1	equ	0xFE5
  3848                           fsr1h	equ	0xFE2
  3849                           fsr1l	equ	0xFE1
  3850                           indf2	equ	0xFDF
  3851                           postinc2	equ	0xFDE
  3852                           postdec2	equ	0xFDD
  3853                           fsr2h	equ	0xFDA
  3854                           fsr2l	equ	0xFD9
  3855                           status	equ	0xFD8
  3856                           
  3857 ;; *************** function ___wmul *****************
  3858 ;; Defined at:
  3859 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3860 ;; Parameters:    Size  Location     Type
  3861 ;;  multiplier      2   31[COMRAM] unsigned int 
  3862 ;;  multiplicand    2   33[COMRAM] unsigned int 
  3863 ;; Auto vars:     Size  Location     Type
  3864 ;;  product         2   35[COMRAM] unsigned int 
  3865 ;; Return value:  Size  Location     Type
  3866 ;;                  2   31[COMRAM] unsigned int 
  3867 ;; Registers used:
  3868 ;;		wreg, status,2, status,0, prodl, prodh
  3869 ;; Tracked objects:
  3870 ;;		On entry : 0/0
  3871 ;;		On exit  : 0/0
  3872 ;;		Unchanged: 0/0
  3873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3874 ;;      Params:         4       0       0       0       0       0       0
  3875 ;;      Locals:         2       0       0       0       0       0       0
  3876 ;;      Temps:          0       0       0       0       0       0       0
  3877 ;;      Totals:         6       0       0       0       0       0       0
  3878 ;;Total ram usage:        6 bytes
  3879 ;; Hardware stack levels used:    1
  3880 ;; Hardware stack levels required when called:    2
  3881 ;; This function calls:
  3882 ;;		Nothing
  3883 ;; This function is called by:
  3884 ;;		_eval_poly
  3885 ;; This function uses a non-reentrant model
  3886 ;;
  3887                           
  3888                           	psect	text9
  3889  001E24                     __ptext9:
  3890                           	opt stack 0
  3891  001E24                     ___wmul:
  3892                           	opt stack 26
  3893                           
  3894                           ; BSR set to: 0
  3895                           ;incstack = 0
  3896  001E24  5020               	movf	___wmul@multiplier,w,c
  3897  001E26  0222               	mulwf	___wmul@multiplicand,c
  3898  001E28  CFF3 F024          	movff	prodl,___wmul@product
  3899  001E2C  CFF4 F025          	movff	prodh,___wmul@product+1
  3900  001E30  5020               	movf	___wmul@multiplier,w,c
  3901  001E32  0223               	mulwf	___wmul@multiplicand+1,c
  3902  001E34  50F3               	movf	prodl,w,c
  3903  001E36  2625               	addwf	___wmul@product+1,f,c
  3904  001E38  5021               	movf	___wmul@multiplier+1,w,c
  3905  001E3A  0222               	mulwf	___wmul@multiplicand,c
  3906  001E3C  50F3               	movf	prodl,w,c
  3907  001E3E  2625               	addwf	___wmul@product+1,f,c
  3908  001E40  C024  F020         	movff	___wmul@product,?___wmul
  3909  001E44  C025  F021         	movff	___wmul@product+1,?___wmul+1
  3910  001E48  0012               	return	
  3911  001E4A                     __end_of___wmul:
  3912                           	opt stack 0
  3913                           tblptru	equ	0xFF8
  3914                           tblptrh	equ	0xFF7
  3915                           tblptrl	equ	0xFF6
  3916                           tablat	equ	0xFF5
  3917                           prodh	equ	0xFF4
  3918                           prodl	equ	0xFF3
  3919                           intcon	equ	0xFF2
  3920                           postinc0	equ	0xFEE
  3921                           wreg	equ	0xFE8
  3922                           indf1	equ	0xFE7
  3923                           postdec1	equ	0xFE5
  3924                           fsr1h	equ	0xFE2
  3925                           fsr1l	equ	0xFE1
  3926                           indf2	equ	0xFDF
  3927                           postinc2	equ	0xFDE
  3928                           postdec2	equ	0xFDD
  3929                           fsr2h	equ	0xFDA
  3930                           fsr2l	equ	0xFD9
  3931                           status	equ	0xFD8
  3932                           
  3933 ;; *************** function ___ftmul *****************
  3934 ;; Defined at:
  3935 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  3936 ;; Parameters:    Size  Location     Type
  3937 ;;  f1              3    6[BANK0 ] float 
  3938 ;;  f2              3    9[BANK0 ] float 
  3939 ;; Auto vars:     Size  Location     Type
  3940 ;;  f3_as_produc    3   16[BANK0 ] unsigned um
  3941 ;;  sign            1   20[BANK0 ] unsigned char 
  3942 ;;  cntr            1   19[BANK0 ] unsigned char 
  3943 ;;  exp             1   15[BANK0 ] unsigned char 
  3944 ;; Return value:  Size  Location     Type
  3945 ;;                  3    6[BANK0 ] float 
  3946 ;; Registers used:
  3947 ;;		wreg, status,2, status,0, cstack
  3948 ;; Tracked objects:
  3949 ;;		On entry : 0/0
  3950 ;;		On exit  : 0/0
  3951 ;;		Unchanged: 0/0
  3952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3953 ;;      Params:         0       6       0       0       0       0       0
  3954 ;;      Locals:         0       6       0       0       0       0       0
  3955 ;;      Temps:          0       3       0       0       0       0       0
  3956 ;;      Totals:         0      15       0       0       0       0       0
  3957 ;;Total ram usage:       15 bytes
  3958 ;; Hardware stack levels used:    1
  3959 ;; Hardware stack levels required when called:    3
  3960 ;; This function calls:
  3961 ;;		___ftpack
  3962 ;; This function is called by:
  3963 ;;		_main
  3964 ;;		_exp
  3965 ;;		_eval_poly
  3966 ;; This function uses a non-reentrant model
  3967 ;;
  3968                           
  3969                           	psect	text10
  3970  001384                     __ptext10:
  3971                           	opt stack 0
  3972  001384                     ___ftmul:
  3973                           	opt stack 25
  3974                           
  3975                           ;incstack = 0
  3976  001384  C088  F08C         	movff	___ftmul@f1+2,??___ftmul
  3977  001388  0100               	movlb	0	; () banked
  3978  00138A  6B8D               	clrf	(??___ftmul+1)& (0+255),b
  3979  00138C  6B8E               	clrf	(??___ftmul+2)& (0+255),b
  3980  00138E  3587               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  3981  001390  378C               	rlcf	??___ftmul& (0+255),f,b
  3982  001392  E301               	bnc	u3041
  3983  001394  818D               	bsf	(??___ftmul+1)& (0+255),0,b
  3984  001396                     u3041:
  3985  001396  518C               	movf	??___ftmul& (0+255),w,b
  3986  001398  6F8F               	movwf	___ftmul@exp& (0+255),b
  3987  00139A  518F               	movf	___ftmul@exp& (0+255),w,b
  3988  00139C  A4D8               	btfss	status,2,c
  3989  00139E  D007               	goto	l703
  3990                           
  3991                           ; BSR set to: 0
  3992  0013A0  0E00               	movlw	0
  3993  0013A2  6F86               	movwf	?___ftmul& (0+255),b
  3994  0013A4  0E00               	movlw	0
  3995  0013A6  6F87               	movwf	(?___ftmul+1)& (0+255),b
  3996  0013A8  0E00               	movlw	0
  3997  0013AA  6F88               	movwf	(?___ftmul+2)& (0+255),b
  3998                           
  3999                           ; BSR set to: 0
  4000  0013AC  0012               	return	
  4001  0013AE                     l703:
  4002                           
  4003                           ; BSR set to: 0
  4004                           
  4005                           ; BSR set to: 0
  4006  0013AE  C08B  F08C         	movff	___ftmul@f2+2,??___ftmul
  4007  0013B2  6B8D               	clrf	(??___ftmul+1)& (0+255),b
  4008  0013B4  6B8E               	clrf	(??___ftmul+2)& (0+255),b
  4009  0013B6  358A               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  4010  0013B8  378C               	rlcf	??___ftmul& (0+255),f,b
  4011  0013BA  E301               	bnc	u3061
  4012  0013BC  818D               	bsf	(??___ftmul+1)& (0+255),0,b
  4013  0013BE                     u3061:
  4014  0013BE  518C               	movf	??___ftmul& (0+255),w,b
  4015  0013C0  6F94               	movwf	___ftmul@sign& (0+255),b
  4016  0013C2  5194               	movf	___ftmul@sign& (0+255),w,b
  4017  0013C4  A4D8               	btfss	status,2,c
  4018  0013C6  D007               	goto	l705
  4019                           
  4020                           ; BSR set to: 0
  4021  0013C8  0E00               	movlw	0
  4022  0013CA  6F86               	movwf	?___ftmul& (0+255),b
  4023  0013CC  0E00               	movlw	0
  4024  0013CE  6F87               	movwf	(?___ftmul+1)& (0+255),b
  4025  0013D0  0E00               	movlw	0
  4026  0013D2  6F88               	movwf	(?___ftmul+2)& (0+255),b
  4027                           
  4028                           ; BSR set to: 0
  4029  0013D4  0012               	return	
  4030  0013D6                     l705:
  4031                           
  4032                           ; BSR set to: 0
  4033                           
  4034                           ; BSR set to: 0
  4035  0013D6  5194               	movf	___ftmul@sign& (0+255),w,b
  4036  0013D8  0F7B               	addlw	123
  4037  0013DA  278F               	addwf	___ftmul@exp& (0+255),f,b
  4038                           
  4039                           ; BSR set to: 0
  4040  0013DC  C088  F094         	movff	___ftmul@f1+2,___ftmul@sign
  4041  0013E0  518B               	movf	(___ftmul@f2+2)& (0+255),w,b
  4042  0013E2  1B94               	xorwf	___ftmul@sign& (0+255),f,b
  4043  0013E4  0E80               	movlw	128
  4044  0013E6  1794               	andwf	___ftmul@sign& (0+255),f,b
  4045                           
  4046                           ; BSR set to: 0
  4047  0013E8  8F87               	bsf	(___ftmul@f1+1)& (0+255),7,b
  4048                           
  4049                           ; BSR set to: 0
  4050  0013EA  8F8A               	bsf	(___ftmul@f2+1)& (0+255),7,b
  4051                           
  4052                           ; BSR set to: 0
  4053  0013EC  0EFF               	movlw	255
  4054  0013EE  1789               	andwf	___ftmul@f2& (0+255),f,b
  4055  0013F0  0EFF               	movlw	255
  4056  0013F2  178A               	andwf	(___ftmul@f2+1)& (0+255),f,b
  4057  0013F4  0E00               	movlw	0
  4058  0013F6  178B               	andwf	(___ftmul@f2+2)& (0+255),f,b
  4059                           
  4060                           ; BSR set to: 0
  4061  0013F8  0E00               	movlw	0
  4062  0013FA  6F90               	movwf	___ftmul@f3_as_product& (0+255),b
  4063  0013FC  0E00               	movlw	0
  4064  0013FE  6F91               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  4065  001400  0E00               	movlw	0
  4066  001402  6F92               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  4067                           
  4068                           ; BSR set to: 0
  4069  001404  0E07               	movlw	7
  4070  001406  6F93               	movwf	___ftmul@cntr& (0+255),b
  4071  001408                     
  4072                           ; BSR set to: 0
  4073                           
  4074                           ; BSR set to: 0
  4075  001408  A186               	btfss	___ftmul@f1& (0+255),0,b
  4076  00140A  D006               	goto	l707
  4077                           
  4078                           ; BSR set to: 0
  4079  00140C  5189               	movf	___ftmul@f2& (0+255),w,b
  4080  00140E  2790               	addwf	___ftmul@f3_as_product& (0+255),f,b
  4081  001410  518A               	movf	(___ftmul@f2+1)& (0+255),w,b
  4082  001412  2391               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  4083  001414  518B               	movf	(___ftmul@f2+2)& (0+255),w,b
  4084  001416  2392               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  4085  001418                     l707:
  4086                           
  4087                           ; BSR set to: 0
  4088                           
  4089                           ; BSR set to: 0
  4090  001418  90D8               	bcf	status,0,c
  4091  00141A  3388               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  4092  00141C  3387               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  4093  00141E  3386               	rrcf	___ftmul@f1& (0+255),f,b
  4094  001420  90D8               	bcf	status,0,c
  4095  001422  3789               	rlcf	___ftmul@f2& (0+255),f,b
  4096  001424  378A               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  4097  001426  378B               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  4098                           
  4099                           ; BSR set to: 0
  4100  001428  2F93               	decfsz	___ftmul@cntr& (0+255),f,b
  4101  00142A  D7EE               	goto	l706
  4102                           
  4103                           ; BSR set to: 0
  4104                           
  4105                           ; BSR set to: 0
  4106  00142C  0E09               	movlw	9
  4107  00142E  6F93               	movwf	___ftmul@cntr& (0+255),b
  4108  001430                     
  4109                           ; BSR set to: 0
  4110                           
  4111                           ; BSR set to: 0
  4112  001430  A186               	btfss	___ftmul@f1& (0+255),0,b
  4113  001432  D006               	goto	l710
  4114                           
  4115                           ; BSR set to: 0
  4116  001434  5189               	movf	___ftmul@f2& (0+255),w,b
  4117  001436  2790               	addwf	___ftmul@f3_as_product& (0+255),f,b
  4118  001438  518A               	movf	(___ftmul@f2+1)& (0+255),w,b
  4119  00143A  2391               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  4120  00143C  518B               	movf	(___ftmul@f2+2)& (0+255),w,b
  4121  00143E  2392               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  4122  001440                     l710:
  4123                           
  4124                           ; BSR set to: 0
  4125                           
  4126                           ; BSR set to: 0
  4127  001440  90D8               	bcf	status,0,c
  4128  001442  3388               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  4129  001444  3387               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  4130  001446  3386               	rrcf	___ftmul@f1& (0+255),f,b
  4131  001448  90D8               	bcf	status,0,c
  4132  00144A  3392               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  4133  00144C  3391               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  4134  00144E  3390               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  4135                           
  4136                           ; BSR set to: 0
  4137  001450  2F93               	decfsz	___ftmul@cntr& (0+255),f,b
  4138  001452  D7EE               	goto	l709
  4139                           
  4140                           ; BSR set to: 0
  4141                           
  4142                           ; BSR set to: 0
  4143  001454  C090  F020         	movff	___ftmul@f3_as_product,___ftpack@arg
  4144  001458  C091  F021         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4145  00145C  C092  F022         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4146  001460  C08F  F023         	movff	___ftmul@exp,___ftpack@exp
  4147  001464  C094  F024         	movff	___ftmul@sign,___ftpack@sign
  4148  001468  EC6B  F00C         	call	___ftpack	;wreg free
  4149  00146C  C020  F086         	movff	?___ftpack,?___ftmul
  4150  001470  C021  F087         	movff	?___ftpack+1,?___ftmul+1
  4151  001474  C022  F088         	movff	?___ftpack+2,?___ftmul+2
  4152  001478  0012               	return	
  4153  00147A                     __end_of___ftmul:
  4154                           	opt stack 0
  4155                           tblptru	equ	0xFF8
  4156                           tblptrh	equ	0xFF7
  4157                           tblptrl	equ	0xFF6
  4158                           tablat	equ	0xFF5
  4159                           prodh	equ	0xFF4
  4160                           prodl	equ	0xFF3
  4161                           intcon	equ	0xFF2
  4162                           postinc0	equ	0xFEE
  4163                           wreg	equ	0xFE8
  4164                           indf1	equ	0xFE7
  4165                           postdec1	equ	0xFE5
  4166                           fsr1h	equ	0xFE2
  4167                           fsr1l	equ	0xFE1
  4168                           indf2	equ	0xFDF
  4169                           postinc2	equ	0xFDE
  4170                           postdec2	equ	0xFDD
  4171                           fsr2h	equ	0xFDA
  4172                           fsr2l	equ	0xFD9
  4173                           status	equ	0xFD8
  4174                           
  4175 ;; *************** function ___ftsub *****************
  4176 ;; Defined at:
  4177 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  4178 ;; Parameters:    Size  Location     Type
  4179 ;;  f1              3   33[BANK0 ] float 
  4180 ;;  f2              3   36[BANK0 ] float 
  4181 ;; Auto vars:     Size  Location     Type
  4182 ;;		None
  4183 ;; Return value:  Size  Location     Type
  4184 ;;                  3   33[BANK0 ] float 
  4185 ;; Registers used:
  4186 ;;		wreg, status,2, status,0, cstack
  4187 ;; Tracked objects:
  4188 ;;		On entry : 0/0
  4189 ;;		On exit  : 0/0
  4190 ;;		Unchanged: 0/0
  4191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4192 ;;      Params:         0       6       0       0       0       0       0
  4193 ;;      Locals:         0       0       0       0       0       0       0
  4194 ;;      Temps:          0       0       0       0       0       0       0
  4195 ;;      Totals:         0       6       0       0       0       0       0
  4196 ;;Total ram usage:        6 bytes
  4197 ;; Hardware stack levels used:    1
  4198 ;; Hardware stack levels required when called:    4
  4199 ;; This function calls:
  4200 ;;		___ftadd
  4201 ;; This function is called by:
  4202 ;;		_exp
  4203 ;; This function uses a non-reentrant model
  4204 ;;
  4205                           
  4206                           	psect	text11
  4207  001C6C                     __ptext11:
  4208                           	opt stack 0
  4209  001C6C                     ___ftsub:
  4210                           	opt stack 25
  4211                           
  4212                           ;incstack = 0
  4213  001C6C  0100               	movlb	0	; () banked
  4214  001C6E  51A4               	movf	___ftsub@f2& (0+255),w,b
  4215  001C70  11A5               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  4216  001C72  11A6               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  4217  001C74  B4D8               	btfsc	status,2,c
  4218  001C76  D006               	goto	l720
  4219                           
  4220                           ; BSR set to: 0
  4221  001C78  0E00               	movlw	0
  4222  001C7A  1BA4               	xorwf	___ftsub@f2& (0+255),f,b
  4223  001C7C  0E00               	movlw	0
  4224  001C7E  1BA5               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  4225  001C80  0E80               	movlw	128
  4226  001C82  1BA6               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  4227  001C84                     l720:
  4228                           
  4229                           ; BSR set to: 0
  4230                           
  4231                           ; BSR set to: 0
  4232  001C84  C0A1  F095         	movff	___ftsub@f1,___ftadd@f1
  4233  001C88  C0A2  F096         	movff	___ftsub@f1+1,___ftadd@f1+1
  4234  001C8C  C0A3  F097         	movff	___ftsub@f1+2,___ftadd@f1+2
  4235  001C90  C0A4  F098         	movff	___ftsub@f2,___ftadd@f2
  4236  001C94  C0A5  F099         	movff	___ftsub@f2+1,___ftadd@f2+1
  4237  001C98  C0A6  F09A         	movff	___ftsub@f2+2,___ftadd@f2+2
  4238  001C9C  ECEB  F008         	call	___ftadd	;wreg free
  4239  001CA0  C095  F0A1         	movff	?___ftadd,?___ftsub
  4240  001CA4  C096  F0A2         	movff	?___ftadd+1,?___ftsub+1
  4241  001CA8  C097  F0A3         	movff	?___ftadd+2,?___ftsub+2
  4242  001CAC  0012               	return	
  4243  001CAE                     __end_of___ftsub:
  4244                           	opt stack 0
  4245                           tblptru	equ	0xFF8
  4246                           tblptrh	equ	0xFF7
  4247                           tblptrl	equ	0xFF6
  4248                           tablat	equ	0xFF5
  4249                           prodh	equ	0xFF4
  4250                           prodl	equ	0xFF3
  4251                           intcon	equ	0xFF2
  4252                           postinc0	equ	0xFEE
  4253                           wreg	equ	0xFE8
  4254                           indf1	equ	0xFE7
  4255                           postdec1	equ	0xFE5
  4256                           fsr1h	equ	0xFE2
  4257                           fsr1l	equ	0xFE1
  4258                           indf2	equ	0xFDF
  4259                           postinc2	equ	0xFDE
  4260                           postdec2	equ	0xFDD
  4261                           fsr2h	equ	0xFDA
  4262                           fsr2l	equ	0xFD9
  4263                           status	equ	0xFD8
  4264                           
  4265 ;; *************** function ___ftadd *****************
  4266 ;; Defined at:
  4267 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  4268 ;; Parameters:    Size  Location     Type
  4269 ;;  f1              3   21[BANK0 ] float 
  4270 ;;  f2              3   24[BANK0 ] float 
  4271 ;; Auto vars:     Size  Location     Type
  4272 ;;  exp1            1   32[BANK0 ] unsigned char 
  4273 ;;  exp2            1   31[BANK0 ] unsigned char 
  4274 ;;  sign            1   30[BANK0 ] unsigned char 
  4275 ;; Return value:  Size  Location     Type
  4276 ;;                  3   21[BANK0 ] float 
  4277 ;; Registers used:
  4278 ;;		wreg, status,2, status,0, cstack
  4279 ;; Tracked objects:
  4280 ;;		On entry : 0/0
  4281 ;;		On exit  : 0/0
  4282 ;;		Unchanged: 0/0
  4283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4284 ;;      Params:         0       6       0       0       0       0       0
  4285 ;;      Locals:         0       3       0       0       0       0       0
  4286 ;;      Temps:          0       3       0       0       0       0       0
  4287 ;;      Totals:         0      12       0       0       0       0       0
  4288 ;;Total ram usage:       12 bytes
  4289 ;; Hardware stack levels used:    1
  4290 ;; Hardware stack levels required when called:    3
  4291 ;; This function calls:
  4292 ;;		___ftpack
  4293 ;; This function is called by:
  4294 ;;		_main
  4295 ;;		_floor
  4296 ;;		___ftsub
  4297 ;;		_eval_poly
  4298 ;; This function uses a non-reentrant model
  4299 ;;
  4300                           
  4301                           	psect	text12
  4302  0011D6                     __ptext12:
  4303                           	opt stack 0
  4304  0011D6                     ___ftadd:
  4305                           	opt stack 25
  4306                           
  4307                           ;incstack = 0
  4308  0011D6  C097  F09B         	movff	___ftadd@f1+2,??___ftadd
  4309  0011DA  0100               	movlb	0	; () banked
  4310  0011DC  6B9C               	clrf	(??___ftadd+1)& (0+255),b
  4311  0011DE  6B9D               	clrf	(??___ftadd+2)& (0+255),b
  4312  0011E0  3596               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  4313  0011E2  379B               	rlcf	??___ftadd& (0+255),f,b
  4314  0011E4  E301               	bnc	u2831
  4315  0011E6  819C               	bsf	(??___ftadd+1)& (0+255),0,b
  4316  0011E8                     u2831:
  4317  0011E8  519B               	movf	??___ftadd& (0+255),w,b
  4318  0011EA  6FA0               	movwf	___ftadd@exp1& (0+255),b
  4319  0011EC  C09A  F09B         	movff	___ftadd@f2+2,??___ftadd
  4320  0011F0  6B9C               	clrf	(??___ftadd+1)& (0+255),b
  4321  0011F2  6B9D               	clrf	(??___ftadd+2)& (0+255),b
  4322  0011F4  3599               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  4323  0011F6  379B               	rlcf	??___ftadd& (0+255),f,b
  4324  0011F8  E301               	bnc	u2841
  4325  0011FA  819C               	bsf	(??___ftadd+1)& (0+255),0,b
  4326  0011FC                     u2841:
  4327  0011FC  519B               	movf	??___ftadd& (0+255),w,b
  4328  0011FE  6F9F               	movwf	___ftadd@exp2& (0+255),b
  4329                           
  4330                           ; BSR set to: 0
  4331  001200  51A0               	movf	___ftadd@exp1& (0+255),w,b
  4332  001202  B4D8               	btfsc	status,2,c
  4333  001204  D00B               	goto	u2870
  4334                           
  4335                           ; BSR set to: 0
  4336  001206  519F               	movf	___ftadd@exp2& (0+255),w,b
  4337  001208  5DA0               	subwf	___ftadd@exp1& (0+255),w,b
  4338  00120A  B0D8               	btfsc	status,0,c
  4339  00120C  D00E               	goto	l655
  4340                           
  4341                           ; BSR set to: 0
  4342  00120E  51A0               	movf	___ftadd@exp1& (0+255),w,b
  4343  001210  0800               	sublw	0
  4344  001212  259F               	addwf	___ftadd@exp2& (0+255),w,b
  4345  001214  6F9B               	movwf	??___ftadd& (0+255),b
  4346  001216  0E18               	movlw	24
  4347  001218  659B               	cpfsgt	??___ftadd& (0+255),b
  4348  00121A  D007               	goto	l655
  4349  00121C                     u2870:
  4350                           
  4351                           ; BSR set to: 0
  4352  00121C  C098  F095         	movff	___ftadd@f2,?___ftadd
  4353  001220  C099  F096         	movff	___ftadd@f2+1,?___ftadd+1
  4354  001224  C09A  F097         	movff	___ftadd@f2+2,?___ftadd+2
  4355  001228  0012               	return	
  4356  00122A                     l655:
  4357                           
  4358                           ; BSR set to: 0
  4359                           
  4360                           ; BSR set to: 0
  4361  00122A  519F               	movf	___ftadd@exp2& (0+255),w,b
  4362  00122C  B4D8               	btfsc	status,2,c
  4363  00122E  D00B               	goto	u2900
  4364                           
  4365                           ; BSR set to: 0
  4366  001230  51A0               	movf	___ftadd@exp1& (0+255),w,b
  4367  001232  5D9F               	subwf	___ftadd@exp2& (0+255),w,b
  4368  001234  B0D8               	btfsc	status,0,c
  4369  001236  D00E               	goto	l659
  4370                           
  4371                           ; BSR set to: 0
  4372  001238  519F               	movf	___ftadd@exp2& (0+255),w,b
  4373  00123A  0800               	sublw	0
  4374  00123C  25A0               	addwf	___ftadd@exp1& (0+255),w,b
  4375  00123E  6F9B               	movwf	??___ftadd& (0+255),b
  4376  001240  0E18               	movlw	24
  4377  001242  659B               	cpfsgt	??___ftadd& (0+255),b
  4378  001244  D007               	goto	l659
  4379  001246                     u2900:
  4380                           
  4381                           ; BSR set to: 0
  4382  001246  C095  F095         	movff	___ftadd@f1,?___ftadd
  4383  00124A  C096  F096         	movff	___ftadd@f1+1,?___ftadd+1
  4384  00124E  C097  F097         	movff	___ftadd@f1+2,?___ftadd+2
  4385  001252  0012               	return	
  4386  001254                     l659:
  4387                           
  4388                           ; BSR set to: 0
  4389                           
  4390                           ; BSR set to: 0
  4391  001254  0E06               	movlw	6
  4392  001256  6F9E               	movwf	___ftadd@sign& (0+255),b
  4393                           
  4394                           ; BSR set to: 0
  4395  001258  BF97               	btfsc	(___ftadd@f1+2)& (0+255),7,b
  4396                           
  4397                           ; BSR set to: 0
  4398  00125A  8F9E               	bsf	___ftadd@sign& (0+255),7,b
  4399                           
  4400                           ; BSR set to: 0
  4401                           
  4402                           ; BSR set to: 0
  4403  00125C  BF9A               	btfsc	(___ftadd@f2+2)& (0+255),7,b
  4404                           
  4405                           ; BSR set to: 0
  4406  00125E  8D9E               	bsf	___ftadd@sign& (0+255),6,b
  4407                           
  4408                           ; BSR set to: 0
  4409  001260  8F96               	bsf	(___ftadd@f1+1)& (0+255),7,b
  4410                           
  4411                           ; BSR set to: 0
  4412  001262  0EFF               	movlw	255
  4413  001264  1795               	andwf	___ftadd@f1& (0+255),f,b
  4414  001266  0EFF               	movlw	255
  4415  001268  1796               	andwf	(___ftadd@f1+1)& (0+255),f,b
  4416  00126A  0E00               	movlw	0
  4417  00126C  1797               	andwf	(___ftadd@f1+2)& (0+255),f,b
  4418  00126E  8F99               	bsf	(___ftadd@f2+1)& (0+255),7,b
  4419                           
  4420                           ; BSR set to: 0
  4421  001270  0EFF               	movlw	255
  4422  001272  1798               	andwf	___ftadd@f2& (0+255),f,b
  4423  001274  0EFF               	movlw	255
  4424  001276  1799               	andwf	(___ftadd@f2+1)& (0+255),f,b
  4425  001278  0E00               	movlw	0
  4426  00127A  179A               	andwf	(___ftadd@f2+2)& (0+255),f,b
  4427                           
  4428                           ; BSR set to: 0
  4429  00127C  519F               	movf	___ftadd@exp2& (0+255),w,b
  4430  00127E  5DA0               	subwf	___ftadd@exp1& (0+255),w,b
  4431  001280  B0D8               	btfsc	status,0,c
  4432  001282  D01B               	goto	l664
  4433  001284                     u2930:
  4434                           
  4435                           ; BSR set to: 0
  4436                           
  4437                           ; BSR set to: 0
  4438  001284  90D8               	bcf	status,0,c
  4439  001286  3798               	rlcf	___ftadd@f2& (0+255),f,b
  4440  001288  3799               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  4441  00128A  379A               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  4442  00128C  079F               	decf	___ftadd@exp2& (0+255),f,b
  4443                           
  4444                           ; BSR set to: 0
  4445  00128E  51A0               	movf	___ftadd@exp1& (0+255),w,b
  4446  001290  199F               	xorwf	___ftadd@exp2& (0+255),w,b
  4447  001292  B4D8               	btfsc	status,2,c
  4448  001294  D00D               	goto	l669
  4449                           
  4450                           ; BSR set to: 0
  4451  001296  079E               	decf	___ftadd@sign& (0+255),f,b
  4452  001298  C09E  F09B         	movff	___ftadd@sign,??___ftadd
  4453  00129C  0E07               	movlw	7
  4454  00129E  179B               	andwf	??___ftadd& (0+255),f,b
  4455  0012A0  B4D8               	btfsc	status,2,c
  4456  0012A2  D006               	goto	l669
  4457  0012A4  D7EF               	goto	u2930
  4458  0012A6                     
  4459                           ; BSR set to: 0
  4460                           
  4461                           ; BSR set to: 0
  4462  0012A6  90D8               	bcf	status,0,c
  4463  0012A8  3397               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  4464  0012AA  3396               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  4465  0012AC  3395               	rrcf	___ftadd@f1& (0+255),f,b
  4466  0012AE  2BA0               	incf	___ftadd@exp1& (0+255),f,b
  4467  0012B0                     l669:
  4468                           
  4469                           ; BSR set to: 0
  4470                           
  4471                           ; BSR set to: 0
  4472  0012B0  519F               	movf	___ftadd@exp2& (0+255),w,b
  4473  0012B2  19A0               	xorwf	___ftadd@exp1& (0+255),w,b
  4474  0012B4  B4D8               	btfsc	status,2,c
  4475  0012B6  D01F               	goto	u3000
  4476  0012B8  D7F6               	goto	l670
  4477  0012BA                     l664:
  4478                           
  4479                           ; BSR set to: 0
  4480                           
  4481                           ; BSR set to: 0
  4482  0012BA  51A0               	movf	___ftadd@exp1& (0+255),w,b
  4483  0012BC  5D9F               	subwf	___ftadd@exp2& (0+255),w,b
  4484  0012BE  B0D8               	btfsc	status,0,c
  4485  0012C0  D01A               	goto	u3000
  4486  0012C2                     u2970:
  4487                           
  4488                           ; BSR set to: 0
  4489                           
  4490                           ; BSR set to: 0
  4491  0012C2  90D8               	bcf	status,0,c
  4492  0012C4  3795               	rlcf	___ftadd@f1& (0+255),f,b
  4493  0012C6  3796               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  4494  0012C8  3797               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  4495  0012CA  07A0               	decf	___ftadd@exp1& (0+255),f,b
  4496                           
  4497                           ; BSR set to: 0
  4498  0012CC  51A0               	movf	___ftadd@exp1& (0+255),w,b
  4499  0012CE  199F               	xorwf	___ftadd@exp2& (0+255),w,b
  4500  0012D0  B4D8               	btfsc	status,2,c
  4501  0012D2  D00D               	goto	l678
  4502                           
  4503                           ; BSR set to: 0
  4504  0012D4  079E               	decf	___ftadd@sign& (0+255),f,b
  4505  0012D6  C09E  F09B         	movff	___ftadd@sign,??___ftadd
  4506  0012DA  0E07               	movlw	7
  4507  0012DC  179B               	andwf	??___ftadd& (0+255),f,b
  4508  0012DE  B4D8               	btfsc	status,2,c
  4509  0012E0  D006               	goto	l678
  4510  0012E2  D7EF               	goto	u2970
  4511  0012E4                     
  4512                           ; BSR set to: 0
  4513                           
  4514                           ; BSR set to: 0
  4515  0012E4  90D8               	bcf	status,0,c
  4516  0012E6  339A               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  4517  0012E8  3399               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  4518  0012EA  3398               	rrcf	___ftadd@f2& (0+255),f,b
  4519  0012EC  2B9F               	incf	___ftadd@exp2& (0+255),f,b
  4520  0012EE                     l678:
  4521                           
  4522                           ; BSR set to: 0
  4523                           
  4524                           ; BSR set to: 0
  4525  0012EE  519F               	movf	___ftadd@exp2& (0+255),w,b
  4526  0012F0  19A0               	xorwf	___ftadd@exp1& (0+255),w,b
  4527  0012F2  A4D8               	btfss	status,2,c
  4528  0012F4  D7F7               	goto	l679
  4529  0012F6                     u3000:
  4530                           
  4531                           ; BSR set to: 0
  4532                           
  4533                           ; BSR set to: 0
  4534                           
  4535                           ; BSR set to: 0
  4536  0012F6  AF9E               	btfss	___ftadd@sign& (0+255),7,b
  4537  0012F8  D00C               	goto	l681
  4538                           
  4539                           ; BSR set to: 0
  4540  0012FA  0EFF               	movlw	255
  4541  0012FC  1B95               	xorwf	___ftadd@f1& (0+255),f,b
  4542  0012FE  0EFF               	movlw	255
  4543  001300  1B96               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  4544  001302  0EFF               	movlw	255
  4545  001304  1B97               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  4546  001306  0E01               	movlw	1
  4547  001308  2795               	addwf	___ftadd@f1& (0+255),f,b
  4548  00130A  0E00               	movlw	0
  4549  00130C  2396               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  4550  00130E  0E00               	movlw	0
  4551  001310  2397               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  4552  001312                     l681:
  4553                           
  4554                           ; BSR set to: 0
  4555  001312  AD9E               	btfss	___ftadd@sign& (0+255),6,b
  4556  001314  D00C               	goto	l682
  4557                           
  4558                           ; BSR set to: 0
  4559  001316  0EFF               	movlw	255
  4560  001318  1B98               	xorwf	___ftadd@f2& (0+255),f,b
  4561  00131A  0EFF               	movlw	255
  4562  00131C  1B99               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  4563  00131E  0EFF               	movlw	255
  4564  001320  1B9A               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  4565  001322  0E01               	movlw	1
  4566  001324  2798               	addwf	___ftadd@f2& (0+255),f,b
  4567  001326  0E00               	movlw	0
  4568  001328  2399               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  4569  00132A  0E00               	movlw	0
  4570  00132C  239A               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  4571  00132E                     l682:
  4572                           
  4573                           ; BSR set to: 0
  4574                           
  4575                           ; BSR set to: 0
  4576  00132E  0E00               	movlw	0
  4577  001330  6F9E               	movwf	___ftadd@sign& (0+255),b
  4578                           
  4579                           ; BSR set to: 0
  4580  001332  5195               	movf	___ftadd@f1& (0+255),w,b
  4581  001334  2798               	addwf	___ftadd@f2& (0+255),f,b
  4582  001336  5196               	movf	(___ftadd@f1+1)& (0+255),w,b
  4583  001338  2399               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  4584  00133A  5197               	movf	(___ftadd@f1+2)& (0+255),w,b
  4585  00133C  239A               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  4586                           
  4587                           ; BSR set to: 0
  4588  00133E  AF9A               	btfss	(___ftadd@f2+2)& (0+255),7,b
  4589  001340  D00E               	goto	l683
  4590                           
  4591                           ; BSR set to: 0
  4592  001342  0EFF               	movlw	255
  4593  001344  1B98               	xorwf	___ftadd@f2& (0+255),f,b
  4594  001346  0EFF               	movlw	255
  4595  001348  1B99               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  4596  00134A  0EFF               	movlw	255
  4597  00134C  1B9A               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  4598  00134E  0E01               	movlw	1
  4599  001350  2798               	addwf	___ftadd@f2& (0+255),f,b
  4600  001352  0E00               	movlw	0
  4601  001354  2399               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  4602  001356  0E00               	movlw	0
  4603  001358  239A               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  4604                           
  4605                           ; BSR set to: 0
  4606  00135A  0E01               	movlw	1
  4607  00135C  6F9E               	movwf	___ftadd@sign& (0+255),b
  4608  00135E                     l683:
  4609                           
  4610                           ; BSR set to: 0
  4611                           
  4612                           ; BSR set to: 0
  4613  00135E  C098  F020         	movff	___ftadd@f2,___ftpack@arg
  4614  001362  C099  F021         	movff	___ftadd@f2+1,___ftpack@arg+1
  4615  001366  C09A  F022         	movff	___ftadd@f2+2,___ftpack@arg+2
  4616  00136A  C0A0  F023         	movff	___ftadd@exp1,___ftpack@exp
  4617  00136E  C09E  F024         	movff	___ftadd@sign,___ftpack@sign
  4618  001372  EC6B  F00C         	call	___ftpack	;wreg free
  4619  001376  C020  F095         	movff	?___ftpack,?___ftadd
  4620  00137A  C021  F096         	movff	?___ftpack+1,?___ftadd+1
  4621  00137E  C022  F097         	movff	?___ftpack+2,?___ftadd+2
  4622  001382  0012               	return	
  4623  001384                     __end_of___ftadd:
  4624                           	opt stack 0
  4625                           tblptru	equ	0xFF8
  4626                           tblptrh	equ	0xFF7
  4627                           tblptrl	equ	0xFF6
  4628                           tablat	equ	0xFF5
  4629                           prodh	equ	0xFF4
  4630                           prodl	equ	0xFF3
  4631                           intcon	equ	0xFF2
  4632                           postinc0	equ	0xFEE
  4633                           wreg	equ	0xFE8
  4634                           indf1	equ	0xFE7
  4635                           postdec1	equ	0xFE5
  4636                           fsr1h	equ	0xFE2
  4637                           fsr1l	equ	0xFE1
  4638                           indf2	equ	0xFDF
  4639                           postinc2	equ	0xFDE
  4640                           postdec2	equ	0xFDD
  4641                           fsr2h	equ	0xFDA
  4642                           fsr2l	equ	0xFD9
  4643                           status	equ	0xFD8
  4644                           
  4645 ;; *************** function ___ftneg *****************
  4646 ;; Defined at:
  4647 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  4648 ;; Parameters:    Size  Location     Type
  4649 ;;  f1              3    3[BANK0 ] float 
  4650 ;; Auto vars:     Size  Location     Type
  4651 ;;		None
  4652 ;; Return value:  Size  Location     Type
  4653 ;;                  3    3[BANK0 ] float 
  4654 ;; Registers used:
  4655 ;;		wreg, status,2, status,0
  4656 ;; Tracked objects:
  4657 ;;		On entry : 0/0
  4658 ;;		On exit  : 0/0
  4659 ;;		Unchanged: 0/0
  4660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4661 ;;      Params:         0       3       0       0       0       0       0
  4662 ;;      Locals:         0       0       0       0       0       0       0
  4663 ;;      Temps:          0       0       0       0       0       0       0
  4664 ;;      Totals:         0       3       0       0       0       0       0
  4665 ;;Total ram usage:        3 bytes
  4666 ;; Hardware stack levels used:    1
  4667 ;; Hardware stack levels required when called:    2
  4668 ;; This function calls:
  4669 ;;		Nothing
  4670 ;; This function is called by:
  4671 ;;		_main
  4672 ;;		_exp
  4673 ;; This function uses a non-reentrant model
  4674 ;;
  4675                           
  4676                           	psect	text13
  4677  001E4A                     __ptext13:
  4678                           	opt stack 0
  4679  001E4A                     ___ftneg:
  4680                           	opt stack 27
  4681                           
  4682                           ;incstack = 0
  4683  001E4A  0100               	movlb	0	; () banked
  4684  001E4C  5183               	movf	___ftneg@f1& (0+255),w,b
  4685  001E4E  1184               	iorwf	(___ftneg@f1+1)& (0+255),w,b
  4686  001E50  1185               	iorwf	(___ftneg@f1+2)& (0+255),w,b
  4687  001E52  B4D8               	btfsc	status,2,c
  4688  001E54  D006               	goto	l714
  4689                           
  4690                           ; BSR set to: 0
  4691  001E56  0E00               	movlw	0
  4692  001E58  1B83               	xorwf	___ftneg@f1& (0+255),f,b
  4693  001E5A  0E00               	movlw	0
  4694  001E5C  1B84               	xorwf	(___ftneg@f1+1)& (0+255),f,b
  4695  001E5E  0E80               	movlw	128
  4696  001E60  1B85               	xorwf	(___ftneg@f1+2)& (0+255),f,b
  4697  001E62                     l714:
  4698                           
  4699                           ; BSR set to: 0
  4700  001E62  C083  F083         	movff	___ftneg@f1,?___ftneg
  4701  001E66  C084  F084         	movff	___ftneg@f1+1,?___ftneg+1
  4702  001E6A  C085  F085         	movff	___ftneg@f1+2,?___ftneg+2
  4703                           
  4704                           ; BSR set to: 0
  4705  001E6E  0012               	return		;funcret
  4706  001E70                     __end_of___ftneg:
  4707                           	opt stack 0
  4708                           tblptru	equ	0xFF8
  4709                           tblptrh	equ	0xFF7
  4710                           tblptrl	equ	0xFF6
  4711                           tablat	equ	0xFF5
  4712                           prodh	equ	0xFF4
  4713                           prodl	equ	0xFF3
  4714                           intcon	equ	0xFF2
  4715                           postinc0	equ	0xFEE
  4716                           wreg	equ	0xFE8
  4717                           indf1	equ	0xFE7
  4718                           postdec1	equ	0xFE5
  4719                           fsr1h	equ	0xFE2
  4720                           fsr1l	equ	0xFE1
  4721                           indf2	equ	0xFDF
  4722                           postinc2	equ	0xFDE
  4723                           postdec2	equ	0xFDD
  4724                           fsr2h	equ	0xFDA
  4725                           fsr2l	equ	0xFD9
  4726                           status	equ	0xFD8
  4727                           
  4728 ;; *************** function ___ftdiv *****************
  4729 ;; Defined at:
  4730 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  4731 ;; Parameters:    Size  Location     Type
  4732 ;;  f1              3   39[COMRAM] float 
  4733 ;;  f2              3   42[COMRAM] float 
  4734 ;; Auto vars:     Size  Location     Type
  4735 ;;  f3              3   49[COMRAM] float 
  4736 ;;  sign            1   53[COMRAM] unsigned char 
  4737 ;;  exp             1   52[COMRAM] unsigned char 
  4738 ;;  cntr            1   48[COMRAM] unsigned char 
  4739 ;; Return value:  Size  Location     Type
  4740 ;;                  3   39[COMRAM] float 
  4741 ;; Registers used:
  4742 ;;		wreg, status,2, status,0, cstack
  4743 ;; Tracked objects:
  4744 ;;		On entry : 0/0
  4745 ;;		On exit  : 0/0
  4746 ;;		Unchanged: 0/0
  4747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4748 ;;      Params:         6       0       0       0       0       0       0
  4749 ;;      Locals:         6       0       0       0       0       0       0
  4750 ;;      Temps:          3       0       0       0       0       0       0
  4751 ;;      Totals:        15       0       0       0       0       0       0
  4752 ;;Total ram usage:       15 bytes
  4753 ;; Hardware stack levels used:    1
  4754 ;; Hardware stack levels required when called:    3
  4755 ;; This function calls:
  4756 ;;		___ftpack
  4757 ;; This function is called by:
  4758 ;;		_main
  4759 ;;		_exp
  4760 ;; This function uses a non-reentrant model
  4761 ;;
  4762                           
  4763                           	psect	text14
  4764  00156E                     __ptext14:
  4765                           	opt stack 0
  4766  00156E                     ___ftdiv:
  4767                           	opt stack 26
  4768                           
  4769                           ; BSR set to: 0
  4770                           ;incstack = 0
  4771  00156E  C02A  F02E         	movff	___ftdiv@f1+2,??___ftdiv
  4772  001572  6A2F               	clrf	(??___ftdiv+1)& (0+255),c
  4773  001574  6A30               	clrf	(??___ftdiv+2)& (0+255),c
  4774  001576  3429               	rlcf	___ftdiv@f1+1,w,c
  4775  001578  362E               	rlcf	??___ftdiv& (0+255),f,c
  4776  00157A  E301               	bnc	u3101
  4777  00157C  802F               	bsf	(??___ftdiv+1)& (0+255),0,c
  4778  00157E                     u3101:
  4779  00157E  502E               	movf	??___ftdiv,w,c
  4780  001580  6E35               	movwf	___ftdiv@exp,c
  4781  001582  5035               	movf	___ftdiv@exp,w,c
  4782  001584  A4D8               	btfss	status,2,c
  4783  001586  D007               	goto	l688
  4784  001588  0E00               	movlw	0
  4785  00158A  6E28               	movwf	?___ftdiv,c
  4786  00158C  0E00               	movlw	0
  4787  00158E  6E29               	movwf	?___ftdiv+1,c
  4788  001590  0E00               	movlw	0
  4789  001592  6E2A               	movwf	?___ftdiv+2,c
  4790  001594  0012               	return	
  4791  001596                     l688:
  4792  001596  C02D  F02E         	movff	___ftdiv@f2+2,??___ftdiv
  4793  00159A  6A2F               	clrf	(??___ftdiv+1)& (0+255),c
  4794  00159C  6A30               	clrf	(??___ftdiv+2)& (0+255),c
  4795  00159E  342C               	rlcf	___ftdiv@f2+1,w,c
  4796  0015A0  362E               	rlcf	??___ftdiv& (0+255),f,c
  4797  0015A2  E301               	bnc	u3121
  4798  0015A4  802F               	bsf	(??___ftdiv+1)& (0+255),0,c
  4799  0015A6                     u3121:
  4800  0015A6  502E               	movf	??___ftdiv,w,c
  4801  0015A8  6E36               	movwf	___ftdiv@sign,c
  4802  0015AA  5036               	movf	___ftdiv@sign,w,c
  4803  0015AC  A4D8               	btfss	status,2,c
  4804  0015AE  D007               	goto	l690
  4805  0015B0  0E00               	movlw	0
  4806  0015B2  6E28               	movwf	?___ftdiv,c
  4807  0015B4  0E00               	movlw	0
  4808  0015B6  6E29               	movwf	?___ftdiv+1,c
  4809  0015B8  0E00               	movlw	0
  4810  0015BA  6E2A               	movwf	?___ftdiv+2,c
  4811  0015BC  0012               	return	
  4812  0015BE                     l690:
  4813  0015BE  0E00               	movlw	0
  4814  0015C0  6E32               	movwf	___ftdiv@f3,c
  4815  0015C2  0E00               	movlw	0
  4816  0015C4  6E33               	movwf	___ftdiv@f3+1,c
  4817  0015C6  0E00               	movlw	0
  4818  0015C8  6E34               	movwf	___ftdiv@f3+2,c
  4819  0015CA  5036               	movf	___ftdiv@sign,w,c
  4820  0015CC  0F89               	addlw	137
  4821  0015CE  5E35               	subwf	___ftdiv@exp,f,c
  4822  0015D0  C02A  F036         	movff	___ftdiv@f1+2,___ftdiv@sign
  4823  0015D4  502D               	movf	___ftdiv@f2+2,w,c
  4824  0015D6  1A36               	xorwf	___ftdiv@sign,f,c
  4825  0015D8  0E80               	movlw	128
  4826  0015DA  1636               	andwf	___ftdiv@sign,f,c
  4827  0015DC  8E29               	bsf	___ftdiv@f1+1,7,c
  4828  0015DE  0EFF               	movlw	255
  4829  0015E0  1628               	andwf	___ftdiv@f1,f,c
  4830  0015E2  0EFF               	movlw	255
  4831  0015E4  1629               	andwf	___ftdiv@f1+1,f,c
  4832  0015E6  0E00               	movlw	0
  4833  0015E8  162A               	andwf	___ftdiv@f1+2,f,c
  4834  0015EA  8E2C               	bsf	___ftdiv@f2+1,7,c
  4835  0015EC  0EFF               	movlw	255
  4836  0015EE  162B               	andwf	___ftdiv@f2,f,c
  4837  0015F0  0EFF               	movlw	255
  4838  0015F2  162C               	andwf	___ftdiv@f2+1,f,c
  4839  0015F4  0E00               	movlw	0
  4840  0015F6  162D               	andwf	___ftdiv@f2+2,f,c
  4841  0015F8  0E18               	movlw	24
  4842  0015FA  6E31               	movwf	___ftdiv@cntr,c
  4843  0015FC  90D8               	bcf	status,0,c
  4844  0015FE  3632               	rlcf	___ftdiv@f3,f,c
  4845  001600  3633               	rlcf	___ftdiv@f3+1,f,c
  4846  001602  3634               	rlcf	___ftdiv@f3+2,f,c
  4847  001604  502B               	movf	___ftdiv@f2,w,c
  4848  001606  5C28               	subwf	___ftdiv@f1,w,c
  4849  001608  502C               	movf	___ftdiv@f2+1,w,c
  4850  00160A  5829               	subwfb	___ftdiv@f1+1,w,c
  4851  00160C  502D               	movf	___ftdiv@f2+2,w,c
  4852  00160E  582A               	subwfb	___ftdiv@f1+2,w,c
  4853  001610  A0D8               	btfss	status,0,c
  4854  001612  D007               	goto	l692
  4855  001614  502B               	movf	___ftdiv@f2,w,c
  4856  001616  5E28               	subwf	___ftdiv@f1,f,c
  4857  001618  502C               	movf	___ftdiv@f2+1,w,c
  4858  00161A  5A29               	subwfb	___ftdiv@f1+1,f,c
  4859  00161C  502D               	movf	___ftdiv@f2+2,w,c
  4860  00161E  5A2A               	subwfb	___ftdiv@f1+2,f,c
  4861  001620  8032               	bsf	___ftdiv@f3,0,c
  4862  001622                     l692:
  4863  001622  90D8               	bcf	status,0,c
  4864  001624  3628               	rlcf	___ftdiv@f1,f,c
  4865  001626  3629               	rlcf	___ftdiv@f1+1,f,c
  4866  001628  362A               	rlcf	___ftdiv@f1+2,f,c
  4867  00162A  2E31               	decfsz	___ftdiv@cntr,f,c
  4868  00162C  D7E7               	goto	l691
  4869  00162E  C032  F020         	movff	___ftdiv@f3,___ftpack@arg
  4870  001632  C033  F021         	movff	___ftdiv@f3+1,___ftpack@arg+1
  4871  001636  C034  F022         	movff	___ftdiv@f3+2,___ftpack@arg+2
  4872  00163A  C035  F023         	movff	___ftdiv@exp,___ftpack@exp
  4873  00163E  C036  F024         	movff	___ftdiv@sign,___ftpack@sign
  4874  001642  EC6B  F00C         	call	___ftpack	;wreg free
  4875  001646  C020  F028         	movff	?___ftpack,?___ftdiv
  4876  00164A  C021  F029         	movff	?___ftpack+1,?___ftdiv+1
  4877  00164E  C022  F02A         	movff	?___ftpack+2,?___ftdiv+2
  4878  001652  0012               	return	
  4879  001654                     __end_of___ftdiv:
  4880                           	opt stack 0
  4881                           tblptru	equ	0xFF8
  4882                           tblptrh	equ	0xFF7
  4883                           tblptrl	equ	0xFF6
  4884                           tablat	equ	0xFF5
  4885                           prodh	equ	0xFF4
  4886                           prodl	equ	0xFF3
  4887                           intcon	equ	0xFF2
  4888                           postinc0	equ	0xFEE
  4889                           wreg	equ	0xFE8
  4890                           indf1	equ	0xFE7
  4891                           postdec1	equ	0xFE5
  4892                           fsr1h	equ	0xFE2
  4893                           fsr1l	equ	0xFE1
  4894                           indf2	equ	0xFDF
  4895                           postinc2	equ	0xFDE
  4896                           postdec2	equ	0xFDD
  4897                           fsr2h	equ	0xFDA
  4898                           fsr2l	equ	0xFD9
  4899                           status	equ	0xFD8
  4900                           
  4901 ;; *************** function ___awtoft *****************
  4902 ;; Defined at:
  4903 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  4904 ;; Parameters:    Size  Location     Type
  4905 ;;  c               2    0[BANK0 ] int 
  4906 ;; Auto vars:     Size  Location     Type
  4907 ;;  sign            1   69[COMRAM] unsigned char 
  4908 ;; Return value:  Size  Location     Type
  4909 ;;                  3    0[BANK0 ] float 
  4910 ;; Registers used:
  4911 ;;		wreg, status,2, status,0, cstack
  4912 ;; Tracked objects:
  4913 ;;		On entry : 0/0
  4914 ;;		On exit  : 0/0
  4915 ;;		Unchanged: 0/0
  4916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4917 ;;      Params:         0       3       0       0       0       0       0
  4918 ;;      Locals:         1       0       0       0       0       0       0
  4919 ;;      Temps:          0       0       0       0       0       0       0
  4920 ;;      Totals:         1       3       0       0       0       0       0
  4921 ;;Total ram usage:        4 bytes
  4922 ;; Hardware stack levels used:    1
  4923 ;; Hardware stack levels required when called:    3
  4924 ;; This function calls:
  4925 ;;		___ftpack
  4926 ;; This function is called by:
  4927 ;;		_main
  4928 ;;		_exp
  4929 ;; This function uses a non-reentrant model
  4930 ;;
  4931                           
  4932                           	psect	text15
  4933  001CAE                     __ptext15:
  4934                           	opt stack 0
  4935  001CAE                     ___awtoft:
  4936                           	opt stack 26
  4937                           
  4938                           ;incstack = 0
  4939  001CAE  0E00               	movlw	0
  4940  001CB0  6E46               	movwf	___awtoft@sign,c
  4941  001CB2  0100               	movlb	0	; () banked
  4942  001CB4  AF81               	btfss	(___awtoft@c+1)& (0+255),7,b
  4943  001CB6  D006               	goto	l561
  4944                           
  4945                           ; BSR set to: 0
  4946  001CB8  6D80               	negf	___awtoft@c& (0+255),b
  4947  001CBA  1F81               	comf	(___awtoft@c+1)& (0+255),f,b
  4948  001CBC  B0D8               	btfsc	status,0,c
  4949  001CBE  2B81               	incf	(___awtoft@c+1)& (0+255),f,b
  4950                           
  4951                           ; BSR set to: 0
  4952  001CC0  0E01               	movlw	1
  4953  001CC2  6E46               	movwf	___awtoft@sign,c
  4954  001CC4                     l561:
  4955                           
  4956                           ; BSR set to: 0
  4957                           
  4958                           ; BSR set to: 0
  4959  001CC4  C080  F020         	movff	___awtoft@c,___ftpack@arg
  4960  001CC8  C081  F021         	movff	___awtoft@c+1,___ftpack@arg+1
  4961  001CCC  6A22               	clrf	___ftpack@arg+2,c
  4962  001CCE  0E8E               	movlw	142
  4963  001CD0  6E23               	movwf	___ftpack@exp,c
  4964  001CD2  C046  F024         	movff	___awtoft@sign,___ftpack@sign
  4965  001CD6  EC6B  F00C         	call	___ftpack	;wreg free
  4966  001CDA  C020  F080         	movff	?___ftpack,?___awtoft
  4967  001CDE  C021  F081         	movff	?___ftpack+1,?___awtoft+1
  4968  001CE2  C022  F082         	movff	?___ftpack+2,?___awtoft+2
  4969  001CE6  0012               	return	
  4970  001CE8                     __end_of___awtoft:
  4971                           	opt stack 0
  4972                           tblptru	equ	0xFF8
  4973                           tblptrh	equ	0xFF7
  4974                           tblptrl	equ	0xFF6
  4975                           tablat	equ	0xFF5
  4976                           prodh	equ	0xFF4
  4977                           prodl	equ	0xFF3
  4978                           intcon	equ	0xFF2
  4979                           postinc0	equ	0xFEE
  4980                           wreg	equ	0xFE8
  4981                           indf1	equ	0xFE7
  4982                           postdec1	equ	0xFE5
  4983                           fsr1h	equ	0xFE2
  4984                           fsr1l	equ	0xFE1
  4985                           indf2	equ	0xFDF
  4986                           postinc2	equ	0xFDE
  4987                           postdec2	equ	0xFDD
  4988                           fsr2h	equ	0xFDA
  4989                           fsr2l	equ	0xFD9
  4990                           status	equ	0xFD8
  4991                           
  4992 ;; *************** function ___lwtoft *****************
  4993 ;; Defined at:
  4994 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
  4995 ;; Parameters:    Size  Location     Type
  4996 ;;  c               2   39[COMRAM] unsigned int 
  4997 ;; Auto vars:     Size  Location     Type
  4998 ;;		None
  4999 ;; Return value:  Size  Location     Type
  5000 ;;                  3   39[COMRAM] float 
  5001 ;; Registers used:
  5002 ;;		wreg, status,2, status,0, cstack
  5003 ;; Tracked objects:
  5004 ;;		On entry : 0/0
  5005 ;;		On exit  : 0/0
  5006 ;;		Unchanged: 0/0
  5007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5008 ;;      Params:         3       0       0       0       0       0       0
  5009 ;;      Locals:         0       0       0       0       0       0       0
  5010 ;;      Temps:          0       0       0       0       0       0       0
  5011 ;;      Totals:         3       0       0       0       0       0       0
  5012 ;;Total ram usage:        3 bytes
  5013 ;; Hardware stack levels used:    1
  5014 ;; Hardware stack levels required when called:    3
  5015 ;; This function calls:
  5016 ;;		___ftpack
  5017 ;; This function is called by:
  5018 ;;		_main
  5019 ;; This function uses a non-reentrant model
  5020 ;;
  5021                           
  5022                           	psect	text16
  5023  001E70                     __ptext16:
  5024                           	opt stack 0
  5025  001E70                     ___lwtoft:
  5026                           	opt stack 27
  5027                           
  5028                           ;incstack = 0
  5029  001E70  C028  F020         	movff	___lwtoft@c,___ftpack@arg
  5030  001E74  C029  F021         	movff	___lwtoft@c+1,___ftpack@arg+1
  5031  001E78  6A22               	clrf	___ftpack@arg+2,c
  5032  001E7A  0E8E               	movlw	142
  5033  001E7C  6E23               	movwf	___ftpack@exp,c
  5034  001E7E  0E00               	movlw	0
  5035  001E80  6E24               	movwf	___ftpack@sign,c
  5036  001E82  EC6B  F00C         	call	___ftpack	;wreg free
  5037  001E86  C020  F028         	movff	?___ftpack,?___lwtoft
  5038  001E8A  C021  F029         	movff	?___ftpack+1,?___lwtoft+1
  5039  001E8E  C022  F02A         	movff	?___ftpack+2,?___lwtoft+2
  5040  001E92  0012               	return	
  5041  001E94                     __end_of___lwtoft:
  5042                           	opt stack 0
  5043                           tblptru	equ	0xFF8
  5044                           tblptrh	equ	0xFF7
  5045                           tblptrl	equ	0xFF6
  5046                           tablat	equ	0xFF5
  5047                           prodh	equ	0xFF4
  5048                           prodl	equ	0xFF3
  5049                           intcon	equ	0xFF2
  5050                           postinc0	equ	0xFEE
  5051                           wreg	equ	0xFE8
  5052                           indf1	equ	0xFE7
  5053                           postdec1	equ	0xFE5
  5054                           fsr1h	equ	0xFE2
  5055                           fsr1l	equ	0xFE1
  5056                           indf2	equ	0xFDF
  5057                           postinc2	equ	0xFDE
  5058                           postdec2	equ	0xFDD
  5059                           fsr2h	equ	0xFDA
  5060                           fsr2l	equ	0xFD9
  5061                           status	equ	0xFD8
  5062                           
  5063 ;; *************** function ___ftpack *****************
  5064 ;; Defined at:
  5065 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  5066 ;; Parameters:    Size  Location     Type
  5067 ;;  arg             3   31[COMRAM] unsigned um
  5068 ;;  exp             1   34[COMRAM] unsigned char 
  5069 ;;  sign            1   35[COMRAM] unsigned char 
  5070 ;; Auto vars:     Size  Location     Type
  5071 ;;		None
  5072 ;; Return value:  Size  Location     Type
  5073 ;;                  3   31[COMRAM] float 
  5074 ;; Registers used:
  5075 ;;		wreg, status,2, status,0
  5076 ;; Tracked objects:
  5077 ;;		On entry : 0/0
  5078 ;;		On exit  : 0/0
  5079 ;;		Unchanged: 0/0
  5080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5081 ;;      Params:         5       0       0       0       0       0       0
  5082 ;;      Locals:         0       0       0       0       0       0       0
  5083 ;;      Temps:          3       0       0       0       0       0       0
  5084 ;;      Totals:         8       0       0       0       0       0       0
  5085 ;;Total ram usage:        8 bytes
  5086 ;; Hardware stack levels used:    1
  5087 ;; Hardware stack levels required when called:    2
  5088 ;; This function calls:
  5089 ;;		Nothing
  5090 ;; This function is called by:
  5091 ;;		___altoft
  5092 ;;		___awtoft
  5093 ;;		___ftadd
  5094 ;;		___ftdiv
  5095 ;;		___ftmul
  5096 ;;		___lwtoft
  5097 ;; This function uses a non-reentrant model
  5098 ;;
  5099                           
  5100                           	psect	text17
  5101  0018D6                     __ptext17:
  5102                           	opt stack 0
  5103  0018D6                     ___ftpack:
  5104                           	opt stack 25
  5105                           
  5106                           ;incstack = 0
  5107  0018D6  5023               	movf	___ftpack@exp,w,c
  5108  0018D8  B4D8               	btfsc	status,2,c
  5109  0018DA  D005               	goto	u2740
  5110  0018DC  5020               	movf	___ftpack@arg,w,c
  5111  0018DE  1021               	iorwf	___ftpack@arg+1,w,c
  5112  0018E0  1022               	iorwf	___ftpack@arg+2,w,c
  5113  0018E2  A4D8               	btfss	status,2,c
  5114  0018E4  D00C               	goto	l599
  5115  0018E6                     u2740:
  5116  0018E6  0E00               	movlw	0
  5117  0018E8  6E20               	movwf	?___ftpack,c
  5118  0018EA  0E00               	movlw	0
  5119  0018EC  6E21               	movwf	?___ftpack+1,c
  5120  0018EE  0E00               	movlw	0
  5121  0018F0  6E22               	movwf	?___ftpack+2,c
  5122  0018F2  0012               	return	
  5123  0018F4  2A23               	incf	___ftpack@exp,f,c
  5124  0018F6  90D8               	bcf	status,0,c
  5125  0018F8  3222               	rrcf	___ftpack@arg+2,f,c
  5126  0018FA  3221               	rrcf	___ftpack@arg+1,f,c
  5127  0018FC  3220               	rrcf	___ftpack@arg,f,c
  5128  0018FE                     l599:
  5129  0018FE  0E00               	movlw	0
  5130  001900  1420               	andwf	___ftpack@arg,w,c
  5131  001902  6E25               	movwf	??___ftpack& (0+255),c
  5132  001904  0E00               	movlw	0
  5133  001906  1421               	andwf	___ftpack@arg+1,w,c
  5134  001908  6E26               	movwf	(??___ftpack+1)& (0+255),c
  5135  00190A  0EFE               	movlw	254
  5136  00190C  1422               	andwf	___ftpack@arg+2,w,c
  5137  00190E  6E27               	movwf	(??___ftpack+2)& (0+255),c
  5138  001910  5025               	movf	??___ftpack,w,c
  5139  001912  1026               	iorwf	??___ftpack+1,w,c
  5140  001914  1027               	iorwf	??___ftpack+2,w,c
  5141  001916  B4D8               	btfsc	status,2,c
  5142  001918  D00C               	goto	l602
  5143  00191A  D7EC               	goto	l600
  5144  00191C  2A23               	incf	___ftpack@exp,f,c
  5145  00191E  0E01               	movlw	1
  5146  001920  2620               	addwf	___ftpack@arg,f,c
  5147  001922  0E00               	movlw	0
  5148  001924  2221               	addwfc	___ftpack@arg+1,f,c
  5149  001926  0E00               	movlw	0
  5150  001928  2222               	addwfc	___ftpack@arg+2,f,c
  5151  00192A  90D8               	bcf	status,0,c
  5152  00192C  3222               	rrcf	___ftpack@arg+2,f,c
  5153  00192E  3221               	rrcf	___ftpack@arg+1,f,c
  5154  001930  3220               	rrcf	___ftpack@arg,f,c
  5155  001932                     l602:
  5156  001932  0E00               	movlw	0
  5157  001934  1420               	andwf	___ftpack@arg,w,c
  5158  001936  6E25               	movwf	??___ftpack& (0+255),c
  5159  001938  0E00               	movlw	0
  5160  00193A  1421               	andwf	___ftpack@arg+1,w,c
  5161  00193C  6E26               	movwf	(??___ftpack+1)& (0+255),c
  5162  00193E  0EFF               	movlw	255
  5163  001940  1422               	andwf	___ftpack@arg+2,w,c
  5164  001942  6E27               	movwf	(??___ftpack+2)& (0+255),c
  5165  001944  5025               	movf	??___ftpack,w,c
  5166  001946  1026               	iorwf	??___ftpack+1,w,c
  5167  001948  1027               	iorwf	??___ftpack+2,w,c
  5168  00194A  B4D8               	btfsc	status,2,c
  5169  00194C  D006               	goto	l605
  5170  00194E  D7E6               	goto	l603
  5171  001950  0623               	decf	___ftpack@exp,f,c
  5172  001952  90D8               	bcf	status,0,c
  5173  001954  3620               	rlcf	___ftpack@arg,f,c
  5174  001956  3621               	rlcf	___ftpack@arg+1,f,c
  5175  001958  3622               	rlcf	___ftpack@arg+2,f,c
  5176  00195A                     l605:
  5177  00195A  BE21               	btfsc	___ftpack@arg+1,7,c
  5178  00195C  D003               	goto	u2780
  5179  00195E  0E02               	movlw	2
  5180  001960  6023               	cpfslt	___ftpack@exp,c
  5181  001962  D7F6               	goto	l606
  5182  001964                     u2780:
  5183  001964  A023               	btfss	___ftpack@exp,0,c
  5184  001966  9E21               	bcf	___ftpack@arg+1,7,c
  5185  001968  90D8               	bcf	status,0,c
  5186  00196A  3223               	rrcf	___ftpack@exp,f,c
  5187  00196C  5023               	movf	___ftpack@exp,w,c
  5188  00196E  1222               	iorwf	___ftpack@arg+2,f,c
  5189  001970  5024               	movf	___ftpack@sign,w,c
  5190  001972  A4D8               	btfss	status,2,c
  5191  001974  8E22               	bsf	___ftpack@arg+2,7,c
  5192  001976  C020  F020         	movff	___ftpack@arg,?___ftpack
  5193  00197A  C021  F021         	movff	___ftpack@arg+1,?___ftpack+1
  5194  00197E  C022  F022         	movff	___ftpack@arg+2,?___ftpack+2
  5195  001982  0012               	return	
  5196  001984                     __end_of___ftpack:
  5197                           	opt stack 0
  5198                           tblptru	equ	0xFF8
  5199                           tblptrh	equ	0xFF7
  5200                           tblptrl	equ	0xFF6
  5201                           tablat	equ	0xFF5
  5202                           prodh	equ	0xFF4
  5203                           prodl	equ	0xFF3
  5204                           intcon	equ	0xFF2
  5205                           postinc0	equ	0xFEE
  5206                           wreg	equ	0xFE8
  5207                           indf1	equ	0xFE7
  5208                           postdec1	equ	0xFE5
  5209                           fsr1h	equ	0xFE2
  5210                           fsr1l	equ	0xFE1
  5211                           indf2	equ	0xFDF
  5212                           postinc2	equ	0xFDE
  5213                           postdec2	equ	0xFDD
  5214                           fsr2h	equ	0xFDA
  5215                           fsr2l	equ	0xFD9
  5216                           status	equ	0xFD8
  5217                           
  5218 ;; *************** function ___awdiv *****************
  5219 ;; Defined at:
  5220 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  5221 ;; Parameters:    Size  Location     Type
  5222 ;;  dividend        2   31[COMRAM] int 
  5223 ;;  divisor         2   33[COMRAM] int 
  5224 ;; Auto vars:     Size  Location     Type
  5225 ;;  quotient        2   37[COMRAM] int 
  5226 ;;  sign            1   36[COMRAM] unsigned char 
  5227 ;;  counter         1   35[COMRAM] unsigned char 
  5228 ;; Return value:  Size  Location     Type
  5229 ;;                  2   31[COMRAM] int 
  5230 ;; Registers used:
  5231 ;;		wreg, status,2, status,0
  5232 ;; Tracked objects:
  5233 ;;		On entry : 0/0
  5234 ;;		On exit  : 0/0
  5235 ;;		Unchanged: 0/0
  5236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5237 ;;      Params:         4       0       0       0       0       0       0
  5238 ;;      Locals:         4       0       0       0       0       0       0
  5239 ;;      Temps:          0       0       0       0       0       0       0
  5240 ;;      Totals:         8       0       0       0       0       0       0
  5241 ;;Total ram usage:        8 bytes
  5242 ;; Hardware stack levels used:    1
  5243 ;; Hardware stack levels required when called:    2
  5244 ;; This function calls:
  5245 ;;		Nothing
  5246 ;; This function is called by:
  5247 ;;		_main
  5248 ;; This function uses a non-reentrant model
  5249 ;;
  5250                           
  5251                           	psect	text18
  5252  001AAA                     __ptext18:
  5253                           	opt stack 0
  5254  001AAA                     ___awdiv:
  5255                           	opt stack 28
  5256                           
  5257                           ;incstack = 0
  5258  001AAA  0E00               	movlw	0
  5259  001AAC  6E25               	movwf	___awdiv@sign,c
  5260  001AAE  AE23               	btfss	___awdiv@divisor+1,7,c
  5261  001AB0  D006               	goto	l533
  5262  001AB2  6C22               	negf	___awdiv@divisor,c
  5263  001AB4  1E23               	comf	___awdiv@divisor+1,f,c
  5264  001AB6  B0D8               	btfsc	status,0,c
  5265  001AB8  2A23               	incf	___awdiv@divisor+1,f,c
  5266  001ABA  0E01               	movlw	1
  5267  001ABC  6E25               	movwf	___awdiv@sign,c
  5268  001ABE                     l533:
  5269  001ABE  AE21               	btfss	___awdiv@dividend+1,7,c
  5270  001AC0  D006               	goto	l534
  5271  001AC2  6C20               	negf	___awdiv@dividend,c
  5272  001AC4  1E21               	comf	___awdiv@dividend+1,f,c
  5273  001AC6  B0D8               	btfsc	status,0,c
  5274  001AC8  2A21               	incf	___awdiv@dividend+1,f,c
  5275  001ACA  0E01               	movlw	1
  5276  001ACC  1A25               	xorwf	___awdiv@sign,f,c
  5277  001ACE                     l534:
  5278  001ACE  0E00               	movlw	0
  5279  001AD0  6E27               	movwf	___awdiv@quotient+1,c
  5280  001AD2  0E00               	movlw	0
  5281  001AD4  6E26               	movwf	___awdiv@quotient,c
  5282  001AD6  5022               	movf	___awdiv@divisor,w,c
  5283  001AD8  1023               	iorwf	___awdiv@divisor+1,w,c
  5284  001ADA  B4D8               	btfsc	status,2,c
  5285  001ADC  D01C               	goto	l541
  5286  001ADE  0E01               	movlw	1
  5287  001AE0  6E24               	movwf	___awdiv@counter,c
  5288  001AE2  D004               	goto	l536
  5289  001AE4  90D8               	bcf	status,0,c
  5290  001AE6  3622               	rlcf	___awdiv@divisor,f,c
  5291  001AE8  3623               	rlcf	___awdiv@divisor+1,f,c
  5292  001AEA  2A24               	incf	___awdiv@counter,f,c
  5293  001AEC                     l536:
  5294  001AEC  AE23               	btfss	___awdiv@divisor+1,7,c
  5295  001AEE  D7FA               	goto	l537
  5296  001AF0                     u2230:
  5297  001AF0  90D8               	bcf	status,0,c
  5298  001AF2  3626               	rlcf	___awdiv@quotient,f,c
  5299  001AF4  3627               	rlcf	___awdiv@quotient+1,f,c
  5300  001AF6  5022               	movf	___awdiv@divisor,w,c
  5301  001AF8  5C20               	subwf	___awdiv@dividend,w,c
  5302  001AFA  5023               	movf	___awdiv@divisor+1,w,c
  5303  001AFC  5821               	subwfb	___awdiv@dividend+1,w,c
  5304  001AFE  A0D8               	btfss	status,0,c
  5305  001B00  D005               	goto	l540
  5306  001B02  5022               	movf	___awdiv@divisor,w,c
  5307  001B04  5E20               	subwf	___awdiv@dividend,f,c
  5308  001B06  5023               	movf	___awdiv@divisor+1,w,c
  5309  001B08  5A21               	subwfb	___awdiv@dividend+1,f,c
  5310  001B0A  8026               	bsf	___awdiv@quotient,0,c
  5311  001B0C                     l540:
  5312  001B0C  90D8               	bcf	status,0,c
  5313  001B0E  3223               	rrcf	___awdiv@divisor+1,f,c
  5314  001B10  3222               	rrcf	___awdiv@divisor,f,c
  5315  001B12  2E24               	decfsz	___awdiv@counter,f,c
  5316  001B14  D7ED               	goto	u2230
  5317  001B16                     l541:
  5318  001B16  5025               	movf	___awdiv@sign,w,c
  5319  001B18  B4D8               	btfsc	status,2,c
  5320  001B1A  D004               	goto	l542
  5321  001B1C  6C26               	negf	___awdiv@quotient,c
  5322  001B1E  1E27               	comf	___awdiv@quotient+1,f,c
  5323  001B20  B0D8               	btfsc	status,0,c
  5324  001B22  2A27               	incf	___awdiv@quotient+1,f,c
  5325  001B24                     l542:
  5326  001B24  C026  F020         	movff	___awdiv@quotient,?___awdiv
  5327  001B28  C027  F021         	movff	___awdiv@quotient+1,?___awdiv+1
  5328  001B2C  0012               	return	
  5329  001B2E                     __end_of___awdiv:
  5330                           	opt stack 0
  5331                           tblptru	equ	0xFF8
  5332                           tblptrh	equ	0xFF7
  5333                           tblptrl	equ	0xFF6
  5334                           tablat	equ	0xFF5
  5335                           prodh	equ	0xFF4
  5336                           prodl	equ	0xFF3
  5337                           intcon	equ	0xFF2
  5338                           postinc0	equ	0xFEE
  5339                           wreg	equ	0xFE8
  5340                           indf1	equ	0xFE7
  5341                           postdec1	equ	0xFE5
  5342                           fsr1h	equ	0xFE2
  5343                           fsr1l	equ	0xFE1
  5344                           indf2	equ	0xFDF
  5345                           postinc2	equ	0xFDE
  5346                           postdec2	equ	0xFDD
  5347                           fsr2h	equ	0xFDA
  5348                           fsr2l	equ	0xFD9
  5349                           status	equ	0xFD8
  5350                           
  5351 ;; *************** function _UartInit *****************
  5352 ;; Defined at:
  5353 ;;		line 437 in file "main.c"
  5354 ;; Parameters:    Size  Location     Type
  5355 ;;		None
  5356 ;; Auto vars:     Size  Location     Type
  5357 ;;		None
  5358 ;; Return value:  Size  Location     Type
  5359 ;;                  1    wreg      void 
  5360 ;; Registers used:
  5361 ;;		wreg, status,2
  5362 ;; Tracked objects:
  5363 ;;		On entry : 0/0
  5364 ;;		On exit  : 0/0
  5365 ;;		Unchanged: 0/0
  5366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5367 ;;      Params:         0       0       0       0       0       0       0
  5368 ;;      Locals:         0       0       0       0       0       0       0
  5369 ;;      Temps:          0       0       0       0       0       0       0
  5370 ;;      Totals:         0       0       0       0       0       0       0
  5371 ;;Total ram usage:        0 bytes
  5372 ;; Hardware stack levels used:    1
  5373 ;; Hardware stack levels required when called:    2
  5374 ;; This function calls:
  5375 ;;		Nothing
  5376 ;; This function is called by:
  5377 ;;		_main
  5378 ;; This function uses a non-reentrant model
  5379 ;;
  5380                           
  5381                           	psect	text19
  5382  001D50                     __ptext19:
  5383                           	opt stack 0
  5384  001D50                     _UartInit:
  5385                           	opt stack 28
  5386                           
  5387                           ;main.c: 439: TRISC6 = 0;
  5388                           
  5389                           ;incstack = 0
  5390  001D50  9C94               	bcf	3988,6,c	;volatile
  5391                           
  5392                           ;main.c: 440: TRISC7 = 1;
  5393  001D52  8E94               	bsf	3988,7,c	;volatile
  5394                           
  5395                           ;main.c: 444: TX9 = 0;
  5396  001D54  9CAC               	bcf	4012,6,c	;volatile
  5397                           
  5398                           ;main.c: 445: SYNC = 0;
  5399  001D56  98AC               	bcf	4012,4,c	;volatile
  5400                           
  5401                           ;main.c: 446: SENDB = 0;
  5402  001D58  96AC               	bcf	4012,3,c	;volatile
  5403                           
  5404                           ;main.c: 447: BRGH = 0;
  5405  001D5A  94AC               	bcf	4012,2,c	;volatile
  5406                           
  5407                           ;main.c: 449: RX9 = 0;
  5408  001D5C  9CAB               	bcf	4011,6,c	;volatile
  5409                           
  5410                           ;main.c: 450: CREN = 1;
  5411  001D5E  88AB               	bsf	4011,4,c	;volatile
  5412                           
  5413                           ;main.c: 451: FERR = 0;
  5414  001D60  94AB               	bcf	4011,2,c	;volatile
  5415                           
  5416                           ;main.c: 452: OERR = 0;
  5417  001D62  92AB               	bcf	4011,1,c	;volatile
  5418                           
  5419                           ;main.c: 453: RXDTP = 0;
  5420  001D64  9AB8               	bcf	4024,5,c	;volatile
  5421                           
  5422                           ;main.c: 454: TXCKP = 0;
  5423  001D66  98B8               	bcf	4024,4,c	;volatile
  5424                           
  5425                           ;main.c: 455: BRG16 = 1;
  5426  001D68  86B8               	bsf	4024,3,c	;volatile
  5427                           
  5428                           ;main.c: 456: WUE = 0;
  5429  001D6A  92B8               	bcf	4024,1,c	;volatile
  5430                           
  5431                           ;main.c: 457: ABDEN = 0;
  5432  001D6C  90B8               	bcf	4024,0,c	;volatile
  5433                           
  5434                           ;main.c: 458: SPBRGH = 0;
  5435  001D6E  0E00               	movlw	0
  5436  001D70  6EB0               	movwf	4016,c	;volatile
  5437                           
  5438                           ;main.c: 459: SPBRG = 16;
  5439  001D72  0E10               	movlw	16
  5440  001D74  6EAF               	movwf	4015,c	;volatile
  5441                           
  5442                           ;main.c: 462: RCIE = 1;
  5443  001D76  8A9D               	bsf	3997,5,c	;volatile
  5444                           
  5445                           ;main.c: 463: RCIF = 0;
  5446  001D78  9A9E               	bcf	3998,5,c	;volatile
  5447                           
  5448                           ;main.c: 465: TXEN = 1;
  5449  001D7A  8AAC               	bsf	4012,5,c	;volatile
  5450                           
  5451                           ;main.c: 466: SPEN = 1;
  5452  001D7C  8EAB               	bsf	4011,7,c	;volatile
  5453  001D7E  0012               	return		;funcret
  5454  001D80                     __end_of_UartInit:
  5455                           	opt stack 0
  5456                           tblptru	equ	0xFF8
  5457                           tblptrh	equ	0xFF7
  5458                           tblptrl	equ	0xFF6
  5459                           tablat	equ	0xFF5
  5460                           prodh	equ	0xFF4
  5461                           prodl	equ	0xFF3
  5462                           intcon	equ	0xFF2
  5463                           postinc0	equ	0xFEE
  5464                           wreg	equ	0xFE8
  5465                           indf1	equ	0xFE7
  5466                           postdec1	equ	0xFE5
  5467                           fsr1h	equ	0xFE2
  5468                           fsr1l	equ	0xFE1
  5469                           indf2	equ	0xFDF
  5470                           postinc2	equ	0xFDE
  5471                           postdec2	equ	0xFDD
  5472                           fsr2h	equ	0xFDA
  5473                           fsr2l	equ	0xFD9
  5474                           status	equ	0xFD8
  5475                           
  5476 ;; *************** function _SpiInit *****************
  5477 ;; Defined at:
  5478 ;;		line 414 in file "main.c"
  5479 ;; Parameters:    Size  Location     Type
  5480 ;;		None
  5481 ;; Auto vars:     Size  Location     Type
  5482 ;;		None
  5483 ;; Return value:  Size  Location     Type
  5484 ;;                  1    wreg      void 
  5485 ;; Registers used:
  5486 ;;		wreg, status,2
  5487 ;; Tracked objects:
  5488 ;;		On entry : 0/0
  5489 ;;		On exit  : 0/0
  5490 ;;		Unchanged: 0/0
  5491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5492 ;;      Params:         0       0       0       0       0       0       0
  5493 ;;      Locals:         0       0       0       0       0       0       0
  5494 ;;      Temps:          0       0       0       0       0       0       0
  5495 ;;      Totals:         0       0       0       0       0       0       0
  5496 ;;Total ram usage:        0 bytes
  5497 ;; Hardware stack levels used:    1
  5498 ;; Hardware stack levels required when called:    2
  5499 ;; This function calls:
  5500 ;;		Nothing
  5501 ;; This function is called by:
  5502 ;;		_main
  5503 ;; This function uses a non-reentrant model
  5504 ;;
  5505                           
  5506                           	psect	text20
  5507  001D80                     __ptext20:
  5508                           	opt stack 0
  5509  001D80                     _SpiInit:
  5510                           	opt stack 28
  5511                           
  5512                           ;main.c: 415: TRISA5 = 1;
  5513                           
  5514                           ;incstack = 0
  5515  001D80  8A92               	bsf	3986,5,c	;volatile
  5516                           
  5517                           ;main.c: 416: TRISC3 = 1;
  5518  001D82  8694               	bsf	3988,3,c	;volatile
  5519                           
  5520                           ;main.c: 417: TRISC4 = 1;
  5521  001D84  8894               	bsf	3988,4,c	;volatile
  5522                           
  5523                           ;main.c: 418: TRISC5 = 0;
  5524  001D86  9A94               	bcf	3988,5,c	;volatile
  5525                           
  5526                           ;main.c: 419: LATAbits.LATA5 = 1;
  5527  001D88  8A89               	bsf	3977,5,c	;volatile
  5528                           
  5529                           ;main.c: 421: PIR1bits.SSPIF = 0;
  5530  001D8A  969E               	bcf	3998,3,c	;volatile
  5531                           
  5532                           ;main.c: 422: PIE1bits.SSPIE = 1;
  5533  001D8C  869D               	bsf	3997,3,c	;volatile
  5534                           
  5535                           ;main.c: 424: SSPSTATbits.SMP = 0;
  5536  001D8E  9EC7               	bcf	4039,7,c	;volatile
  5537                           
  5538                           ;main.c: 425: SSPSTATbits.CKE = 1;
  5539  001D90  8CC7               	bsf	4039,6,c	;volatile
  5540                           
  5541                           ;main.c: 426: SSPCON1bits.WCOL = 0;
  5542  001D92  9EC6               	bcf	4038,7,c	;volatile
  5543                           
  5544                           ;main.c: 427: SSPCON1bits.CKP = 0;
  5545  001D94  98C6               	bcf	4038,4,c	;volatile
  5546                           
  5547                           ;main.c: 428: SSPCON1bits.SSPM = 0b0100;
  5548  001D96  50C6               	movf	4038,w,c	;volatile
  5549  001D98  0BF0               	andlw	-16
  5550  001D9A  0904               	iorlw	4
  5551  001D9C  6EC6               	movwf	4038,c	;volatile
  5552                           
  5553                           ;main.c: 429: SSPCON1bits.SSPEN = 1;
  5554  001D9E  8AC6               	bsf	4038,5,c	;volatile
  5555                           
  5556                           ;main.c: 431: SSPBUF = 0;
  5557  001DA0  0E00               	movlw	0
  5558  001DA2  6EC9               	movwf	4041,c	;volatile
  5559                           
  5560                           ;main.c: 433: INTCONbits.PEIE = 1;
  5561  001DA4  8CF2               	bsf	intcon,6,c	;volatile
  5562                           
  5563                           ;main.c: 434: INTCONbits.GIE = 1;
  5564  001DA6  8EF2               	bsf	intcon,7,c	;volatile
  5565  001DA8  0012               	return		;funcret
  5566  001DAA                     __end_of_SpiInit:
  5567                           	opt stack 0
  5568                           tblptru	equ	0xFF8
  5569                           tblptrh	equ	0xFF7
  5570                           tblptrl	equ	0xFF6
  5571                           tablat	equ	0xFF5
  5572                           prodh	equ	0xFF4
  5573                           prodl	equ	0xFF3
  5574                           intcon	equ	0xFF2
  5575                           postinc0	equ	0xFEE
  5576                           wreg	equ	0xFE8
  5577                           indf1	equ	0xFE7
  5578                           postdec1	equ	0xFE5
  5579                           fsr1h	equ	0xFE2
  5580                           fsr1l	equ	0xFE1
  5581                           indf2	equ	0xFDF
  5582                           postinc2	equ	0xFDE
  5583                           postdec2	equ	0xFDD
  5584                           fsr2h	equ	0xFDA
  5585                           fsr2l	equ	0xFD9
  5586                           status	equ	0xFD8
  5587                           
  5588 ;; *************** function _PrintS *****************
  5589 ;; Defined at:
  5590 ;;		line 532 in file "main.c"
  5591 ;; Parameters:    Size  Location     Type
  5592 ;;  s_printS        2   32[COMRAM] PTR const unsigned char 
  5593 ;;		 -> SendMsgSreen(252), 
  5594 ;; Auto vars:     Size  Location     Type
  5595 ;;		None
  5596 ;; Return value:  Size  Location     Type
  5597 ;;                  1    wreg      void 
  5598 ;; Registers used:
  5599 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5600 ;; Tracked objects:
  5601 ;;		On entry : 0/0
  5602 ;;		On exit  : 0/0
  5603 ;;		Unchanged: 0/0
  5604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5605 ;;      Params:         2       0       0       0       0       0       0
  5606 ;;      Locals:         0       0       0       0       0       0       0
  5607 ;;      Temps:          0       0       0       0       0       0       0
  5608 ;;      Totals:         2       0       0       0       0       0       0
  5609 ;;Total ram usage:        2 bytes
  5610 ;; Hardware stack levels used:    1
  5611 ;; Hardware stack levels required when called:    3
  5612 ;; This function calls:
  5613 ;;		_PrintC
  5614 ;; This function is called by:
  5615 ;;		_main
  5616 ;; This function uses a non-reentrant model
  5617 ;;
  5618                           
  5619                           	psect	text21
  5620  001CE8                     __ptext21:
  5621                           	opt stack 0
  5622  001CE8                     _PrintS:
  5623                           	opt stack 27
  5624                           
  5625                           ;main.c: 533: while(*s_printS) {
  5626                           
  5627                           ;incstack = 0
  5628  001CE8  D009               	goto	l254
  5629  001CEA                     
  5630                           ;main.c: 534: PrintC(*s_printS++);
  5631  001CEA  C021  FFD9         	movff	PrintS@s_printS,fsr2l
  5632  001CEE  C022  FFDA         	movff	PrintS@s_printS+1,fsr2h
  5633  001CF2  50DF               	movf	indf2,w,c
  5634  001CF4  EC64  F00F         	call	_PrintC
  5635  001CF8  4A21               	infsnz	PrintS@s_printS,f,c
  5636  001CFA  2A22               	incf	PrintS@s_printS+1,f,c
  5637  001CFC                     l254:
  5638  001CFC  C021  FFD9         	movff	PrintS@s_printS,fsr2l
  5639  001D00  C022  FFDA         	movff	PrintS@s_printS+1,fsr2h
  5640  001D04  50DF               	movf	indf2,w,c
  5641  001D06  A4D8               	btfss	status,2,c
  5642  001D08  D7F0               	goto	l255
  5643                           
  5644                           ;main.c: 535: }
  5645                           ;main.c: 536: PrintC(0xFF);
  5646  001D0A  0EFF               	movlw	255
  5647  001D0C  EC64  F00F         	call	_PrintC
  5648                           
  5649                           ;main.c: 537: PrintC(0xFF);
  5650  001D10  0EFF               	movlw	255
  5651  001D12  EC64  F00F         	call	_PrintC
  5652                           
  5653                           ;main.c: 538: PrintC(0xFF);
  5654  001D16  0EFF               	movlw	255
  5655  001D18  EC64  F00F         	call	_PrintC
  5656  001D1C  0012               	return		;funcret
  5657  001D1E                     __end_of_PrintS:
  5658                           	opt stack 0
  5659                           tblptru	equ	0xFF8
  5660                           tblptrh	equ	0xFF7
  5661                           tblptrl	equ	0xFF6
  5662                           tablat	equ	0xFF5
  5663                           prodh	equ	0xFF4
  5664                           prodl	equ	0xFF3
  5665                           intcon	equ	0xFF2
  5666                           postinc0	equ	0xFEE
  5667                           wreg	equ	0xFE8
  5668                           indf1	equ	0xFE7
  5669                           postdec1	equ	0xFE5
  5670                           fsr1h	equ	0xFE2
  5671                           fsr1l	equ	0xFE1
  5672                           indf2	equ	0xFDF
  5673                           postinc2	equ	0xFDE
  5674                           postdec2	equ	0xFDD
  5675                           fsr2h	equ	0xFDA
  5676                           fsr2l	equ	0xFD9
  5677                           status	equ	0xFD8
  5678                           
  5679 ;; *************** function _PrintC *****************
  5680 ;; Defined at:
  5681 ;;		line 517 in file "main.c"
  5682 ;; Parameters:    Size  Location     Type
  5683 ;;  c_printC        1    wreg     unsigned char 
  5684 ;; Auto vars:     Size  Location     Type
  5685 ;;  c_printC        1   31[COMRAM] unsigned char 
  5686 ;; Return value:  Size  Location     Type
  5687 ;;                  1    wreg      void 
  5688 ;; Registers used:
  5689 ;;		wreg
  5690 ;; Tracked objects:
  5691 ;;		On entry : 0/0
  5692 ;;		On exit  : 0/0
  5693 ;;		Unchanged: 0/0
  5694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5695 ;;      Params:         0       0       0       0       0       0       0
  5696 ;;      Locals:         1       0       0       0       0       0       0
  5697 ;;      Temps:          0       0       0       0       0       0       0
  5698 ;;      Totals:         1       0       0       0       0       0       0
  5699 ;;Total ram usage:        1 bytes
  5700 ;; Hardware stack levels used:    1
  5701 ;; Hardware stack levels required when called:    2
  5702 ;; This function calls:
  5703 ;;		Nothing
  5704 ;; This function is called by:
  5705 ;;		_PrintS
  5706 ;; This function uses a non-reentrant model
  5707 ;;
  5708                           
  5709                           	psect	text22
  5710  001EC8                     __ptext22:
  5711                           	opt stack 0
  5712  001EC8                     _PrintC:
  5713                           	opt stack 27
  5714                           
  5715                           ;incstack = 0
  5716                           ;PrintC@c_printC stored from wreg
  5717  001EC8  6E20               	movwf	PrintC@c_printC,c
  5718  001ECA                     
  5719                           ;main.c: 518: while(TXSTA1bits.TRMT == 0) {};
  5720  001ECA  A2AC               	btfss	4012,1,c	;volatile
  5721  001ECC  D7FE               	goto	l2391
  5722                           
  5723                           ;main.c: 519: TXREG1 = c_printC;
  5724  001ECE  C020  FFAD         	movff	PrintC@c_printC,4013	;volatile
  5725  001ED2  F000               	nop		;# 
  5726  001ED4  0012               	return		;funcret
  5727  001ED6                     __end_of_PrintC:
  5728                           	opt stack 0
  5729                           tblptru	equ	0xFF8
  5730                           tblptrh	equ	0xFF7
  5731                           tblptrl	equ	0xFF6
  5732                           tablat	equ	0xFF5
  5733                           prodh	equ	0xFF4
  5734                           prodl	equ	0xFF3
  5735                           intcon	equ	0xFF2
  5736                           postinc0	equ	0xFEE
  5737                           wreg	equ	0xFE8
  5738                           indf1	equ	0xFE7
  5739                           postdec1	equ	0xFE5
  5740                           fsr1h	equ	0xFE2
  5741                           fsr1l	equ	0xFE1
  5742                           indf2	equ	0xFDF
  5743                           postinc2	equ	0xFDE
  5744                           postdec2	equ	0xFDD
  5745                           fsr2h	equ	0xFDA
  5746                           fsr2l	equ	0xFD9
  5747                           status	equ	0xFD8
  5748                           
  5749 ;; *************** function _InitTmr0 *****************
  5750 ;; Defined at:
  5751 ;;		line 469 in file "main.c"
  5752 ;; Parameters:    Size  Location     Type
  5753 ;;		None
  5754 ;; Auto vars:     Size  Location     Type
  5755 ;;		None
  5756 ;; Return value:  Size  Location     Type
  5757 ;;                  1    wreg      void 
  5758 ;; Registers used:
  5759 ;;		wreg, status,2
  5760 ;; Tracked objects:
  5761 ;;		On entry : 0/0
  5762 ;;		On exit  : 0/0
  5763 ;;		Unchanged: 0/0
  5764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5765 ;;      Params:         0       0       0       0       0       0       0
  5766 ;;      Locals:         0       0       0       0       0       0       0
  5767 ;;      Temps:          0       0       0       0       0       0       0
  5768 ;;      Totals:         0       0       0       0       0       0       0
  5769 ;;Total ram usage:        0 bytes
  5770 ;; Hardware stack levels used:    1
  5771 ;; Hardware stack levels required when called:    2
  5772 ;; This function calls:
  5773 ;;		Nothing
  5774 ;; This function is called by:
  5775 ;;		_main
  5776 ;; This function uses a non-reentrant model
  5777 ;;
  5778                           
  5779                           	psect	text23
  5780  001E94                     __ptext23:
  5781                           	opt stack 0
  5782  001E94                     _InitTmr0:
  5783                           	opt stack 28
  5784                           
  5785                           ;main.c: 470: T08BIT = 0;
  5786                           
  5787                           ;incstack = 0
  5788  001E94  9CD5               	bcf	4053,6,c	;volatile
  5789                           
  5790                           ;main.c: 471: T0CS = 0;
  5791  001E96  9AD5               	bcf	4053,5,c	;volatile
  5792                           
  5793                           ;main.c: 472: T0SE = 0;
  5794  001E98  98D5               	bcf	4053,4,c	;volatile
  5795                           
  5796                           ;main.c: 473: PSA = 0;
  5797  001E9A  96D5               	bcf	4053,3,c	;volatile
  5798                           
  5799                           ;main.c: 474: T0PS2 = 0;
  5800  001E9C  94D5               	bcf	4053,2,c	;volatile
  5801                           
  5802                           ;main.c: 475: T0PS1 = 1;
  5803  001E9E  82D5               	bsf	4053,1,c	;volatile
  5804                           
  5805                           ;main.c: 476: T0PS0 = 1;
  5806  001EA0  80D5               	bsf	4053,0,c	;volatile
  5807                           
  5808                           ;main.c: 477: TMR0L = 0xB0;
  5809  001EA2  0EB0               	movlw	176
  5810  001EA4  6ED6               	movwf	4054,c	;volatile
  5811                           
  5812                           ;main.c: 478: TMR0H = 0x3C;
  5813  001EA6  0E3C               	movlw	60
  5814  001EA8  6ED7               	movwf	4055,c	;volatile
  5815                           
  5816                           ;main.c: 479: TMR0IF = 0;
  5817  001EAA  94F2               	bcf	intcon,2,c	;volatile
  5818                           
  5819                           ;main.c: 482: TMR0ON = 1;
  5820  001EAC  8ED5               	bsf	4053,7,c	;volatile
  5821  001EAE  0012               	return		;funcret
  5822  001EB0                     __end_of_InitTmr0:
  5823                           	opt stack 0
  5824                           tblptru	equ	0xFF8
  5825                           tblptrh	equ	0xFF7
  5826                           tblptrl	equ	0xFF6
  5827                           tablat	equ	0xFF5
  5828                           prodh	equ	0xFF4
  5829                           prodl	equ	0xFF3
  5830                           intcon	equ	0xFF2
  5831                           postinc0	equ	0xFEE
  5832                           wreg	equ	0xFE8
  5833                           indf1	equ	0xFE7
  5834                           postdec1	equ	0xFE5
  5835                           fsr1h	equ	0xFE2
  5836                           fsr1l	equ	0xFE1
  5837                           indf2	equ	0xFDF
  5838                           postinc2	equ	0xFDE
  5839                           postdec2	equ	0xFDD
  5840                           fsr2h	equ	0xFDA
  5841                           fsr2l	equ	0xFD9
  5842                           status	equ	0xFD8
  5843                           
  5844 ;; *************** function _ClockInit *****************
  5845 ;; Defined at:
  5846 ;;		line 394 in file "main.c"
  5847 ;; Parameters:    Size  Location     Type
  5848 ;;		None
  5849 ;; Auto vars:     Size  Location     Type
  5850 ;;		None
  5851 ;; Return value:  Size  Location     Type
  5852 ;;                  1    wreg      void 
  5853 ;; Registers used:
  5854 ;;		None
  5855 ;; Tracked objects:
  5856 ;;		On entry : 0/0
  5857 ;;		On exit  : 0/0
  5858 ;;		Unchanged: 0/0
  5859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5860 ;;      Params:         0       0       0       0       0       0       0
  5861 ;;      Locals:         0       0       0       0       0       0       0
  5862 ;;      Temps:          0       0       0       0       0       0       0
  5863 ;;      Totals:         0       0       0       0       0       0       0
  5864 ;;Total ram usage:        0 bytes
  5865 ;; Hardware stack levels used:    1
  5866 ;; Hardware stack levels required when called:    2
  5867 ;; This function calls:
  5868 ;;		Nothing
  5869 ;; This function is called by:
  5870 ;;		_main
  5871 ;; This function uses a non-reentrant model
  5872 ;;
  5873                           
  5874                           	psect	text24
  5875  001ED6                     __ptext24:
  5876                           	opt stack 0
  5877  001ED6                     _ClockInit:
  5878                           	opt stack 28
  5879                           
  5880                           ;main.c: 395: OSCCONbits.IRCF = 0b111;
  5881                           
  5882                           ;incstack = 0
  5883  001ED6  88D3               	bsf	4051,4,c	;volatile
  5884  001ED8  8AD3               	bsf	4051,5,c	;volatile
  5885  001EDA  8CD3               	bsf	4051,6,c	;volatile
  5886                           
  5887                           ;main.c: 396: OSCTUNEbits.PLLEN = 1;
  5888  001EDC  8C9B               	bsf	3995,6,c	;volatile
  5889  001EDE  B4D3               	btfsc	4051,2,c	;volatile
  5890  001EE0  0012               	return	
  5891  001EE2  D7FD               	goto	l225
  5892  001EE4                     __end_of_ClockInit:
  5893                           	opt stack 0
  5894                           tblptru	equ	0xFF8
  5895                           tblptrh	equ	0xFF7
  5896                           tblptrl	equ	0xFF6
  5897                           tablat	equ	0xFF5
  5898                           prodh	equ	0xFF4
  5899                           prodl	equ	0xFF3
  5900                           intcon	equ	0xFF2
  5901                           postinc0	equ	0xFEE
  5902                           wreg	equ	0xFE8
  5903                           indf1	equ	0xFE7
  5904                           postdec1	equ	0xFE5
  5905                           fsr1h	equ	0xFE2
  5906                           fsr1l	equ	0xFE1
  5907                           indf2	equ	0xFDF
  5908                           postinc2	equ	0xFDE
  5909                           postdec2	equ	0xFDD
  5910                           fsr2h	equ	0xFDA
  5911                           fsr2l	equ	0xFD9
  5912                           status	equ	0xFD8
  5913                           
  5914 ;; *************** function _ClearArray *****************
  5915 ;; Defined at:
  5916 ;;		line 548 in file "main.c"
  5917 ;; Parameters:    Size  Location     Type
  5918 ;;		None
  5919 ;; Auto vars:     Size  Location     Type
  5920 ;;  cpt_vide        1   31[COMRAM] unsigned char 
  5921 ;; Return value:  Size  Location     Type
  5922 ;;                  1    wreg      void 
  5923 ;; Registers used:
  5924 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5925 ;; Tracked objects:
  5926 ;;		On entry : 0/0
  5927 ;;		On exit  : 0/0
  5928 ;;		Unchanged: 0/0
  5929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5930 ;;      Params:         0       0       0       0       0       0       0
  5931 ;;      Locals:         1       0       0       0       0       0       0
  5932 ;;      Temps:          0       0       0       0       0       0       0
  5933 ;;      Totals:         1       0       0       0       0       0       0
  5934 ;;Total ram usage:        1 bytes
  5935 ;; Hardware stack levels used:    1
  5936 ;; Hardware stack levels required when called:    2
  5937 ;; This function calls:
  5938 ;;		Nothing
  5939 ;; This function is called by:
  5940 ;;		_main
  5941 ;; This function uses a non-reentrant model
  5942 ;;
  5943                           
  5944                           	psect	text25
  5945  001DD4                     __ptext25:
  5946                           	opt stack 0
  5947  001DD4                     _ClearArray:
  5948                           	opt stack 28
  5949                           
  5950                           ;main.c: 549: char cpt_vide = 0;
  5951                           
  5952                           ;incstack = 0
  5953  001DD4  0E00               	movlw	0
  5954  001DD6  6E20               	movwf	ClearArray@cpt_vide,c
  5955                           
  5956                           ;main.c: 550: for(cpt_vide=0;cpt_vide<252;cpt_vide++) {
  5957  001DD8  0E00               	movlw	0
  5958  001DDA  6E20               	movwf	ClearArray@cpt_vide,c
  5959  001DDC                     l2635:
  5960  001DDC  0EFB               	movlw	251
  5961  001DDE  6420               	cpfsgt	ClearArray@cpt_vide,c
  5962  001DE0  D001               	goto	l260
  5963  001DE2  0012               	return	
  5964  001DE4                     l260:
  5965                           
  5966                           ;main.c: 551: SendMsgSreen[cpt_vide] = '\0';
  5967  001DE4  5020               	movf	ClearArray@cpt_vide,w,c
  5968  001DE6  0D01               	mullw	1
  5969  001DE8  0E00               	movlw	low _SendMsgSreen
  5970  001DEA  24F3               	addwf	prodl,w,c
  5971  001DEC  6ED9               	movwf	fsr2l,c
  5972  001DEE  0E01               	movlw	high _SendMsgSreen
  5973  001DF0  20F4               	addwfc	prodh,w,c
  5974  001DF2  6EDA               	movwf	fsr2h,c
  5975  001DF4  0E00               	movlw	0
  5976  001DF6  6EDF               	movwf	indf2,c
  5977  001DF8  2A20               	incf	ClearArray@cpt_vide,f,c
  5978  001DFA  D7F0               	goto	l2635
  5979  001DFC                     __end_of_ClearArray:
  5980                           	opt stack 0
  5981                           tblptru	equ	0xFF8
  5982                           tblptrh	equ	0xFF7
  5983                           tblptrl	equ	0xFF6
  5984                           tablat	equ	0xFF5
  5985                           prodh	equ	0xFF4
  5986                           prodl	equ	0xFF3
  5987                           intcon	equ	0xFF2
  5988                           postinc0	equ	0xFEE
  5989                           wreg	equ	0xFE8
  5990                           indf1	equ	0xFE7
  5991                           postdec1	equ	0xFE5
  5992                           fsr1h	equ	0xFE2
  5993                           fsr1l	equ	0xFE1
  5994                           indf2	equ	0xFDF
  5995                           postinc2	equ	0xFDE
  5996                           postdec2	equ	0xFDD
  5997                           fsr2h	equ	0xFDA
  5998                           fsr2l	equ	0xFD9
  5999                           status	equ	0xFD8
  6000                           
  6001 ;; *************** function _Adc *****************
  6002 ;; Defined at:
  6003 ;;		line 499 in file "main.c"
  6004 ;; Parameters:    Size  Location     Type
  6005 ;;  channel         1    wreg     unsigned char 
  6006 ;; Auto vars:     Size  Location     Type
  6007 ;;  channel         1   35[COMRAM] unsigned char 
  6008 ;; Return value:  Size  Location     Type
  6009 ;;                  2   31[COMRAM] unsigned int 
  6010 ;; Registers used:
  6011 ;;		wreg, status,2, status,0
  6012 ;; Tracked objects:
  6013 ;;		On entry : 0/0
  6014 ;;		On exit  : 0/0
  6015 ;;		Unchanged: 0/0
  6016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6017 ;;      Params:         2       0       0       0       0       0       0
  6018 ;;      Locals:         1       0       0       0       0       0       0
  6019 ;;      Temps:          2       0       0       0       0       0       0
  6020 ;;      Totals:         5       0       0       0       0       0       0
  6021 ;;Total ram usage:        5 bytes
  6022 ;; Hardware stack levels used:    1
  6023 ;; Hardware stack levels required when called:    2
  6024 ;; This function calls:
  6025 ;;		Nothing
  6026 ;; This function is called by:
  6027 ;;		_main
  6028 ;; This function uses a non-reentrant model
  6029 ;;
  6030                           
  6031                           	psect	text26
  6032  001D1E                     __ptext26:
  6033                           	opt stack 0
  6034  001D1E                     _Adc:
  6035                           	opt stack 28
  6036                           
  6037                           ;incstack = 0
  6038                           ;Adc@channel stored from wreg
  6039  001D1E  6E24               	movwf	Adc@channel,c
  6040                           
  6041                           ;main.c: 500: ADCON0bits.ADON = 1;
  6042  001D20  80C2               	bsf	4034,0,c	;volatile
  6043                           
  6044                           ;main.c: 501: ADCON0bits.CHS = channel;
  6045  001D22  C024  F022         	movff	Adc@channel,??_Adc
  6046  001D26  4622               	rlncf	??_Adc,f,c
  6047  001D28  4622               	rlncf	??_Adc,f,c
  6048  001D2A  50C2               	movf	4034,w,c	;volatile
  6049  001D2C  1822               	xorwf	??_Adc,w,c
  6050  001D2E  0BC3               	andlw	-61
  6051  001D30  1822               	xorwf	??_Adc,w,c
  6052  001D32  6EC2               	movwf	4034,c	;volatile
  6053                           
  6054                           ;main.c: 502: ADCON0bits.GO = 1;
  6055  001D34  82C2               	bsf	4034,1,c	;volatile
  6056  001D36  B2C2               	btfsc	4034,1,c	;volatile
  6057  001D38  D7FE               	goto	l243
  6058                           
  6059                           ;main.c: 504: ADCON0bits.ADON = 0;
  6060  001D3A  90C2               	bcf	4034,0,c	;volatile
  6061                           
  6062                           ;main.c: 505: return (ADRESH << 8) + ADRESL;
  6063  001D3C  50C4               	movf	4036,w,c	;volatile
  6064  001D3E  6E23               	movwf	(??_Adc+1)& (0+255),c
  6065  001D40  6A22               	clrf	??_Adc& (0+255),c
  6066  001D42  50C3               	movf	4035,w,c	;volatile
  6067  001D44  2422               	addwf	??_Adc,w,c
  6068  001D46  6E20               	movwf	?_Adc,c
  6069  001D48  0E00               	movlw	0
  6070  001D4A  2023               	addwfc	??_Adc+1,w,c
  6071  001D4C  6E21               	movwf	?_Adc+1,c
  6072  001D4E  0012               	return	
  6073  001D50                     __end_of_Adc:
  6074                           	opt stack 0
  6075                           tblptru	equ	0xFF8
  6076                           tblptrh	equ	0xFF7
  6077                           tblptrl	equ	0xFF6
  6078                           tablat	equ	0xFF5
  6079                           prodh	equ	0xFF4
  6080                           prodl	equ	0xFF3
  6081                           intcon	equ	0xFF2
  6082                           postinc0	equ	0xFEE
  6083                           wreg	equ	0xFE8
  6084                           indf1	equ	0xFE7
  6085                           postdec1	equ	0xFE5
  6086                           fsr1h	equ	0xFE2
  6087                           fsr1l	equ	0xFE1
  6088                           indf2	equ	0xFDF
  6089                           postinc2	equ	0xFDE
  6090                           postdec2	equ	0xFDD
  6091                           fsr2h	equ	0xFDA
  6092                           fsr2l	equ	0xFD9
  6093                           status	equ	0xFD8
  6094                           
  6095 ;; *************** function _ADCInit *****************
  6096 ;; Defined at:
  6097 ;;		line 400 in file "main.c"
  6098 ;; Parameters:    Size  Location     Type
  6099 ;;		None
  6100 ;; Auto vars:     Size  Location     Type
  6101 ;;		None
  6102 ;; Return value:  Size  Location     Type
  6103 ;;                  1    wreg      void 
  6104 ;; Registers used:
  6105 ;;		wreg, status,2
  6106 ;; Tracked objects:
  6107 ;;		On entry : 0/0
  6108 ;;		On exit  : 0/0
  6109 ;;		Unchanged: 0/0
  6110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6111 ;;      Params:         0       0       0       0       0       0       0
  6112 ;;      Locals:         0       0       0       0       0       0       0
  6113 ;;      Temps:          0       0       0       0       0       0       0
  6114 ;;      Totals:         0       0       0       0       0       0       0
  6115 ;;Total ram usage:        0 bytes
  6116 ;; Hardware stack levels used:    1
  6117 ;; Hardware stack levels required when called:    2
  6118 ;; This function calls:
  6119 ;;		Nothing
  6120 ;; This function is called by:
  6121 ;;		_main
  6122 ;; This function uses a non-reentrant model
  6123 ;;
  6124                           
  6125                           	psect	text27
  6126  001DFC                     __ptext27:
  6127                           	opt stack 0
  6128  001DFC                     _ADCInit:
  6129                           	opt stack 28
  6130                           
  6131                           ;main.c: 401: TRISAbits.TRISA0 = 1;
  6132                           
  6133                           ;incstack = 0
  6134  001DFC  8092               	bsf	3986,0,c	;volatile
  6135                           
  6136                           ;main.c: 402: TRISAbits.TRISA1 = 1;
  6137  001DFE  8292               	bsf	3986,1,c	;volatile
  6138                           
  6139                           ;main.c: 403: TRISAbits.TRISA2 = 1;
  6140  001E00  8492               	bsf	3986,2,c	;volatile
  6141                           
  6142                           ;main.c: 404: TRISAbits.TRISA3 = 1;
  6143  001E02  8692               	bsf	3986,3,c	;volatile
  6144                           
  6145                           ;main.c: 407: ADCON1bits.PCFG = 0b1011;
  6146  001E04  50C1               	movf	4033,w,c	;volatile
  6147  001E06  0BF0               	andlw	-16
  6148  001E08  090B               	iorlw	11
  6149  001E0A  6EC1               	movwf	4033,c	;volatile
  6150                           
  6151                           ;main.c: 408: ADCON1bits.VCFG = 0;
  6152  001E0C  0ECF               	movlw	-49
  6153  001E0E  16C1               	andwf	4033,f,c	;volatile
  6154                           
  6155                           ;main.c: 409: ADCON2bits.ADFM = 1;
  6156  001E10  8EC0               	bsf	4032,7,c	;volatile
  6157                           
  6158                           ;main.c: 410: ADCON2bits.ACQT = 0b010;
  6159  001E12  50C0               	movf	4032,w,c	;volatile
  6160  001E14  0BC7               	andlw	-57
  6161  001E16  0910               	iorlw	16
  6162  001E18  6EC0               	movwf	4032,c	;volatile
  6163                           
  6164                           ;main.c: 411: ADCON2bits.ADCS = 0b001;
  6165  001E1A  50C0               	movf	4032,w,c	;volatile
  6166  001E1C  0BF8               	andlw	-8
  6167  001E1E  0901               	iorlw	1
  6168  001E20  6EC0               	movwf	4032,c	;volatile
  6169  001E22  0012               	return		;funcret
  6170  001E24                     __end_of_ADCInit:
  6171                           	opt stack 0
  6172                           tblptru	equ	0xFF8
  6173                           tblptrh	equ	0xFF7
  6174                           tblptrl	equ	0xFF6
  6175                           tablat	equ	0xFF5
  6176                           prodh	equ	0xFF4
  6177                           prodl	equ	0xFF3
  6178                           intcon	equ	0xFF2
  6179                           postinc0	equ	0xFEE
  6180                           wreg	equ	0xFE8
  6181                           indf1	equ	0xFE7
  6182                           postdec1	equ	0xFE5
  6183                           fsr1h	equ	0xFE2
  6184                           fsr1l	equ	0xFE1
  6185                           indf2	equ	0xFDF
  6186                           postinc2	equ	0xFDE
  6187                           postdec2	equ	0xFDD
  6188                           fsr2h	equ	0xFDA
  6189                           fsr2l	equ	0xFD9
  6190                           status	equ	0xFD8
  6191                           
  6192 ;; *************** function _ISR *****************
  6193 ;; Defined at:
  6194 ;;		line 575 in file "main.c"
  6195 ;; Parameters:    Size  Location     Type
  6196 ;;		None
  6197 ;; Auto vars:     Size  Location     Type
  6198 ;;  Receive         1   29[COMRAM] unsigned char 
  6199 ;;  data_spi        1   30[COMRAM] unsigned char 
  6200 ;; Return value:  Size  Location     Type
  6201 ;;                  1    wreg      void 
  6202 ;; Registers used:
  6203 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6204 ;; Tracked objects:
  6205 ;;		On entry : 0/0
  6206 ;;		On exit  : 0/0
  6207 ;;		Unchanged: 0/0
  6208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6209 ;;      Params:         0       0       0       0       0       0       0
  6210 ;;      Locals:         2       0       0       0       0       0       0
  6211 ;;      Temps:         25       0       0       0       0       0       0
  6212 ;;      Totals:        27       0       0       0       0       0       0
  6213 ;;Total ram usage:       27 bytes
  6214 ;; Hardware stack levels used:    1
  6215 ;; Hardware stack levels required when called:    1
  6216 ;; This function calls:
  6217 ;;		_Modulo
  6218 ;;		___lbmod
  6219 ;; This function is called by:
  6220 ;;		Interrupt level 2
  6221 ;; This function uses a non-reentrant model
  6222 ;;
  6223                           
  6224                           	psect	intcode
  6225  000008                     __pintcode:
  6226                           	opt stack 0
  6227  000008                     _ISR:
  6228                           	opt stack 25
  6229                           
  6230                           ;incstack = 0
  6231  000008  8260               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6232  00000A  CFFA F00C          	movff	pclath,??_ISR+7
  6233  00000E  CFFB F00D          	movff	pclatu,??_ISR+8
  6234  000012  CFE9 F00E          	movff	fsr0l,??_ISR+9
  6235  000016  CFEA F00F          	movff	fsr0h,??_ISR+10
  6236  00001A  CFE1 F010          	movff	fsr1l,??_ISR+11
  6237  00001E  CFE2 F011          	movff	fsr1h,??_ISR+12
  6238  000022  CFD9 F012          	movff	fsr2l,??_ISR+13
  6239  000026  CFDA F013          	movff	fsr2h,??_ISR+14
  6240  00002A  CFF3 F014          	movff	prodl,??_ISR+15
  6241  00002E  CFF4 F015          	movff	prodh,??_ISR+16
  6242  000032  CFF6 F016          	movff	tblptrl,??_ISR+17
  6243  000036  CFF7 F017          	movff	tblptrh,??_ISR+18
  6244  00003A  CFF8 F018          	movff	tblptru,??_ISR+19
  6245  00003E  CFF5 F019          	movff	tablat,??_ISR+20
  6246  000042  C060  F01A         	movff	btemp,??_ISR+21
  6247  000046  C061  F01B         	movff	btemp+1,??_ISR+22
  6248  00004A  C062  F01C         	movff	btemp+2,??_ISR+23
  6249  00004E  C063  F01D         	movff	btemp+3,??_ISR+24
  6250                           
  6251                           ;main.c: 577: if(PIR1bits.SSPIF){
  6252  000052  A69E               	btfss	3998,3,c	;volatile
  6253  000054  D28A               	goto	i2l338
  6254                           
  6255                           ;main.c: 578: char data_spi = SSPBUF;
  6256  000056  CFC9 F01F          	movff	4041,ISR@data_spi	;volatile
  6257                           
  6258                           ;main.c: 579: PIR1bits.SSPIF = 0;
  6259  00005A  969E               	bcf	3998,3,c	;volatile
  6260                           
  6261                           ;main.c: 582: switch(EtatSpi) {
  6262  00005C  D1F9               	goto	i2l274
  6263  00005E                     i2l275:
  6264                           
  6265                           ;main.c: 584: TailleMsgSpi = data_spi;
  6266  00005E  C01F  F05C         	movff	ISR@data_spi,_TailleMsgSpi
  6267                           
  6268                           ;main.c: 585: if(TailleMsgSpi) {
  6269  000062  505C               	movf	_TailleMsgSpi,w,c
  6270  000064  B4D8               	btfsc	status,2,c
  6271  000066  D002               	goto	i2l276
  6272                           
  6273                           ;main.c: 586: EtatSpi = 1;
  6274  000068  0E01               	movlw	1
  6275  00006A  6E5D               	movwf	_EtatSpi,c
  6276  00006C                     i2l276:
  6277                           
  6278                           ;main.c: 587: }
  6279                           ;main.c: 588: Checksum = 0;
  6280  00006C  0E00               	movlw	0
  6281  00006E  6E53               	movwf	_Checksum+1,c
  6282  000070  0E00               	movlw	0
  6283  000072  6E52               	movwf	_Checksum,c
  6284                           
  6285                           ;main.c: 589: CptSpi = 1;
  6286  000074  0E01               	movlw	1
  6287  000076  6E5F               	movwf	_CptSpi,c
  6288                           
  6289                           ;main.c: 590: break;
  6290  000078  D1F9               	goto	i2l277
  6291  00007A                     i2l278:
  6292                           
  6293                           ;main.c: 592: TypeVarSpi = data_spi;
  6294  00007A  C01F  F0D9         	movff	ISR@data_spi,_TypeVarSpi
  6295                           
  6296                           ;main.c: 593: if(TailleMsgSpi == 2) {
  6297  00007E  0E02               	movlw	2
  6298  000080  185C               	xorwf	_TailleMsgSpi,w,c
  6299  000082  A4D8               	btfss	status,2,c
  6300  000084  D002               	goto	i2l279
  6301                           
  6302                           ;main.c: 594: EtatSpi = 3;
  6303  000086  0E03               	movlw	3
  6304  000088  D001               	goto	L2
  6305  00008A                     i2l279:
  6306                           
  6307                           ;main.c: 596: EtatSpi = 2;
  6308  00008A  0E02               	movlw	2
  6309  00008C                     L2:
  6310  00008C  6E5D               	movwf	_EtatSpi,c
  6311                           
  6312                           ;main.c: 597: }
  6313                           ;main.c: 598: CptSpi++;
  6314  00008E  2A5F               	incf	_CptSpi,f,c
  6315                           
  6316                           ;main.c: 599: break;
  6317  000090  D1ED               	goto	i2l277
  6318  000092                     
  6319                           ;main.c: 601: TextSpi[CptSpi-2] = data_spi;
  6320  000092  0EFE               	movlw	254
  6321  000094  6E05               	movwf	??_ISR& (0+255),c
  6322  000096  0EFF               	movlw	255
  6323  000098  6E06               	movwf	(??_ISR+1)& (0+255),c
  6324  00009A  505F               	movf	_CptSpi,w,c
  6325  00009C  6E07               	movwf	(??_ISR+2)& (0+255),c
  6326  00009E  6A08               	clrf	(??_ISR+3)& (0+255),c
  6327  0000A0  5005               	movf	??_ISR,w,c
  6328  0000A2  2607               	addwf	??_ISR+2,f,c
  6329  0000A4  5006               	movf	??_ISR+1,w,c
  6330  0000A6  2208               	addwfc	??_ISR+3,f,c
  6331  0000A8  0E00               	movlw	low _TextSpi
  6332  0000AA  2407               	addwf	??_ISR+2,w,c
  6333  0000AC  6ED9               	movwf	fsr2l,c
  6334  0000AE  0E03               	movlw	high _TextSpi
  6335  0000B0  2008               	addwfc	??_ISR+3,w,c
  6336  0000B2  6EDA               	movwf	fsr2h,c
  6337  0000B4  C01F  FFDF         	movff	ISR@data_spi,indf2
  6338                           
  6339                           ;main.c: 602: CptSpi++;
  6340  0000B8  2A5F               	incf	_CptSpi,f,c
  6341                           
  6342                           ;main.c: 603: if(CptSpi == TailleMsgSpi) {
  6343  0000BA  505C               	movf	_TailleMsgSpi,w,c
  6344  0000BC  185F               	xorwf	_CptSpi,w,c
  6345  0000BE  A4D8               	btfss	status,2,c
  6346  0000C0  D1D5               	goto	i2l277
  6347                           
  6348                           ;main.c: 604: EtatSpi = 3;
  6349  0000C2  0E03               	movlw	3
  6350  0000C4  D1C1               	goto	L3
  6351  0000C6                     
  6352                           ;main.c: 608: if(Modulo(Checksum) == data_spi) {
  6353  0000C6  C052  F001         	movff	_Checksum,Modulo@M_nombre
  6354  0000CA  C053  F002         	movff	_Checksum+1,Modulo@M_nombre+1
  6355  0000CE  EC58  F00F         	call	_Modulo	;wreg free
  6356  0000D2  181F               	xorwf	ISR@data_spi,w,c
  6357  0000D4  A4D8               	btfss	status,2,c
  6358  0000D6  D1BA               	goto	i2l325
  6359                           
  6360                           ;main.c: 609: FlagSpi = 1;
  6361  0000D8  0E01               	movlw	1
  6362  0000DA  0100               	movlb	0	; () banked
  6363  0000DC  6FE1               	movwf	_FlagSpi& (0+255),b
  6364                           
  6365                           ;main.c: 610: CptSpi = 0;
  6366  0000DE  0E00               	movlw	0
  6367  0000E0  6E5F               	movwf	_CptSpi,c
  6368                           
  6369                           ;main.c: 611: switch(TypeVarSpi) {
  6370  0000E2  D185               	goto	i2l285
  6371  0000E4                     
  6372                           ; BSR set to: 0
  6373                           ;main.c: 613: for(CptSpi=0;CptSpi<15;CptSpi++) {
  6374                           
  6375                           ; BSR set to: 0
  6376  0000E4  0E00               	movlw	0
  6377  0000E6  6E5F               	movwf	_CptSpi,c
  6378  0000E8                     i2l2987:
  6379                           
  6380                           ; BSR set to: 0
  6381  0000E8  0E0E               	movlw	14
  6382  0000EA  645F               	cpfsgt	_CptSpi,c
  6383  0000EC  D001               	goto	i2l287
  6384  0000EE  D1AE               	goto	i2l325
  6385  0000F0                     i2l287:
  6386                           
  6387                           ;main.c: 614: if(CptSpi < TailleMsgSpi-2) {
  6388                           
  6389                           ; BSR set to: 0
  6390  0000F0  0EFE               	movlw	254
  6391  0000F2  6E05               	movwf	??_ISR& (0+255),c
  6392  0000F4  0EFF               	movlw	255
  6393  0000F6  6E06               	movwf	(??_ISR+1)& (0+255),c
  6394  0000F8  505C               	movf	_TailleMsgSpi,w,c
  6395  0000FA  6E07               	movwf	(??_ISR+2)& (0+255),c
  6396  0000FC  6A08               	clrf	(??_ISR+3)& (0+255),c
  6397  0000FE  5005               	movf	??_ISR,w,c
  6398  000100  2607               	addwf	??_ISR+2,f,c
  6399  000102  5006               	movf	??_ISR+1,w,c
  6400  000104  2208               	addwfc	??_ISR+3,f,c
  6401  000106  505F               	movf	_CptSpi,w,c
  6402  000108  6E09               	movwf	(??_ISR+4)& (0+255),c
  6403  00010A  6A0A               	clrf	(??_ISR+5)& (0+255),c
  6404  00010C  5007               	movf	??_ISR+2,w,c
  6405  00010E  5C09               	subwf	??_ISR+4,w,c
  6406  000110  500A               	movf	??_ISR+5,w,c
  6407  000112  0A80               	xorlw	128
  6408  000114  6E0B               	movwf	(??_ISR+6)& (0+255),c
  6409  000116  5008               	movf	??_ISR+3,w,c
  6410  000118  0A80               	xorlw	128
  6411  00011A  580B               	subwfb	(??_ISR+6)& (0+255),w,c
  6412  00011C  B0D8               	btfsc	status,0,c
  6413  00011E  D013               	goto	i2l289
  6414                           
  6415                           ;main.c: 615: text_prgm[0][CptSpi] = TextSpi[CptSpi];
  6416  000120  505F               	movf	_CptSpi,w,c
  6417  000122  0D01               	mullw	1
  6418  000124  0E00               	movlw	low _TextSpi
  6419  000126  24F3               	addwf	prodl,w,c
  6420  000128  6ED9               	movwf	fsr2l,c
  6421  00012A  0E03               	movlw	high _TextSpi
  6422  00012C  20F4               	addwfc	prodh,w,c
  6423  00012E  6EDA               	movwf	fsr2h,c
  6424  000130  505F               	movf	_CptSpi,w,c
  6425  000132  0D01               	mullw	1
  6426  000134  0E00               	movlw	low _text_prgm
  6427  000136  24F3               	addwf	prodl,w,c
  6428  000138  6EE1               	movwf	fsr1l,c
  6429  00013A  0E02               	movlw	high _text_prgm
  6430  00013C  20F4               	addwfc	prodh,w,c
  6431  00013E  6EE2               	movwf	fsr1h,c
  6432  000140  CFDF FFE7          	movff	indf2,indf1
  6433                           
  6434                           ;main.c: 616: } else {
  6435  000144  D00A               	goto	i2l290
  6436  000146                     i2l289:
  6437                           
  6438                           ;main.c: 617: text_prgm[0][CptSpi] = '\0';
  6439  000146  505F               	movf	_CptSpi,w,c
  6440  000148  0D01               	mullw	1
  6441  00014A  0E00               	movlw	low _text_prgm
  6442  00014C  24F3               	addwf	prodl,w,c
  6443  00014E  6ED9               	movwf	fsr2l,c
  6444  000150  0E02               	movlw	high _text_prgm
  6445  000152  20F4               	addwfc	prodh,w,c
  6446  000154  6EDA               	movwf	fsr2h,c
  6447  000156  0E00               	movlw	0
  6448  000158  6EDF               	movwf	indf2,c
  6449  00015A                     i2l290:
  6450  00015A  2A5F               	incf	_CptSpi,f,c
  6451  00015C  D7C5               	goto	i2l2987
  6452  00015E                     
  6453                           ;main.c: 622: for(CptSpi=0;CptSpi<15;CptSpi++) {
  6454  00015E  0E00               	movlw	0
  6455  000160  6E5F               	movwf	_CptSpi,c
  6456  000162                     i2l3003:
  6457  000162  0E0E               	movlw	14
  6458  000164  645F               	cpfsgt	_CptSpi,c
  6459  000166  D001               	goto	i2l293
  6460  000168  D171               	goto	i2l325
  6461  00016A                     i2l293:
  6462                           
  6463                           ;main.c: 623: if(CptSpi < TailleMsgSpi-2) {
  6464  00016A  0EFE               	movlw	254
  6465  00016C  6E05               	movwf	??_ISR& (0+255),c
  6466  00016E  0EFF               	movlw	255
  6467  000170  6E06               	movwf	(??_ISR+1)& (0+255),c
  6468  000172  505C               	movf	_TailleMsgSpi,w,c
  6469  000174  6E07               	movwf	(??_ISR+2)& (0+255),c
  6470  000176  6A08               	clrf	(??_ISR+3)& (0+255),c
  6471  000178  5005               	movf	??_ISR,w,c
  6472  00017A  2607               	addwf	??_ISR+2,f,c
  6473  00017C  5006               	movf	??_ISR+1,w,c
  6474  00017E  2208               	addwfc	??_ISR+3,f,c
  6475  000180  505F               	movf	_CptSpi,w,c
  6476  000182  6E09               	movwf	(??_ISR+4)& (0+255),c
  6477  000184  6A0A               	clrf	(??_ISR+5)& (0+255),c
  6478  000186  5007               	movf	??_ISR+2,w,c
  6479  000188  5C09               	subwf	??_ISR+4,w,c
  6480  00018A  500A               	movf	??_ISR+5,w,c
  6481  00018C  0A80               	xorlw	128
  6482  00018E  6E0B               	movwf	(??_ISR+6)& (0+255),c
  6483  000190  5008               	movf	??_ISR+3,w,c
  6484  000192  0A80               	xorlw	128
  6485  000194  580B               	subwfb	(??_ISR+6)& (0+255),w,c
  6486  000196  B0D8               	btfsc	status,0,c
  6487  000198  D013               	goto	i2l295
  6488                           
  6489                           ;main.c: 624: text_prgm[1][CptSpi] = TextSpi[CptSpi];
  6490  00019A  505F               	movf	_CptSpi,w,c
  6491  00019C  0D01               	mullw	1
  6492  00019E  0E00               	movlw	low _TextSpi
  6493  0001A0  24F3               	addwf	prodl,w,c
  6494  0001A2  6ED9               	movwf	fsr2l,c
  6495  0001A4  0E03               	movlw	high _TextSpi
  6496  0001A6  20F4               	addwfc	prodh,w,c
  6497  0001A8  6EDA               	movwf	fsr2h,c
  6498  0001AA  505F               	movf	_CptSpi,w,c
  6499  0001AC  0D01               	mullw	1
  6500  0001AE  0E0F               	movlw	low (_text_prgm+15)
  6501  0001B0  24F3               	addwf	prodl,w,c
  6502  0001B2  6EE1               	movwf	fsr1l,c
  6503  0001B4  0E02               	movlw	high (_text_prgm+15)
  6504  0001B6  20F4               	addwfc	prodh,w,c
  6505  0001B8  6EE2               	movwf	fsr1h,c
  6506  0001BA  CFDF FFE7          	movff	indf2,indf1
  6507                           
  6508                           ;main.c: 625: } else {
  6509  0001BE  D00A               	goto	i2l296
  6510  0001C0                     i2l295:
  6511                           
  6512                           ;main.c: 626: text_prgm[1][CptSpi] = '\0';
  6513  0001C0  505F               	movf	_CptSpi,w,c
  6514  0001C2  0D01               	mullw	1
  6515  0001C4  0E0F               	movlw	low (_text_prgm+15)
  6516  0001C6  24F3               	addwf	prodl,w,c
  6517  0001C8  6ED9               	movwf	fsr2l,c
  6518  0001CA  0E02               	movlw	high (_text_prgm+15)
  6519  0001CC  20F4               	addwfc	prodh,w,c
  6520  0001CE  6EDA               	movwf	fsr2h,c
  6521  0001D0  0E00               	movlw	0
  6522  0001D2  6EDF               	movwf	indf2,c
  6523  0001D4                     i2l296:
  6524  0001D4  2A5F               	incf	_CptSpi,f,c
  6525  0001D6  D7C5               	goto	i2l3003
  6526  0001D8                     
  6527                           ;main.c: 631: for(CptSpi=0;CptSpi<15;CptSpi++) {
  6528  0001D8  0E00               	movlw	0
  6529  0001DA  6E5F               	movwf	_CptSpi,c
  6530  0001DC                     i2l3019:
  6531  0001DC  0E0E               	movlw	14
  6532  0001DE  645F               	cpfsgt	_CptSpi,c
  6533  0001E0  D001               	goto	i2l298
  6534  0001E2  D134               	goto	i2l325
  6535  0001E4                     i2l298:
  6536                           
  6537                           ;main.c: 632: if(CptSpi < TailleMsgSpi-2) {
  6538  0001E4  0EFE               	movlw	254
  6539  0001E6  6E05               	movwf	??_ISR& (0+255),c
  6540  0001E8  0EFF               	movlw	255
  6541  0001EA  6E06               	movwf	(??_ISR+1)& (0+255),c
  6542  0001EC  505C               	movf	_TailleMsgSpi,w,c
  6543  0001EE  6E07               	movwf	(??_ISR+2)& (0+255),c
  6544  0001F0  6A08               	clrf	(??_ISR+3)& (0+255),c
  6545  0001F2  5005               	movf	??_ISR,w,c
  6546  0001F4  2607               	addwf	??_ISR+2,f,c
  6547  0001F6  5006               	movf	??_ISR+1,w,c
  6548  0001F8  2208               	addwfc	??_ISR+3,f,c
  6549  0001FA  505F               	movf	_CptSpi,w,c
  6550  0001FC  6E09               	movwf	(??_ISR+4)& (0+255),c
  6551  0001FE  6A0A               	clrf	(??_ISR+5)& (0+255),c
  6552  000200  5007               	movf	??_ISR+2,w,c
  6553  000202  5C09               	subwf	??_ISR+4,w,c
  6554  000204  500A               	movf	??_ISR+5,w,c
  6555  000206  0A80               	xorlw	128
  6556  000208  6E0B               	movwf	(??_ISR+6)& (0+255),c
  6557  00020A  5008               	movf	??_ISR+3,w,c
  6558  00020C  0A80               	xorlw	128
  6559  00020E  580B               	subwfb	(??_ISR+6)& (0+255),w,c
  6560  000210  B0D8               	btfsc	status,0,c
  6561  000212  D013               	goto	i2l300
  6562                           
  6563                           ;main.c: 633: text_prgm[2][CptSpi] = TextSpi[CptSpi];
  6564  000214  505F               	movf	_CptSpi,w,c
  6565  000216  0D01               	mullw	1
  6566  000218  0E00               	movlw	low _TextSpi
  6567  00021A  24F3               	addwf	prodl,w,c
  6568  00021C  6ED9               	movwf	fsr2l,c
  6569  00021E  0E03               	movlw	high _TextSpi
  6570  000220  20F4               	addwfc	prodh,w,c
  6571  000222  6EDA               	movwf	fsr2h,c
  6572  000224  505F               	movf	_CptSpi,w,c
  6573  000226  0D01               	mullw	1
  6574  000228  0E1E               	movlw	low (_text_prgm+30)
  6575  00022A  24F3               	addwf	prodl,w,c
  6576  00022C  6EE1               	movwf	fsr1l,c
  6577  00022E  0E02               	movlw	high (_text_prgm+30)
  6578  000230  20F4               	addwfc	prodh,w,c
  6579  000232  6EE2               	movwf	fsr1h,c
  6580  000234  CFDF FFE7          	movff	indf2,indf1
  6581                           
  6582                           ;main.c: 634: } else {
  6583  000238  D00A               	goto	i2l301
  6584  00023A                     i2l300:
  6585                           
  6586                           ;main.c: 635: text_prgm[2][CptSpi] = '\0';
  6587  00023A  505F               	movf	_CptSpi,w,c
  6588  00023C  0D01               	mullw	1
  6589  00023E  0E1E               	movlw	low (_text_prgm+30)
  6590  000240  24F3               	addwf	prodl,w,c
  6591  000242  6ED9               	movwf	fsr2l,c
  6592  000244  0E02               	movlw	high (_text_prgm+30)
  6593  000246  20F4               	addwfc	prodh,w,c
  6594  000248  6EDA               	movwf	fsr2h,c
  6595  00024A  0E00               	movlw	0
  6596  00024C  6EDF               	movwf	indf2,c
  6597  00024E                     i2l301:
  6598  00024E  2A5F               	incf	_CptSpi,f,c
  6599  000250  D7C5               	goto	i2l3019
  6600  000252                     
  6601                           ;main.c: 640: for(CptSpi=0;CptSpi<15;CptSpi++) {
  6602  000252  0E00               	movlw	0
  6603  000254  6E5F               	movwf	_CptSpi,c
  6604  000256                     i2l3035:
  6605  000256  0E0E               	movlw	14
  6606  000258  645F               	cpfsgt	_CptSpi,c
  6607  00025A  D001               	goto	i2l303
  6608  00025C  D0F7               	goto	i2l325
  6609  00025E                     i2l303:
  6610                           
  6611                           ;main.c: 641: if(CptSpi < TailleMsgSpi-2) {
  6612  00025E  0EFE               	movlw	254
  6613  000260  6E05               	movwf	??_ISR& (0+255),c
  6614  000262  0EFF               	movlw	255
  6615  000264  6E06               	movwf	(??_ISR+1)& (0+255),c
  6616  000266  505C               	movf	_TailleMsgSpi,w,c
  6617  000268  6E07               	movwf	(??_ISR+2)& (0+255),c
  6618  00026A  6A08               	clrf	(??_ISR+3)& (0+255),c
  6619  00026C  5005               	movf	??_ISR,w,c
  6620  00026E  2607               	addwf	??_ISR+2,f,c
  6621  000270  5006               	movf	??_ISR+1,w,c
  6622  000272  2208               	addwfc	??_ISR+3,f,c
  6623  000274  505F               	movf	_CptSpi,w,c
  6624  000276  6E09               	movwf	(??_ISR+4)& (0+255),c
  6625  000278  6A0A               	clrf	(??_ISR+5)& (0+255),c
  6626  00027A  5007               	movf	??_ISR+2,w,c
  6627  00027C  5C09               	subwf	??_ISR+4,w,c
  6628  00027E  500A               	movf	??_ISR+5,w,c
  6629  000280  0A80               	xorlw	128
  6630  000282  6E0B               	movwf	(??_ISR+6)& (0+255),c
  6631  000284  5008               	movf	??_ISR+3,w,c
  6632  000286  0A80               	xorlw	128
  6633  000288  580B               	subwfb	(??_ISR+6)& (0+255),w,c
  6634  00028A  B0D8               	btfsc	status,0,c
  6635  00028C  D013               	goto	i2l305
  6636                           
  6637                           ;main.c: 642: text_prgm[3][CptSpi] = TextSpi[CptSpi];
  6638  00028E  505F               	movf	_CptSpi,w,c
  6639  000290  0D01               	mullw	1
  6640  000292  0E00               	movlw	low _TextSpi
  6641  000294  24F3               	addwf	prodl,w,c
  6642  000296  6ED9               	movwf	fsr2l,c
  6643  000298  0E03               	movlw	high _TextSpi
  6644  00029A  20F4               	addwfc	prodh,w,c
  6645  00029C  6EDA               	movwf	fsr2h,c
  6646  00029E  505F               	movf	_CptSpi,w,c
  6647  0002A0  0D01               	mullw	1
  6648  0002A2  0E2D               	movlw	low (_text_prgm+45)
  6649  0002A4  24F3               	addwf	prodl,w,c
  6650  0002A6  6EE1               	movwf	fsr1l,c
  6651  0002A8  0E02               	movlw	high (_text_prgm+45)
  6652  0002AA  20F4               	addwfc	prodh,w,c
  6653  0002AC  6EE2               	movwf	fsr1h,c
  6654  0002AE  CFDF FFE7          	movff	indf2,indf1
  6655                           
  6656                           ;main.c: 643: } else {
  6657  0002B2  D00A               	goto	i2l306
  6658  0002B4                     i2l305:
  6659                           
  6660                           ;main.c: 644: text_prgm[3][CptSpi] = '\0';
  6661  0002B4  505F               	movf	_CptSpi,w,c
  6662  0002B6  0D01               	mullw	1
  6663  0002B8  0E2D               	movlw	low (_text_prgm+45)
  6664  0002BA  24F3               	addwf	prodl,w,c
  6665  0002BC  6ED9               	movwf	fsr2l,c
  6666  0002BE  0E02               	movlw	high (_text_prgm+45)
  6667  0002C0  20F4               	addwfc	prodh,w,c
  6668  0002C2  6EDA               	movwf	fsr2h,c
  6669  0002C4  0E00               	movlw	0
  6670  0002C6  6EDF               	movwf	indf2,c
  6671  0002C8                     i2l306:
  6672  0002C8  2A5F               	incf	_CptSpi,f,c
  6673  0002CA  D7C5               	goto	i2l3035
  6674  0002CC                     
  6675                           ;main.c: 649: for(CptSpi=0;CptSpi<15;CptSpi++) {
  6676  0002CC  0E00               	movlw	0
  6677  0002CE  6E5F               	movwf	_CptSpi,c
  6678  0002D0                     i2l3051:
  6679  0002D0  0E0E               	movlw	14
  6680  0002D2  645F               	cpfsgt	_CptSpi,c
  6681  0002D4  D001               	goto	i2l308
  6682  0002D6  D0BA               	goto	i2l325
  6683  0002D8                     i2l308:
  6684                           
  6685                           ;main.c: 650: if(CptSpi < TailleMsgSpi-2) {
  6686  0002D8  0EFE               	movlw	254
  6687  0002DA  6E05               	movwf	??_ISR& (0+255),c
  6688  0002DC  0EFF               	movlw	255
  6689  0002DE  6E06               	movwf	(??_ISR+1)& (0+255),c
  6690  0002E0  505C               	movf	_TailleMsgSpi,w,c
  6691  0002E2  6E07               	movwf	(??_ISR+2)& (0+255),c
  6692  0002E4  6A08               	clrf	(??_ISR+3)& (0+255),c
  6693  0002E6  5005               	movf	??_ISR,w,c
  6694  0002E8  2607               	addwf	??_ISR+2,f,c
  6695  0002EA  5006               	movf	??_ISR+1,w,c
  6696  0002EC  2208               	addwfc	??_ISR+3,f,c
  6697  0002EE  505F               	movf	_CptSpi,w,c
  6698  0002F0  6E09               	movwf	(??_ISR+4)& (0+255),c
  6699  0002F2  6A0A               	clrf	(??_ISR+5)& (0+255),c
  6700  0002F4  5007               	movf	??_ISR+2,w,c
  6701  0002F6  5C09               	subwf	??_ISR+4,w,c
  6702  0002F8  500A               	movf	??_ISR+5,w,c
  6703  0002FA  0A80               	xorlw	128
  6704  0002FC  6E0B               	movwf	(??_ISR+6)& (0+255),c
  6705  0002FE  5008               	movf	??_ISR+3,w,c
  6706  000300  0A80               	xorlw	128
  6707  000302  580B               	subwfb	(??_ISR+6)& (0+255),w,c
  6708  000304  B0D8               	btfsc	status,0,c
  6709  000306  D013               	goto	i2l310
  6710                           
  6711                           ;main.c: 651: text_prgm[4][CptSpi] = TextSpi[CptSpi];
  6712  000308  505F               	movf	_CptSpi,w,c
  6713  00030A  0D01               	mullw	1
  6714  00030C  0E00               	movlw	low _TextSpi
  6715  00030E  24F3               	addwf	prodl,w,c
  6716  000310  6ED9               	movwf	fsr2l,c
  6717  000312  0E03               	movlw	high _TextSpi
  6718  000314  20F4               	addwfc	prodh,w,c
  6719  000316  6EDA               	movwf	fsr2h,c
  6720  000318  505F               	movf	_CptSpi,w,c
  6721  00031A  0D01               	mullw	1
  6722  00031C  0E3C               	movlw	low (_text_prgm+60)
  6723  00031E  24F3               	addwf	prodl,w,c
  6724  000320  6EE1               	movwf	fsr1l,c
  6725  000322  0E02               	movlw	high (_text_prgm+60)
  6726  000324  20F4               	addwfc	prodh,w,c
  6727  000326  6EE2               	movwf	fsr1h,c
  6728  000328  CFDF FFE7          	movff	indf2,indf1
  6729                           
  6730                           ;main.c: 652: } else {
  6731  00032C  D00A               	goto	i2l311
  6732  00032E                     i2l310:
  6733                           
  6734                           ;main.c: 653: text_prgm[4][CptSpi] = '\0';
  6735  00032E  505F               	movf	_CptSpi,w,c
  6736  000330  0D01               	mullw	1
  6737  000332  0E3C               	movlw	low (_text_prgm+60)
  6738  000334  24F3               	addwf	prodl,w,c
  6739  000336  6ED9               	movwf	fsr2l,c
  6740  000338  0E02               	movlw	high (_text_prgm+60)
  6741  00033A  20F4               	addwfc	prodh,w,c
  6742  00033C  6EDA               	movwf	fsr2h,c
  6743  00033E  0E00               	movlw	0
  6744  000340  6EDF               	movwf	indf2,c
  6745  000342                     i2l311:
  6746  000342  2A5F               	incf	_CptSpi,f,c
  6747  000344  D7C5               	goto	i2l3051
  6748  000346                     i2l312:
  6749                           
  6750                           ; BSR set to: 0
  6751                           ;main.c: 658: PosX = TextSpi[0];
  6752  000346  C300  F0DF         	movff	_TextSpi,_PosX
  6753  00034A  6BE0               	clrf	(_PosX+1)& (0+255),b
  6754                           
  6755                           ; BSR set to: 0
  6756                           ;main.c: 659: PosX = PosX << 8;
  6757  00034C  51DF               	movf	_PosX& (0+255),w,b
  6758  00034E  6FE0               	movwf	(_PosX+1)& (0+255),b
  6759  000350  6BDF               	clrf	_PosX& (0+255),b
  6760                           
  6761                           ; BSR set to: 0
  6762                           ;main.c: 660: PosX += TextSpi[1];
  6763  000352  0103               	movlb	3	; () banked
  6764  000354  5101               	movf	(_TextSpi+1)& (0+255),w,b
  6765  000356  0100               	movlb	0	; () banked
  6766  000358  27DF               	addwf	_PosX& (0+255),f,b
  6767  00035A  0E00               	movlw	0
  6768  00035C  23E0               	addwfc	(_PosX+1)& (0+255),f,b
  6769                           
  6770                           ; BSR set to: 0
  6771                           ;main.c: 661: if(PosX > 750) {
  6772  00035E  BFE0               	btfsc	(_PosX+1)& (0+255),7,b
  6773  000360  D075               	goto	i2l325
  6774  000362  0EEF               	movlw	239
  6775  000364  5DDF               	subwf	_PosX& (0+255),w,b
  6776  000366  0E02               	movlw	2
  6777  000368  59E0               	subwfb	(_PosX+1)& (0+255),w,b
  6778  00036A  A0D8               	btfss	status,0,c
  6779  00036C  D06F               	goto	i2l325
  6780                           
  6781                           ; BSR set to: 0
  6782                           ;main.c: 662: PosX = 750;
  6783  00036E  0E02               	movlw	2
  6784  000370  6FE0               	movwf	(_PosX+1)& (0+255),b
  6785  000372  0EEE               	movlw	238
  6786  000374  6FDF               	movwf	_PosX& (0+255),b
  6787                           
  6788                           ; BSR set to: 0
  6789                           ;main.c: 663: }
  6790                           ;main.c: 664: break;
  6791  000376  D06A               	goto	i2l325
  6792  000378                     i2l314:
  6793                           
  6794                           ; BSR set to: 0
  6795                           ;main.c: 666: PosY = TextSpi[0];
  6796  000378  C300  F0DD         	movff	_TextSpi,_PosY
  6797  00037C  6BDE               	clrf	(_PosY+1)& (0+255),b
  6798                           
  6799                           ; BSR set to: 0
  6800                           ;main.c: 667: PosY = PosY << 8;
  6801  00037E  51DD               	movf	_PosY& (0+255),w,b
  6802  000380  6FDE               	movwf	(_PosY+1)& (0+255),b
  6803  000382  6BDD               	clrf	_PosY& (0+255),b
  6804                           
  6805                           ; BSR set to: 0
  6806                           ;main.c: 668: PosY += TextSpi[1];
  6807  000384  0103               	movlb	3	; () banked
  6808  000386  5101               	movf	(_TextSpi+1)& (0+255),w,b
  6809  000388  0100               	movlb	0	; () banked
  6810  00038A  27DD               	addwf	_PosY& (0+255),f,b
  6811  00038C  0E00               	movlw	0
  6812  00038E  23DE               	addwfc	(_PosY+1)& (0+255),f,b
  6813                           
  6814                           ; BSR set to: 0
  6815                           ;main.c: 669: if(PosY > 430) {
  6816  000390  BFDE               	btfsc	(_PosY+1)& (0+255),7,b
  6817  000392  D05C               	goto	i2l325
  6818  000394  0EAF               	movlw	175
  6819  000396  5DDD               	subwf	_PosY& (0+255),w,b
  6820  000398  0E01               	movlw	1
  6821  00039A  59DE               	subwfb	(_PosY+1)& (0+255),w,b
  6822  00039C  A0D8               	btfss	status,0,c
  6823  00039E  D056               	goto	i2l325
  6824                           
  6825                           ; BSR set to: 0
  6826                           ;main.c: 670: PosY = 430;
  6827  0003A0  0E01               	movlw	1
  6828  0003A2  6FDE               	movwf	(_PosY+1)& (0+255),b
  6829  0003A4  0EAE               	movlw	174
  6830  0003A6  6FDD               	movwf	_PosY& (0+255),b
  6831                           
  6832                           ; BSR set to: 0
  6833                           ;main.c: 675: break;
  6834                           
  6835                           ;main.c: 673: case 12:
  6836                           
  6837                           ; BSR set to: 0
  6838                           ;main.c: 671: }
  6839                           ;main.c: 672: break;
  6840  0003A8  D051               	goto	i2l325
  6841  0003AA                     
  6842                           ; BSR set to: 0
  6843                           ;main.c: 677: case 9:
  6844                           ;main.c: 678: case 10:
  6845                           ;main.c: 679: case 11:
  6846                           ;main.c: 680: TailleTerm = TailleMsgSpi-2;
  6847                           
  6848                           ; BSR set to: 0
  6849                           
  6850                           ; BSR set to: 0
  6851                           
  6852                           ; BSR set to: 0
  6853                           
  6854                           ; BSR set to: 0
  6855  0003AA  0EFE               	movlw	254
  6856  0003AC  245C               	addwf	_TailleMsgSpi,w,c
  6857  0003AE  6FD6               	movwf	_TailleTerm& (0+255),b
  6858  0003B0  6BD7               	clrf	(_TailleTerm+1)& (0+255),b
  6859  0003B2  0EFF               	movlw	255
  6860  0003B4  23D7               	addwfc	(_TailleTerm+1)& (0+255),f,b
  6861                           
  6862                           ;main.c: 681: break;
  6863  0003B6  D04A               	goto	i2l325
  6864  0003B8                     i2l321:
  6865                           
  6866                           ; BSR set to: 0
  6867                           ;main.c: 683: Score = TextSpi[0];
  6868  0003B8  C300  F0D4         	movff	_TextSpi,_Score
  6869  0003BC  6BD5               	clrf	(_Score+1)& (0+255),b
  6870                           
  6871                           ; BSR set to: 0
  6872                           ;main.c: 684: Score = Score << 8;
  6873  0003BE  51D4               	movf	_Score& (0+255),w,b
  6874  0003C0  6FD5               	movwf	(_Score+1)& (0+255),b
  6875  0003C2  6BD4               	clrf	_Score& (0+255),b
  6876                           
  6877                           ; BSR set to: 0
  6878                           ;main.c: 685: Score += TextSpi[1];
  6879  0003C4  0103               	movlb	3	; () banked
  6880  0003C6  5101               	movf	(_TextSpi+1)& (0+255),w,b
  6881  0003C8  0100               	movlb	0	; () banked
  6882  0003CA  27D4               	addwf	_Score& (0+255),f,b
  6883  0003CC  0E00               	movlw	0
  6884  0003CE  23D5               	addwfc	(_Score+1)& (0+255),f,b
  6885                           
  6886                           ; BSR set to: 0
  6887                           ;main.c: 686: if(Score > 999) {
  6888  0003D0  BFD5               	btfsc	(_Score+1)& (0+255),7,b
  6889  0003D2  D03C               	goto	i2l325
  6890  0003D4  0EE8               	movlw	232
  6891  0003D6  5DD4               	subwf	_Score& (0+255),w,b
  6892  0003D8  0E03               	movlw	3
  6893  0003DA  59D5               	subwfb	(_Score+1)& (0+255),w,b
  6894  0003DC  A0D8               	btfss	status,0,c
  6895  0003DE  D036               	goto	i2l325
  6896                           
  6897                           ; BSR set to: 0
  6898                           ;main.c: 687: Score = 999;
  6899  0003E0  0E03               	movlw	3
  6900  0003E2  6FD5               	movwf	(_Score+1)& (0+255),b
  6901  0003E4  0EE7               	movlw	231
  6902  0003E6  6FD4               	movwf	_Score& (0+255),b
  6903                           
  6904                           ; BSR set to: 0
  6905                           ;main.c: 688: }
  6906                           ;main.c: 689: break;
  6907  0003E8  D031               	goto	i2l325
  6908  0003EA                     i2l323:
  6909                           
  6910                           ; BSR set to: 0
  6911  0003EA  00FF               	reset		;# 
  6912                           
  6913                           ;main.c: 696: }
  6914                           
  6915                           ;main.c: 695: break;
  6916                           
  6917                           ;main.c: 693: default:
  6918                           
  6919                           ;main.c: 692: break;
  6920  0003EC  D02F               	goto	i2l325
  6921  0003EE                     i2l285:
  6922  0003EE  0100               	movlb	0	; () banked
  6923  0003F0  51D9               	movf	_TypeVarSpi& (0+255),w,b
  6924                           
  6925                           ; Switch size 1, requested type "space"
  6926                           ; Number of cases is 14, Range of values is 1 to 14
  6927                           ; switch strategies available:
  6928                           ; Name         Instructions Cycles
  6929                           ; simple_byte           43    22 (average)
  6930                           ;	Chosen strategy is simple_byte
  6931  0003F2  0A01               	xorlw	1	; case 1
  6932  0003F4  B4D8               	btfsc	status,2,c
  6933  0003F6  D676               	goto	i2l286
  6934  0003F8  0A03               	xorlw	3	; case 2
  6935  0003FA  B4D8               	btfsc	status,2,c
  6936  0003FC  D6B0               	goto	i2l292
  6937  0003FE  0A01               	xorlw	1	; case 3
  6938  000400  B4D8               	btfsc	status,2,c
  6939  000402  D6EA               	goto	i2l297
  6940  000404  0A07               	xorlw	7	; case 4
  6941  000406  B4D8               	btfsc	status,2,c
  6942  000408  D724               	goto	i2l302
  6943  00040A  0A01               	xorlw	1	; case 5
  6944  00040C  B4D8               	btfsc	status,2,c
  6945  00040E  D75E               	goto	i2l307
  6946  000410  0A03               	xorlw	3	; case 6
  6947  000412  B4D8               	btfsc	status,2,c
  6948  000414  D798               	goto	i2l312
  6949  000416  0A01               	xorlw	1	; case 7
  6950  000418  B4D8               	btfsc	status,2,c
  6951  00041A  D7AE               	goto	i2l314
  6952  00041C  0A0F               	xorlw	15	; case 8
  6953  00041E  B4D8               	btfsc	status,2,c
  6954  000420  D7C4               	goto	i2l317
  6955  000422  0A01               	xorlw	1	; case 9
  6956  000424  B4D8               	btfsc	status,2,c
  6957  000426  D7C1               	goto	i2l317
  6958  000428  0A03               	xorlw	3	; case 10
  6959  00042A  B4D8               	btfsc	status,2,c
  6960  00042C  D7BE               	goto	i2l317
  6961  00042E  0A01               	xorlw	1	; case 11
  6962  000430  B4D8               	btfsc	status,2,c
  6963  000432  D7BB               	goto	i2l317
  6964  000434  0A07               	xorlw	7	; case 12
  6965  000436  B4D8               	btfsc	status,2,c
  6966  000438  D009               	goto	i2l325
  6967  00043A  0A01               	xorlw	1	; case 13
  6968  00043C  B4D8               	btfsc	status,2,c
  6969  00043E  D7BC               	goto	i2l321
  6970  000440  0A03               	xorlw	3	; case 14
  6971  000442  B4D8               	btfsc	status,2,c
  6972  000444  D7D2               	goto	i2l323
  6973                           
  6974                           ; BSR set to: 0
  6975                           
  6976                           ; BSR set to: 0
  6977  000446  D002               	goto	i2l325
  6978  000448                     L3:
  6979  000448  6E5D               	movwf	_EtatSpi,c
  6980                           
  6981                           ;main.c: 699: break;
  6982  00044A  D010               	goto	i2l277
  6983  00044C                     i2l325:
  6984                           
  6985                           ;main.c: 701: EtatSpi = 0;
  6986  00044C  0E00               	movlw	0
  6987  00044E  D7FC               	goto	L3
  6988  000450                     i2l274:
  6989  000450  505D               	movf	_EtatSpi,w,c
  6990                           
  6991                           ; Switch size 1, requested type "space"
  6992                           ; Number of cases is 4, Range of values is 0 to 3
  6993                           ; switch strategies available:
  6994                           ; Name         Instructions Cycles
  6995                           ; simple_byte           13     7 (average)
  6996                           ;	Chosen strategy is simple_byte
  6997  000452  0A00               	xorlw	0	; case 0
  6998  000454  B4D8               	btfsc	status,2,c
  6999  000456  D603               	goto	i2l275
  7000  000458  0A01               	xorlw	1	; case 1
  7001  00045A  B4D8               	btfsc	status,2,c
  7002  00045C  D60E               	goto	i2l278
  7003  00045E  0A03               	xorlw	3	; case 2
  7004  000460  B4D8               	btfsc	status,2,c
  7005  000462  D617               	goto	i2l281
  7006  000464  0A01               	xorlw	1	; case 3
  7007  000466  B4D8               	btfsc	status,2,c
  7008  000468  D62E               	goto	i2l283
  7009  00046A  D7F0               	goto	i2l325
  7010  00046C                     i2l277:
  7011                           
  7012                           ;main.c: 704: Checksum += data_spi;
  7013  00046C  501F               	movf	ISR@data_spi,w,c
  7014  00046E  2652               	addwf	_Checksum,f,c
  7015  000470  0E00               	movlw	0
  7016  000472  2253               	addwfc	_Checksum+1,f,c
  7017                           
  7018                           ;main.c: 705: if(TabPileSend[CptReadPile]) {
  7019  000474  5055               	movf	_CptReadPile,w,c
  7020  000476  0D01               	mullw	1
  7021  000478  0E48               	movlw	low _TabPileSend
  7022  00047A  24F3               	addwf	prodl,w,c
  7023  00047C  6ED9               	movwf	fsr2l,c
  7024  00047E  0E00               	movlw	high _TabPileSend
  7025  000480  20F4               	addwfc	prodh,w,c
  7026  000482  6EDA               	movwf	fsr2h,c
  7027  000484  50DF               	movf	indf2,w,c
  7028  000486  B4D8               	btfsc	status,2,c
  7029  000488  D06E               	goto	i2l326
  7030                           
  7031                           ;main.c: 706: CptSpiSend++;
  7032  00048A  2A57               	incf	_CptSpiSend,f,c
  7033                           
  7034                           ;main.c: 707: switch(CptSpiSend) {
  7035  00048C  D05E               	goto	i2l327
  7036  00048E                     
  7037                           ;main.c: 709: SSPBUF = 0x04;
  7038  00048E  0E04               	movlw	4
  7039  000490  D06B               	goto	L5
  7040  000492                     
  7041                           ;main.c: 712: SSPBUF = TabPileSend[CptReadPile];
  7042  000492  5055               	movf	_CptReadPile,w,c
  7043  000494  0D01               	mullw	1
  7044  000496  0E48               	movlw	low _TabPileSend
  7045  000498  24F3               	addwf	prodl,w,c
  7046  00049A  6ED9               	movwf	fsr2l,c
  7047  00049C  0E00               	movlw	high _TabPileSend
  7048  00049E  20F4               	addwfc	prodh,w,c
  7049  0004A0  6EDA               	movwf	fsr2h,c
  7050  0004A2  50DF               	movf	indf2,w,c
  7051  0004A4  D061               	goto	L5
  7052  0004A6                     i2l333:
  7053                           
  7054                           ;main.c: 717: SendNbSpi = PrgmSens;
  7055  0004A6  C059  F056         	movff	_PrgmSens,_SendNbSpi
  7056                           
  7057                           ;main.c: 718: PrgmSens = 0;
  7058  0004AA  0E00               	movlw	0
  7059  0004AC  6E59               	movwf	_PrgmSens,c
  7060                           
  7061                           ;main.c: 719: break;
  7062  0004AE  D01A               	goto	i2l334
  7063  0004B0                     i2l335:
  7064                           
  7065                           ;main.c: 721: SendNbSpi = Stop;
  7066  0004B0  C058  F056         	movff	_Stop,_SendNbSpi
  7067                           
  7068                           ;main.c: 722: Stop = 0;
  7069  0004B4  0E00               	movlw	0
  7070  0004B6  6E58               	movwf	_Stop,c
  7071                           
  7072                           ;main.c: 723: break;
  7073  0004B8  D015               	goto	i2l334
  7074  0004BA                     i2l336:
  7075                           
  7076                           ;main.c: 725: SendNbSpi = PosCursorPrgm;
  7077  0004BA  C0DA  F056         	movff	_PosCursorPrgm,_SendNbSpi
  7078                           
  7079                           ;main.c: 727: }
  7080                           
  7081                           ;main.c: 726: break;
  7082  0004BE  D012               	goto	i2l334
  7083  0004C0  5055               	movf	_CptReadPile,w,c
  7084  0004C2  0D01               	mullw	1
  7085  0004C4  0E48               	movlw	low _TabPileSend
  7086  0004C6  24F3               	addwf	prodl,w,c
  7087  0004C8  6ED9               	movwf	fsr2l,c
  7088  0004CA  0E00               	movlw	high _TabPileSend
  7089  0004CC  20F4               	addwfc	prodh,w,c
  7090  0004CE  6EDA               	movwf	fsr2h,c
  7091  0004D0  50DF               	movf	indf2,w,c
  7092                           
  7093                           ; Switch size 1, requested type "space"
  7094                           ; Number of cases is 3, Range of values is 15 to 17
  7095                           ; switch strategies available:
  7096                           ; Name         Instructions Cycles
  7097                           ; simple_byte           10     6 (average)
  7098                           ;	Chosen strategy is simple_byte
  7099  0004D2  0A0F               	xorlw	15	; case 15
  7100  0004D4  B4D8               	btfsc	status,2,c
  7101  0004D6  D7E7               	goto	i2l333
  7102  0004D8  0A1F               	xorlw	31	; case 16
  7103  0004DA  B4D8               	btfsc	status,2,c
  7104  0004DC  D7EE               	goto	i2l336
  7105  0004DE  0A01               	xorlw	1	; case 17
  7106  0004E0  B4D8               	btfsc	status,2,c
  7107  0004E2  D7E6               	goto	i2l335
  7108  0004E4                     i2l334:
  7109                           
  7110                           ;main.c: 728: SSPBUF = SendNbSpi;
  7111  0004E4  C056  FFC9         	movff	_SendNbSpi,4041	;volatile
  7112                           
  7113                           ;main.c: 729: break;
  7114  0004E8  D040               	goto	i2l338
  7115  0004EA                     
  7116                           ;main.c: 731: SSPBUF = Modulo(SendNbSpi+TabPileSend[CptReadPile]+4);
  7117  0004EA  5055               	movf	_CptReadPile,w,c
  7118  0004EC  0D01               	mullw	1
  7119  0004EE  0E48               	movlw	low _TabPileSend
  7120  0004F0  24F3               	addwf	prodl,w,c
  7121  0004F2  6ED9               	movwf	fsr2l,c
  7122  0004F4  0E00               	movlw	high _TabPileSend
  7123  0004F6  20F4               	addwfc	prodh,w,c
  7124  0004F8  6EDA               	movwf	fsr2h,c
  7125  0004FA  50DF               	movf	indf2,w,c
  7126  0004FC  6E05               	movwf	??_ISR& (0+255),c
  7127  0004FE  5005               	movf	??_ISR,w,c
  7128  000500  C056  F006         	movff	_SendNbSpi,??_ISR+1
  7129  000504  6A07               	clrf	(??_ISR+2)& (0+255),c
  7130  000506  2606               	addwf	??_ISR+1,f,c
  7131  000508  0E00               	movlw	0
  7132  00050A  2207               	addwfc	??_ISR+2,f,c
  7133  00050C  0E04               	movlw	4
  7134  00050E  2406               	addwf	??_ISR+1,w,c
  7135  000510  6E01               	movwf	Modulo@M_nombre,c
  7136  000512  0E00               	movlw	0
  7137  000514  2007               	addwfc	??_ISR+2,w,c
  7138  000516  6E02               	movwf	Modulo@M_nombre+1,c
  7139  000518  EC58  F00F         	call	_Modulo	;wreg free
  7140  00051C  6EC9               	movwf	4041,c	;volatile
  7141                           
  7142                           ;main.c: 732: TabPileSend[CptReadPile] = 0;
  7143  00051E  5055               	movf	_CptReadPile,w,c
  7144  000520  0D01               	mullw	1
  7145  000522  0E48               	movlw	low _TabPileSend
  7146  000524  24F3               	addwf	prodl,w,c
  7147  000526  6ED9               	movwf	fsr2l,c
  7148  000528  0E00               	movlw	high _TabPileSend
  7149  00052A  20F4               	addwfc	prodh,w,c
  7150  00052C  6EDA               	movwf	fsr2h,c
  7151  00052E  0E00               	movlw	0
  7152  000530  6EDF               	movwf	indf2,c
  7153                           
  7154                           ;main.c: 733: CptReadPile++;
  7155  000532  2A55               	incf	_CptReadPile,f,c
  7156                           
  7157                           ;main.c: 734: CptReadPile %= 10;
  7158  000534  0E0A               	movlw	10
  7159  000536  6E01               	movwf	___lbmod@divisor,c
  7160  000538  5055               	movf	_CptReadPile,w,c
  7161  00053A  ECD5  F00E         	call	___lbmod
  7162  00053E  6E55               	movwf	_CptReadPile,c
  7163                           
  7164                           ;main.c: 735: CptSpiSend = 0;
  7165  000540  0E00               	movlw	0
  7166  000542  6E57               	movwf	_CptSpiSend,c
  7167                           
  7168                           ;main.c: 736: SendNbSpi = 0;
  7169  000544  0E00               	movlw	0
  7170  000546  6E56               	movwf	_SendNbSpi,c
  7171                           
  7172                           ;main.c: 738: }
  7173                           
  7174                           ;main.c: 737: break;
  7175  000548  D010               	goto	i2l338
  7176  00054A                     i2l327:
  7177  00054A  5057               	movf	_CptSpiSend,w,c
  7178                           
  7179                           ; Switch size 1, requested type "space"
  7180                           ; Number of cases is 4, Range of values is 1 to 4
  7181                           ; switch strategies available:
  7182                           ; Name         Instructions Cycles
  7183                           ; simple_byte           13     7 (average)
  7184                           ;	Chosen strategy is simple_byte
  7185  00054C  0A01               	xorlw	1	; case 1
  7186  00054E  B4D8               	btfsc	status,2,c
  7187  000550  D79E               	goto	i2l328
  7188  000552  0A03               	xorlw	3	; case 2
  7189  000554  B4D8               	btfsc	status,2,c
  7190  000556  D79D               	goto	i2l330
  7191  000558  0A01               	xorlw	1	; case 3
  7192  00055A  B4D8               	btfsc	status,2,c
  7193  00055C  D7B1               	goto	i2l332
  7194  00055E  0A07               	xorlw	7	; case 4
  7195  000560  B4D8               	btfsc	status,2,c
  7196  000562  D7C3               	goto	i2l337
  7197                           
  7198                           ;main.c: 739: } else {
  7199  000564  D002               	goto	i2l338
  7200  000566                     i2l326:
  7201                           
  7202                           ;main.c: 740: SSPBUF = 0;
  7203  000566  0E00               	movlw	0
  7204  000568                     L5:
  7205  000568  6EC9               	movwf	4041,c	;volatile
  7206  00056A                     i2l338:
  7207                           
  7208                           ;main.c: 741: }
  7209                           ;main.c: 742: }
  7210                           ;main.c: 744: if(RCIF) {
  7211  00056A  AA9E               	btfss	3998,5,c	;volatile
  7212  00056C  D0AF               	goto	i2l348
  7213                           
  7214                           ;main.c: 745: char Receive;
  7215                           ;main.c: 746: RCIF = 0;
  7216  00056E  9A9E               	bcf	3998,5,c	;volatile
  7217                           
  7218                           ;main.c: 747: Receive = RCREG;
  7219  000570  CFAE F01E          	movff	4014,ISR@Receive	;volatile
  7220                           
  7221                           ;main.c: 748: if(FlagSleep) {
  7222  000574  505A               	movf	_FlagSleep,w,c
  7223  000576  B4D8               	btfsc	status,2,c
  7224  000578  D075               	goto	i2l343
  7225                           
  7226                           ;main.c: 749: if(Receive == 0x68) {
  7227  00057A  0E68               	movlw	104
  7228  00057C  181E               	xorwf	ISR@Receive,w,c
  7229  00057E  A4D8               	btfss	status,2,c
  7230  000580  D0A5               	goto	i2l348
  7231                           
  7232                           ;main.c: 750: FlagSleep = 0;
  7233  000582  0E00               	movlw	0
  7234  000584  6E5A               	movwf	_FlagSleep,c
  7235                           
  7236                           ;main.c: 751: FlagSpi = 1;
  7237  000586  0E01               	movlw	1
  7238  000588  0100               	movlb	0	; () banked
  7239  00058A  D004               	goto	L6
  7240  00058C                     
  7241                           ;main.c: 756: case 0x32:
  7242                           ;main.c: 757: case 0x33:
  7243                           ;main.c: 758: case 0x34:
  7244                           ;main.c: 759: EtatScreen = Receive-0x30;
  7245                           
  7246                           ; BSR set to: 0
  7247                           
  7248                           ; BSR set to: 0
  7249                           
  7250                           ; BSR set to: 0
  7251                           
  7252                           ; BSR set to: 0
  7253  00058C  501E               	movf	ISR@Receive,w,c
  7254  00058E  0FD0               	addlw	208
  7255  000590  D004               	goto	L7
  7256  000592                     i2l3151:
  7257                           
  7258                           ; BSR set to: 0
  7259                           ;main.c: 760: FlagSpi = 1;
  7260  000592  0E01               	movlw	1
  7261  000594                     L6:
  7262  000594  6FE1               	movwf	_FlagSpi& (0+255),b
  7263                           
  7264                           ;main.c: 761: break;
  7265  000596  D09A               	goto	i2l348
  7266  000598                     
  7267                           ;main.c: 763: case 0x42:
  7268                           ;main.c: 764: case 0x43:
  7269                           ;main.c: 765: case 0x44:
  7270                           ;main.c: 766: EtatScreen = 0;
  7271                           
  7272                           ; BSR set to: 0
  7273                           
  7274                           ; BSR set to: 0
  7275                           
  7276                           ; BSR set to: 0
  7277                           
  7278                           ; BSR set to: 0
  7279  000598  0E00               	movlw	0
  7280  00059A                     L7:
  7281  00059A  0100               	movlb	0	; () banked
  7282  00059C  6FDC               	movwf	_EtatScreen& (0+255),b
  7283  00059E  D7F9               	goto	i2l3151
  7284  0005A0                     
  7285                           ;main.c: 770: AutoLight = 1;
  7286                           
  7287                           ; BSR set to: 0
  7288  0005A0  0E01               	movlw	1
  7289  0005A2  D001               	goto	L8
  7290  0005A4                     
  7291                           ;main.c: 773: AutoLight = 0;
  7292                           
  7293                           ; BSR set to: 0
  7294  0005A4  0E00               	movlw	0
  7295  0005A6                     L8:
  7296  0005A6  0100               	movlb	0	; () banked
  7297  0005A8  6FDB               	movwf	_AutoLight& (0+255),b
  7298                           
  7299                           ;main.c: 774: break;
  7300  0005AA  D090               	goto	i2l348
  7301  0005AC                     
  7302                           ;main.c: 776: if(PosCursorPrgm > 0) {
  7303                           
  7304                           ; BSR set to: 0
  7305  0005AC  0100               	movlb	0	; () banked
  7306  0005AE  51DA               	movf	_PosCursorPrgm& (0+255),w,b
  7307  0005B0  B4D8               	btfsc	status,2,c
  7308  0005B2  D08C               	goto	i2l348
  7309                           
  7310                           ; BSR set to: 0
  7311                           ;main.c: 777: PosCursorPrgm--;
  7312  0005B4  07DA               	decf	_PosCursorPrgm& (0+255),f,b
  7313  0005B6  D7ED               	goto	i2l3151
  7314  0005B8                     
  7315                           ;main.c: 782: if(PosCursorPrgm < 5-1) {
  7316                           
  7317                           ; BSR set to: 0
  7318  0005B8  0E04               	movlw	4
  7319  0005BA  0100               	movlb	0	; () banked
  7320  0005BC  61DA               	cpfslt	_PosCursorPrgm& (0+255),b
  7321  0005BE  D086               	goto	i2l348
  7322                           
  7323                           ; BSR set to: 0
  7324                           ;main.c: 783: PosCursorPrgm++;
  7325  0005C0  2BDA               	incf	_PosCursorPrgm& (0+255),f,b
  7326  0005C2  D7E7               	goto	i2l3151
  7327  0005C4                     
  7328                           ;main.c: 789: PrgmChoisi = 1;
  7329                           
  7330                           ; BSR set to: 0
  7331  0005C4  0E01               	movlw	1
  7332  0005C6  6E5B               	movwf	_PrgmChoisi,c
  7333                           
  7334                           ;main.c: 790: TabPileSend[CptPile] = 16;
  7335  0005C8  5054               	movf	_CptPile,w,c
  7336  0005CA  0D01               	mullw	1
  7337  0005CC  0E48               	movlw	low _TabPileSend
  7338  0005CE  24F3               	addwf	prodl,w,c
  7339  0005D0  6ED9               	movwf	fsr2l,c
  7340  0005D2  0E00               	movlw	high _TabPileSend
  7341  0005D4  20F4               	addwfc	prodh,w,c
  7342  0005D6  6EDA               	movwf	fsr2h,c
  7343  0005D8  0E10               	movlw	16
  7344  0005DA  6EDF               	movwf	indf2,c
  7345                           
  7346                           ;main.c: 791: CptPile++;
  7347  0005DC  2A54               	incf	_CptPile,f,c
  7348                           
  7349                           ;main.c: 792: CptPile %= 10;
  7350  0005DE  0E0A               	movlw	10
  7351  0005E0  6E01               	movwf	___lbmod@divisor,c
  7352  0005E2  5054               	movf	_CptPile,w,c
  7353  0005E4  ECD5  F00E         	call	___lbmod
  7354  0005E8  D03B               	goto	L11
  7355  0005EA                     
  7356                           ;main.c: 795: FlagSleep = 1;
  7357  0005EA  0E01               	movlw	1
  7358  0005EC  6E5A               	movwf	_FlagSleep,c
  7359                           
  7360                           ;main.c: 796: break;
  7361  0005EE  D06E               	goto	i2l348
  7362  0005F0                     
  7363                           ;main.c: 798: PrgmSens = 1;
  7364  0005F0  0E01               	movlw	1
  7365  0005F2  6E59               	movwf	_PrgmSens,c
  7366                           
  7367                           ;main.c: 799: TabPileSend[CptPile] = 15;
  7368  0005F4  5054               	movf	_CptPile,w,c
  7369  0005F6  0D01               	mullw	1
  7370  0005F8  0E48               	movlw	low _TabPileSend
  7371  0005FA  24F3               	addwf	prodl,w,c
  7372  0005FC  6ED9               	movwf	fsr2l,c
  7373  0005FE  0E00               	movlw	high _TabPileSend
  7374  000600  20F4               	addwfc	prodh,w,c
  7375  000602  6EDA               	movwf	fsr2h,c
  7376  000604  0E0F               	movlw	15
  7377  000606  6EDF               	movwf	indf2,c
  7378                           
  7379                           ;main.c: 800: CptPile++;
  7380  000608  2A54               	incf	_CptPile,f,c
  7381                           
  7382                           ;main.c: 801: CptPile %= 10;
  7383  00060A  0E0A               	movlw	10
  7384  00060C  6E01               	movwf	___lbmod@divisor,c
  7385  00060E  5054               	movf	_CptPile,w,c
  7386  000610  ECD5  F00E         	call	___lbmod
  7387  000614  D025               	goto	L11
  7388  000616                     
  7389                           ;main.c: 804: PrgmSens = 2;
  7390  000616  0E02               	movlw	2
  7391  000618  6E59               	movwf	_PrgmSens,c
  7392                           
  7393                           ;main.c: 805: TabPileSend[CptPile] = 15;
  7394  00061A  5054               	movf	_CptPile,w,c
  7395  00061C  0D01               	mullw	1
  7396  00061E  0E48               	movlw	low _TabPileSend
  7397  000620  24F3               	addwf	prodl,w,c
  7398  000622  6ED9               	movwf	fsr2l,c
  7399  000624  0E00               	movlw	high _TabPileSend
  7400  000626  20F4               	addwfc	prodh,w,c
  7401  000628  6EDA               	movwf	fsr2h,c
  7402  00062A  0E0F               	movlw	15
  7403  00062C  6EDF               	movwf	indf2,c
  7404                           
  7405                           ;main.c: 806: CptPile++;
  7406  00062E  2A54               	incf	_CptPile,f,c
  7407                           
  7408                           ;main.c: 807: CptPile %= 10;
  7409  000630  0E0A               	movlw	10
  7410  000632  6E01               	movwf	___lbmod@divisor,c
  7411  000634  5054               	movf	_CptPile,w,c
  7412  000636  ECD5  F00E         	call	___lbmod
  7413  00063A  D012               	goto	L11
  7414  00063C                     
  7415                           ;main.c: 810: Stop = 1;
  7416  00063C  0E01               	movlw	1
  7417  00063E  6E58               	movwf	_Stop,c
  7418                           
  7419                           ;main.c: 811: TabPileSend[CptPile] = 17;
  7420  000640  5054               	movf	_CptPile,w,c
  7421  000642  0D01               	mullw	1
  7422  000644  0E48               	movlw	low _TabPileSend
  7423  000646  24F3               	addwf	prodl,w,c
  7424  000648  6ED9               	movwf	fsr2l,c
  7425  00064A  0E00               	movlw	high _TabPileSend
  7426  00064C  20F4               	addwfc	prodh,w,c
  7427  00064E  6EDA               	movwf	fsr2h,c
  7428  000650  0E11               	movlw	17
  7429  000652  6EDF               	movwf	indf2,c
  7430                           
  7431                           ;main.c: 812: CptPile++;
  7432  000654  2A54               	incf	_CptPile,f,c
  7433                           
  7434                           ;main.c: 813: CptPile %= 10;
  7435  000656  0E0A               	movlw	10
  7436  000658  6E01               	movwf	___lbmod@divisor,c
  7437  00065A  5054               	movf	_CptPile,w,c
  7438  00065C  ECD5  F00E         	call	___lbmod
  7439  000660                     L11:
  7440  000660  6E54               	movwf	_CptPile,c
  7441                           
  7442                           ;main.c: 818: }
  7443                           
  7444                           ;main.c: 817: break;
  7445                           
  7446                           ;main.c: 815: default:
  7447                           
  7448                           ;main.c: 814: break;
  7449  000662  D034               	goto	i2l348
  7450  000664                     i2l343:
  7451  000664  501E               	movf	ISR@Receive,w,c
  7452                           
  7453                           ; Switch size 1, requested type "space"
  7454                           ; Number of cases is 17, Range of values is 49 to 83
  7455                           ; switch strategies available:
  7456                           ; Name         Instructions Cycles
  7457                           ; simple_byte           52    27 (average)
  7458                           ;	Chosen strategy is simple_byte
  7459  000666  0A31               	xorlw	49	; case 49
  7460  000668  B4D8               	btfsc	status,2,c
  7461  00066A  D790               	goto	i2l344
  7462  00066C  0A03               	xorlw	3	; case 50
  7463  00066E  B4D8               	btfsc	status,2,c
  7464  000670  D78D               	goto	i2l344
  7465  000672  0A01               	xorlw	1	; case 51
  7466  000674  B4D8               	btfsc	status,2,c
  7467  000676  D78A               	goto	i2l344
  7468  000678  0A07               	xorlw	7	; case 52
  7469  00067A  B4D8               	btfsc	status,2,c
  7470  00067C  D787               	goto	i2l344
  7471  00067E  0A01               	xorlw	1	; case 53
  7472  000680  B4D8               	btfsc	status,2,c
  7473  000682  D78E               	goto	i2l353
  7474  000684  0A03               	xorlw	3	; case 54
  7475  000686  B4D8               	btfsc	status,2,c
  7476  000688  D78D               	goto	i2l354
  7477  00068A  0A01               	xorlw	1	; case 55
  7478  00068C  B4D8               	btfsc	status,2,c
  7479  00068E  D78E               	goto	i2l355
  7480  000690  0A0F               	xorlw	15	; case 56
  7481  000692  B4D8               	btfsc	status,2,c
  7482  000694  D791               	goto	i2l357
  7483  000696  0A01               	xorlw	1	; case 57
  7484  000698  B4D8               	btfsc	status,2,c
  7485  00069A  D794               	goto	i2l359
  7486  00069C  0A79               	xorlw	121	; case 64
  7487  00069E  B4D8               	btfsc	status,2,c
  7488  0006A0  D7A4               	goto	i2l360
  7489  0006A2  0A01               	xorlw	1	; case 65
  7490  0006A4  B4D8               	btfsc	status,2,c
  7491  0006A6  D778               	goto	i2l349
  7492  0006A8  0A03               	xorlw	3	; case 66
  7493  0006AA  B4D8               	btfsc	status,2,c
  7494  0006AC  D775               	goto	i2l349
  7495  0006AE  0A01               	xorlw	1	; case 67
  7496  0006B0  B4D8               	btfsc	status,2,c
  7497  0006B2  D772               	goto	i2l349
  7498  0006B4  0A07               	xorlw	7	; case 68
  7499  0006B6  B4D8               	btfsc	status,2,c
  7500  0006B8  D76F               	goto	i2l349
  7501  0006BA  0A15               	xorlw	21	; case 81
  7502  0006BC  B4D8               	btfsc	status,2,c
  7503  0006BE  D798               	goto	i2l361
  7504  0006C0  0A03               	xorlw	3	; case 82
  7505  0006C2  B4D8               	btfsc	status,2,c
  7506  0006C4  D7A8               	goto	i2l362
  7507  0006C6  0A01               	xorlw	1	; case 83
  7508  0006C8  B4D8               	btfsc	status,2,c
  7509  0006CA  D7B8               	goto	i2l363
  7510  0006CC                     i2l348:
  7511  0006CC  C01D  F063         	movff	??_ISR+24,btemp+3
  7512  0006D0  C01C  F062         	movff	??_ISR+23,btemp+2
  7513  0006D4  C01B  F061         	movff	??_ISR+22,btemp+1
  7514  0006D8  C01A  F060         	movff	??_ISR+21,btemp
  7515  0006DC  C019  FFF5         	movff	??_ISR+20,tablat
  7516  0006E0  C018  FFF8         	movff	??_ISR+19,tblptru
  7517  0006E4  C017  FFF7         	movff	??_ISR+18,tblptrh
  7518  0006E8  C016  FFF6         	movff	??_ISR+17,tblptrl
  7519  0006EC  C015  FFF4         	movff	??_ISR+16,prodh
  7520  0006F0  C014  FFF3         	movff	??_ISR+15,prodl
  7521  0006F4  C013  FFDA         	movff	??_ISR+14,fsr2h
  7522  0006F8  C012  FFD9         	movff	??_ISR+13,fsr2l
  7523  0006FC  C011  FFE2         	movff	??_ISR+12,fsr1h
  7524  000700  C010  FFE1         	movff	??_ISR+11,fsr1l
  7525  000704  C00F  FFEA         	movff	??_ISR+10,fsr0h
  7526  000708  C00E  FFE9         	movff	??_ISR+9,fsr0l
  7527  00070C  C00D  FFFB         	movff	??_ISR+8,pclatu
  7528  000710  C00C  FFFA         	movff	??_ISR+7,pclath
  7529  000714  9260               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7530  000716  0011               	retfie		f
  7531  000718                     __end_of_ISR:
  7532                           	opt stack 0
  7533                           pclatu	equ	0xFFB
  7534                           pclath	equ	0xFFA
  7535                           tblptru	equ	0xFF8
  7536                           tblptrh	equ	0xFF7
  7537                           tblptrl	equ	0xFF6
  7538                           tablat	equ	0xFF5
  7539                           prodh	equ	0xFF4
  7540                           prodl	equ	0xFF3
  7541                           intcon	equ	0xFF2
  7542                           postinc0	equ	0xFEE
  7543                           fsr0h	equ	0xFEA
  7544                           fsr0l	equ	0xFE9
  7545                           wreg	equ	0xFE8
  7546                           indf1	equ	0xFE7
  7547                           postdec1	equ	0xFE5
  7548                           fsr1h	equ	0xFE2
  7549                           fsr1l	equ	0xFE1
  7550                           indf2	equ	0xFDF
  7551                           postinc2	equ	0xFDE
  7552                           postdec2	equ	0xFDD
  7553                           fsr2h	equ	0xFDA
  7554                           fsr2l	equ	0xFD9
  7555                           status	equ	0xFD8
  7556                           
  7557 ;; *************** function ___lbmod *****************
  7558 ;; Defined at:
  7559 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lbmod.c"
  7560 ;; Parameters:    Size  Location     Type
  7561 ;;  dividend        1    wreg     unsigned char 
  7562 ;;  divisor         1    0[COMRAM] unsigned char 
  7563 ;; Auto vars:     Size  Location     Type
  7564 ;;  dividend        1    1[COMRAM] unsigned char 
  7565 ;;  rem             1    3[COMRAM] unsigned char 
  7566 ;;  counter         1    2[COMRAM] unsigned char 
  7567 ;; Return value:  Size  Location     Type
  7568 ;;                  1    wreg      unsigned char 
  7569 ;; Registers used:
  7570 ;;		wreg, status,2, status,0
  7571 ;; Tracked objects:
  7572 ;;		On entry : 0/0
  7573 ;;		On exit  : 0/0
  7574 ;;		Unchanged: 0/0
  7575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7576 ;;      Params:         1       0       0       0       0       0       0
  7577 ;;      Locals:         3       0       0       0       0       0       0
  7578 ;;      Temps:          0       0       0       0       0       0       0
  7579 ;;      Totals:         4       0       0       0       0       0       0
  7580 ;;Total ram usage:        4 bytes
  7581 ;; Hardware stack levels used:    1
  7582 ;; This function calls:
  7583 ;;		Nothing
  7584 ;; This function is called by:
  7585 ;;		_ISR
  7586 ;; This function uses a non-reentrant model
  7587 ;;
  7588                           
  7589                           	psect	text29
  7590  001DAA                     __ptext29:
  7591                           	opt stack 0
  7592  001DAA                     ___lbmod:
  7593                           	opt stack 25
  7594                           
  7595                           ;incstack = 0
  7596                           ;___lbmod@dividend stored from wreg
  7597  001DAA  6E02               	movwf	___lbmod@dividend,c
  7598  001DAC  0E08               	movlw	8
  7599  001DAE  6E03               	movwf	___lbmod@counter,c
  7600  001DB0  0E00               	movlw	0
  7601  001DB2  6E04               	movwf	___lbmod@rem,c
  7602  001DB4  90D8               	bcf	status,0,c
  7603  001DB6  3402               	rlcf	___lbmod@dividend,w,c
  7604  001DB8  3404               	rlcf	___lbmod@rem,w,c
  7605  001DBA  6E04               	movwf	___lbmod@rem,c
  7606  001DBC  90D8               	bcf	status,0,c
  7607  001DBE  3602               	rlcf	___lbmod@dividend,f,c
  7608  001DC0  5001               	movf	___lbmod@divisor,w,c
  7609  001DC2  5C04               	subwf	___lbmod@rem,w,c
  7610  001DC4  A0D8               	btfss	status,0,c
  7611  001DC6  D002               	goto	i2l749
  7612  001DC8  5001               	movf	___lbmod@divisor,w,c
  7613  001DCA  5E04               	subwf	___lbmod@rem,f,c
  7614  001DCC                     i2l749:
  7615  001DCC  2E03               	decfsz	___lbmod@counter,f,c
  7616  001DCE  D7F2               	goto	i2l748
  7617  001DD0  5004               	movf	___lbmod@rem,w,c
  7618  001DD2  0012               	return	
  7619  001DD4                     __end_of___lbmod:
  7620                           	opt stack 0
  7621                           pclatu	equ	0xFFB
  7622                           pclath	equ	0xFFA
  7623                           tblptru	equ	0xFF8
  7624                           tblptrh	equ	0xFF7
  7625                           tblptrl	equ	0xFF6
  7626                           tablat	equ	0xFF5
  7627                           prodh	equ	0xFF4
  7628                           prodl	equ	0xFF3
  7629                           intcon	equ	0xFF2
  7630                           postinc0	equ	0xFEE
  7631                           fsr0h	equ	0xFEA
  7632                           fsr0l	equ	0xFE9
  7633                           wreg	equ	0xFE8
  7634                           indf1	equ	0xFE7
  7635                           postdec1	equ	0xFE5
  7636                           fsr1h	equ	0xFE2
  7637                           fsr1l	equ	0xFE1
  7638                           indf2	equ	0xFDF
  7639                           postinc2	equ	0xFDE
  7640                           postdec2	equ	0xFDD
  7641                           fsr2h	equ	0xFDA
  7642                           fsr2l	equ	0xFD9
  7643                           status	equ	0xFD8
  7644                           
  7645 ;; *************** function _Modulo *****************
  7646 ;; Defined at:
  7647 ;;		line 566 in file "main.c"
  7648 ;; Parameters:    Size  Location     Type
  7649 ;;  M_nombre        2    0[COMRAM] short 
  7650 ;; Auto vars:     Size  Location     Type
  7651 ;;		None
  7652 ;; Return value:  Size  Location     Type
  7653 ;;                  1    wreg      unsigned char 
  7654 ;; Registers used:
  7655 ;;		wreg, status,2, status,0
  7656 ;; Tracked objects:
  7657 ;;		On entry : 0/0
  7658 ;;		On exit  : 0/0
  7659 ;;		Unchanged: 0/0
  7660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7661 ;;      Params:         2       0       0       0       0       0       0
  7662 ;;      Locals:         0       0       0       0       0       0       0
  7663 ;;      Temps:          0       0       0       0       0       0       0
  7664 ;;      Totals:         2       0       0       0       0       0       0
  7665 ;;Total ram usage:        2 bytes
  7666 ;; Hardware stack levels used:    1
  7667 ;; This function calls:
  7668 ;;		Nothing
  7669 ;; This function is called by:
  7670 ;;		_ISR
  7671 ;; This function uses a non-reentrant model
  7672 ;;
  7673                           
  7674                           	psect	text30
  7675  001EB0                     __ptext30:
  7676                           	opt stack 0
  7677  001EB0                     _Modulo:
  7678                           	opt stack 25
  7679                           
  7680                           ;main.c: 567: while(M_nombre > 255) {
  7681                           
  7682                           ;incstack = 0
  7683  001EB0  D004               	goto	i2l265
  7684  001EB2                     
  7685                           ;main.c: 568: M_nombre -= 256;
  7686  001EB2  0E00               	movlw	0
  7687  001EB4  2601               	addwf	Modulo@M_nombre,f,c
  7688  001EB6  0EFF               	movlw	255
  7689  001EB8  2202               	addwfc	Modulo@M_nombre+1,f,c
  7690  001EBA                     i2l265:
  7691  001EBA  BE02               	btfsc	Modulo@M_nombre+1,7,c
  7692  001EBC  D003               	goto	i2u219_40
  7693  001EBE  0402               	decf	Modulo@M_nombre+1,w,c
  7694  001EC0  B0D8               	btfsc	status,0,c
  7695  001EC2  D7F7               	goto	i2l266
  7696  001EC4                     i2u219_40:
  7697                           
  7698                           ;main.c: 569: }
  7699                           ;main.c: 570: return M_nombre;
  7700  001EC4  5001               	movf	Modulo@M_nombre,w,c
  7701  001EC6  0012               	return	
  7702  001EC8                     __end_of_Modulo:
  7703                           	opt stack 0
  7704                           pclatu	equ	0xFFB
  7705                           pclath	equ	0xFFA
  7706                           tblptru	equ	0xFF8
  7707                           tblptrh	equ	0xFF7
  7708                           tblptrl	equ	0xFF6
  7709                           tablat	equ	0xFF5
  7710                           prodh	equ	0xFF4
  7711                           prodl	equ	0xFF3
  7712                           intcon	equ	0xFF2
  7713                           postinc0	equ	0xFEE
  7714                           fsr0h	equ	0xFEA
  7715                           fsr0l	equ	0xFE9
  7716                           wreg	equ	0xFE8
  7717                           indf1	equ	0xFE7
  7718                           postdec1	equ	0xFE5
  7719                           fsr1h	equ	0xFE2
  7720                           fsr1l	equ	0xFE1
  7721                           indf2	equ	0xFDF
  7722                           postinc2	equ	0xFDE
  7723                           postdec2	equ	0xFDD
  7724                           fsr2h	equ	0xFDA
  7725                           fsr2l	equ	0xFD9
  7726                           status	equ	0xFD8
  7727                           pclatu	equ	0xFFB
  7728                           pclath	equ	0xFFA
  7729                           tblptru	equ	0xFF8
  7730                           tblptrh	equ	0xFF7
  7731                           tblptrl	equ	0xFF6
  7732                           tablat	equ	0xFF5
  7733                           prodh	equ	0xFF4
  7734                           prodl	equ	0xFF3
  7735                           intcon	equ	0xFF2
  7736                           postinc0	equ	0xFEE
  7737                           fsr0h	equ	0xFEA
  7738                           fsr0l	equ	0xFE9
  7739                           wreg	equ	0xFE8
  7740                           indf1	equ	0xFE7
  7741                           postdec1	equ	0xFE5
  7742                           fsr1h	equ	0xFE2
  7743                           fsr1l	equ	0xFE1
  7744                           indf2	equ	0xFDF
  7745                           postinc2	equ	0xFDE
  7746                           postdec2	equ	0xFDD
  7747                           fsr2h	equ	0xFDA
  7748                           fsr2l	equ	0xFD9
  7749                           status	equ	0xFD8
  7750                           
  7751                           	psect	rparam
  7752  0000                     pclatu	equ	0xFFB
  7753                           pclath	equ	0xFFA
  7754                           tblptru	equ	0xFF8
  7755                           tblptrh	equ	0xFF7
  7756                           tblptrl	equ	0xFF6
  7757                           tablat	equ	0xFF5
  7758                           prodh	equ	0xFF4
  7759                           prodl	equ	0xFF3
  7760                           intcon	equ	0xFF2
  7761                           postinc0	equ	0xFEE
  7762                           fsr0h	equ	0xFEA
  7763                           fsr0l	equ	0xFE9
  7764                           wreg	equ	0xFE8
  7765                           indf1	equ	0xFE7
  7766                           postdec1	equ	0xFE5
  7767                           fsr1h	equ	0xFE2
  7768                           fsr1l	equ	0xFE1
  7769                           indf2	equ	0xFDF
  7770                           postinc2	equ	0xFDE
  7771                           postdec2	equ	0xFDD
  7772                           fsr2h	equ	0xFDA
  7773                           fsr2l	equ	0xFD9
  7774                           status	equ	0xFD8
  7775                           
  7776                           	psect	temp
  7777  000060                     btemp:
  7778                           	opt stack 0
  7779  000060                     	ds	1
  7780  0000                     int$flags	set	btemp
  7781  0000                     wtemp6	set	btemp+1
  7782                           pclatu	equ	0xFFB
  7783                           pclath	equ	0xFFA
  7784                           tblptru	equ	0xFF8
  7785                           tblptrh	equ	0xFF7
  7786                           tblptrl	equ	0xFF6
  7787                           tablat	equ	0xFF5
  7788                           prodh	equ	0xFF4
  7789                           prodl	equ	0xFF3
  7790                           intcon	equ	0xFF2
  7791                           postinc0	equ	0xFEE
  7792                           fsr0h	equ	0xFEA
  7793                           fsr0l	equ	0xFE9
  7794                           wreg	equ	0xFE8
  7795                           indf1	equ	0xFE7
  7796                           postdec1	equ	0xFE5
  7797                           fsr1h	equ	0xFE2
  7798                           fsr1l	equ	0xFE1
  7799                           indf2	equ	0xFDF
  7800                           postinc2	equ	0xFDE
  7801                           postdec2	equ	0xFDD
  7802                           fsr2h	equ	0xFDA
  7803                           fsr2l	equ	0xFD9
  7804                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    30
    Data        82
    BSS         481
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     71      95
    BANK0           128     82      98
    BANK1           256      0     252
    BANK2           256      0      75
    BANK3           256      0     196
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> floor@expon(BANK0[2]), 

    PrintS@s_printS	PTR const unsigned char  size(2) Largest target is 252
		 -> SendMsgSreen(BANK1[252]), 


Critical Paths under _main in COMRAM

    _floor->___altoft
    ___fttol->___ftdiv
    ___altoft->___fttol
    ___ftsub->___awtoft
    ___ftadd->___awtoft
    ___ftneg->___awtoft
    ___ftdiv->___ftpack
    ___awtoft->___fttol
    ___lwtoft->___ftpack
    _PrintS->_PrintC

Critical Paths under _ISR in COMRAM

    _ISR->___lbmod

Critical Paths under _main in BANK0

    _main->_exp
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___ftadd
    _eval_poly->___ftadd
    ___ftmul->___ftneg
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftneg->___awtoft

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                21    21      0   69536
                                             61 BANK0     21    21      0
                            _ADCInit
                                _Adc
                         _ClearArray
                          _ClockInit
                           _InitTmr0
                             _PrintS
                            _SpiInit
                           _UartInit
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lwtoft
                                _exp
 ---------------------------------------------------------------------------------
 (1) _exp                                                  9     6      3   42706
                                             52 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
 ---------------------------------------------------------------------------------
 (2) _ldexp                                                7     2      5     400
                                             45 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (2) _floor                                                8     5      3   11083
                                             33 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                7     2      5     360
                                             31 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     936
                                             54 COMRAM    15    11      4
                            ___ftdiv (ARG)
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     744
                                             31 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (3) ___altoft                                            10     6      4    3307
                                             69 COMRAM     2     2      0
                                              0 BANK0      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (2) _eval_poly                                           12     5      7   10446
                                             33 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     463
                                             31 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4181
                                              6 BANK0     15     9      6
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5694
                                             33 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    5278
                                             21 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                            ___fttol (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     425
                                              3 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    4653
                                             39 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    3506
                                             69 COMRAM     1     1      0
                                              0 BANK0      3     0      3
                            ___ftdiv (ARG)
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    3134
                                             39 COMRAM     3     0      3
                                _Adc (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    3013
                                             31 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4    2124
                                             31 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _UartInit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SpiInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PrintS                                               2     0      2     675
                                             32 COMRAM     2     0      2
                             _PrintC
 ---------------------------------------------------------------------------------
 (2) _PrintC                                               1     1      0      22
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitTmr0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ClockInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ClearArray                                           1     1      0      69
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Adc                                                  5     3      2      22
                                             31 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ADCInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 27    27      0     914
                                              4 COMRAM    27    27      0
                             _Modulo
                            ___lbmod
 ---------------------------------------------------------------------------------
 (6) ___lbmod                                              4     3      1     539
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (6) _Modulo                                               2     0      2     197
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCInit
   _Adc
   _ClearArray
   _ClockInit
   _InitTmr0
   _PrintS
     _PrintC
   _SpiInit
   _UartInit
   ___awdiv
   ___awtoft
     ___ftdiv (ARG)
       ___ftpack
     ___ftpack (ARG)
     ___fttol (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
   ___ftadd
     ___awtoft (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___fttol (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___ftdiv (ARG)
       ___ftpack
     ___ftmul (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
       ___awtoft (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___fttol (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___ftpack (ARG)
     ___fttol (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___wmul (ARG)
   ___ftdiv
     ___ftpack
   ___ftge
   ___ftmul
     ___ftdiv (ARG)
       ___ftpack
     ___ftneg (ARG)
       ___awtoft (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___fttol (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___ftpack (ARG)
   ___ftneg
     ___awtoft (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___fttol (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___ftdiv (ARG)
       ___ftpack
     ___fttol (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
   ___fttol
     ___ftdiv (ARG)
       ___ftpack
     ___ftpack (ARG)
   ___lwtoft
     _Adc (ARG)
     ___ftpack (ARG)
   _exp
     ___awtoft
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___fttol (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___ftdiv
       ___ftpack
     ___ftge
     ___ftmul
       ___ftdiv (ARG)
         ___ftpack
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftneg
       ___awtoft (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___fttol (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___ftsub
       ___awtoft (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___wmul (ARG)
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
     _eval_poly
       ___ftadd
         ___awtoft (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___wmul (ARG)
       ___ftmul
         ___ftdiv (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___wmul
     _floor
       ___altoft
         ___ftpack
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___wmul (ARG)
       ___ftge
       ___fttol
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
       _frexp
     _ldexp
       _eval_poly (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___fttol (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___wmul (ARG)
         ___ftmul
           ___ftdiv (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___wmul

 _ISR (ROOT)
   _Modulo
   ___lbmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      C4      11       76.6%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      4B       9       29.3%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      FC       7       98.4%
BITBANK0            80      0       0       4        0.0%
BANK0               80     52      62       5       76.6%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     47      5F       1       75.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2CC      15        0.0%
DATA                 0      0     2CC       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu May 30 20:57:12 2019

           ___altoft@exp 0046              main@CptTmr0 00C7              _SSPSTATbits 000FC7  
          ___altoft@sign 0047             ___awdiv@sign 0025      ___wmul@multiplicand 0022  
            __CFG_BORV$3 000000             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000             ___ftadd@exp1 00A0  
           ___ftadd@exp2 009F             ___ftadd@sign 009E                      l200 0AB0  
                    l201 0B22                      l202 0ADE                      l212 0EA2  
                    l213 0E72                      l207 0C9C                      l216 0F46  
                    l208 0E1C                      l225 1EDE                      l217 0F96  
                    l218 0FB6                      l243 1D36                      l260 1DE4  
                    l254 1CFC                      l255 1CEA                      l191 077E  
                    l600 18F4                      l193 07B4                      l602 1932  
                    l450 1B5E                      l603 191C                      l451 1B52  
                    l195 0890                      l540 1B0C                      l620 1728  
                    l196 08BE                      l541 1B16                      l533 1ABE  
                    l605 195A                      l197 0AA2                      l542 1B24  
                    l534 1ACE                      l606 1950                      l710 1440  
                    l703 13AE                      l199 0FC0                      l536 1AEC  
                    l720 1C84                      l616 1692                      l537 1AE4  
                    l561 1CC4                      l705 13D6                      l617 1684  
                    l714 1E62                      l706 1408                      l707 1418  
                    l619 16AC                      l643 182A                      l732 1540  
                    l724 14A6                      l580 11C8                      l709 1430  
                    l733 1534                      l645 1870                      l581 119E  
                    l670 12A6                      l726 151C                      l655 122A  
                    l735 155C                      l727 150C                      l639 1BC4  
                    l647 189E                      l575 0FFE                      l664 12BA  
                    l648 1892                      l681 1312                      l577 1036  
                    l690 15BE                      l682 132E                      l578 106E  
                    l691 15FC                      l683 135E                      l659 1254  
                    l579 109E                      l692 1622                      l669 12B0  
                    l678 12EE                      l599 18FE                      l679 12E4  
                    l688 1596                      l696 1A4A                      l697 1A7A  
                    l978 17F8                      l979 1778             __CFG_CPB$OFF 000000  
           __CFG_CPD$OFF 000000                      _ISR 0008                      _PSA 007EAB  
                    _Adc 1D1E                      _RX9 007D5E                      _TX9 007D66  
                    _WUE 007DC1                      _cpt 00D8                      _exp 0FE4  
        __end_of_ADCInit 1E24                      prod 000FF3                      wreg 000FE8  
            main@adc_res 00CF               _TXSTA1bits 000FAC           Modulo@M_nombre 0001  
           __CFG_LVP$OFF 000000                     ?_ISR 0001                     ?_Adc 0020  
           ___ftdiv@cntr 0031             ___ftdiv@sign 0036             __CFG_WDT$OFF 000000  
                   l2131 1AA6                     l2391 1ECA                     l2635 1DDC  
                   l3519 119E                     ?_exp 00B4                     _BRGH 007D62  
                   _CREN 007D5C                     _T0CS 007EAD                     _FERR 007D5A  
                   u2010 184A                     u3000 12F6                     u2018 184E  
                   _T0SE 007EAC                     u3101 157E                     u2230 1AF0  
                   u3121 15A6                     u3041 1396                     u3061 13BE  
                   u1810 14C4                     u3410 0B52                     u3330 07A0  
                   u3260 1078                     u1750 1BEC                     u3190 169E  
                   u3270 107A                     u1815 14BC                     u1850 1546  
                   u3450 0E3E                     u2740 18E6                     u2900 1246  
                   u3348 07A4                     u1758 1BEE                     u2831 11E8  
                   u1791 148A                     u2841 11FC                     u2930 1284  
                   u2780 1964                     u2870 121C                     u3487 0770  
                   u2970 12C2                     _RCIE 007CED                     _RCIF 007CF5  
                   _OERR 007D59                     _SPEN 007D5F                     _TXEN 007D65  
                   _SYNC 007D64                     _PosX 00DF                     _PosY 00DD  
                   _Stop 0058                     _main 073C             ___ftpack@arg 0020  
           ___ftpack@exp 0023                     fsr0h 000FEA                     fsr1h 000FE2  
                   fsr2h 000FDA                     fsr0l 000FE9                     indf1 000FE7  
                   indf2 000FDF                     fsr1l 000FE1                     fsr2l 000FD9  
                   btemp 0060               _ClearArray 1DD4                     exp@x 00B4  
                   prodh 000FF4                     prodl 000FF3                     start 0718  
          __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000             ___ftmul@cntr 0093  
           ___param_bank 000000             ___ftmul@sign 0094                    ??_ISR 0005  
                  ??_Adc 0022             ___fttol@exp1 0045                    ??_exp 0048  
           ___fttol@lval 0041          __end_of_SpiInit 1DAA                    _ABDEN 007DC0  
                  ?_main 0001          __end_of___awdiv 1B2E          __end_of___ftadd 1384  
                  _BRG16 007DC3          __end_of___lbmod 1DD4          __end_of___ftdiv 1654  
        __end_of___ftneg 1E70          __end_of___ftmul 147A          ___awdiv@divisor 0022  
        __end_of___ftsub 1CAE          __end_of___fttol 156E                    _T0PS0 007EA8  
                  _T0PS1 007EA9                    _T0PS2 007EAA                    i2l300 023A  
                  i2l301 024E                    i2l310 032E                    i2l302 0252  
                  i2l311 0342                    i2l303 025E                    i2l312 0346  
                  i2l321 03B8                    i2l305 02B4                    i2l330 0492  
                  i2l314 0378                    i2l306 02C8                    i2l323 03EA  
                  i2l307 02CC                    i2l332 04C0                    i2l308 02D8  
                  i2l333 04A6                    i2l325 044C                    i2l317 03AA  
                  i2l326 0566                    i2l334 04E4                    i2l343 0664  
                  i2l327 054A                    i2l335 04B0                    i2l360 05EA  
                  i2l344 058C                    i2l336 04BA                    i2l328 048E  
                  i2l265 1EBA                    i2l361 05F0                    i2l353 05A0  
                  i2l337 04EA                    i2l281 0092                    i2l266 1EB2  
                  i2l362 0616                    i2l354 05A4                    i2l338 056A  
                  i2l274 0450                    i2l290 015A                    i2l363 063C  
                  i2l355 05AC                    i2l283 00C6                    i2l275 005E  
                  i2l348 06CC                    i2l292 015E                    i2l276 006C  
                  i2l357 05B8                    i2l349 0598                    i2l277 046C  
                  i2l285 03EE                    i2l293 016A                    i2l286 00E4  
                  i2l278 007A                    i2l359 05C4                    i2l295 01C0  
                  i2l287 00F0                    i2l279 008A                    i2l296 01D4  
                  i2l297 01D8                    i2l289 0146                    i2l298 01E4  
                  i2l748 1DB4                    i2l749 1DCC          ___awdiv@counter 0024  
                  _RCREG 000FAE                    _SENDB 007D63                    _TMR0H 000FD7  
                  _TMR0L 000FD6                    _SPBRG 000FAF                    _RXDTP 007DC5  
                  _TXCKP 007DC4               _CptSpiSend 0057            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000                    _Score 00D4  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000            ___awtoft@sign 0046  
                  _floor 1654                    _ldexp 1810                    _frexp 1BA8  
                  _errno 00D2            ___ftpack@sign 0024               _EtatScreen 00DC  
                  pclath 000FFA                    tablat 000FF5                    status 000FD8  
                  wtemp6 0061           __CFG_PBADEN$ON 000000              exp@exponent 00BA  
            ldexp@newexp 00B0          __initialization 1984             __end_of_main 0FE4  
       __end_of_InitTmr0 1EB0                ??_ADCInit 0020                   ??_main 00BD  
          ___fttol@sign1 0040            __activetblptr 000002       __size_of_ClockInit 000E  
       __end_of_UartInit 1D80           PrintC@c_printC 0020              _CptReadPile 0055  
                 ?_floor 00A1                   ?_ldexp 00AD                   ?_frexp 0020  
       __end_of___altoft 1BA8                   _ADRESH 000FC4                   _ADRESL 000FC3  
                 _T08BIT 007EAE               _TailleTerm 00D6         ___awdiv@dividend 0020  
       __end_of___awtoft 1CE8         __end_of___ftpack 1984                   i2l3003 0162  
                 i2l3051 02D0                   i2l3035 0256                   i2l3019 01DC  
                 i2l3151 0592                   i2l2987 00E8         __end_of___lwtoft 1E94  
                 _TMR0IF 007F92                   _TMR0ON 007EAF                   _SPBRGH 000FB0  
                 _TRISA5 007C95                   _TRISC3 007CA3                   _TRISC4 007CA4  
                 _TRISC5 007CA5                   _TRISC6 007CA6                   _TRISC7 007CA7  
                 _SSPBUF 000FC9              ?_ClearArray 0001                   _TXREG1 000FAD  
             _PrgmChoisi 005B                   _CptSpi 005F           __CFG_XINST$OFF 000000  
                 _Modulo 1EB0                ??_SpiInit 0020                   _PrintC 1EC8  
                 _PrintS 1CE8                   ___ftge 1A1A                   ___wmul 1E24  
              ??___awdiv 0024                ??___ftadd 009B           __CFG_STVREN$ON 000000  
              ??___lbmod 0002                ??___ftdiv 002E                ??___ftneg 0047  
              ??___ftmul 008C                ??___ftsub 0047                ??___fttol 003B  
                 clear_0 19E2                   clear_1 19EE                   clear_2 19FA  
                 clear_3 1A06         ___awdiv@quotient 0026                   floor@i 00A4  
                 floor@x 00A1    ___ftmul@f3_as_product 0090             __pdataCOMRAM 005E  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8         __end_ofexp@coeff 073B          ___lbmod@divisor 0001  
             __accesstop 0080  __end_of__initialization 1A0C               ___altoft@c 0080  
        ___lbmod@counter 0003               ___ftadd@f1 0095               ___ftadd@f2 0098  
             ___ftge@ff1 0020               ___ftge@ff2 0023             eval_poly@res 00AA  
          ___rparam_used 000001        __end_of_ClockInit 1EE4               ___ftdiv@f1 0028  
             ___ftdiv@f2 002B               ___ftdiv@f3 0032               ___ftneg@f1 0083  
    main@taille_text_spi 00CD               ___awtoft@c 0080              _TabPileSend 0048  
             ___ftmul@f1 0086               ___ftmul@f2 0089               ___ftsub@f1 00A1  
             ___ftsub@f2 00A4               ___fttol@f1 0037           __pcstackCOMRAM 0001  
            ISR@data_spi 001F             __pidataBANK0 1EE4             __pidataBANK2 1C20  
             _TypeVarSpi 00D9            __end_of_floor 1736            __end_of_ldexp 18D6  
          __end_of_frexp 1C20               ___lwtoft@c 0028      __size_of_ClearArray 0028  
                ??_floor 0048                  ??_ldexp 00B2                  ??_frexp 0025  
             __pbssBANK0 00D2               __pbssBANK1 0100               __pbssBANK3 0300  
     __size_of_eval_poly 00DA                ?_InitTmr0 0001                  ?_Modulo 0001  
              ?_UartInit 0001                  ?_PrintC 0001                  ?_PrintS 0021  
                ?___ftge 0020           PrintS@s_printS 0021                  ?___wmul 0020  
              ?___altoft 0080                  _ADCInit 1DFC                ?___awtoft 0080  
              ?___ftpack 0020                ?___lwtoft 0028               ??_InitTmr0 0020  
                _FlagSpi 00E1                  _CptPile 0054                  _CptSend 005E  
                _EtatSpi 005D                  __Hparam 0000                  __Lparam 0000  
             ??_UartInit 0020                  _SpiInit 1D80          __size_of_Modulo 0018  
                _TextSpi 0300          __size_of_PrintC 000E          __size_of_PrintS 0036  
        __size_of___ftge 0090                  ___awdiv 1AAA                  ___ftadd 11D6  
                ___lbmod 1DAA                  ___ftdiv 156E                  ___ftneg 1E4A  
        __size_of___wmul 0026                  ___ftmul 1384                  ___ftsub 1C6C  
                ___fttol 147A             __psmallconst 071C               ??___altoft 0084  
                __pcinit 1984               ??___awtoft 0046               ??___ftpack 0025  
      __end_of_eval_poly 1810                  __ramtop 0600                  __ptext0 073C  
                __ptext1 0FE4                  __ptext2 1810                  __ptext3 1654  
                __ptext4 1BA8                  __ptext5 147A                  __ptext6 1A1A  
                __ptext7 1B2E                  __ptext8 1736                  __ptext9 1E24  
             ??___lwtoft 002B             __size_of_ISR 0710             __size_of_Adc 0032  
           __size_of_exp 01F2     end_of_initialization 1A0C                  exp@sign 00BC  
          __Lmediumconst 0000             ??_ClearArray 0020                  postdec1 000FE5  
                postdec2 000FDD                  postinc0 000FEE                  postinc2 000FDE  
       ___lbmod@dividend 0002       __end_of_ClearArray 1DFC                _TRISAbits 000F92  
              _TRISCbits 000F94              ___lbmod@rem 0004              ___ftdiv@exp 0035  
   main@taille_text_prgm 00CE            _PosCursorPrgm 00DA              ___ftmul@exp 008F  
              _FlagSleep 005A                _ClockInit 1ED6           __end_of_Modulo 1EC8  
         __end_of_PrintC 1ED6           __end_of_PrintS 1D1E           __end_of___ftge 1AAA  
         __end_of___wmul 1E4A            __pidataCOMRAM 1EE9                _AutoLight 00DB  
             floor@expon 00A7      start_initialization 1984               eval_poly@d 00A4  
             eval_poly@n 00A6               eval_poly@x 00A1              __end_of_ISR 0718  
            __end_of_Adc 1D50               ldexp@value 00AD              __end_of_exp 11D6  
             frexp@value 0020                _SendNbSpi 0056         __CFG_OSC$INTIO67 000000  
      __size_of_InitTmr0 001C                 ??_Modulo 0003                 ??_PrintC 0020  
               ??_PrintS 0023                 ??___ftge 0026               ?_ClockInit 0001  
               ??___wmul 0024        __size_of_UartInit 0030              __pdataBANK0 00DD  
            __pdataBANK2 0200         __CFG_LPT1OSC$OFF 000000                 ?_ADCInit 0001  
             ISR@Receive 001E        __size_of___altoft 007A        __size_of___awtoft 003A  
      __size_of___ftpack 00AE              __pbssCOMRAM 0048        __size_of___lwtoft 0024  
          __pcstackBANK0 0080                _main$1532 00C1                _main$1533 00C4  
              _main$1534 00C8                _main$1535 00CB                 ?_SpiInit 0001  
      __CFG_CCP2MX$PORTC 000000                __pintcode 0008                 ?___awdiv 0020  
               ?___ftadd 0095                 ?___lbmod 0001                 ?___ftdiv 0028  
               ?___ftneg 0083                 ?___ftmul 0086                 ?___ftsub 00A1  
               ?___fttol 0037              __smallconst 071C                _eval_poly 1736  
           _SendMsgSreen 0100             _TailleMsgSpi 005C           __size_of_floor 00E2  
         __size_of_ldexp 00C6           __size_of_frexp 0078               Adc@channel 0024  
         ___wmul@product 0024                 _LATAbits 000F89                 _LATCbits 000F8B  
               _PIE1bits 000F9D                 i2u219_40 1EC4                 _PIR1bits 000F9E  
       __CFG_WDTPS$32768 000000              ??_ClockInit 0020                _text_prgm 0200  
       __size_of_ADCInit 0028               _ADCON0bits 000FC2               _ADCON1bits 000FC1  
             _ADCON2bits 000FC0        ___wmul@multiplier 0020               ?_eval_poly 00A1  
               _Checksum 0052                copy_data0 1998                copy_data1 19B8  
               _InitTmr0 1E94                frexp@eptr 0023                 __Hrparam 0000  
               _UartInit 1D50                 _PrgmSens 0059                 __Lrparam 0000  
     __CFG_BOREN$SBORDIS 000000         __size_of_SpiInit 002A         __size_of___awdiv 0084  
       __size_of___ftadd 01AE         __size_of___lbmod 002A         __size_of___ftdiv 00E6  
       __size_of___ftneg 0026                 ___altoft 1B2E         __size_of___ftmul 00F6  
       __size_of___ftsub 0042         __size_of___fttol 00F4                 ___awtoft 1CAE  
               ___ftpack 18D6                 ___lwtoft 1E70                 _exp$1536 00B7  
               __ptext10 1384                 __ptext11 1C6C                 __ptext20 1D80  
               __ptext12 11D6                 __ptext21 1CE8                 __ptext13 1E4A  
               __ptext30 1EB0                 __ptext22 1EC8                 __ptext14 156E  
               __ptext23 1E94                 __ptext15 1CAE                 __ptext24 1ED6  
               __ptext16 1E70                 __ptext25 1DD4                 __ptext17 18D6  
               __ptext26 1D1E                 __ptext18 1AAA                 __ptext27 1DFC  
               __ptext19 1D50                 __ptext29 1DAA            __size_of_main 08A8  
               int$flags 0060                 exp@coeff 071D              _OSCTUNEbits 000F9B  
             _INTCONbits 000FF2              ??_eval_poly 00A8                 intlevel2 0000  
             _OSCCONbits 000FD3       ClearArray@cpt_vide 0020              _SSPCON1bits 000FC6  
